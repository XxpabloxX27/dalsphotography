"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
const cli_core_1 = require("@igniteui/cli-core");
const path = require("path");
const operators_1 = require("rxjs/operators");
const AppProjectSchematic = require("../app-projects/index");
const SchematicsPromptSession_1 = require("../prompt/SchematicsPromptSession");
const collectionPath = path.join(__dirname, "../collection.json");
describe("Schematics ng-new", () => {
    beforeAll(() => {
        spyOn(cli_core_1.GoogleAnalytics, "post");
    });
    it("works with no name provided", done => {
        const runner = new testing_1.SchematicTestRunner("schematics", collectionPath);
        const myTree = schematics_1.Tree.empty();
        const workingDirectory = "my-test-project";
        const mockLibrary = {
            getProject: jasmine.createSpy("getProject").and.returnValue(true), projectIds: ["empty-page"], themes: ["custom"]
        };
        const mockSession = {
            chooseActionLoop: spyOn(SchematicsPromptSession_1.SchematicsPromptSession.prototype, "chooseActionLoop")
                .and.returnValue(Promise.resolve(true)),
            getProjectLibrary: spyOn(SchematicsPromptSession_1.SchematicsPromptSession.prototype, "getProjectLibrary")
                .and.returnValue((Promise.resolve(mockLibrary))),
            getProjectTemplate: spyOn(SchematicsPromptSession_1.SchematicsPromptSession.prototype, "getProjectTemplate")
                .and.returnValue(Promise.resolve("empty-page")),
            getTheme: spyOn(SchematicsPromptSession_1.SchematicsPromptSession.prototype, "getTheme")
                .and.returnValue(Promise.resolve("custom")),
            getUserInput: spyOn(SchematicsPromptSession_1.SchematicsPromptSession.prototype, "getUserInput")
                .and.returnValue(Promise.resolve(workingDirectory)),
            setTree: spyOn(SchematicsPromptSession_1.SchematicsPromptSession.prototype, "setContext").and.callThrough()
        };
        spyOn(AppProjectSchematic, "default").and.returnValue((currentTree, _context) => {
            currentTree.create("gitignore", "");
            return currentTree;
        });
        runner.runSchematicAsync("ng-new", { version: "8.0.3" }, myTree)
            .pipe(operators_1.take(1))
            .subscribe((e) => {
            for (const mockFunc of Object.entries(mockSession)) {
                expect(mockFunc[1]).toHaveBeenCalled();
            }
            expect(AppProjectSchematic.default).toHaveBeenCalled();
            expect(e.files.length).toEqual(1);
            expect(e.exists(`${workingDirectory}/.gitignore`)).toBeTruthy();
            const taskOptions = runner.tasks.map(task => task.options);
            const expectedInstall = {
                command: "install",
                quiet: true,
                workingDirectory,
                packageName: undefined,
                packageManager: undefined
            };
            const expectedInit = {
                workingDirectory,
                commit: true,
                message: `Initial commit for project: ${workingDirectory}`,
                authorName: undefined,
                authorEmail: undefined
            };
            const expectedStart = {
                collection: null,
                name: "start",
                options: {
                    directory: "my-test-project"
                }
            };
            expect(taskOptions).toContain(jasmine.objectContaining(expectedInstall));
            expect(taskOptions).toContain(expectedInit);
            expect(taskOptions).toContain(expectedStart);
            done();
        });
    });
    it("works with name provided", done => {
        const runner = new testing_1.SchematicTestRunner("schematics", collectionPath);
        const myTree = schematics_1.Tree.empty();
        const workingDirectory = "my-test-project";
        const mockLibrary = {
            getProject: jasmine.createSpy("getProject").and.returnValue(true), projectIds: ["empty-page"], themes: ["custom"]
        };
        const mockSession = {
            getProjectLibrary: spyOn(SchematicsPromptSession_1.SchematicsPromptSession.prototype, "getProjectLibrary")
                .and.returnValue((Promise.resolve(mockLibrary)))
        };
        spyOn(AppProjectSchematic, "default").and.returnValue((currentTree, _context) => {
            currentTree.create("gitignore", "");
            return currentTree;
        });
        runner.runSchematicAsync("ng-new", { version: "8.0.3", name: workingDirectory }, myTree)
            .pipe(operators_1.take(1))
            .subscribe((e) => {
            for (const mockFunc of Object.entries(mockSession)) {
                expect(mockFunc[1]).toHaveBeenCalled();
            }
            expect(AppProjectSchematic.default).toHaveBeenCalled();
            expect(e.files.length).toEqual(1);
            expect(e.exists(`${workingDirectory}/.gitignore`)).toBeTruthy();
            const taskOptions = runner.tasks.map(task => task.options);
            const expectedInstall = {
                command: "install",
                quiet: true,
                workingDirectory,
                packageName: undefined,
                packageManager: undefined
            };
            const expectedInit = {
                workingDirectory,
                commit: true,
                message: `Initial commit for project: ${workingDirectory}`,
                authorName: undefined,
                authorEmail: undefined
            };
            expect(taskOptions).toContain(jasmine.objectContaining(expectedInstall));
            expect(taskOptions).toContain(expectedInit);
            done();
        });
    });
});
