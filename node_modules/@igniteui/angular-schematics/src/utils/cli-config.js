"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const cli_core_1 = require("@igniteui/cli-core");
// tslint:disable-next-line:no-implicit-dependencies
const config_1 = require("@schematics/angular/utility/config");
function createCliConfig() {
    return (tree, context) => {
        context.logger.info(``);
        context.logger.warn(`Ignite UI for Angular Schematics installed`);
        context.logger.info(`- generate components using 'ng g @igniteui/angular-schematics:c'`);
        context.logger.info(`- to use as 'ng new' collection install globally 'npm i -g @igniteui/angular-schematics'`);
        context.logger.info(`Learn more: ` + cli_core_1.Util.color(`https://www.infragistics.com/products/ignite-ui-angular/angular/components/general/cli-overview.html`, "white"));
        context.logger.info(``);
        tree.create("ignite-ui-cli.json", JSON.stringify(GetCliConfig(tree), null, 2) + "\n");
        return tree;
    };
}
exports.createCliConfig = createCliConfig;
function GetCliConfig(tree) {
    let workspace;
    try {
        workspace = config_1.getWorkspace(tree);
    }
    catch (e) {
        if (e.toString().includes("Could not find (undefined)")) {
            throw new schematics_1.SchematicsException("angular.json was not found in the project's root");
        }
        throw new Error(e.message);
    }
    const cliConfig = require("../cli-config/files/ignite-ui-cli.json");
    cliConfig.version = cli_core_1.Util.version();
    const userPort = getPort(workspace);
    if (userPort) {
        cliConfig.project.defaultPort = userPort;
    }
    return cliConfig;
}
function getPort(workspace) {
    const targetProjectName = workspace.defaultProject;
    const projectServe = targetProjectName
        ? workspace.projects[targetProjectName].architect.serve.options
        : null;
    if (projectServe) {
        return projectServe.port;
    }
}
