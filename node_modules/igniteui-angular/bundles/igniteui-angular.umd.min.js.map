{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://igniteui-angular/lib/animations/easings.ts","ng://igniteui-angular/lib/animations/fade/index.ts","ng://igniteui-angular/lib/animations/flip/index.ts","ng://igniteui-angular/lib/animations/rotate/index.ts","ng://igniteui-angular/lib/animations/misc/shake.ts","ng://igniteui-angular/lib/animations/misc/pulsate.ts","ng://igniteui-angular/lib/animations/scale/index.ts","ng://igniteui-angular/lib/animations/slide/index.ts","ng://igniteui-angular/lib/animations/swing/index.ts","ng://igniteui-angular/lib/animations/grow/index.ts","ng://igniteui-angular/lib/core/navigation/nav.service.ts","ng://igniteui-angular/lib/core/navigation/directives.ts","ng://igniteui-angular/lib/core/utils.ts","ng://igniteui-angular/lib/data-operations/sorting-expression.interface.ts","ng://igniteui-angular/lib/data-operations/operations.ts","ng://igniteui-angular/lib/data-operations/paging-state.interface.ts","ng://igniteui-angular/lib/data-operations/filtering-expression.interface.ts","ng://igniteui-angular/lib/data-operations/filtering-expressions-tree.ts","ng://igniteui-angular/lib/data-operations/sorting-strategy.ts","ng://igniteui-angular/lib/data-operations/grouping-strategy.ts","ng://igniteui-angular/lib/services/transaction/transaction.ts","ng://igniteui-angular/lib/data-operations/data-util.ts","ng://igniteui-angular/lib/data-operations/filtering-strategy.ts","ng://igniteui-angular/lib/services/csv/csv-exporter-options.ts","ng://igniteui-angular/lib/services/exporter-common/export-utilities.ts","ng://igniteui-angular/lib/grids/api.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.filtering.pipe.ts","ng://igniteui-angular/lib/services/exporter-common/base-export-service.ts","ng://igniteui-angular/lib/services/csv/char-separated-value-data.ts","ng://igniteui-angular/lib/services/exporter-common/exporter-options-base.ts","ng://igniteui-angular/lib/services/csv/csv-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-enums.ts","ng://igniteui-angular/lib/services/excel/excel-strings.ts","ng://igniteui-angular/lib/services/overlay/utilities.ts","ng://igniteui-angular/lib/services/excel/excel-files.ts","ng://igniteui-angular/lib/services/excel/excel-folders.ts","ng://igniteui-angular/lib/services/excel/excel-elements-factory.ts","ng://igniteui-angular/lib/services/excel/worksheet-data-dictionary.ts","ng://igniteui-angular/lib/services/excel/worksheet-data.ts","ng://igniteui-angular/lib/services/excel/excel-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-exporter-options.ts","ng://igniteui-angular/lib/services/overlay/position/global-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/NoOpScrollStrategy.ts","ng://igniteui-angular/lib/core/deprecateDecorators.ts","ng://igniteui-angular/lib/services/overlay/overlay.ts","ng://igniteui-angular/lib/drop-down/drop-down.common.ts","ng://igniteui-angular/lib/services/overlay/position/container-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/connected-positioning-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/base-fit-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/auto-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/elastic-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/absolute-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/block-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/close-scroll-strategy.ts","ng://igniteui-angular/lib/services/transaction/base-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-hierarchical-transaction.ts","ng://igniteui-angular/lib/directives/toggle/toggle.directive.ts","ng://igniteui-angular/lib/core/displayDensity.ts","ng://igniteui-angular/lib/core/selection.ts","ng://igniteui-angular/lib/drop-down/drop-down-group.component.ts","ng://igniteui-angular/lib/drop-down/drop-down-item.base.ts","ng://igniteui-angular/lib/drop-down/drop-down-item.component.ts","ng://igniteui-angular/lib/drop-down/drop-down.base.ts","ng://igniteui-angular/lib/directives/for-of/display.container.ts","ng://igniteui-angular/lib/directives/for-of/base.helper.component.ts","ng://igniteui-angular/lib/directives/for-of/horizontal.virtual.helper.component.ts","ng://igniteui-angular/lib/directives/for-of/virtual.helper.component.ts","ng://igniteui-angular/lib/directives/scroll-inertia/scroll_inertia.directive.ts","ng://igniteui-angular/lib/directives/for-of/for_of.sync.service.ts","ng://igniteui-angular/lib/directives/for-of/for_of.directive.ts","ng://igniteui-angular/lib/directives/hint/hint.directive.ts","ng://igniteui-angular/lib/drop-down/drop-down.component.ts","ng://igniteui-angular/lib/drop-down/drop-down-navigation.directive.ts","ng://igniteui-angular/lib/drop-down/index.ts","ng://igniteui-angular/lib/directives/input/input.directive.ts","ng://igniteui-angular/lib/input-group/input-group.common.ts","ng://igniteui-angular/lib/input-group/input-group.component.ts","ng://igniteui-angular/lib/directives/label/label.directive.ts","ng://igniteui-angular/lib/directives/prefix/prefix.directive.ts","ng://igniteui-angular/lib/directives/suffix/suffix.directive.ts","ng://igniteui-angular/lib/directives/divider/divider.directive.ts","ng://igniteui-angular/lib/directives/autocomplete/autocomplete.directive.ts","ng://igniteui-angular/lib/directives/button/button.directive.ts","ng://igniteui-angular/lib/directives/drag-drop/drag-drop.directive.ts","ng://igniteui-angular/lib/directives/drag-drop/drag-drop.strategy.ts","ng://igniteui-angular/lib/directives/drag-drop/drag-handle.directive.ts","ng://igniteui-angular/lib/radio/radio.component.ts","ng://igniteui-angular/lib/directives/filter/filter.directive.ts","ng://igniteui-angular/lib/directives/focus/focus.directive.ts","ng://igniteui-angular/lib/directives/layout/layout.directive.ts","ng://igniteui-angular/lib/directives/mask/mask-helper.ts","ng://igniteui-angular/lib/directives/mask/mask.directive.ts","ng://igniteui-angular/lib/avatar/avatar.component.ts","ng://igniteui-angular/lib/directives/ripple/ripple.directive.ts","ng://igniteui-angular/lib/directives/radio/radio-group.directive.ts","ng://igniteui-angular/lib/directives/text-highlight/text-highlight.directive.ts","ng://igniteui-angular/lib/directives/text-selection/text-selection.directive.ts","ng://igniteui-angular/lib/directives/tooltip/tooltip.directive.ts","ng://igniteui-angular/lib/data-operations/filtering-condition.ts","ng://igniteui-angular/lib/data-operations/filtering-state.interface.ts","ng://igniteui-angular/lib/data-operations/groupby-record.interface.ts","ng://igniteui-angular/lib/icon/icon.service.ts","ng://igniteui-angular/lib/icon/icon.component.ts","ng://igniteui-angular/lib/icon/index.ts","ng://igniteui-angular/lib/badge/badge.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-header.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.common.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-body.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.directives.ts","ng://igniteui-angular/lib/buttonGroup/buttonGroup.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.module.ts","ng://igniteui-angular/lib/banner/banner.directives.ts","ng://igniteui-angular/lib/banner/banner.component.ts","ng://igniteui-angular/lib/core/dates/dateRange.ts","ng://igniteui-angular/lib/calendar/calendar.ts","ng://igniteui-angular/lib/calendar/calendar-base.ts","ng://igniteui-angular/lib/calendar/calendar.directives.ts","ng://igniteui-angular/lib/calendar/month-picker-base.ts","ng://igniteui-angular/lib/calendar/days-view/daysview-navigation.service.ts","ng://igniteui-angular/lib/calendar/months-view/months-view.component.ts","ng://igniteui-angular/lib/calendar/years-view/years-view.component.ts","ng://igniteui-angular/lib/calendar/days-view/day-item.component.ts","ng://igniteui-angular/lib/card/card.component.ts","ng://igniteui-angular/lib/calendar/days-view/days-view.component.ts","ng://igniteui-angular/lib/calendar/calendar.component.ts","ng://igniteui-angular/lib/calendar/month-picker/month-picker.component.ts","ng://igniteui-angular/lib/calendar/months-view.pipe.ts","ng://igniteui-angular/lib/calendar/calendar.module.ts","ng://igniteui-angular/lib/carousel/slide.component.ts","ng://igniteui-angular/lib/carousel/carousel.directives.ts","ng://igniteui-angular/lib/core/i18n/resources.ts","ng://igniteui-angular/lib/core/i18n/grid-resources.ts","ng://igniteui-angular/lib/core/i18n/time-picker-resources.ts","ng://igniteui-angular/lib/core/i18n/paginator-resources.ts","ng://igniteui-angular/lib/core/i18n/carousel-resources.ts","ng://igniteui-angular/lib/carousel/carousel.component.ts","ng://igniteui-angular/lib/checkbox/checkbox.component.ts","ng://igniteui-angular/lib/combo/combo.component.ts","ng://igniteui-angular/lib/chips/chip.component.ts","ng://igniteui-angular/lib/chips/chips-area.component.ts","ng://igniteui-angular/lib/chips/chips.module.ts","ng://igniteui-angular/lib/combo/combo.directives.ts","ng://igniteui-angular/lib/combo/combo.api.ts","ng://igniteui-angular/lib/combo/combo-item.component.ts","ng://igniteui-angular/lib/combo/combo.common.ts","ng://igniteui-angular/lib/combo/combo-add-item.component.ts","ng://igniteui-angular/lib/combo/combo-dropdown.component.ts","ng://igniteui-angular/lib/combo/combo.pipes.ts","ng://igniteui-angular/lib/core/enums.ts","ng://igniteui-angular/lib/date-picker/date-picker.utils.ts","ng://igniteui-angular/lib/date-picker/date-picker.pipes.ts","ng://igniteui-angular/lib/date-picker/date-picker.common.ts","ng://igniteui-angular/lib/date-picker/date-picker.directives.ts","ng://igniteui-angular/lib/date-picker/calendar-container.component.ts","ng://igniteui-angular/lib/date-picker/date-picker.component.ts","ng://igniteui-angular/lib/directives/template-outlet/template_outlet.directive.ts","ng://igniteui-angular/lib/dialog/dialog.directives.ts","ng://igniteui-angular/lib/dialog/dialog.component.ts","ng://igniteui-angular/lib/progressbar/progressbar.common.ts","ng://igniteui-angular/lib/services/direction/directionality.ts","ng://igniteui-angular/lib/progressbar/progressbar.component.ts","ng://igniteui-angular/lib/select/select-item.component.ts","ng://igniteui-angular/lib/select/select-positioning-strategy.ts","ng://igniteui-angular/lib/select/select.component.ts","ng://igniteui-angular/lib/select/select-navigation.directive.ts","ng://igniteui-angular/lib/select/select-group.component.ts","ng://igniteui-angular/lib/select/select.module.ts","ng://igniteui-angular/lib/grids/watch-changes.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/row-island-api.service.ts","ng://igniteui-angular/lib/grids/selection/selection.service.ts","ng://igniteui-angular/lib/core/touch.ts","ng://igniteui-angular/lib/grids/common/enums.ts","ng://igniteui-angular/lib/grids/cell.component.ts","ng://igniteui-angular/lib/grids/grid-navigation.service.ts","ng://igniteui-angular/lib/grids/row.directive.ts","ng://igniteui-angular/lib/grids/summaries/grid-summary.ts","ng://igniteui-angular/lib/grids/columns/templates.directive.ts","ng://igniteui-angular/lib/grids/columns/column.component.ts","ng://igniteui-angular/lib/grids/grid.common.ts","ng://igniteui-angular/lib/grids/column-chooser-item-base.ts","ng://igniteui-angular/lib/grids/hiding/column-hiding-item.directive.ts","ng://igniteui-angular/lib/grids/column-chooser-base.ts","ng://igniteui-angular/lib/grids/hiding/column-hiding.component.ts","ng://igniteui-angular/lib/grids/pinning/pinning.directive.ts","ng://igniteui-angular/lib/grids/pinning/column-pinning.component.ts","ng://igniteui-angular/lib/grids/toolbar/grid-toolbar.component.ts","ng://igniteui-angular/lib/grids/grid.rowEdit.directive.ts","ng://igniteui-angular/lib/grids/grid/groupby-row.component.ts","ng://igniteui-angular/lib/list/list.common.ts","ng://igniteui-angular/lib/grids/filtering/svgIcons.ts","ng://igniteui-angular/lib/grids/common/pipes.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering.service.ts","ng://igniteui-angular/lib/grids/resizing/resizing.service.ts","ng://igniteui-angular/lib/grids/selection/drag-select.directive.ts","ng://igniteui-angular/lib/list/list-item.component.ts","ng://igniteui-angular/lib/list/list.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-search.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-default-expression.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-date-expression.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-custom-dialog.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-sorting.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/grid.excel-style-filtering.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-position-strategy.ts","ng://igniteui-angular/lib/grids/headers/grid-header.component.ts","ng://igniteui-angular/lib/grids/filtering/base/grid-filtering-cell.component.ts","ng://igniteui-angular/lib/grids/headers/grid-header-group.component.ts","ng://igniteui-angular/lib/grids/summaries/grid-summary.service.ts","ng://igniteui-angular/lib/grids/summaries/summary-cell.component.ts","ng://igniteui-angular/lib/grids/summaries/summary-row.component.ts","ng://igniteui-angular/lib/grids/moving/moving.service.ts","ng://igniteui-angular/lib/grids/resizing/resizer.directive.ts","ng://igniteui-angular/lib/grids/resizing/resizer.component.ts","ng://igniteui-angular/lib/grids/filtering/base/grid-filtering-row.component.ts","ng://igniteui-angular/lib/grids/grid-mrl-navigation.service.ts","ng://igniteui-angular/lib/grids/moving/moving.drag.directive.ts","ng://igniteui-angular/lib/grids/grid/grid.directives.ts","ng://igniteui-angular/lib/grids/filtering/advanced-filtering/advanced-filtering-dialog.component.ts","ng://igniteui-angular/lib/grids/selection/row-selectors.ts","ng://igniteui-angular/lib/grids/toolbar/toolbar.directive.ts","ng://igniteui-angular/lib/grids/columns/column-group.component.ts","ng://igniteui-angular/lib/grids/row-drag.directive.ts","ng://igniteui-angular/lib/grids/grid-base.directive.ts","ng://igniteui-angular/lib/grids/grid/grid-api.service.ts","ng://igniteui-angular/lib/grids/grid/grid.component.ts","ng://igniteui-angular/lib/grids/state.directive.ts","ng://igniteui-angular/lib/grids/common/shared.module.ts","ng://igniteui-angular/lib/grids/hiding/hiding.module.ts","ng://igniteui-angular/lib/grids/grid-footer/grid-footer.component.ts","ng://igniteui-angular/lib/paginator/paginator.component.ts","ng://igniteui-angular/lib/grids/common/grid-pipes.module.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-column-moving.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-search.pipe.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/grid.excel-style-filtering.module.ts","ng://igniteui-angular/lib/grids/selection/selection.module.ts","ng://igniteui-angular/lib/grids/resizing/resize-handle.directive.ts","ng://igniteui-angular/lib/grids/resizing/resize.module.ts","ng://igniteui-angular/lib/grids/moving/moving.drop.directive.ts","ng://igniteui-angular/lib/grids/moving/moving.module.ts","ng://igniteui-angular/lib/grids/summaries/grid-root-summary.pipe.ts","ng://igniteui-angular/lib/grids/summaries/summary.module.ts","ng://igniteui-angular/lib/grids/pinning/pinning.module.ts","ng://igniteui-angular/lib/grids/toolbar/toolbar.module.ts","ng://igniteui-angular/lib/grids/columns/column-layout.component.ts","ng://igniteui-angular/lib/grids/columns/column.module.ts","ng://igniteui-angular/lib/grids/filtering/base/filtering.module.ts","ng://igniteui-angular/lib/grids/headers/headers.module.ts","ng://igniteui-angular/lib/grids/grid-common.module.ts","ng://igniteui-angular/lib/grids/grid/grid.pipes.ts","ng://igniteui-angular/lib/grids/grid/grid-row.component.ts","ng://igniteui-angular/lib/grids/grid/grid.summary.pipe.ts","ng://igniteui-angular/lib/grids/grid/grid.details.pipe.ts","ng://igniteui-angular/lib/grids/grid/expandable-cell.component.ts","ng://igniteui-angular/lib/grids/grid/grid.module.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-api.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-navigation.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.directives.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-row.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.pipes.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-cell.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.summary.pipe.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.module.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-navigation.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-base.directive.ts","ng://igniteui-angular/lib/slider/slider.common.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-api.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/row-island.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/child-grid-row.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-cell.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-row.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.pipes.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.module.ts","ng://igniteui-angular/lib/navbar/navbar.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.directives.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.module.ts","ng://igniteui-angular/lib/slider/thumb/thumb-slider.component.ts","ng://igniteui-angular/lib/switch/switch.component.ts","ng://igniteui-angular/lib/slider/label/thumb-label.component.ts","ng://igniteui-angular/lib/slider/ticks/ticks.component.ts","ng://igniteui-angular/lib/slider/ticks/tick.pipe.ts","ng://igniteui-angular/lib/slider/slider.component.ts","ng://igniteui-angular/lib/snackbar/snackbar.component.ts","ng://igniteui-angular/lib/tabs/tabs.directives.ts","ng://igniteui-angular/lib/tabbar/tabbar.component.ts","ng://igniteui-angular/lib/tabs/tabs.common.ts","ng://igniteui-angular/lib/tabs/tabs.component.ts","ng://igniteui-angular/lib/tabs/tab-item.component.ts","ng://igniteui-angular/lib/tabs/tabs-group.component.ts","ng://igniteui-angular/lib/toast/toast.component.ts","ng://igniteui-angular/lib/time-picker/time-picker.common.ts","ng://igniteui-angular/lib/time-picker/time-picker.directives.ts","ng://igniteui-angular/lib/time-picker/time-picker.pipes.ts","ng://igniteui-angular/lib/time-picker/time-picker.component.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","EaseIn","EaseOut","EaseInOut","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","base","style","opacity","animate","baseParams","delay","duration","easing","sine","endOpacity","startOpacity","fadeIn","animation","params","fadeOut","baseRecipe","backfaceVisibility","transformStyle","keyframes","offset","transform","quad","endAngle","endDistance","rotateX","rotateY","rotateZ","startAngle","startDistance","flipTop","flipBottom","flipLeft","flipRight","flipHorFwd","flipHorBck","flipVerFwd","flipVerBck","transformOrigin","baseInParams","xPos","yPos","baseOutParams","rotateInCenter","rotateOutCenter","rotateInTop","rotateOutTop","rotateInRight","rotateOutRight","rotateInBottom","rotateOutBottom","rotateInLeft","rotateOutLeft","rotateInTr","rotateOutTr","rotateInBr","rotateOutBr","rotateInBl","rotateOutBl","rotateInTl","rotateOutTl","rotateInDiagonal1","rotateOutDiagonal1","rotateInDiagonal2","rotateOutDiagonal2","rotateInHor","rotateOutHor","rotateInVer","rotateOutVer","direction","shakeHor","shakeVer","shakeTop","shakeBottom","shakeRight","shakeLeft","shakeCenter","shakeTr","shakeBr","shakeBl","shakeTl","heartbeatBase","animationTimingFunction","pulsateBase","pulsateParams","fromScale","toScale","blinkBase","pulsateFwd","pulsateBck","heartbeat","blink","midScale","scaleInCenter","scaleInBl","scaleInVerCenter","scaleInTop","scaleInLeft","scaleInVerTop","scaleInTr","scaleInTl","scaleInVerBottom","scaleInRight","scaleInHorCenter","scaleInBr","scaleInHorLeft","scaleInBottom","scaleInHorRight","scaleOutCenter","scaleOutBl","scaleOutBr","scaleOutVerCenter","scaleOutVerTop","scaleOutVerBottom","scaleOutTop","scaleOutLeft","scaleOutTr","scaleOutTl","scaleOutRight","scaleOutBottom","scaleOutHorCenter","scaleOutHorLeft","scaleOutHorRight","fromPosition","toPosition","slideInTop","slideInLeft","slideInRight","slideInBottom","slideInTr","slideInTl","slideInBr","slideInBl","slideOutTop","slideOutRight","slideOutBottom","slideOutLeft","slideOutTr","slideOutBr","slideOutBl","slideOutTl","swingBase","swingParams","back","swingOutParams","swingInTopFwd","swingInRightFwd","swingInBottomFwd","swingInLeftFwd","swingInTopBck","swingInRightBck","swingInBottomBck","swingInLeftBck","swingOutTopFwd","swingOutRightFwd","swingOutBottomFwd","swingOutLefttFwd","swingOutTopBck","swingOutRightBck","swingOutBottomBck","swingOutLeftBck","height","startHeight","endHeight","growVerIn","growVerOut","IgxNavigationService","navs","add","id","navItem","remove","get","toggle","args","_i","_a","open","close","Injectable","IgxNavigationToggleDirective","nav","state","toggleNavigationDrawer","Input","HostListener","Directive","selector","IgxNavigationCloseDirective","closeNavigationDrawer","IgxNavigationModule","NgModule","declarations","exports","providers","cloneArray","array","deep","arr","cloneValue","mergeObjects","obj1","obj2","isObject","Error","_b","keys","_c","isDate","Date","getTime","isArray","Map","Set","result","toString","isEqual","getNodeSizeViaRange","range","node","overflow","isFirefox","selectNodeContents","width","getBoundingClientRect","isIE","navigator","appVersion","indexOf","isEdge","test","userAgent","PlatformUtil","platformId","isBrowser","isPlatformBrowser","isIOS","window","type","Inject","PLATFORM_ID","providedIn","isLeftClick","event","button","flatten","forEach","el","children","toArray","SortingDirection","NAVIGATION_KEYS","ROW_EXPAND_KEYS","split","ROW_COLLAPSE_KEYS","SUPPORTED_KEYS","from","isHierarchyMatch","h1","h2","every","level","index","fieldName","getHierarchy","gRow","hierarchy","undefined","expression","groupParent","unshift","PagingError","FilteringLogic","FilteringExpressionsTreeType","DefaultSortingStrategy","instance","_instance","sort","data","dir","ignoreCase","valueResolver","_this","reverse","Desc","arraySort","compareObjects","compareValues","a","bn","toLowerCase","compareFn","NoopSortingStrategy","expressions","IgxSorting","sortDataRecursive","groupedRecordsByExpression","groupval","res","len","getFieldValue","comparer","groupingComparer","expressionIndex","j","expr","gbData","gbDataLen","exprsLen","dataLen","strategy","groupDataRecursive","parent","metadata","grid","groupsRecords","fullResult","expansion","group","this_1","groupRow","records","groups","renderedRowHeight","expandState","find","expanded","defaultExpanded","recursiveResult","group_1","e_1","group_1_1","groupItem","slice","obj","IgxDataRecordSorting","_super","IgxGrouping","groupBy","TransactionType","DataType","FilteringExpressionsTree","operator","filteringOperands","empty","expressionTree","findIndex","isFilteringExpressionsTreeForColumn","expressionsTree","NoopFilteringStrategy","filter","advancedExpressionsTree","BaseFilteringStrategy","findMatchByExpression","rec","cond","condition","val","logic","searchVal","matchRecord","matchOperand","operand","And","Or","FilteringStrategy","_instace","CsvFileTypes","DataUtil","sorting","treeGridSort","hierarchicalData","hr","cloneTreeGridRecord","hierarchicalRecord","rowID","isFilteredOutParent","grouping","splice","page","recordsPerPage","countPages","countRecords","None","isNaN","IncorrectPageIndex","IncorrectRecordsPerPage","Math","ceil","correctPagingState","maxPage","mergeTransactions","transactions","primaryKey","deleteRows","item","rowId","transaction","UPDATE","newValue","DELETE","ADD","map","mergeHierarchicalTransactions","childDataKey","path","parent_1","findParentFromPath","collection","updateIndex","x","deleteIndex","transactions_1","transactions_1_1","parseValue","dataType","Number","parseFloat","path_1","path_1_1","ExportUtilities","getKeysFromData","dataEntry","dataEntryMiddle","floor","dataEntryLast","keys1","keys2","keys3","isSpecialData","saveBlobToFile","blob","fileName","document","createElement","msSaveOrOpenBlob","url","URL","createObjectURL","download","href","body","appendChild","click","removeChild","revokeObjectURL","stringToArrayBuffer","buf","ArrayBuffer","view","Uint8Array","charCodeAt","hasValue","isNullOrWhitespaces","trim","GridBaseAPIService","destroyMap","get_column_by_name","name","columnList","col","field","get_summary_data","filteredData","enabled","getAggregatedChanges","getTransactionLog","getRowData","get_all_data","get_row_index_in_data","escape_editMode","crudService","end","get_cell_inEditMode","cell","record","get_row_by_key","rowSelector","dataRowList","row","rowData","get_row_by_index","rowIndex","rowList","get_cell_by_key","cells","column","get_cell_by_index","columnIndex","get_cell_by_visible_index","visibleColumnIndex","submit_value","update_cell","editValue","cancel","createEditEventArgs","onCellEdit","emit","castToNumber","oldValue","summaryService","clearSummaryCache","updateData","selectionService","isRowSelected","deselectRow","selectRowById","hasSummarizedColumns","removeSummaries","rowEditable","_pipeTrigger","rowValueInDataSource","rowCurrentValue","rowNewValue","_update_row","rowInEditMode","newData","getAggregatedValue","transactionState","getState","update_row","selected","hasSummarized","onRowEdit","hasChanges","endPending","newId","update_row_in_array","remove_grouping_expression","sortingState","sortingExpressions","prepare_sorting_expression","sort_multiple","expressions_1","expressions_1_1","each","term","conditionOrExpressionsTree","filteringTree","filteringExpressionsTree","endEdit","paging","fieldFilterIndex","prepare_filtering_expression","filter_global","columns","filteringIgnoreCase","clear_filter","filteringState","clear_sort","insertAtIndex","newExpressionsTree","oldExpressionsTreeIndex","newExpression","stateCollections","maxCollection","maxExpr","myExpr","clear_groupby","should_apply_number_style","get_data","includeTransactions","dataWithAddedInTransactionRows","get_filtered_data","getSortStrategyPerColumn","sortStrategy","addRowToData","deleteRowFromData","recordRef","deleteRowById","hasRowInNonDeletedState","onRowDeleted","clearHeaderCBState","notifyChanges","dataAfterDelete","refreshSearch","perPage","get_row_id","row_deleted_transaction","atInexistingPage","totalPages","get_row_expansion_state","states","expansionStates","getDefaultExpandState","set_row_expansion_state","expandedStates","allow_expansion_state_change","onRowToggle","set","eventKey","isToggleKey","zone","onStable","pipe","debounceTime","first","subscribe","focusActiveCell","get_rec_by_id","has","isVirtualized","verticalScrollContainer","dc","notVirtual","activeElement","visibleColumns","nativeElement","focus","TreeGridFilteringStrategy","filterImpl","filteredChildren","IgxTreeGridFilteringPipe","gridAPI","hierarchyData","filterStrategy","advancedFilteringExpressionsTree","pipeTrigger","filteringPipeTrigger","resetFilteredOutProperty","expandAllRecursive","updateNonProcessedRecord","Pipe","pure","IgxBaseExporter","flatRecords","_isTreeGrid","_indexOfLastPinnedColumn","_sort","onRowExport","EventEmitter","onColumnExport","export","options","_columnList","hiddenColumns","lastVisbleColumnIndex","columnHeader","header","exportColumn","hidden","ignoreColumnsVisibility","ignoreColumnsOrder","visibleIndex","columnInfo","skip","formatter","skipFormatter","max","pinned","hiddenColumn","prepareData","exportData","k","skippedPinnedColumnsCount","columnsWithoutHeaderCount","columnExportArgs","dataToExport","exportRow","exportDataImplementation","resetDefaults","rowArgs","reduce","rawValue","originalRowData","rootRecords","prepareHierarchicalData","ignoreFiltering","filteringLogic","ignoreSorting","CharSeparatedValueData","_data","valueDelimiter","_headerRecord","_dataRecords","_eor","_escapeCharacters","_delimiterLength","_isSpecialData","setDelimiter","_delimiter","processHeaderRecord","processDataRecords","processField","escapeChars","safeValue","String","some","v","includes","recordData","keys_1","keys_1_1","keyName","processRecord","keys_2","keys_2_1","currentData","dataRecords","currentData_1","currentData_1_1","IgxExporterOptionsBase","_fileExtension","setFileName","_fileName","endsWith","IgxCsvExporterOptions","fileType","getExtensionFromFileType","setFileType","fType","extension","CSV","TSV","TAB","_valueDelimiter","_fileType","oldExt","pop","newName","replace","ExcelFolderTypes","ExcelFileTypes","IgxCsvExporterService","onExportEnded","csvData","_stringData","saveFile","exportFile","Blob","Output","HorizontalAlignment","VerticalAlignment","ExcelStrings","getRels","XML_STRING","getApp","getCore","getTheme","getStyles","hasNonStringValues","cellXFCount","getWorkbook","getWorksheetRels","getWorkbookRels","hasSharedStrings","retVal","SHARED_STRING_RELATIONSHIP","getSheetXML","dimension","freezePane","cols","sheetData","hasTable","hasGroupedRows","outlineLevel","tableParts","sheetOutlineProp","sOutlineLevel","getSharedStringXML","count","uniqueCount","table","getContentTypesXML","contentTypes","getTablesXML","tableColumns","getExcelColumn","returnString","char","fromCharCode","RootRelsFile","writeElement","folder","worksheetData","file","AppFile","CoreFile","WorkbookRelsFile","isEmpty","ThemeFile","WorksheetFile","dictionary","dataDictionary","maxOutlineLevel","rowHeight","columnCount","saveValue","rowCount","isTreeGridData","sCollapsed","sHidden","hasCollapsedParent","rowOutlineLevel","cellData","getCellData","columnWidths","widthInTwips","columnWidth","MIN_WIDTH","indexOfLastPinnedColumn","ignorePinning","frozenColumnCount","exportAsTable","join","columnName","cellValue","savedValue","isSavedAsString","StyleFile","WorkbookFile","ContentTypesFile","SharedStringsFile","dict","sortedValues","getKeys","sharedStrings","sortedValues_1","sortedValues_1_1","getSanitizedValue","stringsCount","TablesFile","lastColumn","values","sortString","sortingExpression","sc","WorksheetRelsFile","RootExcelFolder","childFiles","childFolders","RootRelsExcelFolder","DocPropsExcelFolder","XLExcelFolder","XLRelsExcelFolder","ThemeExcelFolder","WorksheetsExcelFolder","TablesExcelFolder","WorksheetsRelsExcelFolder","ExcelElementsFactory","getExcelFolder","getExcelFile","WorksheetDataDictionary","_dictionary","_widthsDictionary","_counter","dirtyKeyCollections","_calculateColumnWidth","_columnWidths","_columnTypeInfo","fill","isHeader","sanitizedValue","sanitizeValue","getTextWidth","maxWidth","getValue","_keysAreValid","_keys","metrics","getContext","measureText","TEXT_PADDING","_context","canvas","font","DEFAULT_FONT","WorksheetData","initializeData","_columnCount","_rowCount","_dataDictionary","actualData","IgxExcelExporterService","populateFolder","zip","_d","childFolder","folderIntance","zipFolder","folderName","IgxExcelExporterService_1","_e","_f","childFile","maxLevel_1","_xlsx","JSZip","rootFolder","generateAsync","ZIP_OPTIONS","then","xlsx","atob","compression","IgxExcelExporterOptions","_columnWidth","_rowHeight","Point","y","Util","getTargetRect","settings","targetRect","bottom","left","right","top","HTMLElement","targetPoint","getViewportRect","documentElement","clientWidth","clientHeight","scrollPosition","getViewportScrollPosition","documentRect","horizontalScrollPosition","scrollLeft","scrollX","verticalScrollPosition","scrollTop","scrollY","cloneInstance","object","clonedObj","getPrototypeOf","GlobalPositionStrategy","_defaultSettings","horizontalDirection","Center","verticalDirection","Middle","horizontalStartPoint","verticalStartPoint","openAnimation","closeAnimation","minSize","position","contentElement","size","initialCall","classList","parentElement","setPosition","Left","justifyContent","Right","Top","alignItems","Bottom","clone","scrollContainer","NoOpScrollStrategy","initialize","overlayService","attach","detach","ScrollStrategy","DeprecateMethod","message","isMessageShown","descriptor","originalMethod_1","targetName","showMessage","DeprecateProperty","getter_1","setter_1","messageToDisplay","originalDescriptor","newKey","generateUniqueKey","configurable","enumerable","isDevMode","console","warn","Navigate","DropDownActionKey","warningShown","IgxOverlayService","_factoryResolver","_appRef","_injector","builder","_zone","_componentId","_overlayInfos","destroy$","Subject","positionStrategy","scrollStrategy","modal","closeOnOutsideClick","onOpening","onAppended","onOpened","onClosing","onClosed","onAnimation","documentClicked","ev","info","elementRef","contains","positionTarget","clickOnPositionTarget","excludePositionTarget","closeAnimationPlayer","hasStarted","_hide","repositionAll","reposition","_document","component","moduleRef","getOverlayInfo","show","compOrId","getOverlayById","_show","hide","hideAll","overlayInfo","contentElementRect","setOffset","deltaX","deltaY","transformX","transformY","translate","eventArgs","componentRef","detachView","hostView","destroy","elementRect","initialSize","hook","placeElementHook","moveElementToOverlay","changeDetectorRef","detectChanges","updateSize","addOutsideClickListener","addResizeHandler","setupModalWrapper","playOpenAnimation","visibility","removeOutsideClickListener","removeResizeHandler","child","parentNode","applyAnimationParams","playCloseAnimation","onCloseDone","ngZone","ElementRef","dynamicFactory","factoryResolver","componentFactoryResolver","resolveComponentFactory","injector","dynamicComponent","attachView","element","location","insertBefore","wrapperElement","getWrapperElement","getContentElement","getOverlayElement","wrapper","content","addEventListener","stopPropagation","outlet","_overlayElement","fromEvent","takeUntil","cleanUp","openAnimationPlayer","animationBuilder","build","innerRenderer","_renderer","openAnimationInnerPlayer","engine","players","onDone","reset","closeAnimationInnerPlayer","getPosition","init","animationPlayer","animationType","play","animationOptions","transitionDuration","transitionTimingFunction","shouldRemoveClickEventListener_1","removeEventListener","closingOverlaysCount","defaultView","ngOnDestroy","complete","ComponentFactoryResolver","ApplicationRef","Injector","AnimationBuilder","DOCUMENT","NgZone","ContainerPositionStrategy","ConnectedPositioningStrategy","calculateElementRectangles","rects","setStyle","connectedFit","horizontalOffset","verticalOffset","startPoint","wrapperRect","round","BaseFitPositionStrategy","_initialSettings","viewPortRect","updateViewPortFit","shouldFitInViewPort","fitInViewport","calculateLeft","fitHorizontal","forward","calculateTop","fitVertical","AutoPositionStrategy","transformString","canFlipHorizontal","flipHorizontal","horizontalPush","canFlipVertical","flipVertical","verticalPush","flippedStartPoint","flippedDirection","leftBorder","rightBorder","topBorder","bottomBorder","leftExtend","rightExtend","abs","min","topExtend","bottomExtend","ElasticPositionStrategy","maxReduction","reduction","translation","AbsoluteScrollStrategy","_initialized","onScroll","_overlayService","_id","_scrollContainer","runOutsideAngular","addScrollEventListener","BlockScrollStrategy","preventDefault","_sourceElement","_initialScrollTop","_initialScrollLeft","CloseScrollStrategy","cumulativeScrollTop","cumulativeScrollLeft","initialScrollTop","_threshold","initialScrollLeft","scrollHeight","IgxBaseTransactionService","_isPending","_pendingTransactions","_pendingStates","onStateUpdate","updateState","undo","redo","mergeChanges","updateValue","commit","clear","startPending","mergeValues","second","IgxTransactionService","_transactions","_redoStack","_undoStack","_states","verifyAddedTransaction","addTransaction","pending","pendingState","pendingChange","change","aggregatedValue","originalValue","actions","updateRecord","delete","lastActions","currentActions","currentActions_1","e_3","currentActions_1_1","actions_1","actions_1_1","action","cleanState","JSON","stringify","IgxHierarchicalTransactionService","clearArraysFromObject","currentState","prop","IgxToggleDirective","cdr","navigationService","_overlaySubFilter","_overlayId","_collapsed","overlayClosed","unsubscribe","collapsed","overlaySettings","hasOpenAnimation","hasCloseAnimation","openEventArgs","_overlayAppendedSub","_overlayOpenedSub","_overlayClosingSub","clearSubscription","_overlayClosedSub","isClosing","ngOnInit","subscription","closed","ChangeDetectorRef","Optional","HostBinding","exportAs","IgxToggleActionDirective","_target","_overlayDefaults","onClick","clonedSettings","updateOverlaySettings","positionStrategyClone","IgxOverlayOutletDirective","IgxToggleModule","DisplayDensity","IGX_DROPDOWN_BASE","InjectionToken","IgxSelectionAPIService","selection","componentID","newSelection","get_empty","sel","add_item","itemID","add_items","itemIDs","clearSelection","select_item","select_items","delete_item","delete_items","deselectedItem","deselect_item","deselect_items","is_item_selected","first_item","are_all_selected","dataCount","are_none_selected","get_all_ids","NEXT_ID","IgxDropDownGroupComponent","role","groupClass","disabled","labelId","Component","template","IgxDropDownItemBaseDirective","dropDown","_focused","_selected","_index","_disabled","selectedChange","itemIndex","displayDensity","isSelectable","focused","items","ngDoCheck","dropDownSelectedItem","selectedItem","hasIndex","selectItem","ensureItemFocus","allowItemsFocus","focusedItem","preventScroll","clicked","IgxDropDownItemComponent","focusedState","focusedIndex","DisplayDensityToken","DisplayDensityBase","displayDensityOptions","onDensityChanged","oldDisplayDensityOptions","comfortable","_displayDensity","currentDisplayDensity","densityChangedArgs","oldDensity","newDensity","initialDensity","getComponentDensityClass","baseStyleClass","cosy","compact","IgxDisplayDensityModule","IgxDropDownBaseDirective","_displayDensityOptions","_focusedItem","onSelection","maxHeight","cssClass","headers","onItemActionKey","ENTER","SPACE","ESCAPE","oldSelection","navigate","currentIndex","newIndex","getNearestSiblingFocusableItemIndex","navigateItem","startIndex","oldItem","newItem","scrollToHiddenItem","navigateFirst","Down","navigateLast","Up","navigateNext","navigatePrev","parentRect","DisplayContainerComponent","_viewContainer","ViewContainerRef","ViewChild","read","static","VirtualHelperBaseDirective","scrollAmount","_size","_afterViewInit","ngAfterViewInit","destroyed","HVirtualHelperComponent","cssClasses","VirtualHelperComponent","IgxScrollInertiaDirective","wheelStep","inertiaStep","swipeToleranceX","inertiaDeltaY","inertiaDeltaX","inertiaDuration","_savedSpeedsX","setPointerCaptureFName","Element","releasePointerCaptureFName","targetElem","evt","onWheel","onTouchStart","onTouchMove","onTouchEnd","onPointerDown","onPointerUp","onMSGestureStart","onMSGestureChange","IgxScrollInertiaScrollContainer","scrollDeltaX","scrollDeltaY","scrollStep","minWheelStep","_startX","_startY","wheelDeltaX","sign","calcAxisCoords","wheelDeltaY","IgxScrollInertiaDirection","_scrollToX","curScrollLeft","maxScrollLeft","parseInt","_scrollToY","preventParentScroll","curScrollTop","maxScrollTop","offsetHeight","MSGesture","cancelAnimationFrame","_touchInertiaAnimID","touch","touches","_touchStartX","pageX","_touchStartY","pageY","_lastTouchEnd","_lastTouchX","_lastTouchY","_savedSpeedsY","_totalMovedX","_offsetRecorded","_offsetDirection","_touchPrevented","scrolledXY","destX","destY","timeFromLastTouch","speedX","speedY","shift","_lastMovedX","_lastMovedY","_scrollTo","_inertiaInit","pointerType","_pointer","pointerId","_gestureObject","addPointer","screenX","screenY","touchPos","dest","stepModifer","_nextX","_nextY","requestAnimationFrame","IgxScrollInertiaModule","imports","CommonModule","IgxForOfSyncService","_master","isMaster","directive","igxForScrollOrientation","setMaster","forced","orientation","resetMaster","sizesCache","chunkSize","IgxForOfScrollSyncService","_masterScroll","setScrollMaster","scroll","getScrollMaster","IgxForOfContext","$implicit","even","IgxForOfDirective","_template","_differs","resolver","syncScrollService","totalItemCount","onChunkLoad","onScrollbarVisibilityChanged","onContentSizeChange","onDataChanged","onBeforeViewDestroyed","onChunkPreload","_sizesCache","_differ","heightCache","MAX_PERF_SCROLL_DIFF","_virtHeight","_virtHeightRatio","_virtScrollTop","_bScrollInternal","_embeddedViews","contentResizeNotify","scrollComponent","getScroll","igxForContainerSize","igxForOf","removeScrollEventListeners","func","verticalScrollHandler","isScrollable","totalSize","vc","igxForScrollContainer","igxForSizePropName","dcFactory","createComponent","scrollDirection","touchAction","initSizesCache","_calculateChunkSize","getIndexAt","input","embeddedView","_vcr","createEmbeddedView","getContextIndex","factory","_maxHeight","_calcMaxBrowserHeight","_calcHeight","bind","destructor","throttleTime","leading","trailing","runTask","updateSizes","onHScroll","hvFactory","_updateHScrollOffset","contentObserver","ResizeObserver","observe","disconnect","ngOnChanges","changes","currentValue","igxForTrackBy","getTypeNameForDebugging","firstChange","_applyChanges","_recalcOnContainerChange","diff","_updateSizeCache","run","markForCheck","_updateScrollOffset","addScrollTop","addTop","originalVirtScrollTop","containerSize","maxVirtScrollTop","scrollOffset","fixedUpdateAllElements","maxRealScrollTop","scrollTo","isRemote","isPrevItem","nextScroll","_adjustToIndex","scrollNext","scr","endIndex","scrollPrev","scrollNextPage","scrollPrevPage","getColumnScrollLeft","colIndex","getItemCountInView","getSizeAt","getScrollForIndex","realPercentScrolled","prevStartIndex","recalcUpdateSizes","diffs","totalDiff","l","rNodes","rootNodes","nodeType","Node","ELEMENT_NODE","nextElementSibling","rNode","h","igxForItemSize","oldVal","newVal","currDiff","totalWidth","reducer","acc","scrToBottom","_isScrolledToBottom","hSum","_isAtBottomIndex","updatesToIndex","sumDiffs","currOffset","inScrollTop","newStart","prevStart","moveApplyScrollNext","moveApplyScrollPrev","fixedApplyScroll","prevIndex","start","embView","cntx","context","insert","_trackByFn","fn","prevChunkSize","applyChunkSizeChange","_recalcScrollBarSize","embeddedViewCopy","div","_calcMaxChunkSize","getElement","viewref","nodeName","elem","getElementsByTagName","_getItemSize","maxLength","sum","availableSize","accumulator","currentItem","curItem","prevItem","prevSize","midIdx","cmp","scrollable","removeLastElem","oldElem","addLastElem","elemIndex","_updateVScrollOffset","dim","TemplateRef","IterableDiffers","IgxHintPosition","IgxGridForOfDirective","syncService","onDataChanging","getItemSize","summaries","masterSizesCache","itemsDimension","oldHeight","handleCacheChanges","identityChanges","newHeightCache","newSizesCache","newHeight","numRemovedItems","forEachRemovedItem","forEachIdentityChange","previousIndex","forEachItem","assumeMaster","_updateViews","IgxForOfModule","entryComponents","IgxDropDownComponent","virtDir","toggleDirective","scrollContainerRef","updateScrollPosition","setSelectedItem","collectionLength","direction_1","subRequired","isIndexOutOfBounds","take","skipHeader","virtState","currentPosition","itemPosition","indexOutOfChunk","scrollNeeded","targetScroll","onToggleOpening","_scrollPosition","onToggleContentAppended","scrollToItem","onToggleOpened","onToggleClosing","onToggleClosed","calculateScrollPosition","setTimeout","scrollDelta","elementHeight","isSelectionValid","ContentChild","ContentChildren","forwardRef","descendants","IgxDropDownComponent_1","provide","useExisting","IgxDropDownItemNavigationDirective","dropdown","handleKeyDown","onArrowUpKeyDown","onArrowDownKeyDown","onHomeKeyDown","onEndKeyDown","Self","IgxDropDownModule","IgxInputState","IgxHintDirective","_element","_position","START","isPositionStart","isPositionEnd","toUpperCase","_applyPosition","END","IgxInputGroupBase","nativeValidationAttributes","IgxInputGroupType","IgxInputDirective","inputGroup","ngModel","formControl","_valid","INITIAL","isInput","isTextArea","checkValidity","hasAttribute","required","isRequired","INVALID","onFocus","isFocused","onBlur","ngControl","valid","_hasValidators","onInput","hasPlaceholder","control","validator","validation","tagName","_statusChanges$","statusChanges","onStatusChanged","asyncValidator","touched","dirty","VALID","placeholder","nativeValidationAttributes_1","nativeValidationAttributes_1_1","nativeValidationAttribute","NgModel","FormControlName","IgxLabelDirective","defaultClass","IgxPrefixDirective","IgxPrefixModule","IgxSuffixDirective","IgxSuffixModule","IgxDividerType","IgxInputGroupComponent","_type","LINE","_filled","_supressInputAutofocus","isBox","isBorder","isSearch","isFluentSearch","isFluent","isBootstrap","hasWarning","BOX","BORDER","FLUENT","FLUENT_SEARCH","SEARCH","BOOTSTRAP","hints","IgxInputGroupComponent_1","IgxInputGroupModule","IgxAutocompleteDirective","defaultSettings","dropDownOpened$","onItemSelected","autofill","select","model","setValue","highlightFirstItem","autocompleteSettings","listId","onArrowDown","onTab","IgxAutocompleteModule","IgxButtonDirective","_defaultType","_cssClassPrefix","buttonClick","removeClass","addClass","_color","color","_backgroundColor","_label","setAttribute","Renderer2","IgxButtonModule","RestrictDrag","IgxDividerDirective","_inset","SOLID","middle","vertical","DASHED","baseMargin","IgxDividerModule","IgxDefaultDropStrategy","dropAction","drag","drop","atIndex","IgxAppendDropStrategy","dragElement","dropAreaElement","IgxPrependDropStrategy","IgxInsertDropStrategy","IgxDragHandleDirective","baseClass","RadioLabelPosition","IgxDragLocation","_pageX","_pageY","IgxDragDirective","viewContainer","renderer","ghostContext","dragTolerance","ghost","ghostClass","hideBaseOnDrag","animateOnRelease","dragStart","dragMove","dragEnd","dragClick","ghostCreate","ghostDestroy","transitioned","_visibility","selectDisabled","defaultReturnDuration","animInProgress","_lastX","_lastY","_dragStarted","_ghostHostX","_ghostHostY","_pointerDownId","_clicked","_lastDropArea","_destroy","_removeOnDestroy","_offsetX","_defaultOffsetX","_offsetY","_defaultOffsetY","bVisible","baseOriginLeft","baseOriginTop","PointerEvent","ghostElement","ghostLeft","baseLeft","ghostTop","baseTop","getTransformX","getTransformY","ghostMarginLeft","getComputedStyle","ghostMarginTop","ngAfterContentInit","dragHandles","pointerEventsEnabled","throttle","interval","animationFrameScheduler","onPointerMove","onPointerLost","touchEventsEnabled","onTransitionEnd","setLocation","newLocation","offsetHostX","ghostHost","ghostHostOffsetLeft","offsetHostY","ghostHostOffsetTop","getWindowScrollLeft","getWindowScrollTop","setTransformXY","transitionToOrigin","customAnimArgs","startLocation","_ghostStartX","_ghostStartY","createGhost","transitionProperty","timingFunction","transitionDelay","transitionTo","movedElem","targetRects","handleFound","handle","currentTarget","targetElement","setPointerCapture","ghostOffsetX","ghostOffsetY","totalMovedX","totalMovedY","dragStartArgs_1","originalEvent","owner","startX","startY","moveArgs","nextPageX","nextPageY","setPageX","setPageY","updatedMovedX","updatedMovedY","lastMovedX","lastMovedY","translateX","translateY","dispatchDragEvents","dispatchDropEvent","dynamicGhostRef","ghostTemplate","cloneNode","createEventArgs","visible","topDropArea","customEventArgs","elementsFromPoint","getElementsAtPoint","getAttribute","dispatchEvent","ghostDestroyArgs","viewPortX","pageXOffset","viewPortY","pageYOffset","elements","eventName","dragLeaveEvent","createEvent","initCustomEvent","posX","matrix","match","posY","ghostPosition","getPropertyValue","offsetParent","IgxDropDirective","enter","over","leave","dropped","droppable","dragover","_dropStrategy","classRef","onDragEnter","onDragLeave","onDragOver","elementPosX","elementPosY","offsetX","detail","offsetY","dragData","isDragLinked","onDragDrop","elementsAtPoint","insertIndex","getInsertIndexAt","dragLinkArray","dragChannel","dropLinkArray","dropChannel","dropLinks","dragLinks","draggedDir","dropChildren","childUnder","draggedElemIndex","IgxDragDropModule","IgxFilterOptions","inputValue","get_value","textContent","valueToTest","matchFn","metConditionFn","overdueConditionFn","IgxFilterDirective","filtering","filtered","filterOptions","previousValue","IgxFilterPipe","filteredItems","IgxFilterModule","IgxFocusDirective","comp","focusState","trigger","getEditElement","NG_VALUE_ACCESSOR","IgxFocusModule","IgxLayoutDirective","wrap","justify","itemAlign","display","IgxFlexDirective","grow","shrink","flex","order","basis","IgxLayoutModule","MASK_FLAGS","KEYS","MaskHelper","_cursor","parseValueByMask","maskOptions","cursor","mask","format","literals","getMaskLiterals","literalKeys","nonLiteralIndeces","getNonLiteralIndeces","parseValueByMaskOnInit","insertCharAt","promptChar","isCharValid","validateCharOnPostion","replaceCharAt","parseMask","outputVal","mask_1","mask_1_1","inputVal","literalValues","mask_2","mask_2_1","nonLiteralValues","getNonLiteralValues","pos","nonLiteralValues_1","nonLiteralValues_1_1","restoreValueFromMask","value_1","value_1_1","parseValueByMaskUponSelection","isMarked","parseValueByMaskUponCopyPaste","clipboardData","selectionEnd","clipboardData_1","clipboardData_1_1","inputChar","isValid","charAt","RegExp","strValue","substring","nonLiteralsIndeces","value_2","value_2_1","noop","IgxMaskDirective","onValueChange","_maskOptions","_onTouchedCallback","_onChangeCallback","maskHelper","_placeholder","selectionStart","onKeydown","keyCode","charCode","_stopPropagation","_ctrlDown","_key","_selection","onKeyup","onPaste","_paste","_valOnPaste","_cursorOnPaste","getCursorPosition","onInputChanged","setCursorPosition","currentCursorPos","rawVal","dataValue","includeLiterals","formattedValue","focusedValuePipe","displayValuePipe","setSelectionRange","writeValue","registerOnChange","registerOnTouched","IgxMaskDirective_1","multi","IgxMaskModule","IgxAvatarSize","IgxAvatarType","nextId","IgxRadioComponent","labelPosition","tabindex","disableRipple","ariaLabelledBy","ariaLabel","checked","inputId","_value","_onRadioChange","_onRadioClick","nativeRadio","blur","_onLabelClick","radio","BEFORE","AFTER","IgxRadioComponent_1","IgxRippleDirective","rippleTarget","rippleDuration","rippleDisabled","rippleElementClass","rippleHostClass","_centered","animationQueue","centered","onMouseDown","_ripple","setStyles","rippleElement","styleParams","radius","rippleColor","querySelector","rectBounds","clientX","clientY","dimensions","IgxRippleModule","IgxRadioGroupDirective","_name","_isInitialized","_labelPosition","_required","_selectRadioButton","_setRadioButtonNames","_setRadioButtonsRequired","_disableRadioButtons","_setRadioButtonLabelPosition","_initRadioButtons","radioButtons","props_1","_selectedRadioButtonChanged","IgxRadioGroupDirective_1","IgxRadioModule","IgxTextHighlightDirective","_div","_observer","_nodeWasRemoved","_forceEvaluation","_activeElementIndex","_defaultCssClass","_defaultActiveCssClass","groupName","IgxTextHighlightDirective_1","onActiveElementChanged","deactivate","activateIfNecessary","_lastSearchInfo","setActiveHighlight","highlight","highlightGroupsMap","clearActiveHighlight","clearHighlight","_valueChanged","searchedText","matchCount","caseSensitive","exactMatch","_container","firstElementChild","ngAfterViewChecked","text","caseSensitiveResolved","exactMatchResolved","searchNeedsEvaluation","clearChildElements","getHighlightedText","activate","MutationObserver","mutationList","mutation","removedNodes","addedNodes","childList","spans","querySelectorAll","elementToActivate","activeCssClass","elementToDeactivate","originalContentHidden","setProperty","searchText","appendDiv","stringValue","contentStringResolved","searchTextResolved","appendSpan","appendText","foundIndex","previousMatchEnd","textElement","createText","outerHTML","span","containerClass","IgxTextHighlightModule","IgxTextSelectionDirective","selectionState","IgxTextSelectionModule","IgxTooltipTargetDirective","_navigationService","showDelay","hideDelay","tooltipDisabled","onTooltipShow","onTooltipHide","positionSettings","useAnimation","checkOutletAndOutsideClick","preMouseEnterCheck","toBeShown","clearTimeout","timeoutId","toBeHidden","hidingArgs","tooltip","forceClose","mergedOverlaySettings","preMouseLeaveCheck","onKeydownEscape","onMouseEnter","showingArgs","onMouseLeave","showTooltip","onDocumentTouchStart","hideTooltip","IgxTooltipDirective","forceOpen","finish","IgxTooltipModule","IgxFilteringOperand","operations","isUnary","iconName","findValueInSet","conditionList","f","append","operation","IgxBooleanFilteringOperand","IgxDateFilteringOperand","validateInputData","targetp","getDateParts","searchp","year","month","day","now","td","setDate","getDate","yesterday","date","dateFormat","hours","milliseconds","minutes","seconds","getFullYear","getMonth","getHours","getMinutes","getSeconds","getMilliseconds","toISOString","IgxNumberFilteringOperand","IgxStringFilteringOperand","search","applyIgnoreCase","startsWith","filteringStateDefaults","GroupedRecords","IgxIconService","_sanitizer","_fontSet","_fontSetAliases","_cachedSvgIcons","className","registerFontSetAlias","alias","fontSetClassName","addSvgIcon","fontSet","safeUrl","bypassSecurityTrustResourceUrl","sanitize","SecurityContext","RESOURCE_URL","fetchSvg","addSvgIconFromText","iconText","cacheSvgIcon","isSvgIconCached","iconKey","getSvgIconKey","httpRequest","XMLHttpRequest","responseType","onload","request","status","statusText","responseText","onerror","send","ensureSvgContainerCreated","innerHTML","svg","oldChild","_svgContainer","DomSanitizer","IgxIconComponent","_el","iconService","ariaHidden","active","defaultFontSet","updateIconClass","iconColor","svgImage","noLigature","explicitLigature","IgxIconModule","IgxBadgeType","IgxAvatarComponent","SMALL","roundShape","src","IMAGE","icon","ICON","initials","INITIALS","CUSTOM","imageTemplate","initialsTemplate","iconTemplate","defaultTemplate","roleDescription","getRole","getSrcUrl","IgxAvatarModule","ICON_POSITION","IgxBadgeComponent","PRIMARY","label","setClasses","classes","INFO","SUCCESS","WARNING","ERROR","IgxBadgeModule","IGX_EXPANSION_PANEL_COMPONENT","IgxExpansionPanelBodyComponent","panel","_labelledBy","IgxExpansionPanelTitleDirective","IgxExpansionPanelDescriptionDirective","IgxExpansionPanelIconDirective","ButtonGroupAlignment","IgxExpansionPanelHeaderComponent","_iconTemplate","lv","iconPosition","LEFT","onInteraction","onAction","openPanel","altKey","expand","closePanel","collapse","Host","IgxExpansionPanelComponent","animationSettings","collapsedChange","onCollapsed","onExpanded","Promise","resolve","labelledBy","headerId","cb","IgxExpansionPanelComponent_1","IgxExpansionPanelModule","IgxBannerActionsDirective","IgxBannerComponent","_bannerActionTemplate","_animationSettings","_expansionPanel","_bannerEvent","banner","openingArgs","closingArgs","onExpansionPanelOpen","onExpansionPanelClose","IgxBannerModule","DateRangeType","TimeDeltaInterval","IgxButtonGroupComponent","_cdr","buttonClickNotifier$","queryListNotifier$","zIndex","multiSelection","selectedIndexes","onSelect","onUnselect","viewButtons","templateButtons","_itemContentCssClass","buttons","_isVertical","horizontal","selectButton","buttonElement","indexInViewButtons","deselectButton","initButtons","_clickHandler","ViewChildren","IgxButtonGroupModule","WEEKDAYS","MDAYS","stop","step","isLeap","weekDay","getDay","monthRange","nDays","isDateInRanges","ranges","dateInMs","ranges_1","ranges_1_1","dRanges","dateRange","dRange","datesInMs","datesInMs_1","e_2","datesInMs_1_1","CalendarSelection","ScrollMonth","Calendar","firstWeekDay","SUNDAY","_firstWeekDay","weekdays","monthdates","extraWeek","days","timedelta","generateICalendarDate","e_4","monthdatescalendar","dates","units","ret","checkRollover","setFullYear","setMonth","setTime","formatToParts","locale","parts","Intl","DateTimeFormat","full","formattedParts_1","toType","partType","literal","combined","parts_1","parts_1_1","parts_2","parts_2_1","getFirstViewDate","activeViewIdx","getNextMonth","Month","getPrevMonth","getNextYear","Year","getPrevYear","isCurrentMonth","isNextMonth","isPrevMonth","isPreviousMonth","IgxCalendarYearDirective","onYearSelection","isCurrentYear","IgxCalendarMonthDirective","onMonthSelection","IgxCalendarHeaderTemplateDirective","IgxCalendarSubheaderTemplateDirective","IgxCalendarScrollMonthDirective","debounce","stopScroll","tap","startScroll","onMouseUp","CalendarView","IgxCalendarBaseDirective","hideOutsideDays","SINGLE","rangeStarted","_locale","_disabledDates","_specialDates","_formatOptions","weekday","_formatViews","monthScrollDirection","NONE","scrollMonth$","stopMonthScroll$","startMonthScroll$","calendarModel","viewDate","weekStart","initFormatters","formatOptions","formatViews","selectedDates","MULTI","RANGE","selectDate","_viewDate","getDateOnly","getDateOnlyInMs","generateDateRange","selectSingle","selectMultiple","newDates","selDates","valueDateOnly_1","isDateDisabled","valueOf","selectRange","excludeDisabledDates","deselectSingle","deselectMultiple","selectedDatesCount","datesInMsToDeselect","deselectMultipleInMonth","valueDateOnly","deselectRange","valueStart","valueEnd","selectedDatesStart","selectedDatesEnd","formatterDay","formatterWeekday","formatterMonth","formatterYear","formatterMonthday","disabledDates","deselectDate","selectDateFromClient","Direction","IgxMonthPickerBaseDirective","_activeView","DEFAULT","DECADE","changeYear","activeView","yearsBtns","idx","activeViewDecade","activeViewDecadeKB","formattedYear","IgxMonthsViewComponent","formatView","styleClass","_monthFormat","initMonthFormatter","_calendarModel","formattedMonth","_formatterMonth","selectMonth","monthTracker","monthFormat","onKeydownArrowUp","monthsRef","months","nodeRect","nextNodeRect","onKeydownArrowDown","onKeydownArrowRight","onKeydownArrowLeft","onKeydownHome","onKeydownEnd","onKeydownEnter","IgxMonthsViewComponent_1","CalendarHammerConfig","overrides","pan","Hammer","DIRECTION_VERTICAL","threshold","HammerGestureConfig","IgxYearsViewComponent","_yearFormat","initYearFormatter","_formatterYear","selectYear","delta","generateYearRange","yearTracker","yearFormat","currentYear","IgxYearsViewComponent_1","HAMMER_GESTURE_CONFIG","useClass","IgxDayItemComponent","isLastInRange","isFirstInRange","isWithinRange","onDateSelection","isDisabled","isInactive","today","outOfRangeDates","isHidden","isOutOfRange","isSingleSelection","specialDates","isWeekend","IgxCardType","IgxDaysViewNavigationService","focusNextDate","nextView","childElementCount","nextDate","monthView","isFocusable","dayIsNextMonth","nextMonthView","prevMonthView","daysNavService","changeDaysView","monthAction","NEXT","PREV","onViewChanging","focusHomeDate","focusFirstDay","focusEndDate","focusLastDay","IgxDaysViewComponent","disableOutOfRangeDates","formattedDate","generateWeekHeader","dayNames","rv","rv_1","rv_1_1","rowTracker","dateTracker","isSelected","checkForRange","Between","focusActiveDate","isToday","selectDay","Specific","getFirstMonthView","getLastMonthView","onKeydownArrow","IgxDaysViewComponent_1","IgxCalendarComponent","hasHeader","animationAction","isKeydownTrigger","_monthsViewNumber","startPrevMonthScroll","previousMonth","startNextMonthScroll","nextMonth","stopMonthScroll","daysView","prevMonthBtn","nextMonthBtn","YEAR","headerTemplateDirective","subheaderTemplateDirective","headerDate","generateContext","setSiblingMonths","monthViews","_monthViewsChanges$","switchMap","skipLast","onActiveViewDecade","dacadeView","onActiveViewDecadeKB","getFormattedDate","monthday","childClicked","deselectDateInMonthViews","viewChanging","callback","changeMonth","monthsBtns","onActiveViewYear","monthsView","focusMonth","attributes","onActiveViewYearKB","getViewDate","animationDone","toState","onKeydownPageDown","activeDate","isPageDown","dayItem","onKeydownShiftPageUp","yearView","getMonthView","IgxCalendarComponent_1","animations","transition","IgxMonthPickerComponent","yearAction","nextYear","previousYear","nextYearKB","previousYearKB","yearsBtn","onKeydownPageUp","IgxMonthPickerComponent_1","IgxMonthViewSlotsCalendar","IgxGetViewDateCalendar","calendar","wholeDate","IgxCalendarModule","FormsModule","IgxCardMediaDirective","IgxCardHeaderComponent","IgxCardThumbnailDirective","IgxCardHeaderTitleDirective","IgxCardHeaderSubtitleDirective","IgxCardContentDirective","IgxCardFooterDirective","IgxCardActionsLayout","IgxCardComponent","ELEVATED","OUTLINED","IgxCardActionsComponent","card","isVerticalSet","layout","JUSTIFY","IgxCardModule","IgxCarouselIndicatorDirective","IgxCarouselNextButtonDirective","IgxCarouselPrevButtonDirective","IgxSlideComponent","_active","_destroy$","previous","activeChange","CurrentResourceStrings","GridResStrings","igx_grid_groupByArea_message","igx_grid_emptyFilteredGrid_message","igx_grid_emptyGrid_message","igx_grid_filter","igx_grid_filter_row_close","igx_grid_filter_row_reset","igx_grid_filter_row_placeholder","igx_grid_filter_row_boolean_placeholder","igx_grid_filter_row_date_placeholder","igx_grid_filter_operator_and","igx_grid_filter_operator_or","igx_grid_complex_filter","igx_grid_filter_contains","igx_grid_filter_doesNotContain","igx_grid_filter_startsWith","igx_grid_filter_endsWith","igx_grid_filter_equals","igx_grid_filter_doesNotEqual","igx_grid_filter_empty","igx_grid_filter_notEmpty","igx_grid_filter_null","igx_grid_filter_notNull","igx_grid_filter_before","igx_grid_filter_after","igx_grid_filter_today","igx_grid_filter_yesterday","igx_grid_filter_thisMonth","igx_grid_filter_lastMonth","igx_grid_filter_nextMonth","igx_grid_filter_thisYear","igx_grid_filter_lastYear","igx_grid_filter_nextYear","igx_grid_filter_greaterThan","igx_grid_filter_lessThan","igx_grid_filter_greaterThanOrEqualTo","igx_grid_filter_lessThanOrEqualTo","igx_grid_filter_true","igx_grid_filter_false","igx_grid_filter_all","igx_grid_filter_condition_placeholder","igx_grid_summary_count","igx_grid_summary_min","igx_grid_summary_max","igx_grid_summary_sum","igx_grid_summary_average","igx_grid_summary_earliest","igx_grid_summary_latest","igx_grid_excel_filter_moving_left","igx_grid_excel_filter_moving_left_short","igx_grid_excel_filter_moving_right","igx_grid_excel_filter_moving_right_short","igx_grid_excel_filter_moving_header","igx_grid_excel_filter_sorting_asc","igx_grid_excel_filter_sorting_asc_short","igx_grid_excel_filter_sorting_desc","igx_grid_excel_filter_sorting_desc_short","igx_grid_excel_filter_sorting_header","igx_grid_excel_filter_clear","igx_grid_excel_custom_dialog_add","igx_grid_excel_custom_dialog_clear","igx_grid_excel_custom_dialog_header","igx_grid_excel_cancel","igx_grid_excel_apply","igx_grid_excel_search_placeholder","igx_grid_excel_select_all","igx_grid_excel_blanks","igx_grid_excel_hide","igx_grid_excel_show","igx_grid_excel_pin","igx_grid_excel_unpin","igx_grid_excel_text_filter","igx_grid_excel_number_filter","igx_grid_excel_date_filter","igx_grid_excel_boolean_filter","igx_grid_excel_custom_filter","igx_grid_advanced_filter_title","igx_grid_advanced_filter_and_group","igx_grid_advanced_filter_or_group","igx_grid_advanced_filter_end_group","igx_grid_advanced_filter_create_and_group","igx_grid_advanced_filter_create_or_group","igx_grid_advanced_filter_and_label","igx_grid_advanced_filter_or_label","igx_grid_advanced_filter_add_condition","igx_grid_advanced_filter_ungroup","igx_grid_advanced_filter_delete","igx_grid_advanced_filter_delete_filters","igx_grid_advanced_filter_initial_text","igx_grid_advanced_filter_column_placeholder","igx_grid_advanced_filter_value_placeholder","TimePickerResStrings","igx_time_picker_ok","igx_time_picker_cancel","PaginatorResStrings","igx_paginator_label","CarouselResStrings","igx_carousel_of","updateResourceStrings","currentStrings","newStrings","CarouselIndicatorsOrientation","CarouselAnimationType","LabelPosition","CarouselHammerConfig","DIRECTION_HORIZONTAL","IgxCarouselComponent","iterableDiffers","platformUtil","loop","pause","navigation","keyboardSupport","gesturesSupport","maximumIndicatorsCount","indicatorsOrientation","slide","indicatorTemplate","nextButtonTemplate","prevButtonTemplate","onSlideChanged","onSlideAdded","onSlideRemoved","onCarouselPaused","onCarouselPlaying","_resourceStrings","differ","animationDuration","animationPosition","newDuration","_interval","restartInterval","slides","initSlides","lastInterval","clearInterval","unsubscriber","merge","isDestroyed","onSlideActivated","currentSlide","current","animationWasStarted","finishAnimations","previousSlide","none","playAnimations","carousel","playLeaveAnimation","playEnterAnimation","leaveAnimationPlayer","enterAnimationPlayer","getAnimation","trans","enterAnimation","leaveAnimation","fade","any","ind","forEachAddedItem","total","updateSlidesSelection","defaultIndicator","defaultNextButton","defaultPrevButton","setAriaLabel","resourceStrings","getNextIndex","getPrevIndex","playing","newSlides","notifyOnChanges","prev","stoppedByInteraction","resetInterval","setInterval","tick","onTap","isPlaying","last","onPanLeft","onPanRight","resetSlideStyles","slideWidth","offsetWidth","panOffset","isFinal","incomingSlide","onPanEnd","velocity","IgxCarouselModule","DataTypes","IgxCheckboxComponent","indeterminate","readonly","disableTransitions","checkbox","_onCheckboxChange","_onCheckboxClick","nativeCheckbox","IgxCheckboxComponent_1","preserveWhitespaces","IGX_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","IgxCheckboxRequiredDirective","CheckboxRequiredValidator","IgxCheckboxModule","CHIP_ID","IgxChipComponent","draggable","removable","selectable","class","onMoveStart","onMoveEnd","onRemove","onSelectionDone","onKeyDown","_selectedItemClass","_movedWhileRemoving","changeSelection","chipArea","backgroundColor","newColor","removeIcon","defaultRemoveIcon","selectIcon","defaultSelectIcon","selectClass","SELECT_CLASS","srcEvent","onSelectArgs","selectContainer","propertyName","onSelectTransitionDone","onChipKeyDown","keyDownArgs","onRemoveBtnKeyDown","onRemoveMouseDown","onRemoveClick","onRemoveTouchMove","onRemoveTouchEnd","onChipDragStart","onChipDragEnd","dragDirective","onChipMoveEnd","onChipDragClicked","clickEventArgs","onChipDragEnterHandler","chip","dragChip","onChipDrop","IgxChipsAreaComponent","_iterableDiffers","onReorder","chipsList","selectedChips","addedChip","onChipMoveStart","onChipDragEnter","onChipSelectionChange","modifiedChipsArray","chipsArray","dragChipIndex","shiftKey","positionChipAtIndex","dropChipIndex","chipIndex","targetIndex","shiftRestLeft","eventData","IgxChipsModule","IgxComboHeaderDirective","IgxComboFooterDirective","IgxComboItemDirective","IgxComboEmptyDirective","IgxComboHeaderItemDirective","IgxComboAddItemDirective","IgxComboToggleIconDirective","IgxComboClearIconDirective","IgxComboAPIService","register","combo","valueKey","add_custom_item","addItemToCollection","set_selected_item","isItemSelected","deselectItems","selectItems","IgxComboItemComponent","comboAPI","itemHeight","comboID","isVisible","rect","parentDiv","disableCheck","IGX_COMBO_COMPONENT","IgxComboAddItemComponent","IgxComboAddItemComponent_1","IgxComboDropDownComponent","scrollHandler","itemsMaxHeight","focusSearchInput","lastIndex","focusAddItemButton","isAddButtonVisible","sortedChildren","sortedChildren_1","sortedChildren_1_1","handleEnter","handleSpace","isAddItemFocused","IgxComboDropDownComponent_1","IgxComboFilteringPipe","searchValue","displayKey","shouldFilter","searchTerm_1","IgxComboGroupingPipe","groupKey","sorted","Asc","inserts","currentHeader","insertFlag","IgxComboState","ItemHeights","diffInSets","set1","set2","results","entry","InteractionMode","IgxComboComponent","customValueFlag","defaultFallbackGroup","stringFilters","booleanFilters","_groupKey","_prevInputValue","_dataType","_filteredData","_itemHeight","_itemsMaxHeight","_remoteSelection","_overlaySettings","searchInput","itemTemplate","headerTemplate","footerTemplate","headerItemTemplate","addItemTemplate","emptyTemplate","toggleIconTemplate","clearIconTemplate","dropdownContainer","onSelectionChange","onAddition","onSearchInput","onDataPreLoad","allowCustomValues","searchPlaceholder","filterable","manageRequiredAsterisk","_displayKey","comboInput","onInputClick","checkMatch","handleKeyUp","itemMatch","handleInputChange","COMPLEX","PRIMITIVE","registerRemoteEntries","ids","getValueDisplayPairs","selection_1","selection_1_1","ids_1","ids_1_1","triggerCheck","handleSelectAll","selectAllItems","deselectAllItems","addedItem","oldCollection","newCollection","opening","displaySearchInput","NgControl","setDisabledState","complexTemplate","primitiveTemplate","handleClearItems","selectedItems","newItems","clearCurrentSelection","setSelection","ignoreFilter","allVisible","removed","added","newSelectionAsArray","oldSelectionAsArray","displayText","createDisplayText","concatDisplayText","convertKeysToItems","removedItems","addedItems","handleOpening","handleOpened","handleClosing","handleClosed","IgxComboComponent_1","IgxComboModule","ReactiveFormsModule","DatePickerUtil","parseDateFormat","maskValue","DEFAULT_LOCALE","dateStruct","SHORT_DATE_MASK","maskArray","monthInitPosition","dayInitPosition","yearInitPosition","initialPosition","formatType","getYearFormatType","getMonthFormatType","getDayFormatType","isDateChar","SEPARATOR","fillDatePartsPositions","getDefaultLocaleMask","getInputMask","inputMask","getMask","parseDateArray","dateFormatParts","prevDateValue","yearPrefix","dayStr","getDayValueFromInput","monthStr","getMonthValueFromInput","yearStr","getYearValueFromInput","getDateFormatPart","originalYear","fullYear","NaN","daysInMonth","maskToPromptChars","PROMPT_CHAR","trimUnderlines","getModifiedDateInput","isSpinLoop","maxValue","minValue","datePart","getDatePartOnPosition","datePartType","datePartFormatType","datePartValue","getDateValueFromInput","minMax","getMinMaxValue","tempValue","startIdx","endIdx","prefix","getNumericFormatPrefix","addPromptCharsEditMode","dateArray","checkForCompleteDateInput","dayValue","monthValue","yearValue","isFullInput","isFullYearInput","formatterOptions","resolvedOptions","NUMBER_OF_MONTHS","getFullYearFromString","partPosition","yearPart","currentPos","DatePickerDisplayValuePipe","_datePicker","rawDateString","DatePickerInputValuePipe","invalidDate","IgxDatePickerTemplateDirective","IgxDatePickerActionsDirective","PredefinedFormatOptions","IgxCalendarContainerComponent","mode","Dialog","onClose","onTodaySelection","DropDown","onEscape","closeCalendar","triggerTodaySelection","TemplateOutletAction","IgxDatePickerComponent","_moduleRef","labelVisibility","monthsViewNumber","valueChange","onDisabledDate","onValidationFailed","inputValuePipe","spinDelta","defaultLocale","_onOpen","_onClose","_ngControl","_format","ShortDate","_modalOverlay","_dropDownOverlaySettings","_defaultDropDownOverlaySettings","_customFormatChecker","_transformedDate","_getEditorDate","_getDisplayDate","datePickerTemplateDirective","readOnlyDatePickerTemplate","editableDatePickerTemplate","displayData","openDialog","onSpaceClick","getInputGroupElement","inputDirectiveElementRef","_inputElementRef","_inputUserTemplateElementRef","_positionSettings","_modalOverlaySettings","overlay","_componentID","_onOpening","_onOpened","_onClosed","_updateValidityOnBlur","_inputDirective","handleSelection","emitValueChangeEvent","modalOverlay","modalOverlaySettings","dropDownOverlaySettings","mouseDown","_setCursorPosition","setHours","setMinutes","setSeconds","setMilliseconds","_isInEditMode","calculateDate","spinValue","targetValue","cursorPosition","_getCursorPosition","checkInput","inputType","dateString","invokedByEvent","newDateArray","datePicker","prevValue","eventType","modifiedInputValue","_initializeCalendarContainer","_focusCalendarDate","componentInstance","isVertical","subheaderTemplate","cancelButtonLabel","todayButtonLabel","datePickerActions","datePickerActionsDirective","_setLocaleToDate","toLocaleDateString","formatDate","changedValue","_inputDirectiveUserTemplate","NgModuleRef","IgxDatePickerComponent_1","IgxDatePickerModule","IgxDialogTitleDirective","defaultStyle","IgxDialogActionsDirective","DIALOG_ID","IgxDialogComponent","navService","title","leftButtonLabel","leftButtonType","leftButtonColor","leftButtonBackgroundColor","leftButtonRipple","rightButtonLabel","rightButtonType","rightButtonColor","rightButtonBackgroundColor","rightButtonRipple","onOpen","onLeftButtonSelect","onRightButtonSelect","_closeOnOutsideSelect","_isModal","_titleId","IgxDialogComponent_1","_overlayDefaultSettings","isModal","closeOnOutsideSelect","isOpen","toggleRef","emitCloseFromDialog","dialog","onDialogSelected","DIALOG_CLASS","onInternalLeftButtonSelect","onInternalRightButtonSelect","IgxDialogModule","IgxTemplateOutletDirective","_viewContainerRef","_embeddedViewsMap","onViewCreated","onViewMoved","onCachedViewLoaded","onBeforeViewDetach","_getActionType","CreateView","_recreateView","MoveView","_moveView","UseCachedView","_useCachedView","UpdateViewContext","_updateExistingContext","igxTemplateOutletContext","cleanCache","cleanView","tmplID","_viewRef","igxTemplateOutlet","cachedView","oldContext","_cloneContext","_shouldRecreateView","ctxChange","_hasContextShapeChanged","prevCtxKeys","currCtxKeys","currCtxKeys_1","currCtxKeys_1_1","propName","ctx","movedView","shouldRecreate","IgxTemplateOutletModule","IgxProcessBarTextTemplateDirective","IgxProgressBarGradientDirective","DIR_DOCUMENT","DIR_DOCUMENT_FACTORY","inject","IgxTextAlign","IgxProgressType","IgxDirectionality","bodyDir","htmlDir","extractedDir","_dir","BaseProgress","requestAnimationId","_valueInPercent","_max","_animate","runAnimation","updateProgressSmoothly","passedValue","convertInPercentage","progressValue","valueInPercent","updateProgress","isInLimitRange","updateProgressDirectly","directionFlow","comparator","isExceedingUpperLimit","isExceedingLowerLimit","NEXT_LINEAR_ID","NEXT_CIRCULAR_ID","NEXT_GRADIENT_ID","IgxLinearProgressBarComponent","valueMin","striped","textAlign","textVisibility","textTop","onProgressChanged","maxNum","_step","valueInRange","getValueInProperRange","changedValues","IgxCircularProgressBarComponent","_directionality","STROKE_OPACITY_DVIDER","STROKE_OPACITY_ADDITION","gradientId","_circleRadius","_circumference","PI","valueInProperRange","_svgCircle","FRAMES","strokeDashoffset","getProgress","strokeOpacity","percentage","rtl","IgxProgressBarModule","IgxSelectItemComponent","_text","SelectPositioningStrategy","_selectDefaultSettings","global_yOffset","global_xOffset","global_styles","selectFit","styles","scrollContainerRect","itemElement","getInteractionItemElement","itemRect","calculateStyles","calculateScrollAmount","calculateYoffset","calculateXoffset","itemElementRect","footer","lastItemFitSize","itemTextToInputTextDiff","firstItemFitSize","contentElementNewWidth","inputElementStyles","itemElementStyles","numericInputFontSize","fontSize","numericItemFontSize","inputTextToInputTop","itemTextToItemTop","negateInputPaddings","paddingTop","paddingBottom","numericLeftPadding","paddingLeft","numericTextIndent","textIndent","itemTextPadding","itemTextIndent","getFirstItemElement","IgxSelectToggleIconDirective","IgxSelectHeaderDirective","IgxSelectFooterDirective","IgxSelectComponent","itemText","mousedownHandler","IgxSelectComponent_1","IgxSelectItemNavigationDirective","inputStream","clearStream$","Subscription","EMPTY","captureKey","timer","activateItemByText","activeItemIndex","nextItem","IgxSelectGroupComponent","IgxSelectModule","WatchChanges","propDesc","privateKey","originalSetter","_init","SimpleChange","WatchColumnChanges","rowIslandAPI","rowIsland","updateColumnList","repaint","_","IgxRowIslandAPIService","childRowIslands","childGrids","unset","oldId","registerChildRowIsland","unsetChildRowIsland","getChildRowIsland","rowIslandKey","registerChildGrid","parentRowID","getChildGrids","inDepth","allChildren","getChildGridByID","IgxRow","IgxCell","inlineEditorTemplate","isFinite","cellID","IgxGridCRUDService","createCell","createRow","sameRow","sameCell","columnID","beginRowEdit","onRowEditEnter","endRowEdit","openRowOverlay","begin","newCell","onCellEditEnter","rowEditing","isInEditMode","IgxGridSelectionService","dragMode","keyboardState","pointerState","temp","_ranges","rowSelection","initPointerState","initKeyboardState","addKeyboardRange","parse","isCellSelectable","generateRange","primaryButton","ctrl","addToRange","isActiveNode","isInMap","isActive","hasColumnLayouts","isActiveLayout","columnVisibleIndex","addRangeMeta","removeRangeMeta","rowStart","rowEnd","columnStart","columnEnd","keyboardStateOnKeydown","shiftTab","keyboardStateOnFocus","emitter","dom","kbState","isChromium","_moveSelectionChrome","dragSelect","pointerDown","pointerDownShiftKey","clearTextSelection","mergeMap","source","entries","pair","newValue_1","pointerEnter","pointerUp","restoreTextSelection","clearAcriveEl","getSelection","rangeCount","_selectionRange","getRangeAt","removeAllRanges","addRange","createRange","Range","selectNode","getSelectedRows","clearRowSelection","removedRec","isFilteringApplied","getRowIDs","allData","rID","emitRowSelectionEvent","selectAllRows","addedRows","clearPrevSelection","isRowSelectable","isRowDeleted","isMultiRowSelectionEnabled","selectRowsWithNoEvent","rowIDs","allRowsSelected","deselectRowsWithNoEvent","selectMultipleRows","gridData","lastRowID","currIndex","getRowDataById","rows","areAllRowSelected","dataItemsID","hasSomeRowSelected","currSelection","areEqualCollections","onRowSelectionChange","clearAllSelectedRows","filteredSortedData","rData","vendor","FilterMode","GridSummaryPosition","GridSummaryCalculationMode","GridKeydownTargetType","GridSelectionMode","ColumnDisplayOrder","HammerGesturesManager","doc","hammerOptions","_hammerManagers","platformBrowser","inputClass","TouchInput","recognizers","Pan","Swipe","Tap","taps","supports","eventHandler","mc","getManagerForElement","addManagerForElement","handler","eventObj","on","off","addGlobalEventListener","getGlobalEventTarget","getDOM","setManagerOption","manager","removeManagerForElement","MoveDirection","IgxGridCellComponent","touchManager","_vIndex","highlightClass","activeHighlightClass","lastPinned","editMode","isInCompositionMode","_cellSelection","multiple","pointerdown","selectionNode","ctrlKey","pointerenter","pointerup","setStartNavigationCell","colStart","onRangeSelection","_updateCRUDStatus","onDoubleClick","editable","deleted","cellTemplate","defaultCellTemplate","gridID","columnLayoutChild","setEditMode","addPointerListeners","removePointerListeners","highlightText","gridRowSpan","gridColumnSpan","colEnd","rowTransaction","rowCurrentState","inEditMode","_highlight","lastSearchInfo","cellSelectionMode","compositionStartHandler","compositionEndHandler","cssProps","crud","editableCell","isCellSelected","update","onCellClick","onContextMenu","shouldEmitSelection","handleAlt","handleTab","performShiftTabKey","performTab","handleEnd","goToLastCell","handleHome","goToFirstCell","keydownArgs","targetType","onGridKeydown","navigateTop","navigateUp","navigateBottom","navigateDown","onKeydownEnterEditMode","onKeydownExitEditMode","onCellEditCancel","searchable","calculateSizeToFit","changeDetection","ChangeDetectionStrategy","OnPush","IgxRowDirective","dragging","defaultCssClass","_rowData","resolveClasses","groupingExpressions","pinnedColumns","unpinnedColumns","showRowSelectors","rowDraggable","editRowState","onRowSelectorClick","indexClass","evenRowCSS","oddRowCSS","selectedClass","editClass","dirtyClass","deletedClass","mrlClass","dragClass","defaultDragIndicatorCssClass","rowDragging","Boolean","IgxSummaryOperand","operate","summaryResult","IgxNumberSummaryOperand","average","IgxDateSummaryOperand","latest","earliest","IgxFilterCellTemplateDirective","IgxCellTemplateDirective","IgxCellHeaderTemplateDirective","IgxCellFooterTemplateDirective","IgxCellEditorTemplateDirective","IgxCollapsibleIndicatorTemplateDirective","IgxColumnComponent","sortable","groupable","resizable","hiddenChange","expandedChange","collapsibleChange","visibleWhenCollapsedChange","disableHiding","disablePinning","movable","widthChange","_calcWidth","headerClasses","headerGroupClasses","cellStyles","sortingIgnoreCase","pinnedChange","collapsible","_pinned","_summaries","_filters","_sortStrategy","_hidden","_disablePinning","_defaultMinWidth","_hasSummary","_collapsible","_expanded","hasTransactions","isPrimaryColumn","_editable","resetSummaryHeight","filteringService","refreshExpressions","widthSetByUser","_width","defaultWidth","calcPixelWidth","cacheCalcWidth","getCalcWidth","defaultMinWidth","minVal","pin","unpin","_unpinnedIndex","removeSummariesCachePerColumn","_summaryPipeTrigger","_groupingComparer","funcRef","_bodyTemplate","_headerTemplate","_inlineEditorTemplate","_filterCellTemplate","columnGroup","vIndex","childrenVisibleIndexes","indexInCollection","columnLayout","ptr","lvl","_visibleWhenCollapsed","setExpandCollapseState","resetCaches","headTemplate","editorTemplate","filterCellTemplateDirective","filters","getGridTemplate","isRow","rowsCount","multiRowLayoutRowSize","getColumnSizesString","getInitialChildColumnSizes","columnSizes","newWidthSet","newSpanSmaller","colSpan","bothWidthsSet","bothWidthsNotSet","ref","columnWidthSetByUser","calcWidth","getFilledChildColumnSizes","getPossibleColumnWidth","getResizableColUnderEnd","spanUsed","columnSized","targets","targetsSquashed","topLevelParent","pinnable","_unpinnedColumns","_pinnedColumns","targetColumn","isPinned","onColumnPinning","_moveColumns","reinitPinStates","populateVisibleIndexes","headerCellList","filterCellList","filterCell","headerGroupsList","headerGroup","autosize","getLargestCellWidth","reflow","largest","cellsContentWidths_1","cellStyle","cellPadding","paddingRight","borderRightWidth","headerCell","headerStyle","headerPadding","largestCell","getCellWidth","colWidth","isPercentageWidth","cellWidth","featureColumnsWidth","visibleWhenCollapsed","checkCollapsibleState","IgxGridBodyDirective","RowEditPositionStrategy","isTop","isTopInitialPosition","container","ItemPropertyValueChangedDirective","valueChanged","_propName","_object","onValueChanged","ColumnChooserItemBaseDirective","indentation","IgxColumnHidingItemDirective","CustomFilteringStrategy","ColumnChooserBaseDirective","disableFilter","columnsAreaMaxHeight","_currentColumns","_gridColumns","_rawColumns","_columnDisplayOrder","DisplayOrder","_filterCriteria","_filterColumnsPrompt","_title","createColumnItems","filterCriteria","clearFiltering","orderColumns","createColumnItem","Alphabetical","localeCompare","createFilteringExpression","IgxColumnHidingComponent","showAllText","hideAllText","onColumnVisibilityChanged","columnItems","hiddenColumnsCount","hidableColumns","onVisibilityChanged","showAllColumns","collection_1","collection_1_1","hideAllColumns","collection_2","collection_2_1","IgxColumnPinningItemDirective","IgxColumnPinningComponent","checkboxValueChange","columnItem","IgxGridToolbarComponent","excelExporter","csvExporter","gridHeight","calcHeight","exportExcel","exportCsv","getTitle","toolbarTitle","getExportText","exportText","getExportExcelText","exportExcelText","getExportCsvText","exportCsvText","exportClicked","exportButton","outletDirective","exportDropdown","exportToExcelClicked","performExport","exportToCsvClicked","exp","exportType","exporter","onToolbarExporting","toggleColumnHidingUI","columnHidingButton","columnHidingDropdown","toggleColumnPinningUI","columnPinningButton","columnPinningDropdown","showAdvancedFilteringUI","openAdvancedFilteringDialog","toolbar","toolbarCustomContentTemplate","IgxRowEditTemplateDirective","IgxRowEditTextDirective","IgxRowEditActionsDirective","IgxRowEditTabStopDirective","api","activateCell","currentCellIndex","rowEditTabs","move","handleEscape","activeNode","getCellElementByVisibleIndex","lastEditableColumnIndex","firstEditableColumnIndex","isColumnFullyVisible","performHorizontalScrollToCell","IgxGridGroupByRowComponent","gridSelection","paddingIndentationCssClass","isExpandedGroup","grRowExpr","groupRowIndex","toggleGroup","rowExpandedIndicatorTemplate","defaultGroupByExpandedTemplate","rowCollapsedIndicatorTemplate","defaultGroupByCollapsedTemplate","isKeySupportedInGroupRow","handleTabKey","getColumnByName","dataView","rootSummariesEnabled","orderedColumns","gridOrderedColumns","lastCol","alt","IgxListPanState","IgxGridNavigationService","parentVirtDir","headerContainer","horizontalScroll","rowComp","summariesRowList","virtDirRow","getColumnUnpinnedIndex","isColumnRightEdgeVisible","isColumnLeftEdgeVisible","forOfDir","isColumnPinned","displayContainerWidth","displayContainerScrollLeft","isRowInEditMode","findNextEditable","gridColumns","RIGHT","isSummary","cellSelector","getCellSelector","selectedNode","isSummaryRow","getFocusableGrid","previousElementSibling","movePreviousEditable","currentColumnVisibleIndex","prevEditableColumnIndex","focusEditableTarget","moveNextEditable","nextEditableColumnIndex","rowElement","firstCell","allCells","findFirstDataRowIndex","verticalScroll","isGroupByRecord","isDetailRecord","findLastDataRowIndex","targetScr","currentRowIndex","containerTopOffset","verticalDisplayContainerElement","offsetTop","tag","getRowByIndex","focusPreviousElement","currentRowEl","focusElem","containerHeight","targetEndTopOffset","nextIndex_1","getNextRowByIndex","focusNextElement","getAllRows","goToLastBodyElement","isRowTarget","nextIsDetailRow","isLastColumn","rowEl","moveFocusToFilterCell","toStart","isFilterRowVisible","focusFilterRowCloseButton","unpinnedFilterableColumns","focusFilterCellChip","scrollToFilterCell","navigatePrevFilterCell","prevFilterableIndex","firstFiltarableCol","getFirstPinnedFilterableColumn","prevColumn","prevVisibleIndex","navigateFirstCellIfPossible","navigateNextFilterCell","nextFilterableIndex","nextColumn","nextVisibleIndex","getLastPinnedFilterableColumn","pinnedFilterableColums","prevIsDetailRow","target_1","applyFocusFunc_1","performVerticalScrollToCell","allowFiltering","filterMode","quickFilter","shouldPerformVerticalScroll","targetRowIndex","targetRow","visibleColIndex","unpinnedIndex","cellElement","getRowSelector","gridTag","toLocaleLowerCase","tbody","getClosestElemByTag","nextIndex","hasDetails","sourceElem","targetTag","icons","IgxGridCellStyleClassesPipe","callbackOrValue","IgxGridCellStylesPipe","css","IgxGridNotGroupedPipe","IgxGridTopLevelColumns","IgxGridFilterConditionPipe","IgxGridTransactionPipe","IgxGridPaginatorOptionsPipe","IgxHasVisibleColumnsPipe","hasVisibleColumns","IgxDatePipeComponent","DEFAULT_DATE_FORMAT","LOCALE_ID","DatePipe","IgxDecimalPipeComponent","DecimalPipe","ExpressionUI","IgxFilteringService","columnsWithComplexFilter","areEventsSubscribed","isFiltering","columnToExpressionsMap","columnStartIndex","_filterIconsRegistered","filteredColumn","selectedExpression","columnToFocus","shouldFocusNext","columnToMoreIconHidden","_datePipe","subscribeToEvents","onColumnResized","updateFilteringCell","updateFilterCellArea","onColumnMovingEnd","filteringRow","filterInternal","createSimpleFilteringTree","clearFilter","conditionOrExpressionTree","expressionsTreeForColumn","expressionForColumn","onFilteringDone","getExpressions","filterGlobal","registerSVGIcons","icons_1","icons_1_1","columnId","expressionUIs","generateExpressionsList","isFilteringTreeComplex","removeExpression","indexToRemove","expressionsList","beforeOperator","afterOperator","expressionUIList","currAndBranch","currExpressionUI","isFilterComplex","isComplex","getOperatorAsString","getChipLabel","datePipe","focusFirst","focusChip","closeButton","currentColumnRight","currentColumnLeft","getChildAndOperatorsCount","expressionsUIs","generateExpressionsListRecursive","exprUI","prevExprUI","isFilteringExpressionsTreeEmpty","exprTree","IgxColumnResizingService","resizeCursor","showResizer","getVisibleContentHeight","columnHeightMultiplier","actualMinWidth","minWidth","actualWidth","MAX_SAFE_INTEGER","autosizeColumnOnDblClick","currentColWidth","prevWidth","newWidth","resizeColumn","startResizePos","colMinWidth","getColMinWidth","colMaxWidth","getColMaxWidth","resizeColumnLayoutFor","isColumnResizing","pinnedMaxWidth","relativeColumns","combinedSpan","columnsToResize","updatedDiff","updatedCombinedSpan","setMinMaxCols","newCombinedSpan","newColsToResize","currentResizeWidth","resizeScaled","IgxListBaseDirective","DragScrollDirection","IgxEmptyListTemplateDirective","IgxDataLoadingTemplateDirective","IgxListItemLeftPanningTemplateDirective","IgxListItemRightPanningTemplateDirective","IgxListItemComponent","list","_panState","lastPanDir","onItemClicked","panStart","isTrue","allowLeftPanning","allowRightPanning","panMove","isPanningToLeft","showLeftPanTemplate","setContentElementLeft","maxLeft","showRightPanTemplate","maxRight","panEnd","relativeOffset","widthTriggeringGrip","panEndTriggeringThreshold","oldPanState","hideLeftAndRightPanTemplates","keepItem","onLeftPan","onRightPan","args2","oldState","newState","onPanStateChange","setLeftAndRightTemplatesVisibility","leftVisibility","rightVisibility","leftPanningTemplateElement","rightPanningTemplateElement","candidates","getElementsByClassName","IgxListThumbnailDirective","IgxListActionDirective","IgxListLineDirective","IgxListLineTitleDirective","IgxListLineSubTitleDirective","IgxListComponent","isLoading","isListEmpty","dataLoadingTemplate","defaultDataLoadingTemplate","emptyListTemplate","defaultEmptyListTemplate","IgxListComponent_1","IgxListModule","IgxExcelStyleLoadingValuesTemplateDirective","IgxExcelStyleSearchComponent","_isLoading","excelStyleLoadingValuesTemplateDirective","defaultExcelStyleLoadingValuesTemplate","refreshSize","clearInput","onCheckboxChange","itemSize","IgxExcelStyleDefaultExpressionComponent","onExpressionRemoved","onLogicOperatorChanged","inputValuesDirective","expressionUI","inputGroupConditions","inputValuesElement","isConditionSelected","conditionName","getConditionName","translateCondition","getInputWidth","getCondition","getIconName","conditions","toggleCustomDialogDropDown","dropdownConditions","onConditionsChanged","onValuesInput","onLogicOperatorButtonClicked","buttonIndex","logicOperatorButtonGroup","selectedButtons","onLogicOperatorKeyDown","onRemoveButtonClick","onInputConditionsKeyDown","IgxExcelStyleDateExpressionComponent","IgxExcelStyleCustomDialogComponent","_customDialogPositionSettings","_customDialogOverlaySettings","dateExpressionTemplate","defaultExpressionTemplate","onCustomDialogOpening","selectedOperator","createInitialExpressionUIElement","onCustomDialogOpened","expressionComponents","esf","overlayComponentId","rootGrid","onClearButtonClick","closeDialog","onApplyButtonClick","onAddButtonClick","markChildrenForCheck","scrollToBottom","onApplyButtonKeyDown","createCondition","expressionDateComponents","firstExprUI","secondExprUI","expressionsContainer","IgxExcelStyleSortingComponent","sortingExpressionsChange","updateSelectedButtons","sortIndex","sortButtonGroup","sortDirection","onSortButtonClicked","isColumnGrouped","clearSort","FilterListItem","isSpecial","IgxExcelStyleSortingTemplateDirective","IgxExcelStyleMovingTemplateDirective","IgxExcelStyleHidingTemplateDirective","IgxExcelStylePinningTemplateDirective","IgxGridExcelStyleFilteringComponent","shouldOpenSubMenu","containsNullOrEmpty","selectAllSelected","selectAllIndeterminate","filterValues","listData","uniqueValues","_subMenuPositionSettings","_subMenuOverlaySettings","inline","_column","_columnPinning","_columnVisibilityChanged","_filteringChanged","_densityChanged","isColumnPinnable","filteringExpressionsTreeChange","minHeight","populateColumnData","clearFilterClass","pinClass","excelStyleSearch","onColumnMoving","closeDropdown","onPin","onHideToggle","onTextFilterClick","gridRect","dropdownRect","mainDropdown","x1","subMenu","onTextFilterKeyDown","onSubMenuClosed","onSubMenuSelection","customDialog","areExpressionsSelectable","areExpressionsValuesInTheList","firstValue","uniqueColumnValuesStrategy","renderColumnValuesRemotely","renderColumnValuesFromData","getColumnFilterExpressionsTree","colVals","columnValues","toDateString","renderValues","columnField","generateUniqueValues","generateFilterValues","generateListData","isDateColumn","shouldUpdateSelection","addBooleanItems","addItems","sortData","addBlanksItem","addSelectAllItem","gridExpressionsTree","filterListItem","selectAll","blanks","valueA","valueB","selectAllFilterItems","excelStyleSortingTemplateDirective","defaultExcelStyleSortingTemplate","excelStyleMovingTemplateDirective","defaultExcelStyleMovingTemplate","excelStylePinningTemplateDirective","defaultExcelStylePinningTemplate","excelStyleHidingTemplateDirective","defaultExcelStyleHidingTemplate","applyFilter","filterTree","IgxGridExcelStyleFilteringComponent_1","filterOptimizationThreshold","blanksItemIndex","blanksItem","onClearFilterKeyDown","showCustomFilterItem","ExcelStylePositionStrategy","IgxGridHeaderComponent","colResizingService","_filteringService","hostRole","defaultClasses","igx-grid__th","asc","ascending","descending","igx-grid__th--number","igx-grid__th--sortable","igx-grid__th--filtrable","igx-grid__th--sorted","klass","hasColumnGroups","maxLevelHeaderDepth","defaultRowHeight","_baseFontSize","initFilteringSettings","getSortDirection","_componentOverlayId","triggerSort","onFilteringIconClick","toggleFilterDropdown","onSortingIconClick","sortDir","filterIconTarget","filterIconClassName","_filterMenuOverlaySettings","_filterMenuPositionSettings","onOverlayOpening","onOverlayClosed","IgxGridFilteringCellComponent","currentTemplate","moreFiltersCount","onTabKeyDown","isLastElementFocused","onShiftTabKeyDown","isFirstElementFocused","isChipVisible","updateVisibleFilters","filterCellTemplate","complexFilter","defaultFilter","emptyFilter","onChipClicked","isColumnRightVisible","isColumnLeftVisible","onChipRemoved","filteringIndicatorClass","isMoreIconHidden","focusFirstElement","focusElement","ghostChip","complexChip","ex","moreIcon","chipsArea","areaWidth","viewWidth","chipsAreaElements","visibleChipsCount","moreIconWidth","areAllColumnsInView","IgxGridHeaderGroupComponent","getHeaderGroupWidth","igx-grid__th--pinned","igx-grid__th--pinned-last","isLastPinned","igx-grid__drag-col-header","isHeaderDragged","igx-grid__th--filtering","isFiltered","draggedColumn","IgxGridHeaderGroupComponent_1","IgxGridSummaryService","summaryCacheMap","rootSummaryID","summaryHeight","maxSummariesLenght","retriggerRootPipe","deleteOperation","recalculateSummaries","isGroupedColumn","deleteSummaryCache","isTreeGrid","removeAllTreeGridSummaries","isHierarchicalGrid","getSummaryID","cache","calcMaxSummaryHeight","maxSummaryLength","hasSummary","getCurrentSummaryColumn","defaultSummaryHeight","calculateSummaries","rowSummaries","updateSummaryCache","groupingArgs","compareGroupingExpressions","filteringApplied","summaryIDs","removeChildRowSummaries","newExpressions","removedCols","ungroupedColumns","newExpr","colName","IgxSummaryCellComponent","firstCellIndentation","isKeySupportedInCell","getRowElementByIndex","sr","dataRowIndex","translateSummary","summary","IgxSummaryRowComponent","getColumnSummaries","DropPosition","IgxGridDragSelectDirective","onDragStop","onDragScroll","end$","lastDirection","startDragSelection","activeDrag","_measureDimensions","_sub","_interval$","stopDragSelection","_activeDrag","clientRect","trunc","TOPLEFT","TOPRIGHT","BOTTOMLEFT","BOTTOMRIGHT","TOP","BOTTOM","IgxColumnResizerDirective","restrictHResizeMin","MIN_SAFE_INTEGER","restrictHResizeMax","resizeEnd","resizeStart","resize","_left","onMousemove","onMouseup","onMousedown","IgxGridColumnResizerComponent","IgxGridFilteringRowComponent","_conditionsOverlaySettings","_operatorsOverlaySettings","chipAreaScrollOffset","isKeyPressed","isComposing","_cancelChipClick","resetExpression","addExpression","showHideArrowButtons","onTabKeydown","onEscKeydown","defaultDateUI","defaultFilterUI","onPrefixKeyDown","dropDownConditions","toggleConditionsDropDown","inputGroupPrefix","stopImmediatePropagation","onInputKeyDown","commitInput","onInputKeyUp","onCompositionStart","onCompositionEnd","datePickerClose","indexToDeselect","scrollChipsWhenAddingExpression","onClearKeyDown","onClearClick","onCommitKeyDown","onCommitClick","onInputGroupFocusout","focusedElement","onDateSelected","toggleOperatorsDropDown","dropDownOperators","unaryConditionChangedCallback","conditionChangedCallback","onChipPointerdown","onChipClick","toggleChip","onLeftArrowKeyDown","scrollChipsOnRemove","scrollChipsOnArrowPress","arrowPosition","chipAraeChildren","containerRect","containerWidth","chipsAreaWidth","showArrows","isColumnFiltered","containerRectRight","lastChipRectRight","resetChipsArea","dif","NavigationDirection","IgxColumnMovingService","_icon","IgxColumnMovingDragDirective","cms","_ghostClass","ghostImgIconClass","ghostImgIconGroupClass","_unsubscribe","cancelDrop","isColumnMoving","onColumnMovingStart","subscription$","flexBasis","createTextNode","childNodes","IgxGroupByRowTemplateDirective","IgxGridDetailTemplateDirective","IgxRowExpandedIndicatorDirective","IgxRowCollapsedIndicatorDirective","IgxHeaderExpandIndicatorDirective","IgxHeaderCollapseIndicatorDirective","IgxGroupAreaDropDirective","hovered","columnBelongsToGrid","isGrouped","innerText","column_1","closestParentByAttr","attr","closestGridID","ExpressionItem","ExpressionGroupItem","ExpressionOperandItem","IgxAdvancedFilteringDialogComponent","selectedExpressions","selectedGroups","columnSelectOverlaySettings","conditionSelectOverlaySettings","_dblClickDelay","_preventChipClick","_editingInputsContainer","scrollElementIntoView","_addModeContainer","_currentGroupButtonsContainer","overlayOutlet","_selectedColumn","selectedCondition","_grid","_filteringChange","advancedFilteringExpressionsTreeChange","dragArgs","_overlayComponentId","contextMenuToggle","calculateContextMenuTarget","onDragMove","addCondition","afterExpression","cancelOperandAdd","operandItem","enterExpressionEdit","addAndGroup","addGroup","addOrGroup","endGroup","currentGroup","commitOperandEdit","editedExpression","selectedColumn","addModeExpression","inAddMode","cancelOperandEdit","deleteItem","operandCanBeCommitted","exitOperandEdit","isExpressionGroup","rootGroup","createExpressionGroupItem","filteringExpr","exprCopy","createExpressionsTreeFromGroupItem","subTree","onChipRemove","expressionItem","_clickTimer","onToggleExpression","onChipDblClick","columnSelect","conditionSelect","searchValueInput","toggleContextMenu","enterExpressionAdd","toggleExpression","deselectParentRecursive","contextMenuClosed","contextualGroup","findSingleSelectedGroup","filteringLogics","op","isInsideGroup","createAndGroup","createGroup","createOrGroup","chips","minIndex","MAX_VALUE","firstExpression","deleteFilters","onGroupClick","toggleGroupRecursive","operandExpression","minTop","targetOffset","ungroup","selectedGroup","deleteGroup","selectFilteringLogic","getConditionFriendlyName","onExpressionsScrolled","invokeClick","onOutletPointerDown","getConditionList","setAddButtonFocus","addRootAndGroupButton","addConditionButton","applyChanges","cancelChanges","onChipSelectionEnd","IgxRowSelectorDirective","templateRef","IgxHeadSelectorDirective","IgxGridToolbarCustomContentDirective","IgxColumnGroupComponent","QueryList","_collapseIndicatorTemplate","collapseIndicatorTemplate","isChildrenWidthInPercent","IgxColumnGroupComponent_1","IgxRowDragDirective","_rowDragStarted","transitionEndEvent","endDragging","onRowDragStart","onRowDragEnd","dropArea","expander","expanderWidth","rowRect","ghostCells","IgxDragIndicatorIconDirective","IgxRowDragGhostDirective","IgxRowDragModule","IgxGridTransaction","IgxGridBaseDirective","differs","viewRef","_cdrRequests","_cdrRequestRepaint","_emptyGridMessage","_emptyFilteredGridMessage","_destroyed","overlayIDs","_advancedFilteringPositionSettings","_advancedFilteringOverlaySettings","autoGenerate","pageChange","perPageChange","columnHidingTitle","columnPinningTitle","onRowEditCancel","onColumnInit","onSortingDone","onPagingDone","onRowAdded","onGridCopy","expansionStatesChange","tmpOutlets","headerExpandIndicatorTemplate","headerCollapseIndicatorTemplate","columnsWithNoSetWidths","_showToolbar","_exportExcel","_exportCsv","_toolbarTitle","_exportText","_exportExcelText","_exportCsvText","_rowEditable","_filteredSortedData","toolbarHtml","clipboardOptions","copyHeaders","copyFormatters","separator","chipsGoupingExpressions","activeMatchIndex","matchInfoCache","_perPage","_page","_paging","_hideRowSelectors","_rowDrag","_filteringPipeTrigger","_columns","_filteringExpressionsTree","_sortingExpressions","_maxLevelHeaderDepth","_columnHiding","_allowFiltering","_allowAdvancedFiltering","_filterMode","observer","resizeNotify","_hiddenColumnsText","_pinnedColumnsText","_height","_horizontalForOfs","_multiRowLayoutRowSize","_expansionStates","_defaultExpandState","_totalWidth","_pinnedVisible","_unpinnedVisible","_pinnedWidth","_unpinnedWidth","_visibleColumns","_columnGroups","_autoGeneratedCols","_headerFeaturesWidth","_defaultTargetRecordNumber","_summaryPosition","_summaryCalculationMode","rootAndChildLevels","_cellSelectionMode","_rowSelectionMode","rowEditPositioningStrategy","rowEditSettings","rowOutletDirective","wheelHandler","changeRowEditingOverlayStateOnScroll","hideOverlays","horizontalScrollHandler","vfor","keydownHandler","isNavigationKey","isScroll","compareDocumentPosition","DOCUMENT_POSITION_CONTAINS","tfoot","rowEditingWheelHandler","_scrollWidth","Regular","_advancedFilteringExpressionsTree","Advanced","navigateTo","refreshGridState","_hostWidth","evaluateLoadingState","calcGridHeadRow","_filteringStrategy","_sortingStrategy","headerGroups","_summaryRowList","sumList","_rowList","rList","_dataRowList","toolbarCustomContentTemplates","headSelectorsTemplates","rowSelectorsTemplates","_outletDirective","rowEditingOutletDirective","rowEditCustom","defaultRowEditTemplate","_customDragIndicatorIconTemplate","dragIndicatorIconTemplates","rowEditTabsCUSTOM","rowEditTabsDEFAULT","_currentRowState","getExportExcel","getExportCsv","selectionMode","overlayID","_setupServices","_setupListeners","_advancedFilteringOverlayId","$event","isPercentHeight","getDataBasedBodyHeight","calculateGridHeight","calculateGridSizes","columnListDiffer","shouldGenerate","getScrollWidth","setupColumns","autogenerateColumns","initColumns","onColumnsChanged","resetColumnsCaches","resetForOfCache","firstVirtRow","resetColumnCollections","resetCachedWidths","recalcFeatureWidth","_setupRowObservers","elementFilter","isDefined","extractForOfs","rowListObserver","summaryRowObserver","resetHorizontalForOfs","_zoneBegoneListeners","initPinning","reattach","vertScrDC","displayContainer","resetNotifyChanges","getDragGhostCustomTemplate","dragGhostCustomTemplates","tmplOutlet","dataLoading","toggleColumnVisibility","expandAll","collapseAll","expandRow","collapseRow","toggleRow","paginatorClassName","getPinnedWidth","getUnpinnedWidth","unpinnedWidth","rowSelectArea","headerSelectorContainer","rowDragArea","headerDragContainer","groupableArea","headerGroupContainer","defaultHeaderGroupMinWidth","getRowByKey","keyValue","getCellByColumn","getCellByKey","pagingState","nextPage","isLastPage","previousPage","isFirstPage","hideRowSelectors","to","fromIndex","toIndex","BeforeDropTarget","AfterDropTarget","newList","_resetColumnList","_reorderColumns","columnCollection","dropIndex","_moveChildColumns","buffer","moveColumn","dropTarget","fi","ti","paginate","addRow","deleteRow","updateCell","updateRow","enableSummaries","rest","_multipleSummaries","disableSummaries","_disableMultipleSummaries","pinColumn","unpinColumn","findNext","findPrev","updateActiveInfo","rebuildMatchCache","activeInfo_1","clearSearch","summaryCalculationMode","childLevelsOnly","_hasVisibleColumns","dataLength","_derivePossibleWidth","MINIMUM_COLUMN_WIDTH","columnWidthCombined","allItems","theadRow","summariesHeight","_calculateGridBodyHeight","getGroupAreaHeight","getToolbarHeight","toolbarHeight","showToolbar","getPagingHeight","pagingHeight","getFilterCellHeight","headerGroupNativeEl","filterCellNativeEl","actualTheadRow","footerHeight","renderedHeight","computed","_shouldAutoSize","bodyHeight","defaultTargetBodyHeight","checkContainerSizeChange","origHeight","hasVerticalSroll","scrollWidth","baseWidth","computedWidth","visibleChildColumns","visibleCols","colsPerBlock","block","combinedBlocksSize","blockCols","columnsWithSetWidths","columnsToSize","sumExistingWidths","curr","widthValue","calculateGridWidth","isPercentWidth","getColumnWidthSum","colSum","added_1","removed_1","hasScroll","repositionRowEditingOverlay","isStable","_applyWidthHostBinding","currentWidth","takeHidden","fc","fc_1","fc_1_1","hostWidth","summaryOperand","customSummary","resolveDataTypes","fields","generateDataFields","onlyTopLevel","layoutSize","columnLayoutColumns","onHeaderSelectorClick","selectedRows","selectRows","deselectRows","onlyFilterData","deselectAllRows","clearCellSelection","dragScroll","arg","columnToVisibleIndex","startNode","endNode","getSelectedRanges","extractDataFromSelection","formatters","selectedData","activeEl","selectionMap","tuple","cellSelection","single","detailsData","temp_1","temp_1_1","getSelectableColumnsAt","selectionMap_1","selectionMap_1_1","colLayout","getSelectedData","copyHandlerIE","copyHandler","ie11","setData","childGridsData","shouldScrollVertically","shouldScrollHorizontally","executeCallback","getNextCell","currRowIndex","curVisibleColIndex","isValidPosition","colIndexes","editCol","nextCellIndex","getNextDataRowIndex","getPreviousCell","prevCellIndex","getPrevDataRowIndex","summaryCell","summaryCells","hierarchicalRow","dataCell","prevRow","nextRow","trackColumnChanges","increment","rebuildCache","matchInfo","inCollection","delayScrolling","scrollDirective","scrollToHorizontally","scrollRow","goal","c1","c2","numberPipe","dataRow","occurenceIndex","searchIndex","_group","rowEditingOverlay","toggleRowEditingOverlay","shouldOverlayLoading","loadingOutlet","_loadingId","loadingOverlay","configureRowEditingOverlay","closeRowEditingOverlay","rowStyle","useOuter","parentRowOutletDirective","rowChanges","writeToData","endRowTransaction","gridOutletKeyboardHandler","activeCell","hasHorizontalScroll","_restoreVirtState","rowForOf","gridScrLeft","viewDetachHandler","focusedCell","cachedViewLoaded","tmplId_1","templateID","index_1","summaryRow","closeAdvancedFilteringDialog","advancedFilteringDialog","IgxGridAPIService","groupingState","arrange_sorting_expressions","groupBy_multiple","names_1","groupedCols","newSortingExpr","grExprIndex","grpExpandState","groupingExpansionState","grExpr","sortExprIndex","groupingState_1","groupingState_1_1","groupBy_get_expanded_for_group","grState","groupBy_is_row_in_group","rowInGroup","groupBy_toggle_group","expansionState","groupsExpanded","groupBy_fully_expand_group","groupExprA","groupExprB","get_groupBy_record_id","recordId","hierrarchy","groupByKey","IgxGridMRLNavigationService","startNavigationCell","applyNavigationCell","navDirection","oppositeDir","focusCellUpFromLayout","focusCellDownFromLayout","isParentColumnFullyVisible","scrollPos","getChildColumnScrollPositions","rightScroll","leftScroll","focusNextCellFromLayout","focusPrevCellFromLayout","nextElementColumn","_moveFocusToCell","nextCell_1","currCell","_focusCell","lastVisibleIndex_1","prevElementColumn","movePrev","isNonDataRow","_isDetailRecordAt","currentRowStart","currentColStart","parentIndex","upperElementColumn","layoutRowEnd_1","moveNext","currentRowEnd","currentColEnd","nextElement","layoutSize_1","prevElement","cellRowStart","layouts","lastLayout","lastLayoutChildren","indexInLayout","allBlocks","getColumnLayoutSelector","firstLayout","targetCol","getColunmByVisibleIndex","parentVIndex","childSizes","_isGroupRecordAt","getVerticalScrollPositions","topOffset","verticalDCTopOffset","rowBottom","isPrevious","rowTop","hScroll","cellElem","gridBoundingClientRect","diffTop","diffBottom","IgxGridComponent","_groupingExpressions","_groupingExpandState","_hideGroupedColumns","_dropAreaMessage","childDetailTemplates","groupingExpressionsChange","groupingExpansionStateChange","onGroupingDone","detailTemplate","_focusIn","oldExpressions","_gridAPI","_applyGrouping","groupedCols_1","ungroupedCols_1","groupingDoneArgs","groupedColumns","groupingDiffer","_setGroupColsVisibility","_groupsRowList","item1","item2","onFocusIn","getDetailsContext","preventContainerScroll","activeElem_1","currRow","nextCellTarget","nextRowTarget","trackChanges","detailsViewFocused","detailsKeyboardHandler","lastColIndex_1","gridDetailsTemplate","getRowTemplate","defaultGroupTemplate","summaryTemplate","detailTemplateContainer","recordTemplate","_groupRowTemplate","_groupAreaTemplate","checkIfNoColumnField","clearGrouping","_getStateForGroupRow","_toggleGroup","fullyExpandGroup","_fullyExpandGroup","toggleAllGroupRows","cachedData","tmlpOutlet","moveView","viewCreatedHandler","viewMovedHandler","emptyGridTemplate","emptyFilteredGridTemplate","emptyGridDefaultTemplate","loadingGridTemplate","loadingGridDefaultTemplate","chipsOrderChanged","newGrouping","KeyboardEvent","chipsMovingEnded","columnExpr","groupArea","groupingResult","groupByRecord","groupingMetadata","groupingFlatResult","dropAreaTemplate","defaultDropAreaTemplate","getGroupByChipTitle","defaultExpandedTemplate","defaultCollapsedTemplate","getColumnGroupable","excelStyleFilter","groupTemplate","hideGroupedColumns","_setupNavigationService","source_1","expression_1","expression_1_1","IgxGridComponent_1","IgxGridStateDirective","_options","advancedFiltering","serialize","feature","getGridFeature","getAllGridFeatures","stringifyCallback","setState","restoreGridState","restoreFeature","restoreColumns","restoreFiltering","restoreAdvancedFiltering","restoreSorting","restoreGroupBy","restorePaging","restoreRowSelection","restoreCellSelection","gridState","getColumns","getFiltering","getAdvancedFiltering","getSorting","getGroupBy","getPaging","getRowSelection","getCellSelection","sortByVisibleIndex","columnsState","newColumns","colState","colA","colB","createExpressionsTreeFromObject","advFilterTree","exprTreeObject","expr_1","generateFilteringCondition","IgxGridStateModule","IgxGridSharedModules","IgxColumnHidingModule","IgxGridFooterComponent","IgxPaginatorComponent","defaultSelectValues","pagerEnabled","pagerHidden","dropdownEnabled","dropdownHidden","selectLabel","_selectOptions","sortUniqueOptions","totalRecords","_totalRecords","newOption","paginatorSelectDisplayDensity","IgxPaginatorModule","IgxGridPipesModule","IgxExcelStyleColumnMovingComponent","findColumn","onMoveButtonClicked","moveDirection","IgxExcelStyleSearchFilterPipe","it","IgxGridExcelStyleFilteringModule","IgxGridSelectionModule","IgxResizeHandleDirective","_dblClick","DEBOUNCE_TIME","_onResizeAreaMouseDown","resizeLine","resizer","onMouseOver","IgxGridResizingModule","IgxColumnMovingDropDirective","_dropIndicator","_lastDropIndicator","_dragLeave","_dropIndicatorClass","_hVirtDir","hasMovableColumns","isDropTarget","_dropPos","lastElementChild","IgxColumnMovingModule","IgxSummaryDataPipe","IgxGridSummaryModule","IgxColumnPinningModule","IgxGridToolbarModule","IgxColumnLayoutComponent","borderWidth","hasLastPinnedChildColumn","headerStyles","orderedCols","rs","IgxColumnLayoutComponent_1","IgxGridColumnModule","IgxGridFilteringModule","IgxGridHeadersModule","IgxGridCommonModule","IgxGridSortingPipe","IgxGridGroupingPipe","IgxGridPagingPipe","IgxGridFilteringPipe","IgxGridRowComponent","_cells","cList","IgxGridRowComponent_1","IgxGridSummaryPipe","summaryPosition","summaryPipeTrigger","rootLevelOnly","addSummaryRows","gridId","recordsWithSummary","lastChildMap","maxSummaryHeight","g","skipAdd","groupRecords","groupRecord","groupRecordId","removeDeletedRecord","summaryRecord","lastChild","lastChildId","IgxGridDetailsPipe","addDetailRows","detailsObj","IgxGridExpandableCellComponent","onIndicatorFocus","indicatorWidth","indicator","indicatorStyle","indicatorMargin","marginRight","leftPadding","indentationDiv","indentationStyle","IgxGridModule","IgxTreeGridAPIService","flatData","processedRootRecords","loadChildrenOnDemand","hasChildrenKey","expand_path_to_record","expansionDepth","foreignKey","childData","treeGrid","flatDataWithCascadeOnDeleteAndTransactions","cascadeOnDelete","selectedChildren","get_selected_children","generateRowPath","selectedRowIDs","row_deleted_parent","IgxTreeGridNavigationService","IgxRowLoadingIndicatorTemplateDirective","IgxTreeGridComponent","processedRecords","_expansionDepth","Infinity","loadingRows","_rowLoadingIndicatorTemplate","loadChildrenOnRowExpansion","rowLoadingTemplate","parentID_1","addChildRows","parentID","children_1","children_1_1","parentData","pid","cloneMap","mapIn","mapCloned","mapObj","parentRecord","childKey","processedExpandedFlatData","nonColumnLayoutColumns","IgxTreeGridComponent_1","IgxTreeGridRowComponent","_treeRow","treeRow","IgxTreeGridRowComponent_1","IgxTreeGridHierarchizingPipe","hierarchicalRecords","treeGridRecordsMap","hierarchizeFlatData","hierarchizeRecursive","getRowID","missingParentRecords","setIndentationLevels","indentationLevel","IgxTreeGridFlatteningPipe","expandedLevels","getFlatDataRecursive","parentExpanded","updateNonProcessedRecordExpansion","IgxTreeGridSortingPipe","flattenTreeGridRecords","records_1","records_1_1","IgxTreeGridPagingPipe","IgxTreeGridTransactionPipe","aggregatedChanges","flatDataClone","hierarchicalDataClone","cloneHierarchicalArray","array_1","array_1_1","clonedItem","IgxTreeGridCellComponent","showIndicator","treeGridAPI","onLoadingDblClick","IgxTreeGridSummaryPipe","isExpanded","cellIndentation","childRecord","deletedRows","lenght","IgxTreeGridModule","IgxHierarchicalGridNavigationService","getChildContainer","getChildGridRowContainer","getChildGrid","childGridID","hgridAPI","getIsChildAtIndex","isChildGridRecord","prevElem","focusPrevChild","_navigateUpInChild","scrollGrid","focusPrev","nextElem","focusNextChild","_navigateDownInChild","focusNext","topIsVisible","getNextScrollable","targetIndex_1","scrTopPosition","verticalScrollTop","cellSelector_1","endIsVisible","getNextScrollableDown","targetIndex_2","rowIsVisible","gridTop","_getMaxTop","scrGrid","topGrid","summaryRows","hasSummaries","isLastDataRow","nextIsDataRow","isLastSummaryRow","virt","isNextChild","_navigateToNextParentRow","focusNextRow","childContainer","focusNextChildDOMElem","parentHasSummary","parentRowIndex","isLastRowInParent","nextIsSiblingChild","parentSummary","childGrid","targetGrid","prevSiblingChild","gridElem","dataRows","hasRows","performShiftTabIntoChild","selNode","getLastGridElem","lastRowIndex_1","closestChild","trContainer","focusPrevRow","prevChild","getSibling","prevChildRow","childRow","lastCellIndex","grids","gridElems","childLevel","childLayoutList","hg","parentRow","isScrolledToBottom","lastRowInChild","currGrid","parentContainer","childRowContainer","prevIsSiblingChild","getNextParentInfo","nonScrollable","parentInfo","nextParentGrid","nextParentElem","parentState","atLastChunk","_getMinBottom","cell_1","closestScrollableGrid","gridBottom","inView","canScroll","horizontalScrollGridToIndex","inChild","cellSelector_2","cell_2","rIndex_1","scrTop","callBackFunc","containerTop","IgxHierarchicalTransactionServiceFactory","useFactory","hierarchicalTransactionServiceFactory","IgxHierarchicalGridBaseDirective","transactionFactory","showExpandAll","createColumnsList","_createColumn","_createColGroupComponent","_createColComponent","factoryGroup","inputs","newChildren_1","newCol","factoryColumn","getGridsForIsland","rowIslandID","getChildGridsForRowIsland","IgxSliderType","SliderHandle","TickLabelsOrientation","TicksOrientation","IgxHierarchicalGridAPIService","currPath","pathElem","childrenForLayout","layoutMap","getParentRowId","inState","ri","IgxRowIslandComponent","childColumns","onLayoutChange","onGridCreated","initialChanges","layout_id","isInit","expandChildren","updateOnRender","pId","parentId","parentIsland","updateChildren","onRowIslandChange","nestedColumns","colsArray","topCols","cleanGridState","childGridTemplates","tmpl","IgxRowIslandComponent_1","IgxChildGridRowComponent","parentGrid","ch","_handleLayoutChanges","hGrid","setupEventEmitters","inputNames","outputs","matchingInputPropName","output","IgxHierarchicalGridComponent","hierarchicalStateChange","childLayoutKeys","highlightedRowID","h_id","hg_verticalScrollHandler","hg_horizontalScrollHandler","dragIndicatorIconTemplate","headerHierarchyExpander","recalcColSizes","allLayoutList","colLength","_clearSeletionHighlights","isRowHighlighted","isHierarchicalRecord","hasExpandedRecords","hasExpandableChildren","rootHeight","topDiff","toggleAll","hasExpandedEntry","relatedGrid","vScr","hScr","inDeph","onContainerScroll","IgxHierarchicalGridComponent_1","IgxHierarchicalGridCellComponent","helement","_rootGrid","_getRootGrid","_clearAllHighlights","currentElement","IgxHierarchicalRowComponent","deselect","expanderClick","expandable","defaultEmptyTemplate","IgxHierarchicalRowComponent_1","IgxGridHierarchicalPipe","childKeys","addHierarchy","IgxGridHierarchicalPagingPipe","IgxHierarchicalGridModule","IgxActionIconDirective","IgxNavbarComponent","titleId","IgxNavbarComponent_1","actionIconTemplate","actionButtonIcon","_triggerAction","IgxNavbarModule","IgxNavDrawerItemDirective","activeClass","IgxNavDrawerTemplateDirective","IgxNavDrawerMiniTemplateDirective","IgxNavigationDrawerComponent","_state","_touchManager","_isOpen","enableGestures","isOpenChange","pinThreshold","miniWidth","pinChange","opened","closing","_gesturesAttached","_widthCache","windowWidth","drawer","mini","styleDummy","_panning","_maxEdgeZone","checkPinThreshold","getWindowWidth","swipe","startPosition","center","distance","maxEdgeZone","panstart","_panStartWidth","getExpectedWidth","_panLimit","visibleWidth","newX","percent","hasAnimateWidth","setXSize","toPrecision","resetPan","toggleOpenedEvent","toggleClosedEvent","miniTemplate","contentTemplate","_miniTemplate","setDrawerWidth","_drawer","_overlay","_styleDummy","updateEdgeZone","ensureEvents","_resizeObserver","set_maxEdgeZone","innerWidth","screen","getDrawerWidth","IgxNavigationDrawerModule","IgxThumbFromTemplateDirective","IgxThumbToTemplateDirective","IgxTickLabelTemplateDirective","SwitchLabelPosition","IgxSliderThumbComponent","_elementRef","_isActive","_isPressed","onThumbValueChange","onChange","onHoverChange","thumbBounderies","thumbCenter","FROM","TO","onPan","mouseX","updateThumbValue","onPinterEnter","onPointerLeave","onFocusListener","showThumbIndicators","toggleThumbIndicators","hideThumbIndicators","calculateTrackUpdate","scaleX","thumbPositionX","stepDistanceCenter","stepDistance","stepToProceed","stepDist","continuous","deactiveState","IgxThumbLabelComponent","IgxTicksComponent","ticksClass","ticksOrientation","primaryTicks","tickLabelsOrientation","TopToBottom","BottomToTop","tickLabel","isPrimary","labels","secondaryTicks","hiddenTickLabels","primaryTickLabels","secondaryTickLabels","labelsViewEnabled","labelVal","ticksLength","toFixed","IgxTickLabelsPipe","IgxSliderComponent","_ngZone","_pMin","_pMax","_hasViewInit","_minValue","_maxValue","_continuous","_primaryTicks","_secondaryTicks","_labels","SLIDER","_destroyer$","_indicatorsDestroyer$","thumbs","labelRefs","slierClass","thumbLabelVisibilityDuration","showTicks","Horizontal","thumb","lowerValue","upperValue","updateTrack","valueToFraction","upperBound","lowerBound","calculateStepDistance","positionHandlersAndUpdateTrack","setTickInterval","normalizeByStep","disable","changeThumbFocusableState","updateUpperBoundAndMaxTravelZone","updateLowerBoundAndMinTravelZone","_lowerBound","_upperBound","isRange","lower","upper","Mirror","findClosestThumb","thumbTo","thumbFrom","showSliderIndicators","releasePointerCapture","hideSliderIndicators","toggleSliderIndicators","onPanListener","_lowerValue","_upperValue","sliderSetup","subscribeTo","thumbChanged","positionHandler","labelFrom","Observable","thumbType","swapThumb","hasValueChanged","emitValueChanged","onThumbChange","toggleThumb","closestHandle","generateTickMarks","thumbHandle","labelHandle","positionLeft","labelTo","fromOffset","offsetLeft","toOffset","xPointer","closestTo","trackRange","renderCallbackExecution","ticks","_indicatorsTimer","positions","pMin","pMax","positionGap","trackLeftIndention","trackRef","validateInitialValue","isSliderWithDifferentValue","isRangeWithOneDifferentValue","IgxSliderComponent_1","IgxSliderModule","IgxSnackbarComponent","autoHide","displayTime","animationStarted","triggerAction","snackbarAnimationStarted","fromState","snackbarAnimationDone","toOpacity","IgxSnackbarModule","ButtonStyle","IgxSwitchComponent","switch","_onSwitchChange","_onSwitchClick","IgxSwitchComponent_1","IGX_SWITCH_REQUIRED_VALIDATOR","IgxSwitchRequiredDirective","IgxSwitchModule","IgxTabTemplateDirective","IgxBottomNavComponent","onTabSelected","onTabDeselected","selectedIndex","_itemStyle","hasContentTabs","contentTabs","viewTabs","tabs","panels","_selectedPanelHandler","tab","_deselectTab","_deselectPanel","selectedTab","aTab","IgxTabComponent","IgxTabPanelComponent","_tabBar","_isSelected","relatedTab","changesCount","_tabTemplate","tabTemplate","ariaDisabled","ariaSelected","ariaControls","_changesCount","relatedPanel","customTabTemplate","customTabTemplateDir","defaultTabTemplate","IgxBottomNavModule","IgxTabsBase","scrollElement","scrollRight","performSelectionChange","newTab","transformContentAnimation","transformIndicatorAnimation","IgxTabItemBase","setSelectedInternal","IgxTabsGroupBase","IgxTabsType","IgxRightButtonStyleDirective","getRightButtonStyle","VISIBLE","HIDDEN","NOT_DISPLAYED","viewPortWidth","viewPort","itemsContainerChildrenCount","itemsContainer","itemsContainerWidth","lastTab","headerContainerWidth","IgxLeftButtonStyleDirective","getLeftButtonStyle","IgxTabItemTemplateDirective","IgxTabItemComponent","_tabs","_nativeTabItem","relatedGroup","isLeftArrow","tabsArray","IgxTabsGroupComponent","IgxToastPosition","IgxTabsComponent","selectedIndexChange","onTabItemDeselected","onTabItemSelected","_selectedIndex","iconLabelFoundInGroups","iconLabelFoundInTabs","FIXED","performSelection","hideIndicator","tabsContainer","_groupChanges$","resetSelectionOnCollectionChanged","currentTab","tabsArray_1","tabsArray_1_1","nativeTabItem","oldTab","selectedTabItem","performDeselection","oldTabRelatedGroup","newTabRelatedGroup","bringNewTabIntoView","tabNativeElement","viewPortOffsetWidth","contentOffset","contentsContainer","selectedIndicator","IgxTabsComponent_1","IgxTabsModule","IGX_TIME_PICKER_COMPONENT","IgxItemListDirective","timePicker","nextHour","nextMinute","nextSeconds","nextAmPm","prevHour","prevMinute","prevSeconds","prevAmPm","listName","minuteList","secondsList","ampmList","hourList","okButtonClick","cancelButtonClick","onHover","onPanMove","IgxHourItemDirective","itemList","isSelectedHour","selectedHour","scrollHourIntoView","IgxMinuteItemDirective","isSelectedMinute","selectedMinute","scrollMinuteIntoView","IgxSecondsItemDirective","isSelectedSeconds","selectedSeconds","scrollSecondsIntoView","IgxAmPmItemDirective","isSelectedAmPm","selectedAmPm","scrollAmPmIntoView","IgxTimePickerTemplateDirective","IgxTimePickerActionsDirective","TimeDisplayFormatPipe","hour","amPM","maskAmPM","sections","showHoursList","showMinutesList","showSecondsList","showAmPmList","prompt","regExp","hourVal","minutesVal","secondsVal","lastIndexOf","TimeInputFormatPipe","cleared","leadZeroHour","leadZeroMinutes","leadZeroSeconds","TimePickerHammerConfig","IgxTimePickerComponent","_hourItems","_minuteItems","_secondsItems","_ampmItems","isNotEmpty","displayFormat","inputFormat","_okButtonLabel","_cancelButtonLabel","_itemsDelta","_isHourListLoop","_isMinuteListLoop","_isSecondsListLoop","_hourView","_minuteView","_secondsView","_ampmView","_hoursPos","_minutesPos","_secondsPos","_amPmPos","_isValueValid","dispVal","_formatTime","_displayValue","displayValue","setThroughUI","formatValue","trimMask","determineCursorPos","_dialogOverlaySettings","_dateFromModel","_mask","secondsEntries","minuteEntries","hourEntries","timePickerTemplateDirective","defaultTimePickerTemplate","dropdownInputTemplate","_generateHours","_generateMinutes","_generateSeconds","_generateAmPm","spinOnEdit","_inputGroup","_onDropDownClosed","onKeydownSpace","onAltArrowDown","clearCursorPos","_scrollItemIntoView","isListLoop","viewType","itemIntoView","_itemToString","_nextItem","_prevItem","_viewToString","minute","itemsCount","formattedSeconds","formattedMinute","formattedHour","_updateHourView","_updateMinuteView","_updateSecondsView","_updateAmPmView","_addEmptyItems","hourItemsCount","itemsDelta","minuteItemsCount","secondsItemsCount","_getSelectedTime","_convertMinMaxValue","_isEntryValid","validH","validM","validS","re","validHourEntries","validMinuteEntries","validSecondsEntries","_updateEditableInput","_spinHours","currentVal","maxVal","hDelta","_spinMinutes","mDelta","_spinSeconds","sDelta","_initializeContainer","_prevSelectedHour","_prevSelectedMinute","_prevSelectedSeconds","_prevSelectedAmPm","hourIntoView","minuteIntoView","secondsIntoView","ampmIntoView","time","hoursInView","minutesInView","secondsInView","ampmInView","ampm","preserveAmPm","maskWithAmPm","pureMask","displayVal","cursorOnHours","cursorOnMinutes","cursorOnSeconds","cursorOnAmPm","showHours","showMinutes","showSeconds","showAmPm","IgxTimePickerComponent_1","IgxTimePickerModule","IgxToastComponent","_isVisible","CSS_CLASSES","IGX_TOAST_BOTTOM","IGX_TOAST_MIDDLE","IGX_TOAST_TOP","onShowing","onShown","onHiding","onHidden","isVisibleChange","mapPositionToClassName","IgxToastModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","enum EaseIn {\n    quad = `cubic-bezier(0.550, 0.085, 0.680, 0.530)` as any,\n    cubic = `cubic-bezier(0.550, 0.055, 0.675, 0.190)` as any,\n    quart = `cubic-bezier(0.895, 0.030, 0.685, 0.220)` as any,\n    quint = `cubic-bezier(0.755, 0.050, 0.855, 0.060)` as any,\n    sine = `cubic-bezier(0.470, 0.000, 0.745, 0.715)` as any,\n    expo = `cubic-bezier(0.950, 0.050, 0.795, 0.035)` as any,\n    circ = `cubic-bezier(0.600, 0.040, 0.980, 0.335)` as any,\n    back = `cubic-bezier(0.600, -0.280, 0.735, 0.045)` as any\n}\n\nenum EaseOut {\n    quad = `cubic-bezier(0.250, 0.460, 0.450, 0.940)` as any,\n    cubic = `cubic-bezier(0.215, 0.610, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.165, 0.840, 0.440, 1.000)` as any,\n    quint = `cubic-bezier(0.230, 1.000, 0.320, 1.000)` as any,\n    sine = `cubic-bezier(0.390, 0.575, 0.565, 1.000)` as any,\n    expo = `cubic-bezier(0.190, 1.000, 0.220, 1.000)` as any,\n    circ = `cubic-bezier(0.075, 0.820, 0.165, 1.000)` as any,\n    back = `cubic-bezier(0.175, 0.885, 0.320, 1.275)` as any\n}\n\nenum EaseInOut {\n    quad = `cubic-bezier(0.455, 0.030, 0.515, 0.955)` as any,\n    cubic = `cubic-bezier(0.645, 0.045, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.770, 0.000, 0.175, 1.000)` as any,\n    quint = `cubic-bezier(0.860, 0.000, 0.070, 1.000)` as any,\n    sine = `cubic-bezier(0.445, 0.050, 0.550, 0.950)` as any,\n    expo = `cubic-bezier(1.000, 0.000, 0.000, 1.000)` as any,\n    circ = `cubic-bezier(0.785, 0.135, 0.150, 0.860)` as any,\n    back = `cubic-bezier(0.680, -0.550, 0.265, 1.550)` as any\n}\n\nexport { EaseIn, EaseOut, EaseInOut };\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.sine,\n    endOpacity: 1,\n    startOpacity: 0\n};\n\nconst fadeIn: AnimationReferenceMetadata = animation(base, {\n    params: baseParams\n});\n\nconst fadeOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        delay: '0s',\n        duration: '350ms',\n        easing: EaseOut.sine,\n        endOpacity: 0,\n        startOpacity: 1\n    }\n});\n\nexport { fadeIn, fadeOut };\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        backfaceVisibility: 'hidden',\n        transformStyle: 'preserve-3d'\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `translateZ({{startDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{startAngle}}deg)`\n            }),\n            style({\n                offset: 1,\n                transform: `translateZ({{endDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{endAngle}}deg)`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 180,\n    endDistance: '0px',\n    rotateX: 1,\n    rotateY: 0,\n    rotateZ: 0,\n    startAngle: 0,\n    startDistance: '0px'\n};\n\nconst flipTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams\n    }\n});\n\nconst flipBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180\n    }\n});\n\nconst flipLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipHorFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px'\n    }\n});\n\nconst flipHorBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px'\n    }\n});\n\nconst flipVerFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipVerBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nexport {\n    flipTop,\n    flipRight,\n    flipBottom,\n    flipLeft,\n    flipHorFwd,\n    flipHorBck,\n    flipVerFwd,\n    flipVerBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            offset: 0,\n            opacity: `{{endOpacity}}`,\n            transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 0,\n    endOpacity: 1,\n    rotateX: 0,\n    rotateY: 0,\n    rotateZ: 1,\n    startAngle: -360,\n    startOpacity: 0,\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    startOpacity: 1\n};\n\nconst rotateInCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseInParams }\n});\n\nconst rotateOutCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseOutParams }\n});\n\nconst rotateInTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateOutTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateInRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateOutRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateInBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateOutBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateInLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateOutLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateInTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateInBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateInDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nexport {\n    rotateInCenter,\n    rotateInTop,\n    rotateInRight,\n    rotateInLeft,\n    rotateInBottom,\n    rotateInTr,\n    rotateInBr,\n    rotateInBl,\n    rotateInTl,\n    rotateInDiagonal1,\n    rotateInDiagonal2,\n    rotateInHor,\n    rotateInVer,\n    rotateOutCenter,\n    rotateOutTop,\n    rotateOutRight,\n    rotateOutLeft,\n    rotateOutBottom,\n    rotateOutTr,\n    rotateOutBr,\n    rotateOutBl,\n    rotateOutTl,\n    rotateOutDiagonal1,\n    rotateOutDiagonal2,\n    rotateOutHor,\n    rotateOutVer\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseInOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst baseRecipe: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            }),\n            style({\n                offset: 0.1,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.2,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n            }),\n            style({\n                offset: 0.3,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.4,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.5,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.6,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.7,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.8,\n                transform: `rotate(-{{endAngle}}deg) translate{{direction}}({{endDistance}})`\n\n            }),\n            style({\n                offset: 0.9,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{endDistance}})`\n\n            }),\n            style({\n                offset: 1,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '800ms',\n    easing: EaseInOut.quad,\n    endAngle: 0,\n    endDistance: '8px',\n    startAngle: 0,\n    startDistance: '10px',\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst shakeHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'X'\n    }\n});\n\nconst shakeVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y'\n    }\n});\n\nconst shakeTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'top'\n    }\n});\n\nconst shakeBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'center'\n    }\n});\n\nconst shakeLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'center'\n    }\n});\n\nconst shakeCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 8,\n        endDistance: '0',\n        startAngle: 10,\n        startDistance: '0',\n        xPos: 'center',\n        yPos: 'center'\n    }\n});\n\nconst shakeTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst shakeBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nexport {\n    shakeHor,\n    shakeVer,\n    shakeTop,\n    shakeBottom,\n    shakeRight,\n    shakeLeft,\n    shakeCenter,\n    shakeTr,\n    shakeBr,\n    shakeBl,\n    shakeTl\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { IAnimationParams } from '../interface';\n\nconst heartbeatBase: AnimationMetadata[] = [\n    style({\n        animationTimingFunction: `ease-out`,\n        transform: `scale(1)`,\n        transformOrigin: `center center`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.1,\n                transform: `scale(0.91)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.17,\n                transform: `scale(0.98)`\n            }),\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.33,\n                transform: `scale(0.87)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.45,\n                transform: `scale(1)`\n            })\n        ])\n    )\n];\n\nconst heartbeatParams: IAnimationParams = {\n    delay: '0s',\n    duration: '1.5s',\n    easing: 'ease-in-out'\n};\n\nconst pulsateBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.5,\n                transform: `scale({{toScale}})`\n            }),\n            style({\n                offset: 1,\n                transform: `scale({{fromScale}})`\n            })\n        ])\n    )\n];\n\nconst pulsateParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.5s',\n    easing: 'ease-in-out',\n    fromScale: 1,\n    toScale: 1.1\n};\n\nconst blinkBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                opacity: .8,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.8,\n                opacity: 0,\n                transform: `scale({{midScale}})`\n            }),\n            style({\n                offset: 1,\n                opacity: 0,\n                transform: `scale({{toScale}})`\n            })\n        ])\n    )\n];\n\nconst blinkParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.8s',\n    easing: 'ease-in-out',\n    fromScale: .2,\n    midScale: 1.2,\n    toScale: 2.2\n};\n\nconst pulsateFwd = animation(pulsateBase, {\n    params: {\n        ...pulsateParams\n    }\n});\n\nconst pulsateBck = animation(pulsateBase, {\n    params: {\n        ...pulsateParams,\n        toScale: .9\n    }\n});\n\nconst heartbeat = animation(heartbeatBase, {\n    params: {\n        ...heartbeatParams\n    }\n});\n\nconst blink = animation(blinkBase, {\n    params: {\n        ...blinkParams\n    }\n});\n\nexport {\n    heartbeat,\n    pulsateFwd,\n    pulsateBck,\n    blink\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `scale{{direction}}({{fromScale}})`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `scale{{direction}}({{toScale}})`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    direction: '',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromScale: .5,\n    startOpacity: 0,\n    toScale: 1,\n    xPos: '50%',\n    yPos: '50%'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseOut.sine,\n    endOpacity: 0,\n    fromScale: 1,\n    startOpacity: 1,\n    toScale: .5\n};\n\nconst scaleInCenter: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst scaleInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTr = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutCenter: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst scaleOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nexport {\n    scaleInTop,\n    scaleInRight,\n    scaleInBottom,\n    scaleInLeft,\n    scaleInCenter,\n    scaleInTr,\n    scaleInBr,\n    scaleInBl,\n    scaleInTl,\n    scaleInVerTop,\n    scaleInVerBottom,\n    scaleInVerCenter,\n    scaleInHorCenter,\n    scaleInHorLeft,\n    scaleInHorRight,\n    scaleOutTop,\n    scaleOutRight,\n    scaleOutBottom,\n    scaleOutLeft,\n    scaleOutCenter,\n    scaleOutTr,\n    scaleOutBr,\n    scaleOutBl,\n    scaleOutTl,\n    scaleOutVerTop,\n    scaleOutVerBottom,\n    scaleOutVerCenter,\n    scaleOutHorCenter,\n    scaleOutHorLeft,\n    scaleOutHorRight\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `{{fromPosition}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `{{toPosition}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromPosition: 'translateY(-500px)',\n    startOpacity: 0,\n    toPosition: 'translateY(0)'\n};\n\nconst baseOutParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    fromPosition: 'translateY(0)',\n    startOpacity: 1,\n    toPosition: 'translateY(-500px)'\n};\n\nconst slideInTop: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst slideInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(-500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateY(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideOutTop: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst slideOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseIn.quad,\n            endOpacity: 0,\n            fromPosition: 'translateY(0)',\n            startOpacity: 1,\n            toPosition: 'translateY(500px)'\n        }\n    }\n);\n\nconst slideOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(-500px)'\n        }\n    }\n);\n\nexport {\n    slideInTop,\n    slideInRight,\n    slideInBottom,\n    slideInLeft,\n    slideInTr,\n    slideInBr,\n    slideInBl,\n    slideInTl,\n    slideOutTop,\n    slideOutBottom,\n    slideOutRight,\n    slideOutLeft,\n    slideOutTr,\n    slideOutBr,\n    slideOutBl,\n    slideOutTl\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst swingBase: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate{{direction}}({{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `rotate{{direction}}({{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst swingParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '.5s',\n    easing: EaseOut.back,\n    endAngle: 0,\n    endOpacity: 1,\n    startAngle: -100,\n    startOpacity: 0,\n    xPos: 'top',\n    yPos: 'center'\n};\n\nconst swingOutParams: IAnimationParams = {\n    ...swingParams,\n    duration: '.55s',\n    easing: EaseIn.back,\n    endAngle: 70,\n    endOpacity: 0,\n    startAngle: 0,\n    startOpacity: 1\n};\n\nconst swingInTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams\n    }\n});\n\nconst swingInRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        startAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        startAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingInTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: 70\n    }\n});\n\nconst swingInRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: 70,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams\n    }\n});\n\nconst swingOutRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        endAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLefttFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        endAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: -100\n    }\n});\n\nconst swingOutRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: -100,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nexport {\n    swingInTopFwd,\n    swingInRightFwd,\n    swingInLeftFwd,\n    swingInBottomFwd,\n    swingInTopBck,\n    swingInRightBck,\n    swingInBottomBck,\n    swingInLeftBck,\n    swingOutTopFwd,\n    swingOutRightFwd,\n    swingOutBottomFwd,\n    swingOutLefttFwd,\n    swingOutTopBck,\n    swingOutRightBck,\n    swingOutBottomBck,\n    swingOutLeftBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut, EaseIn } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{ startOpacity }}`,\n        height: `{{ startHeight }}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{ endOpacity }}`,\n            height: `{{ endHeight }}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    startOpacity: 0,\n    endOpacity: 1,\n    startHeight: '',\n    endHeight: ''\n};\n\nconst growVerIn: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 0,\n        endOpacity: 1,\n        startHeight: '0px',\n        endHeight: '*'\n    }\n});\n\nconst growVerOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 1,\n        endOpacity: 0,\n        startHeight: '*',\n        endHeight: '0px'\n    }\n});\n\nexport { growVerIn, growVerOut };\n","import { IToggleView } from './IToggleView';\nimport { Injectable } from '@angular/core';\n\n/**\n * Common service to be injected between components where those implementing common\n * ToggleView interface can register and toggle directives can call their methods.\n * TODO: Track currently active? Events?\n */\n@Injectable()\nexport class IgxNavigationService {\n    private navs: { [id: string]: IToggleView; };\n\n    constructor() {\n        this.navs = {};\n    }\n\n    public add(id: string, navItem: IToggleView) {\n        this.navs[id] = navItem;\n    }\n\n    public remove(id: string) {\n        delete this.navs[id];\n    }\n\n    public get(id: string): IToggleView {\n        if (id) {\n            return this.navs[id];\n        }\n    }\n\n    public toggle(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].toggle(...args);\n        }\n    }\n    public open(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].open(...args);\n        }\n    }\n    public close(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].close(...args);\n        }\n    }\n}\n","import { Directive, HostListener, Input, NgModule } from '@angular/core';\nimport {IgxNavigationService} from './nav.service';\n\n/**\n * Directive that can toggle targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavToggle=\"ID\"> Toggle </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavToggle]' })\nexport class IgxNavigationToggleDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavToggle') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public toggleNavigationDrawer() {\n        this.state.toggle(this.target, true);\n    }\n}\n\n/**\n * Directive that can close targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavClose=\"ID\"> Close </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavClose]' })\nexport class IgxNavigationCloseDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavClose') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public closeNavigationDrawer() {\n        this.state.close(this.target, true);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    exports: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxNavigationModule {}\n","import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport ResizeObserver from 'resize-observer-polyfill';\n\n/**\n *@hidden\n */\nexport function cloneArray(array: any[], deep?: boolean) {\n    const arr = [];\n    if (!array) {\n        return arr;\n    }\n    let i = array.length;\n    while (i--) {\n        arr[i] = deep ? cloneValue(array[i]) : array[i];\n    }\n    return arr;\n}\n\n/**\n * Doesn't clone leaf items\n * @hidden\n */\nexport function cloneHierarchicalArray(array: any[], childDataKey: any): any[] {\n    const result: any[] = [];\n    if (!array) {\n        return result;\n    }\n\n    for (const item of array) {\n        const clonedItem = cloneValue(item);\n        if (Array.isArray(item[childDataKey])) {\n            clonedItem[childDataKey] = cloneHierarchicalArray(clonedItem[childDataKey], childDataKey);\n        }\n        result.push(clonedItem);\n    }\n    return result;\n}\n\n/**\n * Deep clones all first level keys of Obj2 and merges them to Obj1\n * @param obj1 Object to merge into\n * @param obj2 Object to merge from\n * @returns Obj1 with merged cloned keys from Obj2\n * @hidden\n */\nexport function mergeObjects(obj1: {}, obj2: {}): any {\n    if (!isObject(obj1)) {\n        throw new Error(`Cannot merge into ${obj1}. First param must be an object.`);\n    }\n\n    if (!isObject(obj2)) {\n        return obj1;\n    }\n\n    for (const key of Object.keys(obj2)) {\n        obj1[key] = cloneValue(obj2[key]);\n    }\n\n    return obj1;\n}\n\n/**\n * Creates deep clone of provided value.\n * Supports primitive values, dates and objects.\n * If passed value is array returns shallow copy of the array.\n * @param value value to clone\n * @returns Deep copy of provided value\n *@hidden\n */\nexport function cloneValue(value: any): any {\n    if (isDate(value)) {\n        return new Date(value.getTime());\n    }\n    if (Array.isArray(value)) {\n        return [...value];\n    }\n\n    if (value instanceof Map || value instanceof Set) {\n        return value;\n    }\n\n    if (isObject(value)) {\n        const result = {};\n\n        for (const key of Object.keys(value)) {\n            result[key] = cloneValue(value[key]);\n        }\n        return result;\n    }\n    return value;\n}\n\n/**\n * Checks if provided variable is Object\n * @param value Value to check\n * @returns true if provided variable is Object\n *@hidden\n */\nexport function isObject(value: any): boolean {\n    return value && value.toString() === '[object Object]';\n}\n\n/**\n * Checks if provided variable is Date\n * @param value Value to check\n * @returns true if provided variable is Date\n *@hidden\n */\nexport function isDate(value: any) {\n    return Object.prototype.toString.call(value) === '[object Date]';\n}\n\n/**\n * Checks if the two passed arguments are equal\n * Currently supports date objects\n * @param obj1\n * @param obj2\n * @returns: `boolean`\n * @hidden\n */\nexport function isEqual(obj1, obj2): boolean {\n    if (isDate(obj1) && isDate(obj2)) {\n        return obj1.getTime() === obj2.getTime();\n    }\n    return obj1 === obj2;\n}\n\n/**\n *@hidden\n */\nexport const enum KEYCODES {\n    ENTER = 13,\n    SPACE = 32,\n    ESCAPE = 27,\n    LEFT_ARROW = 37,\n    UP_ARROW = 38,\n    RIGHT_ARROW = 39,\n    DOWN_ARROW = 40,\n    F2 = 113,\n    TAB = 9\n}\n\n/**\n *@hidden\n */\nexport const enum KEYS {\n    ENTER = 'Enter',\n    SPACE = ' ',\n    SPACE_IE = 'Spacebar',\n    ESCAPE = 'Escape',\n    ESCAPE_IE = 'Esc',\n    LEFT_ARROW = 'ArrowLeft',\n    LEFT_ARROW_IE = 'Left',\n    UP_ARROW = 'ArrowUp',\n    UP_ARROW_IE = 'Up',\n    RIGHT_ARROW = 'ArrowRight',\n    RIGHT_ARROW_IE = 'Right',\n    DOWN_ARROW = 'ArrowDown',\n    DOWN_ARROW_IE = 'Down',\n    F2 = 'F2',\n    TAB = 'Tab'\n}\n\n/**\n *@hidden\n* Returns the actual size of the node content, using Range\n* ```typescript\n* let range = document.createRange();\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = getNodeSizeViaRange(range, column.cells[0].nativeElement);\n* ```\n */\nexport function getNodeSizeViaRange(range: Range, node: any): number {\n    let overflow = null;\n    if (!isFirefox()) {\n        overflow = node.style.overflow;\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = 'visible';\n    }\n\n    range.selectNodeContents(node);\n    const width = range.getBoundingClientRect().width;\n\n    if (!isFirefox()) {\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = overflow;\n    }\n\n    return width;\n}\n/**\n *@hidden\n* Returns the actual size of the node content, using Canvas\n* ```typescript\n* let ctx = document.createElement('canvas').getContext('2d');\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = valToPxlsUsingCanvas(ctx, column.cells[0].nativeElement);\n* ```\n */\nexport function getNodeSizeViaCanvas(canvas2dCtx: any, node: any): number {\n    const s = this.grid.document.defaultView.getComputedStyle(node);\n\n    // need to set the font to get correct width\n    canvas2dCtx.font = s.fontSize + ' ' + s.fontFamily;\n\n    return canvas2dCtx.measureText(node.textContent).width;\n}\n/**\n *@hidden\n */\nexport function isIE(): boolean {\n    return navigator.appVersion.indexOf('Trident/') > 0;\n}\n/**\n *@hidden\n */\nexport function isEdge(): boolean {\n    const edgeBrowser = /Edge[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return edgeBrowser;\n}\n\n/**\n *@hidden\n */\nexport function isFirefox(): boolean {\n    const firefoxBrowser = /Firefox[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return firefoxBrowser;\n}\n\n/**\n * @hidden\n */\n@Injectable({ providedIn: 'root' })\nexport class PlatformUtil {\n    public isBrowser: boolean = isPlatformBrowser(this.platformId);\n\n    public isIOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);\n\n    constructor(@Inject(PLATFORM_ID) private platformId: Object) {\n    }\n}\n\n/**\n * @hidden\n */\nexport function isLeftClick(event: PointerEvent) {\n    return event.button === 0;\n}\n\n/** @hidden */\nexport function isNavigationKey(key: string): boolean {\n    return [\n        'down',\n        'up',\n        'left',\n        'right',\n        'arrowdown',\n        'arrowup',\n        'arrowleft',\n        'arrowright',\n        'home',\n        'end',\n        'space',\n        'spacebar',\n        ' '\n    ].indexOf(key) !== -1;\n}\n\n/**\n *@hidden\n */\nexport function flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            const children = Array.isArray(el.children) ? el.children : el.children.toArray();\n            result = result.concat(flatten(children));\n        }\n    });\n    return result;\n}\n\nexport interface CancelableEventArgs {\n    /**\n     * Provides the ability to cancel the event.\n     */\n    cancel: boolean;\n}\n\nexport interface IBaseEventArgs {\n    /**\n     * Provides reference to the owner component.\n     */\n    owner?: any;\n}\n\nexport interface CancelableBrowserEventArgs extends CancelableEventArgs {\n    /** Browser event */\n    event?: Event;\n}\n\nexport const NAVIGATION_KEYS = new Set([\n    'down',\n    'up',\n    'left',\n    'right',\n    'arrowdown',\n    'arrowup',\n    'arrowleft',\n    'arrowright',\n    'home',\n    'end',\n    'space',\n    'spacebar',\n    ' '\n]);\nexport const ROW_EXPAND_KEYS = new Set('right down arrowright arrowdown'.split(' '));\nexport const ROW_COLLAPSE_KEYS = new Set('left up arrowleft arrowup'.split(' '));\nexport const SUPPORTED_KEYS = new Set([...Array.from(NAVIGATION_KEYS), 'tab', 'enter', 'f2', 'escape', 'esc']);\n\n/**\n * @hidden\n * @internal\n *\n * Creates a new ResizeObserver on `target` and returns it as an Observable.\n * Run the resizeObservable outside angular zone, because it patches the MutationObserver which causes an infinite loop.\n * Related issue: https://github.com/angular/angular/issues/31712\n */\nexport function resizeObservable(target: HTMLElement): Observable<ResizeObserverEntry[]> {\n    return new Observable((observer) => {\n        const instance = new ResizeObserver((entries: ResizeObserverEntry[]) => {\n            observer.next(entries);\n        });\n        instance.observe(target);\n        const unsubscribe = () => instance.disconnect();\n        return unsubscribe;\n    });\n}\n","import { ISortingStrategy } from './sorting-strategy';\nimport { IBaseEventArgs } from '../core/utils';\n\n/**\n * Represents sorting expressions.\n */\nexport enum SortingDirection {\n    None = 0,\n    Asc = 1,\n    Desc = 2\n}\n\nexport interface ISortingExpression extends IBaseEventArgs {\n   fieldName: string;\n   dir: SortingDirection;\n   ignoreCase?: boolean;\n   strategy?: ISortingStrategy;\n}\n","import { IGroupByKey } from './groupby-expand-state.interface';\nimport { IGroupByRecord } from './groupby-record.interface';\n\nexport function isHierarchyMatch(h1: Array<IGroupByKey>, h2: Array<IGroupByKey>): boolean {\n    if (h1.length !== h2.length) {\n        return false;\n    }\n    return h1.every((level, index): boolean => {\n        return level.fieldName === h2[index].fieldName && level.value === h2[index].value;\n    });\n}\n\nexport function getHierarchy(gRow: IGroupByRecord): Array<IGroupByKey> {\n    const hierarchy: Array<IGroupByKey> = [];\n    if (gRow !== undefined && gRow.expression) {\n        hierarchy.push({ fieldName: gRow.expression.fieldName, value: gRow.value });\n        while (gRow.groupParent) {\n            gRow = gRow.groupParent;\n            hierarchy.unshift({ fieldName: gRow.expression.fieldName, value: gRow.value });\n        }\n    }\n    return hierarchy;\n}\n","export enum PagingError {\n    None,\n    IncorrectPageIndex,\n    IncorrectRecordsPerPage\n}\n\nexport declare interface IPagingState {\n    index: number;\n    recordsPerPage: number;\n    metadata?: {\n        countPages: number;\n        error: PagingError;\n        countRecords: number;\n    };\n}\n","import { IFilteringOperation } from './filtering-condition';\n\nexport enum FilteringLogic {\n    And,\n    Or\n}\n\n/**\n * Represents filtering expressions.\n */\nexport declare interface IFilteringExpression {\n    fieldName: string;\n    condition: IFilteringOperation;\n    searchVal?: any;\n    ignoreCase?: boolean;\n}\n","import { IFilteringExpression, FilteringLogic } from './filtering-expression.interface';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport enum FilteringExpressionsTreeType {\n    Regular,\n    Advanced\n}\n\nexport declare interface IFilteringExpressionsTree extends IBaseEventArgs {\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[];\n    operator: FilteringLogic;\n    fieldName?: string;\n    type?: FilteringExpressionsTreeType;\n\n    find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression;\n    findIndex(fieldName: string): number;\n}\n\nexport class FilteringExpressionsTree implements IFilteringExpressionsTree {\n\n    /**\n     * Sets/gets the filtering operands.\n     * ```typescript\n     * const gridExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n     * const expression = [\n     * {\n     *   condition: IgxStringFilteringOperand.instance().condition('contains'),\n     *   fieldName: 'Column Field',\n     *   searchVal: 'Value',\n     *   ignoreCase: false\n     * }];\n     * gridExpressionsTree.filteringOperands.push(expression);\n     * this.grid.filteringExpressionsTree = gridExpressionsTree;\n     * ```\n     * ```typescript\n     * let filteringOperands = gridExpressionsTree.filteringOperands;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[] = [];\n\n    /**\n     * Sets/gets the operator.\n     * ```typescript\n     * gridExpressionsTree.operator = FilteringLogic.And;\n     * ```\n     * ```typescript\n     * let operator = gridExpressionsTree.operator;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    operator: FilteringLogic;\n\n    /**\n     * Sets/gets the field name of the column where the filtering expression is placed.\n     * ```typescript\n     *  gridExpressionTree.fieldName = 'Column Field';\n     * ```\n     * ```typescript\n     * let columnField = expressionTree.fieldName;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    fieldName?: string;\n\n    /**\n     * Sets/gets the type of the filtering expressions tree.\n     * ```typescript\n     *  gridExpressionTree.type = FilteringExpressionsTree.Advanced;\n     * ```\n     * ```typescript\n     * let type = expressionTree.type;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    type?: FilteringExpressionsTreeType;\n\n    constructor(operator: FilteringLogic, fieldName?: string) {\n        this.operator = operator;\n        this.fieldName = fieldName;\n    }\n\n\n    /**\n     * Checks if filtering expressions tree is empty.\n     * @param expressionTree filtering expressions tree.\n     */\n    public static empty(expressionTree: IFilteringExpressionsTree): boolean {\n        return !expressionTree || !expressionTree.filteringOperands || !expressionTree.filteringOperands.length;\n    }\n\n    /**\n     * Returns the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpression = gridExpressionTree.find('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression {\n        const index = this.findIndex(fieldName);\n\n        if (index > -1) {\n            return this.filteringOperands[index];\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns the index of the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpressionIndex = gridExpressionTree.findIndex('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public findIndex(fieldName: string): number {\n        let expr;\n        for (let i = 0; i < this.filteringOperands.length; i++) {\n            expr = this.filteringOperands[i];\n            if (expr instanceof FilteringExpressionsTree) {\n                if (this.isFilteringExpressionsTreeForColumn(expr, fieldName)) {\n                    return i;\n                }\n            } else {\n                if ((expr as IFilteringExpression).fieldName === fieldName) {\n                    return i;\n                }\n            }\n        }\n\n        return -1;\n    }\n\n    protected isFilteringExpressionsTreeForColumn(expressionsTree: IFilteringExpressionsTree, fieldName: string): boolean {\n        if (expressionsTree.fieldName === fieldName) {\n            return true;\n        }\n\n        let expr;\n        for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n            expr = expressionsTree.filteringOperands[i];\n            if ((expr instanceof FilteringExpressionsTree)) {\n                return this.isFilteringExpressionsTreeForColumn(expr, fieldName);\n            } else {\n                return (expr as IFilteringExpression).fieldName === fieldName;\n            }\n        }\n\n        return false;\n    }\n}\n","import { cloneArray } from '../core/utils';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { ISortingExpression, SortingDirection } from './sorting-expression.interface';\nimport { IGroupingExpression } from './grouping-expression.interface';\nimport { IGroupingState } from './groupby-state.interface';\nimport { IGroupByExpandState } from './groupby-expand-state.interface';\nimport { IGroupByResult } from './grouping-result.interface';\nimport { getHierarchy, isHierarchyMatch } from './operations';\n\nexport interface ISortingStrategy {\n    sort: (data: any[],\n           fieldName: string,\n           dir: SortingDirection,\n           ignoreCase: boolean,\n           valueResolver: (obj: any, key: string) => any) => any[];\n}\n\nexport class DefaultSortingStrategy implements ISortingStrategy {\n    private static _instance: DefaultSortingStrategy = null;\n\n    protected constructor() {}\n\n    public static instance(): DefaultSortingStrategy {\n        return this._instance || (this._instance = new this());\n    }\n\n    public sort(data: any[],\n                fieldName: string,\n                dir: SortingDirection,\n                ignoreCase: boolean,\n                valueResolver: (obj: any, key: string) => any) {\n        const key = fieldName;\n        const reverse = (dir === SortingDirection.Desc ? -1 : 1);\n        const cmpFunc = (obj1, obj2) => {\n            return this.compareObjects(obj1, obj2, key, reverse, ignoreCase, valueResolver);\n        };\n        return this.arraySort(data, cmpFunc);\n    }\n\n    public compareValues(a: any, b: any) {\n        const an = (a === null || a === undefined);\n        const bn = (b === null || b === undefined);\n        if (an) {\n            if (bn) {\n                return 0;\n            }\n            return -1;\n        } else if (bn) {\n            return 1;\n        }\n        return a > b ? 1 : a < b ? -1 : 0;\n    }\n\n    protected compareObjects(obj1: object,\n                             obj2: object,\n                             key: string,\n                             reverse: number,\n                             ignoreCase: boolean,\n                             valueResolver: (obj: any, key: string) => any) {\n        let a = valueResolver(obj1, key);\n        let b = valueResolver(obj2, key);\n        if (ignoreCase) {\n            a = a && a.toLowerCase ? a.toLowerCase() : a;\n            b = b && b.toLowerCase ? b.toLowerCase() : b;\n        }\n        return reverse * this.compareValues(a, b);\n    }\n\n    protected arraySort(data: any[], compareFn?): any[] {\n        return data.sort(compareFn);\n    }\n}\n\nexport interface IGridSortingStrategy {\n    sort(data: any[], expressions: ISortingExpression[]): any[];\n}\n\nexport class NoopSortingStrategy implements IGridSortingStrategy {\n    private static _instance: NoopSortingStrategy = null;\n\n    private constructor() {  }\n\n    public static instance() {\n        return this._instance || (this._instance = new NoopSortingStrategy());\n    }\n\n    public sort(data: any[], expressions: ISortingExpression[]): any[] {\n        return data;\n    }\n}\n\nexport class IgxSorting implements IGridSortingStrategy {\n    public sort(data: any[], expressions: ISortingExpression[]): any[] {\n        return this.sortDataRecursive(data, expressions);\n    }\n\n    private groupedRecordsByExpression(data: any[],\n            index: number,\n            expression: IGroupingExpression): any[] {\n        let i;\n        let groupval;\n        const res = [];\n        const key = expression.fieldName;\n        const len = data.length;\n        res.push(data[index]);\n        groupval = this.getFieldValue(data[index], key);\n        index++;\n        const comparer = expression.groupingComparer || DefaultSortingStrategy.instance().compareValues;\n        for (i = index; i < len; i++) {\n            if (comparer(this.getFieldValue(data[i], key), groupval) === 0) {\n                res.push(data[i]);\n            } else {\n                break;\n            }\n        }\n        return res;\n    }\n    private sortDataRecursive<T>(data: T[],\n                                 expressions: ISortingExpression[],\n                                 expressionIndex: number = 0): T[] {\n        let i;\n        let j;\n        let expr: ISortingExpression;\n        let gbData;\n        let gbDataLen;\n        const exprsLen = expressions.length;\n        const dataLen = data.length;\n        expressionIndex = expressionIndex || 0;\n        if (expressionIndex >= exprsLen || dataLen <= 1) {\n            return data;\n        }\n        expr = expressions[expressionIndex];\n        if (!expr.strategy) {\n            expr.strategy = DefaultSortingStrategy.instance();\n        }\n        data = expr.strategy.sort(data, expr.fieldName, expr.dir, expr.ignoreCase, this.getFieldValue);\n        if (expressionIndex === exprsLen - 1) {\n            return data;\n        }\n        // in case of multiple sorting\n        for (i = 0; i < dataLen; i++) {\n            gbData = this.groupedRecordsByExpression(data, i, expr);\n            gbDataLen = gbData.length;\n            if (gbDataLen > 1) {\n                gbData = this.sortDataRecursive(gbData, expressions, expressionIndex + 1);\n            }\n            for (j = 0; j < gbDataLen; j++) {\n                data[i + j] = gbData[j];\n            }\n            i += gbDataLen - 1;\n        }\n        return data;\n    }\n    protected groupDataRecursive<T>(data: T[], state: IGroupingState, level: number,\n        parent: IGroupByRecord, metadata: IGroupByRecord[], grid: any = null,\n        groupsRecords: any[] = [], fullResult: IGroupByResult = { data: [], metadata: [] }): T[] {\n        const expressions = state.expressions;\n        const expansion = state.expansion;\n        let i = 0;\n        let result = [];\n        while (i < data.length) {\n            const group = this.groupedRecordsByExpression(data, i, expressions[level]);\n            const groupRow: IGroupByRecord = {\n                expression: expressions[level],\n                level,\n                records: cloneArray(group),\n                value: group[0][expressions[level].fieldName],\n                groupParent: parent,\n                groups: [],\n                height: grid ? grid.renderedRowHeight : null\n            };\n            if (parent) {\n                parent.groups.push(groupRow);\n            } else {\n                groupsRecords.push(groupRow);\n            }\n            const hierarchy = getHierarchy(groupRow);\n            const expandState: IGroupByExpandState = expansion.find((s) =>\n                isHierarchyMatch(s.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy));\n            const expanded = expandState ? expandState.expanded : state.defaultExpanded;\n            let recursiveResult;\n            result.push(groupRow);\n            metadata.push(null);\n            fullResult.data.push(groupRow);\n            fullResult.metadata.push(null);\n            if (level < expressions.length - 1) {\n                recursiveResult = this.groupDataRecursive(group, state, level + 1, groupRow,\n                    expanded ? metadata : [], grid, groupsRecords, fullResult);\n                if (expanded) {\n                    result = result.concat(recursiveResult);\n                }\n            } else {\n                for (const groupItem of group) {\n                    fullResult.metadata.push(groupRow);\n                    fullResult.data.push(groupItem);\n                }\n                if (expanded) {\n                    metadata.push(...fullResult.metadata.slice(fullResult.metadata.length - group.length));\n                    result.push(...fullResult.data.slice(fullResult.data.length - group.length));\n                }\n            }\n            i += group.length;\n        }\n        return result;\n    }\n    protected getFieldValue(obj: any, key: string): any {\n        return obj[key];\n    }\n}\n\nexport class IgxDataRecordSorting extends IgxSorting {\n    protected getFieldValue(obj: any, key: string): any {\n        return obj.data[key];\n    }\n}\n","import { IGroupByRecord } from './groupby-record.interface';\nimport { IgxSorting } from './sorting-strategy';\nimport { IGroupingState } from './groupby-state.interface';\nimport { IGroupByResult } from './grouping-result.interface';\n\nexport class IgxGrouping extends IgxSorting {\n    public groupBy(data: any[], state: IGroupingState, grid?: any,\n        groupsRecords?: any[], fullResult: IGroupByResult = { data: [], metadata: [] }): IGroupByResult {\n        const metadata: IGroupByRecord[] = [];\n        const grouping = this.groupDataRecursive(data, state, 0, null, metadata, grid, groupsRecords, fullResult);\n        return {\n            data: grouping,\n            metadata: metadata\n        };\n    }\n}\n\n","import { EventEmitter } from '@angular/core';\n\nexport enum TransactionType {\n    ADD = 'add',\n    DELETE = 'delete',\n    UPDATE = 'update'\n}\n\nexport interface Transaction {\n    id: any;\n    type: TransactionType;\n    newValue: any;\n}\n\n/**\n * @experimental\n * @hidden\n */\nexport interface HierarchicalTransaction extends Transaction {\n    path: any[];\n}\n\nexport interface State {\n    value: any;\n    recordRef: any;\n    type: TransactionType;\n}\n\n/**\n * @experimental\n * @hidden\n */\nexport interface HierarchicalState extends State {\n    path: any[];\n}\n\nexport interface TransactionService<T extends Transaction, S extends State> {\n    /**\n     * Returns whether transaction is enabled for this service\n     */\n    readonly enabled: boolean;\n\n    /**\n     * Event fired when transaction state has changed - add transaction, commit all transactions, undo and redo\n     */\n    onStateUpdate?: EventEmitter<void>;\n\n    /**\n     * @returns if there are any transactions in the Undo stack\n     */\n    canUndo: boolean;\n\n    /**\n     * @returns if there are any transactions in the Redo stack\n     */\n    canRedo: boolean;\n\n    /**\n     * Adds provided  transaction with recordRef if any\n     * @param transaction Transaction to be added\n     * @param recordRef Reference to the value of the record in the data source related to the changed item\n     */\n    add(transaction: T, recordRef?: any): void;\n\n    /**\n     * Returns all recorded transactions in chronological order\n     * @param id Optional record id to get transactions for\n     * @returns All transaction in the service or for the specified record\n     */\n    getTransactionLog(id?: any): T[];\n\n    /**\n     * Remove the last transaction if any\n     */\n    undo(): void;\n\n    /**\n     * Applies the last undone transaction if any\n     */\n    redo(): void;\n\n    /**\n     * Returns aggregated changes from all transactions\n     * @param mergeChanges If set to true will merge each state's value over relate recordRef\n     * and will record resulting value in the related transaction\n     * @returns Collection of aggregated transactions for each changed record\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[];\n\n    /**\n     * Returns the state of the record with provided id\n     * @param id The id of the record\n     * @param pending Should get pending state\n     * @returns State of the record if any\n     */\n    getState(id: any, pending?: boolean): S;\n\n    /**\n     * Returns value of the required id including all uncommitted changes\n     * @param id The id of the record to return value for\n     * @param mergeChanges If set to true will merge state's value over relate recordRef\n     * and will return merged value\n     * @returns Value with changes or **null**\n     */\n    getAggregatedValue(id: any, mergeChanges: boolean): any;\n\n    /**\n     * Applies all transactions over the provided data\n     * @param data Data source to update\n     * @param id Optional record id to commit transactions for\n     */\n    commit(data: any[], id?: any): void;\n\n    /**\n     * Clears all transactions\n     * @param id Optional record id to clear transactions for\n     */\n    clear(id?: any): void;\n\n    /**\n     * Starts pending transactions. All transactions passed after call to startPending\n     * will not be added to transaction log\n     */\n    startPending(): void;\n\n    /**\n     * Clears all pending transactions and aggregated pending state. If commit is set to true\n     * commits pending states as single transaction\n     * @param commit Should commit the pending states\n     */\n    endPending(commit: boolean): void;\n}\n","import { IFilteringState } from './filtering-state.interface';\n\nimport { IgxSorting, IgxDataRecordSorting, IGridSortingStrategy } from './sorting-strategy';\nimport { IgxGrouping } from './grouping-strategy';\nimport { IGroupByResult } from './grouping-result.interface';\n\nimport { IPagingState, PagingError } from './paging-state.interface';\n\nimport { IGroupByKey } from './groupby-expand-state.interface';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { IGroupingState } from './groupby-state.interface';\nimport { ISortingExpression } from './sorting-expression.interface';\nimport { FilteringStrategy } from './filtering-strategy';\nimport { ITreeGridRecord } from '../grids/tree-grid';\nimport { cloneValue, mergeObjects } from '../core/utils';\nimport { Transaction, TransactionType, HierarchicalTransaction } from '../services/transaction/transaction';\nimport { getHierarchy, isHierarchyMatch } from './operations';\n\n/**\n * @hidden\n */\nexport enum DataType {\n    String = 'string',\n    Number = 'number',\n    Boolean = 'boolean',\n    Date = 'date'\n}\n\n/**\n * @hidden\n */\nexport class DataUtil {\n    public static sort<T>(data: T[], expressions: ISortingExpression[], sorting: IGridSortingStrategy = new IgxSorting()): T[] {\n        return sorting.sort(data, expressions);\n    }\n\n    public static treeGridSort(hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression[],\n        sorting: IGridSortingStrategy = new IgxDataRecordSorting(),\n        parent?: ITreeGridRecord): ITreeGridRecord[] {\n        let res: ITreeGridRecord[] = [];\n        hierarchicalData.forEach((hr: ITreeGridRecord) => {\n            const rec: ITreeGridRecord = DataUtil.cloneTreeGridRecord(hr);\n            rec.parent = parent;\n            if (rec.children) {\n                rec.children = DataUtil.treeGridSort(rec.children, expressions, sorting, rec);\n            }\n            res.push(rec);\n        });\n\n        res = DataUtil.sort(res, expressions, sorting);\n\n        return res;\n    }\n\n    public static cloneTreeGridRecord(hierarchicalRecord: ITreeGridRecord) {\n        const rec: ITreeGridRecord = {\n            rowID: hierarchicalRecord.rowID,\n            data: hierarchicalRecord.data,\n            children: hierarchicalRecord.children,\n            isFilteredOutParent: hierarchicalRecord.isFilteredOutParent,\n            level: hierarchicalRecord.level,\n            expanded: hierarchicalRecord.expanded\n        };\n        return rec;\n    }\n\n    public static group<T>(data: T[], state: IGroupingState, grid: any = null,\n        groupsRecords: any[] = [], fullResult: IGroupByResult = { data: [], metadata: [] }): IGroupByResult {\n        const grouping = new IgxGrouping();\n        groupsRecords.splice(0, groupsRecords.length);\n        return grouping.groupBy(data, state, grid, groupsRecords, fullResult);\n    }\n\n    public static page<T>(data: T[], state: IPagingState): T[] {\n        if (!state) {\n            return data;\n        }\n        const len = data.length;\n        const index = state.index;\n        const res = [];\n        const recordsPerPage = state.recordsPerPage;\n        state.metadata = {\n            countPages: 0,\n            countRecords: data.length,\n            error: PagingError.None\n        };\n        if (index < 0 || isNaN(index)) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        if (recordsPerPage <= 0 || isNaN(recordsPerPage)) {\n            state.metadata.error = PagingError.IncorrectRecordsPerPage;\n            return res;\n        }\n        state.metadata.countPages = Math.ceil(len / recordsPerPage);\n        if (!len) {\n            return data;\n        }\n        if (index >= state.metadata.countPages) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        return data.slice(index * recordsPerPage, (index + 1) * recordsPerPage);\n    }\n\n    public static filter<T>(data: T[], state: IFilteringState): T[] {\n        if (!state.strategy) {\n            state.strategy = new FilteringStrategy();\n        }\n        return state.strategy.filter(data, state.expressionsTree, state.advancedExpressionsTree);\n    }\n\n    public static correctPagingState(state: IPagingState, length: number) {\n        const maxPage = Math.ceil(length / state.recordsPerPage) - 1;\n        if (!isNaN(maxPage) && state.index > maxPage) {\n            state.index = maxPage;\n        }\n    }\n\n    public static getHierarchy(gRow: IGroupByRecord): Array<IGroupByKey> {\n        return getHierarchy(gRow);\n    }\n\n    public static isHierarchyMatch(h1: Array<IGroupByKey>, h2: Array<IGroupByKey>): boolean {\n        return isHierarchyMatch(h1, h2);\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param primaryKey Primary key of the collection, if any\n     * @param deleteRows Should delete rows with DELETE transaction type from data\n     * @returns Provided data collections updated with all provided transactions\n     */\n    public static mergeTransactions<T>(data: T[], transactions: Transaction[], primaryKey?: any, deleteRows: boolean = false): T[] {\n        data.forEach((item: any, index: number) => {\n            const rowId = primaryKey ? item[primaryKey] : item;\n            const transaction = transactions.find(t => t.id === rowId);\n            if (transaction && transaction.type === TransactionType.UPDATE) {\n                data[index] = transaction.newValue;\n            }\n        });\n\n        if (deleteRows) {\n            transactions\n                .filter(t => t.type === TransactionType.DELETE)\n                .forEach(t => {\n                    const index = primaryKey ? data.findIndex(d => d[primaryKey] === t.id) : data.findIndex(d => d === t.id);\n                    if (0 <= index && index < data.length) {\n                        data.splice(index, 1);\n                    }\n                });\n        }\n\n        data.push(...transactions\n            .filter(t => t.type === TransactionType.ADD)\n            .map(t => t.newValue));\n\n        return data;\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided hierarchical data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param childDataKey Data key of child collections\n     * @param primaryKey Primary key of the collection, if any\n     * @param deleteRows Should delete rows with DELETE transaction type from data\n     * @returns Provided data collections updated with all provided transactions\n     */\n    public static mergeHierarchicalTransactions(\n        data: any[],\n        transactions: HierarchicalTransaction[],\n        childDataKey: any,\n        primaryKey?: any,\n        deleteRows: boolean = false): any[] {\n        for (const transaction of transactions) {\n            if (transaction.path) {\n                const parent = this.findParentFromPath(data, primaryKey, childDataKey, transaction.path);\n                let collection: any[] = parent ? parent[childDataKey] : data;\n                switch (transaction.type) {\n                    case TransactionType.ADD:\n                        //  if there is no parent this is ADD row at root level\n                        if (parent && !parent[childDataKey]) {\n                            parent[childDataKey] = collection = [];\n                        }\n                        collection.push(transaction.newValue);\n                        break;\n                    case TransactionType.UPDATE:\n                        const updateIndex = collection.findIndex(x => x[primaryKey] === transaction.id);\n                        if (updateIndex !== -1) {\n                            collection[updateIndex] = mergeObjects(cloneValue(collection[updateIndex]), transaction.newValue);\n                        }\n                        break;\n                    case TransactionType.DELETE:\n                        if (deleteRows) {\n                            const deleteIndex = collection.findIndex(r => r[primaryKey] === transaction.id);\n                            if (deleteIndex !== -1) {\n                                collection.splice(deleteIndex, 1);\n                            }\n                        }\n                        break;\n                }\n            } else {\n                //  if there is no path this is ADD row in root. Push the newValue to data\n                data.push(transaction.newValue);\n            }\n        }\n        return data;\n    }\n\n    public static parseValue(dataType: DataType, value: any): any {\n        if (dataType === DataType.Number) {\n            value = parseFloat(value);\n        }\n\n        return value;\n    }\n\n    private static findParentFromPath(data: any[], primaryKey: any, childDataKey: any, path: any[]): any {\n        let collection: any[] = data;\n        let result: any;\n\n        for (const id of path) {\n            result = collection && collection.find(x => x[primaryKey] === id);\n            if (!result) {\n                break;\n            }\n\n            collection = result[childDataKey];\n        }\n\n        return result;\n    }\n}\n","import { FilteringLogic, IFilteringExpression } from './filtering-expression.interface';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from './filtering-expressions-tree';\n\nexport interface IFilteringStrategy {\n    filter(data: any[], expressionsTree: IFilteringExpressionsTree, advancedExpressionsTree?: IFilteringExpressionsTree): any[];\n}\n\nexport class NoopFilteringStrategy implements IFilteringStrategy {\n    private static _instance: NoopFilteringStrategy = null;\n\n    private constructor() {  }\n\n    public static instance() {\n        return this._instance || (this._instance = new NoopFilteringStrategy());\n    }\n\n    public filter(data: any[], expressionsTree: IFilteringExpressionsTree, advancedExpressionsTree?: IFilteringExpressionsTree): any[] {\n        return data;\n    }\n}\n\nexport abstract class BaseFilteringStrategy implements IFilteringStrategy  {\n    public abstract filter(data: any[], expressionsTree: IFilteringExpressionsTree,\n        advancedExpressionsTree?: IFilteringExpressionsTree): any[];\n\n    protected abstract getFieldValue(rec: object, fieldName: string): any;\n\n    public findMatchByExpression(rec: object, expr: IFilteringExpression): boolean {\n        const cond = expr.condition;\n        const val = this.getFieldValue(rec, expr.fieldName);\n        return cond.logic(val, expr.searchVal, expr.ignoreCase);\n    }\n\n    public matchRecord(rec: object, expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (expressions) {\n            if (expressions instanceof FilteringExpressionsTree) {\n                const expressionsTree = expressions as IFilteringExpressionsTree;\n                const operator = expressionsTree.operator as FilteringLogic;\n                let matchOperand, operand;\n\n                if (expressionsTree.filteringOperands && expressionsTree.filteringOperands.length) {\n                    for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                        operand = expressionsTree.filteringOperands[i];\n                        matchOperand = this.matchRecord(rec, operand);\n\n                        // Return false if at least one operand does not match and the filtering logic is And\n                        if (!matchOperand && operator === FilteringLogic.And) {\n                            return false;\n                        }\n\n                        // Return true if at least one operand matches and the filtering logic is Or\n                        if (matchOperand && operator === FilteringLogic.Or) {\n                            return true;\n                        }\n                    }\n\n                    return matchOperand;\n                }\n\n                return true;\n            } else {\n                const expression = expressions as IFilteringExpression;\n                return this.findMatchByExpression(rec, expression);\n            }\n        }\n\n        return true;\n    }\n}\n\nexport class FilteringStrategy extends BaseFilteringStrategy {\n    private static _instace: FilteringStrategy = null;\n\n    public constructor() { super(); }\n\n    public static instance() {\n        return this._instace || (this._instace = new this());\n    }\n\n    public filter<T>(data: T[], expressionsTree: IFilteringExpressionsTree, advancedExpressionsTree?: IFilteringExpressionsTree): T[] {\n        let i;\n        let rec;\n        const len = data.length;\n        const res: T[] = [];\n        if ((FilteringExpressionsTree.empty(expressionsTree) && FilteringExpressionsTree.empty(advancedExpressionsTree)) || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = data[i];\n            if (this.matchRecord(rec, expressionsTree) && this.matchRecord(rec, advancedExpressionsTree)) {\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        return rec[fieldName];\n    }\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the CSV exporting process.\n */\nexport class IgxCsvExporterOptions extends IgxExporterOptionsBase {\n\n    private _valueDelimiter;\n    private _fileType;\n\n    constructor(fileName: string, fileType: CsvFileTypes) {\n        super(fileName, IgxCsvExporterOptions.getExtensionFromFileType(fileType));\n        this.setFileType(fileType);\n        this.setDelimiter();\n    }\n\n    private static getExtensionFromFileType(fType: CsvFileTypes) {\n        let extension = '';\n        switch (fType) {\n            case CsvFileTypes.CSV:\n                extension = '.csv';\n                break;\n            case CsvFileTypes.TSV:\n                extension = '.tsv';\n                break;\n            case CsvFileTypes.TAB:\n                extension = '.tab';\n                break;\n            default:\n                throw Error('Unsupported CSV file type!');\n        }\n        return extension;\n    }\n\n    /**\n     * Gets the value delimiter which will be used for the exporting operation.\n     * ```typescript\n     * let delimiter = this.exportOptions.valueDelimiter;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get valueDelimiter() {\n        return this._valueDelimiter;\n    }\n\n    /**\n     * Sets a value delimiter which will overwrite the default delimiter of the selected export format.\n     * ```typescript\n     * this.exportOptions.valueDelimiter = '|';\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set valueDelimiter(value) {\n        this.setDelimiter(value);\n    }\n\n    /**\n     * Gets the CSV export format.\n     * ```typescript\n     * let filetype = this.exportOptions.fileType;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get fileType() {\n        return this._fileType;\n    }\n\n    /**\n     * Sets the CSV export format.\n     * ```typescript\n     * this.exportOptions.fileType = CsvFileTypes.TAB;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set fileType(value) {\n        this.setFileType(value);\n    }\n\n    private setFileType(value) {\n        if (value !== undefined && value !== null && value !== this._fileType) {\n            this._fileType = value;\n            const extension = IgxCsvExporterOptions.getExtensionFromFileType(value);\n            if (!this.fileName.endsWith(extension)) {\n                const oldExt = '.' + this.fileName.split('.').pop();\n                const newName = this.fileName.replace(oldExt, extension);\n                this._fileExtension = extension;\n                this.fileName = newName;\n            }\n        }\n    }\n\n    private setDelimiter(value?) {\n        if (value !== undefined && value !== '' && value !== null) {\n            this._valueDelimiter = value;\n        } else {\n            switch (this.fileType) {\n                case CsvFileTypes.CSV:\n                    this._valueDelimiter = ',';\n                    break;\n                case CsvFileTypes.TSV:\n                case CsvFileTypes.TAB:\n                    this._valueDelimiter = '\\t';\n                    break;\n            }\n        }\n    }\n}\n\n/**\n * This enumeration is used to configure the default value separator\n * as well as the default file extension used when performing CSV exporting.\n */\nexport enum CsvFileTypes {\n    /**\n     * Character Separated Values, default separator is \"comma\", default file extension is .csv\n     */\n    CSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tsv\n     */\n    TSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tab\n     */\n    TAB\n}\n","\n/**\n * @hidden\n */\nexport class ExportUtilities {\n    public static getKeysFromData(data: any[]) {\n        const length = data.length;\n        if (length === 0) {\n            return [];\n        }\n\n        const dataEntry = data[0];\n        const dataEntryMiddle = data[Math.floor(length / 2)];\n        const dataEntryLast = data[length - 1];\n\n        const keys1 = Object.keys(dataEntry);\n        const keys2 = Object.keys(dataEntryMiddle);\n        const keys3 = Object.keys(dataEntryLast);\n\n        const keys = new Set(keys1.concat(keys2).concat(keys3));\n\n        return !ExportUtilities.isSpecialData(data) ? Array.from(keys) : [ 'Column 1' ];\n    }\n\n    public static saveBlobToFile(blob: Blob, fileName) {\n        const a = document.createElement('a');\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveOrOpenBlob(blob, fileName);\n        } else {\n            const url = window.URL.createObjectURL(blob);\n            a.download = fileName;\n\n            a.href = url;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);\n        }\n    }\n\n    public static stringToArrayBuffer(s: string): ArrayBuffer {\n        const buf = new ArrayBuffer(s.length);\n        const view = new Uint8Array(buf);\n        for (let i = 0; i !== s.length; ++i) {\n            /* tslint:disable no-bitwise */\n            view[i] = s.charCodeAt(i) & 0xFF;\n            /* tslint:enable no-bitwise */\n        }\n        return buf;\n    }\n\n    public static isSpecialData(data: any[]): boolean {\n        const dataEntry = data[0];\n        return (typeof dataEntry === 'string' ||\n                typeof dataEntry === 'number' ||\n                dataEntry instanceof Date);\n    }\n\n    public static hasValue(value: any): boolean {\n        return value !== undefined && value !== null;\n    }\n\n    public static isNullOrWhitespaces(value: string): boolean {\n        return value === undefined || value === null || !value.trim();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { cloneArray, isEqual, mergeObjects } from '../core/utils';\nimport { DataUtil, DataType } from '../data-operations/data-util';\nimport { IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { ISortingExpression, SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxGridBaseDirective } from './grid-base.directive';\nimport { IgxRowDirective } from './row.directive';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { Transaction, TransactionType, State } from '../services/transaction/transaction';\nimport { IgxCell, IgxRow } from './selection/selection.service';\nimport { GridType } from './common/grid.interface';\nimport { ColumnType } from './common/column.interface';\nimport { IRowToggleEventArgs } from './common/events';\nimport {\n    ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS\n} from '../core/utils';\nimport { first, debounceTime } from 'rxjs/operators';\n/**\n *@hidden\n */\n@Injectable()\nexport class GridBaseAPIService <T extends IgxGridBaseDirective & GridType> {\n\n    grid: T;\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    public get_column_by_name(name: string): ColumnType {\n        return this.grid.columnList.find((col: ColumnType) => col.field === name);\n    }\n\n    public get_summary_data() {\n        const grid = this.grid;\n        let data = grid.filteredData;\n        if (!data) {\n            if (grid.transactions.enabled) {\n                data = DataUtil.mergeTransactions(\n                    cloneArray(grid.data),\n                    grid.transactions.getAggregatedChanges(true),\n                    grid.primaryKey\n                );\n                const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === TransactionType.DELETE).map(t => t.id);\n                deletedRows.forEach(rowID => {\n                    const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n                    const index = tempData.indexOf(rowID);\n                    if (index !== -1) {\n                       data.splice(index, 1);\n                    }\n                });\n            } else {\n                data = grid.data;\n            }\n        }\n        return data;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getRowData(rowID: any) {\n        const data = this.get_all_data(this.grid.transactions.enabled);\n        const index = this.get_row_index_in_data(rowID);\n        return data[index];\n    }\n\n    // TODO: Refactor\n    public escape_editMode() {\n        this.grid.crudService.end();\n    }\n\n    // TODO: Refactor\n    public get_cell_inEditMode(): IgxCell {\n        return this.grid.crudService.cell;\n    }\n\n    public get_row_index_in_data(rowID: any): number {\n        const grid = this.grid as IgxGridBaseDirective;\n        if (!grid) {\n            return -1;\n        }\n        const data = this.get_all_data(grid.transactions.enabled);\n        return grid.primaryKey ? data.findIndex(record => record[grid.primaryKey] === rowID) : data.indexOf(rowID);\n    }\n\n    public get_row_by_key(rowSelector: any): IgxRowDirective<IgxGridBaseDirective & GridType> {\n        const primaryKey = this.grid.primaryKey;\n        if (primaryKey !== undefined && primaryKey !== null) {\n            return this.grid.dataRowList.find((row) => row.rowData[primaryKey] === rowSelector);\n        } else {\n            return this.grid.dataRowList.find((row) => row.rowData === rowSelector);\n        }\n    }\n\n    public get_row_by_index(rowIndex: number): IgxRowDirective<IgxGridBaseDirective & GridType> {\n        return this.grid.rowList.find((row) => row.index === rowIndex);\n    }\n\n    public get_cell_by_key(rowSelector: any, field: string): IgxGridCellComponent {\n        const row = this.get_row_by_key(rowSelector);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.column.field === field);\n        }\n    }\n\n    public get_cell_by_index(rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.columnIndex === columnIndex);\n        }\n    }\n\n    public get_cell_by_visible_index(rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.visibleColumnIndex === columnIndex);\n        }\n    }\n\n    public submit_value() {\n        const cell = this.grid.crudService.cell;\n        if (cell ) {\n            const args = this.update_cell(cell, cell.editValue);\n            if (args.cancel) {\n                return;\n            }\n            this.escape_editMode();\n        }\n    }\n\n    update_cell(cell: IgxCell, value: any) {\n        const data = this.get_all_data(this.grid.transactions.enabled);\n        const index = this.get_row_index_in_data(cell.id.rowID);\n\n        cell.editValue = value;\n\n        const args = cell.createEditEventArgs();\n\n        this.grid.onCellEdit.emit(args);\n        if (args.cancel) {\n            return args;\n        }\n\n        // Cast to number after emit\n        // TODO: Clean up this\n        args.newValue = cell.castToNumber(args.newValue);\n\n        if (isEqual(args.oldValue, args.newValue)) {\n            return args;\n        }\n\n        this.grid.summaryService.clearSummaryCache(args);\n        this.updateData(this.grid, cell.id.rowID, data[index], cell.rowData, { [cell.column.field ]: args.newValue });\n        if (this.grid.primaryKey === cell.column.field) {\n             if (this.grid.selectionService.isRowSelected(cell.id.rowID)) {\n                this.grid.selectionService.deselectRow(cell.id.rowID);\n                this.grid.selectionService.selectRowById(args.newValue);\n            }\n            if (this.grid.hasSummarizedColumns) {\n                this.grid.summaryService.removeSummaries(cell.id.rowID);\n            }\n        }\n        if (!this.grid.rowEditable || !this.grid.crudService.row ||\n                this.grid.crudService.row.id !== cell.id.rowID || !this.grid.transactions.enabled) {\n            this.grid.summaryService.clearSummaryCache(args);\n            (this.grid as any)._pipeTrigger++;\n        }\n\n        return args;\n    }\n\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(grid, rowID, rowValueInDataSource: any, rowCurrentValue: any, rowNewValue: {[x: string]: any}) {\n        if (grid.transactions.enabled) {\n            const transaction: Transaction = {\n                id: rowID,\n                type: TransactionType.UPDATE,\n                newValue: rowNewValue\n            };\n            grid.transactions.add(transaction, rowCurrentValue);\n        } else {\n            mergeObjects(rowValueInDataSource, rowNewValue);\n        }\n    }\n\n    _update_row(row: IgxRow, value?: any) {\n        const grid = this.grid;\n\n        const rowInEditMode = grid.crudService.row;\n        row.newData = value ? value : grid.transactions.getAggregatedValue(row.id, true);\n\n\n        if (rowInEditMode && row.id === rowInEditMode.id) {\n            row.data = { ...row.data, ...rowInEditMode.transactionState };\n        // TODO: Workaround for updating a row in edit mode through the API\n        } else if (this.grid.transactions.enabled) {\n            const state = grid.transactions.getState(row.id);\n            row.data = state ? Object.assign({}, row.data, state.value) : row.data;\n        }\n    }\n\n    update_row(row: IgxRow, value: any) {\n        const grid = this.grid;\n        const selected = grid.selectionService.isRowSelected(row.id);\n        const rowInEditMode = grid.crudService.row;\n        const data = this.get_all_data(grid.transactions.enabled);\n        const index = this.get_row_index_in_data(row.id);\n        const hasSummarized = grid.hasSummarizedColumns;\n\n        this._update_row(row, value);\n\n        const args = row.createEditEventArgs();\n\n        // If no valid row is found\n        if (index === -1) {\n            return args;\n        }\n\n        grid.onRowEdit.emit(args);\n\n        if (args.cancel) {\n            return args;\n        }\n\n        if (rowInEditMode) {\n            const hasChanges = grid.transactions.getState(args.rowID, true);\n            grid.transactions.endPending(false);\n            if (!hasChanges) {\n                return args;\n            }\n        }\n\n        if (!args.newValue) {\n            return args;\n        }\n\n        if (hasSummarized) {\n            grid.summaryService.removeSummaries(args.rowID);\n        }\n\n        this.updateData(grid, row.id, data[index], args.oldValue, args.newValue);\n        const newId = grid.primaryKey ? args.newValue[grid.primaryKey] : args.newValue;\n        if (selected) {\n            grid.selectionService.deselectRow(row.id);\n            grid.selectionService.selectRowById(newId);\n        }\n        if (hasSummarized) {\n            grid.summaryService.removeSummaries(newId);\n        }\n        (grid as any)._pipeTrigger++;\n\n        return args;\n    }\n\n\n\n    protected update_row_in_array(value: any, rowID: any, index: number) {\n        const grid = this.grid;\n        grid.data[index] = value;\n    }\n\n    public sort(expression: ISortingExpression): void {\n        if (expression.dir === SortingDirection.None) {\n            this.remove_grouping_expression(expression.fieldName);\n        }\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n        this.prepare_sorting_expression([sortingState], expression);\n        this.grid.sortingExpressions = sortingState;\n    }\n\n    public sort_multiple(expressions: ISortingExpression[]): void {\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        for (const each of expressions) {\n            if (each.dir === SortingDirection.None) {\n                this.remove_grouping_expression(each.fieldName);\n            }\n            this.prepare_sorting_expression([sortingState], each);\n        }\n\n        this.grid.sortingExpressions = sortingState;\n    }\n\n    public filter(fieldName: string, term, conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase: boolean) {\n        const grid = this.grid;\n        const filteringTree = grid.filteringExpressionsTree;\n        grid.endEdit(false);\n\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        const fieldFilterIndex = filteringTree.findIndex(fieldName);\n        if (fieldFilterIndex > -1) {\n            filteringTree.filteringOperands.splice(fieldFilterIndex, 1);\n        }\n\n        this.prepare_filtering_expression(filteringTree, fieldName, term, conditionOrExpressionsTree, ignoreCase, fieldFilterIndex);\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public filter_global(term, condition, ignoreCase) {\n        if (!condition) {\n            return;\n        }\n\n        const grid = this.grid;\n        const filteringTree = grid.filteringExpressionsTree;\n        grid.endEdit(false);\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        filteringTree.filteringOperands = [];\n        for (const column of grid.columns) {\n            this.prepare_filtering_expression(filteringTree, column.field, term,\n                condition, ignoreCase || column.filteringIgnoreCase);\n        }\n\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public clear_filter(fieldName: string) {\n        const grid = this.grid;\n        grid.endEdit(false);\n        const filteringState = grid.filteringExpressionsTree;\n        const index = filteringState.findIndex(fieldName);\n\n        if (index > -1) {\n            filteringState.filteringOperands.splice(index, 1);\n        } else if (!fieldName) {\n            filteringState.filteringOperands = [];\n        }\n\n        grid.filteringExpressionsTree = filteringState;\n    }\n\n    public clear_sort(fieldName: string) {\n        const sortingState = this.grid.sortingExpressions;\n        const index = sortingState.findIndex((expr) => expr.fieldName === fieldName);\n        if (index > -1) {\n            sortingState.splice(index, 1);\n            this.grid.sortingExpressions = sortingState;\n        }\n    }\n\n    protected prepare_filtering_expression(filteringState: IFilteringExpressionsTree, fieldName: string, searchVal,\n        conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree, ignoreCase: boolean, insertAtIndex = -1) {\n\n        let newExpressionsTree;\n        const oldExpressionsTreeIndex = filteringState.findIndex(fieldName);\n        const expressionsTree = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            conditionOrExpressionsTree as IFilteringExpressionsTree : null;\n        const condition = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            null : conditionOrExpressionsTree as IFilteringOperation;\n        const newExpression: IFilteringExpression = { fieldName, searchVal, condition, ignoreCase };\n\n        if (oldExpressionsTreeIndex === -1) {\n            // no expressions tree found for this field\n            if (expressionsTree) {\n                if (insertAtIndex > -1) {\n                    filteringState.filteringOperands.splice(insertAtIndex, 0, expressionsTree);\n                } else {\n                    filteringState.filteringOperands.push(expressionsTree);\n                }\n            } else if (condition) {\n                // create expressions tree for this field and add the new expression to it\n                newExpressionsTree = new FilteringExpressionsTree(filteringState.operator, fieldName);\n                newExpressionsTree.filteringOperands.push(newExpression);\n                filteringState.filteringOperands.push(newExpressionsTree);\n            }\n        }\n    }\n\n    protected prepare_sorting_expression(stateCollections: Array<Array<any>>, expression: ISortingExpression) {\n        if (expression.dir === SortingDirection.None) {\n            stateCollections.forEach(state => {\n                state.splice(state.findIndex((expr) => expr.fieldName === expression.fieldName), 1);\n            });\n            return;\n        }\n\n        /**\n         * We need to make sure the states in each collection with same fields point to the same object reference.\n         * If the different state collections provided have different sizes we need to get the largest one.\n         * That way we can get the state reference from the largest one that has the same fieldName as the expression to prepare.\n         */\n        let maxCollection = stateCollections[0];\n        for (let i = 1; i < stateCollections.length; i++) {\n            if (maxCollection.length < stateCollections[i].length) {\n                maxCollection = stateCollections[i];\n            }\n        }\n        const maxExpr = maxCollection.find((expr) => expr.fieldName === expression.fieldName);\n\n        stateCollections.forEach(collection => {\n            const myExpr = collection.find((expr) => expr.fieldName === expression.fieldName);\n            if (!myExpr && !maxExpr) {\n                // Expression with this fieldName is missing from the current and the max collection.\n                collection.push(expression);\n            } else if (!myExpr && maxExpr) {\n                // Expression with this fieldName is missing from the current and but the max collection has.\n                collection.push(maxExpr);\n                Object.assign(maxExpr, expression);\n            } else {\n                // The current collection has the expression so just update it.\n                Object.assign(myExpr, expression);\n            }\n        });\n    }\n\n    protected remove_grouping_expression(fieldName) {\n    }\n\n    public clear_groupby(name?: string | Array<string>) {\n    }\n\n    public should_apply_number_style(column: ColumnType): boolean {\n        return column.dataType === DataType.Number;\n    }\n\n    public get_data(): any[] {\n        const grid = this.grid;\n        const data = grid.data ? grid.data : [];\n        return data;\n    }\n\n    public get_all_data(includeTransactions = false): any[] {\n        const grid = this.grid;\n        let data = grid.data ? grid.data : [];\n        data = includeTransactions ? grid.dataWithAddedInTransactionRows : data;\n        return data;\n    }\n\n    public get_filtered_data(): any[] {\n        return this.grid.filteredData;\n    }\n\n    protected getSortStrategyPerColumn(fieldName: string) {\n        return this.get_column_by_name(fieldName) ?\n            this.get_column_by_name(fieldName).sortStrategy : undefined;\n    }\n\n    public addRowToData(rowData: any) {\n        // Add row goes to transactions and if rowEditable is properly implemented, added rows will go to pending transactions\n        // If there is a row in edit - > commit and close\n        const grid = this.grid;\n        if (grid.transactions.enabled) {\n            const transactionId = grid.primaryKey ? rowData[grid.primaryKey] : rowData;\n            const transaction: Transaction = { id: transactionId, type: TransactionType.ADD, newValue: rowData };\n            grid.transactions.add(transaction);\n        } else {\n            grid.data.push(rowData);\n        }\n    }\n\n    public deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        const grid = this.grid;\n        if (index !== -1) {\n            if (grid.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                grid.transactions.add(transaction, grid.data[index]);\n            } else {\n                grid.data.splice(index, 1);\n            }\n        } else {\n            const state: State = grid.transactions.getState(rowID);\n            grid.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    public deleteRowById(rowId: any) {\n        let index: number;\n        const grid = this.grid;\n        const data = this.get_all_data();\n        if (grid.primaryKey) {\n            index = data.map((record) => record[grid.primaryKey]).indexOf(rowId);\n        } else {\n            index = data.indexOf(rowId);\n        }\n        const state: State = grid.transactions.getState(rowId);\n        const hasRowInNonDeletedState = state && state.type !== TransactionType.DELETE;\n\n        //  if there is a row (index !== -1) and the we have cell in edit mode on same row exit edit mode\n        //  if there is no row (index === -1), but there is a row in ADD or UPDATE state do as above\n        //  Otherwise just exit - there is nothing to delete\n        if (index !== -1 || hasRowInNonDeletedState) {\n            // Always exit edit when row is deleted\n            grid.endEdit(true);\n        } else {\n            return;\n        }\n\n        //  TODO: should we emit this when cascadeOnDelete is true for each row?!?!\n        grid.onRowDeleted.emit({ data: data[index] });\n\n        this.deleteRowFromData(rowId, index);\n\n        grid.selectionService.isRowSelected(rowId) ? grid.selectionService.deselectRow(rowId) : grid.selectionService.clearHeaderCBState();\n        (grid as any)._pipeTrigger++;\n        grid.notifyChanges();\n        // Data needs to be recalculated if transactions are in place\n        // If no transactions, `data` will be a reference to the grid getter, otherwise it will be stale\n        const dataAfterDelete = grid.transactions.enabled ? grid.dataWithAddedInTransactionRows : data;\n        grid.refreshSearch();\n        if (dataAfterDelete.length % grid.perPage === 0 && dataAfterDelete.length / grid.perPage - 1 < grid.page && grid.page !== 0) {\n            grid.page--;\n        }\n    }\n\n    public get_row_id(rowData) {\n        return this.grid.primaryKey ? rowData[this.grid.primaryKey] : rowData;\n    }\n\n    public row_deleted_transaction(rowID: any): boolean {\n        const grid = this.grid;\n        if (!grid) {\n            return false;\n        }\n        if (!grid.transactions.enabled) {\n            return false;\n        }\n        const state = grid.transactions.getState(rowID);\n        if (state) {\n            return state.type === TransactionType.DELETE;\n        }\n\n        return false;\n    }\n\n    public atInexistingPage(): boolean {\n        return this.grid.totalPages - 1 > this.grid.page;\n    }\n\n    public get_row_expansion_state(record: any): boolean {\n        const grid = this.grid;\n        const states = grid.expansionStates;\n        const rowID = grid.primaryKey ? record[grid.primaryKey] : record;\n        const expanded = states.get(rowID);\n\n        if (expanded !== undefined) {\n            return expanded;\n        } else {\n            return grid.getDefaultExpandState(record);\n        }\n    }\n\n    public set_row_expansion_state(rowID: any, expanded: boolean, event?: Event) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n\n        if (!this.allow_expansion_state_change(rowID, expanded)) {\n            return;\n        }\n\n        const args: IRowToggleEventArgs = {\n            rowID: rowID,\n            expanded: expanded,\n            event: event,\n            cancel: false\n        };\n\n        grid.onRowToggle.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n        expandedStates.set(rowID, expanded);\n        grid.expansionStates = expandedStates;\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n        const eventKey = event && (event as any).key ? (event as any).key.toLowerCase() : null;\n        if (eventKey && this.isToggleKey(eventKey)) {\n            (this.grid as any).zone.onStable.pipe(debounceTime(30)).pipe(first()).subscribe(() => {\n                this.focusActiveCell(rowID);\n            });\n        }\n    }\n\n    public get_rec_by_id(rowID) {\n        return  this.grid.primaryKey ? this.getRowData(rowID) : rowID;\n    }\n\n    public allow_expansion_state_change(rowID, expanded) {\n        return this.grid.expansionStates.get(rowID) !== expanded;\n    }\n\n    private isToggleKey(key: string): boolean {\n        return ROW_COLLAPSE_KEYS.has(key) || ROW_EXPAND_KEYS.has(key);\n    }\n\n    private focusActiveCell(rowID) {\n        // persist focused cell\n        const isVirtualized = !this.grid.verticalScrollContainer.dc.instance.notVirtual;\n        const el = this.grid.selectionService.activeElement;\n        if (isVirtualized && el) {\n            const cell = this.get_cell_by_key(rowID, this.grid.visibleColumns[el.column].field);\n            if (cell) {\n                cell.nativeElement.focus();\n            }\n        }\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { BaseFilteringStrategy, IFilteringStrategy } from '../../data-operations/filtering-strategy';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IFilteringState } from '../../data-operations/filtering-state.interface';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseDirective } from '../grid';\nimport { GridType } from '../common/grid.interface';\n\n/** @hidden */\nexport class TreeGridFilteringStrategy extends BaseFilteringStrategy {\n    public filter(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        advancedExpressionsTree?: IFilteringExpressionsTree): ITreeGridRecord[] {\n        return this.filterImpl(data, expressionsTree, advancedExpressionsTree, undefined);\n    }\n\n    private filterImpl(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        advancedExpressionsTree: IFilteringExpressionsTree, parent: ITreeGridRecord): ITreeGridRecord[] {\n        let i: number;\n        let rec: ITreeGridRecord;\n        const len = data.length;\n        const res: ITreeGridRecord[] = [];\n        if ((FilteringExpressionsTree.empty(expressionsTree) && FilteringExpressionsTree.empty(advancedExpressionsTree)) || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = DataUtil.cloneTreeGridRecord(data[i]);\n            rec.parent = parent;\n            if (rec.children) {\n                const filteredChildren = this.filterImpl(rec.children, expressionsTree, advancedExpressionsTree, rec);\n                rec.children = filteredChildren.length > 0 ? filteredChildren : null;\n            }\n\n            if (this.matchRecord(rec, expressionsTree) && this.matchRecord(rec, advancedExpressionsTree)) {\n                res.push(rec);\n            } else if (rec.children && rec.children.length > 0) {\n                rec.isFilteredOutParent = true;\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        const hierarchicalRecord = <ITreeGridRecord>rec;\n        return hierarchicalRecord.data[fieldName];\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridFiltering',\n    pure: true\n})\nexport class IgxTreeGridFilteringPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(hierarchyData: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        filterStrategy: IFilteringStrategy,\n        advancedFilteringExpressionsTree: IFilteringExpressionsTree, id: string,\n        pipeTrigger: number, filteringPipeTrigger: number): ITreeGridRecord[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        const state: IFilteringState = {\n            expressionsTree: expressionsTree,\n            advancedExpressionsTree: advancedFilteringExpressionsTree,\n            strategy: new TreeGridFilteringStrategy()\n        };\n\n        if (filterStrategy) {\n            state.strategy = filterStrategy;\n        }\n\n        this.resetFilteredOutProperty(grid.records);\n\n        if (FilteringExpressionsTree.empty(state.expressionsTree) && FilteringExpressionsTree.empty(state.advancedExpressionsTree)) {\n            grid.filteredData = null;\n            return hierarchyData;\n        }\n\n        const result = this.filter(hierarchyData, state);\n        const filteredData: any[] = [];\n        this.expandAllRecursive(grid, result, grid.expansionStates, filteredData);\n        grid.filteredData = filteredData;\n\n        return result;\n    }\n\n    private resetFilteredOutProperty(map: Map<any, ITreeGridRecord>) {\n        const keys = Array.from(map.keys());\n        for (let i = 0; i < keys.length; i++) {\n            map.get(keys[i]).isFilteredOutParent = undefined;\n        }\n    }\n\n    private expandAllRecursive(grid: IgxTreeGridComponent, data: ITreeGridRecord[],\n        expandedStates: Map<any, boolean>, filteredData: any[]) {\n        for (let i = 0; i < data.length; i++) {\n            const rec = data[i];\n            filteredData.push(rec.data);\n            this.updateNonProcessedRecord(grid, rec);\n\n            if (rec.children && rec.children.length > 0) {\n                expandedStates.set(rec.rowID, true);\n                this.expandAllRecursive(grid, rec.children, expandedStates, filteredData);\n            }\n        }\n    }\n\n    private updateNonProcessedRecord(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.isFilteredOutParent = record.isFilteredOutParent;\n    }\n\n    private filter(data: ITreeGridRecord[], state: IFilteringState): ITreeGridRecord[] {\n        return state.strategy.filter(data, state.expressionsTree, state.advancedExpressionsTree);\n    }\n}\n","import { EventEmitter } from '@angular/core';\n\nimport { cloneValue, IBaseEventArgs } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\n\nimport { ExportUtilities } from './export-utilities';\nimport { IgxExporterOptionsBase } from './exporter-options-base';\nimport { ITreeGridRecord } from '../../grids/tree-grid/tree-grid.interfaces';\nimport { TreeGridFilteringStrategy } from '../../grids/tree-grid/tree-grid.filtering.pipe';\n\n/**\n * onRowExport event arguments\n * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n * // set args properties here\n * })\n */\nexport interface IRowExportingEventArgs extends IBaseEventArgs {\n    /**\n     * Contains the exporting row data\n     */\n    rowData: any;\n\n    /**\n     * Contains the exporting row index\n     */\n    rowIndex: number;\n\n    /**\n     * Skip the exporting row when set to true\n     */\n    cancel: boolean;\n}\n\n/**\n    * onColumnExport event arguments\n    * ```typescript\n    * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n    * // set args properties here\n    * });\n    * ```\n    */\nexport interface IColumnExportingEventArgs extends IBaseEventArgs {\n    /**\n     * Contains the exporting column header\n     */\n    header: string;\n\n    /**\n     * Contains the exporting column field name\n     */\n    field: string;\n\n    /**\n     * Contains the exporting column index\n     */\n    columnIndex: number;\n\n    /**\n     * Skip the exporting column when set to true\n     */\n    cancel: boolean;\n\n    /**\n     * Export the column's data without applying its formatter, when set to true\n     */\n    skipFormatter: boolean;\n}\n\nexport abstract class IgxBaseExporter {\n    private _columnList: any[];\n    private flatRecords = [];\n\n    protected _isTreeGrid = false;\n    protected _indexOfLastPinnedColumn = -1;\n    protected _sort = null;\n\n    /**\n     * This event is emitted when a row is exported.\n     * ```typescript\n     * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public onRowExport = new EventEmitter<IRowExportingEventArgs>();\n\n    /**\n     * This event is emitted when a column is exported.\n     * ```typescript\n     * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public onColumnExport = new EventEmitter<IColumnExportingEventArgs>();\n\n    /**\n     * Method for exporting IgxGrid component's data.\n     * ```typescript\n     * this.exporterService.export(this.igxGridForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public export(grid: any, options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        const columns = grid.columnList.toArray();\n        this._columnList = new Array<any>(columns.length);\n\n        const hiddenColumns = [];\n        let lastVisbleColumnIndex = -1;\n\n        columns.forEach((column) => {\n            const columnHeader = column.header !== '' ? column.header : column.field;\n            const exportColumn = !column.hidden || options.ignoreColumnsVisibility;\n            const index = options.ignoreColumnsOrder ? column.index : column.visibleIndex;\n\n            const columnInfo = {\n                header: columnHeader,\n                field: column.field,\n                skip: !exportColumn,\n                formatter: column.formatter,\n                skipFormatter: false\n            };\n\n            if (index !== -1) {\n                this._columnList[index] = columnInfo;\n                lastVisbleColumnIndex = Math.max(lastVisbleColumnIndex, index);\n            } else {\n                hiddenColumns.push(columnInfo);\n            }\n\n            if (column.pinned && exportColumn) {\n                this._indexOfLastPinnedColumn++;\n            }\n        });\n\n        // Append the hidden columns to the end of the list\n        hiddenColumns.forEach((hiddenColumn) => {\n            this._columnList[++lastVisbleColumnIndex] = hiddenColumn;\n        });\n\n        const data = this.prepareData(grid, options);\n        this.exportData(data, options);\n    }\n\n    /**\n     * Method for exporting any kind of array data.\n     * ```typescript\n     * this.exporterService.exportData(this.arrayForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public exportData(data: any[], options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        if (!this._columnList || this._columnList.length === 0) {\n            const keys = ExportUtilities.getKeysFromData(data);\n            this._columnList = keys.map((k) => ({ header: k, field: k, skip: false }));\n        }\n\n        let skippedPinnedColumnsCount = 0;\n        let columnsWithoutHeaderCount = 1;\n        this._columnList.forEach((column, index) => {\n            if (!column.skip) {\n                const columnExportArgs = {\n                    header: ExportUtilities.isNullOrWhitespaces(column.header) ?\n                        'Column' + columnsWithoutHeaderCount++ : column.header,\n                    field: column.field,\n                    columnIndex: index,\n                    cancel: false,\n                    skipFormatter: false\n                };\n                this.onColumnExport.emit(columnExportArgs);\n\n                column.header = columnExportArgs.header;\n                column.skip = columnExportArgs.cancel;\n                column.skipFormatter = columnExportArgs.skipFormatter;\n\n                if (column.skip && index <= this._indexOfLastPinnedColumn) {\n                    skippedPinnedColumnsCount++;\n                }\n\n                if (this._sort && this._sort.fieldName === column.field) {\n                    if (column.skip) {\n                        this._sort = null;\n                    } else {\n                        this._sort.fieldName = column.header;\n                    }\n                }\n            }\n        });\n\n        this._indexOfLastPinnedColumn -= skippedPinnedColumnsCount;\n\n        const dataToExport = new Array<any>();\n        const isSpecialData = ExportUtilities.isSpecialData(data);\n\n        data.forEach((row, index) => {\n            this.exportRow(dataToExport, row, index, isSpecialData);\n        });\n\n        this.exportDataImplementation(dataToExport, options);\n        this.resetDefaults();\n    }\n\n    protected abstract exportDataImplementation(data: any[], options: IgxExporterOptionsBase): void;\n\n    private exportRow(data: any[], rowData: any, index: number, isSpecialData: boolean) {\n        let row;\n\n        if (!isSpecialData) {\n            row = this._columnList.reduce((a, e) => {\n                if (!e.skip) {\n                    const rawValue = this._isTreeGrid ? rowData.data[e.field] : rowData[e.field];\n                    a[e.header] = e.formatter && !e.skipFormatter ? e.formatter(rawValue) : rawValue;\n                }\n                return a;\n            }, {});\n        } else {\n            row = this._isTreeGrid ? rowData.data : rowData;\n        }\n\n        const rowArgs = {\n            rowData: row,\n            rowIndex: index,\n            cancel: false\n        };\n        this.onRowExport.emit(rowArgs);\n\n        if (!rowArgs.cancel) {\n            data.push({ rowData: rowArgs.rowData, originalRowData: rowData });\n        }\n    }\n\n    private prepareData(grid: any, options: IgxExporterOptionsBase): any[] {\n        this.flatRecords = [];\n        let rootRecords = grid.rootRecords;\n        this._isTreeGrid = rootRecords !== undefined;\n\n        if (this._isTreeGrid) {\n            this.prepareHierarchicalData(rootRecords);\n        }\n\n        let data = this._isTreeGrid ? this.flatRecords : grid.data;\n\n        if (((grid.filteringExpressionsTree &&\n            grid.filteringExpressionsTree.filteringOperands.length > 0) ||\n            (grid.advancedFilteringExpressionsTree &&\n            grid.advancedFilteringExpressionsTree.filteringOperands.length > 0)) &&\n            !options.ignoreFiltering) {\n            const filteringState: any = {\n                expressionsTree: grid.filteringExpressionsTree,\n                advancedExpressionsTree: grid.advancedFilteringExpressionsTree,\n                logic: grid.filteringLogic\n            };\n\n            if (this._isTreeGrid) {\n                this.flatRecords = [];\n                filteringState.strategy = (grid.filterStrategy) ? grid.filterStrategy : new TreeGridFilteringStrategy();\n                rootRecords = filteringState.strategy.filter(rootRecords,\n                    filteringState.expressionsTree, filteringState.advancedExpressionsTree);\n                this.prepareHierarchicalData(rootRecords);\n                data = this.flatRecords;\n            } else {\n                filteringState.strategy = grid.filterStrategy;\n                data = DataUtil.filter(data, filteringState);\n            }\n        }\n\n        if (grid.sortingExpressions &&\n            grid.sortingExpressions.length > 0 &&\n            !options.ignoreSorting) {\n            this._sort = cloneValue(grid.sortingExpressions[0]);\n\n            if (this._isTreeGrid) {\n                this.flatRecords = [];\n                rootRecords = DataUtil.treeGridSort(rootRecords, grid.sortingExpressions, grid.sortStrategy);\n                this.prepareHierarchicalData(rootRecords);\n                data = this.flatRecords;\n            } else {\n                data = DataUtil.sort(data, grid.sortingExpressions, grid.sortStrategy);\n            }\n        }\n\n        return data;\n    }\n\n    private prepareHierarchicalData(records: ITreeGridRecord[]) {\n        if (!records) {\n            return;\n        }\n        for (let i = 0; i < records.length; i++) {\n            const hierarchicalRecord = records[i];\n\n            this.flatRecords.push(hierarchicalRecord);\n            this.prepareHierarchicalData(hierarchicalRecord.children);\n        }\n    }\n\n    private resetDefaults() {\n        this._columnList = [];\n        this._indexOfLastPinnedColumn = -1;\n        this._sort = null;\n        this.flatRecords = [];\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/**\n * @hidden\n */\nexport class CharSeparatedValueData {\n    private _headerRecord = '';\n    private _dataRecords = '';\n    private _eor = '\\r\\n';\n    private _delimiter;\n    private _escapeCharacters = ['\\r', '\\n', '\\r\\n'];\n    private _delimiterLength = 1;\n    private _isSpecialData = false;\n\n    constructor(private _data: any[], valueDelimiter: string)  {\n        this.setDelimiter(valueDelimiter);\n    }\n\n    public prepareData() {\n        if (!this._data || this._data.length === 0) {\n            return '';\n        }\n\n        const keys = ExportUtilities.getKeysFromData(this._data);\n\n        if (keys.length === 0) {\n            return '';\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(this._data);\n        this._escapeCharacters.push(this._delimiter);\n\n        this._headerRecord = this.processHeaderRecord(keys, this._escapeCharacters);\n        this._dataRecords = this.processDataRecords(this._data, keys, this._escapeCharacters);\n\n        return this._headerRecord + this._dataRecords;\n    }\n\n    private processField(value, escapeChars): string {\n        let safeValue = ExportUtilities.hasValue(value) ? String(value) : '';\n        if (escapeChars.some((v) => safeValue.includes(v))) {\n            safeValue = `\"${safeValue}\"`;\n        }\n        return safeValue + this._delimiter;\n    }\n\n    private processHeaderRecord(keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n            recordData += this.processField(keyName, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processRecord(record, keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n\n            const value = (record[keyName] !== undefined) ? record[keyName] : this._isSpecialData ? record : '';\n            recordData += this.processField(value, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processDataRecords(currentData, keys, escapeChars) {\n        let dataRecords = '';\n        for (const row of currentData) {\n            dataRecords += this.processRecord(row, keys, escapeChars);\n        }\n\n        return dataRecords;\n    }\n\n    private setDelimiter(value) {\n        this._delimiter = value;\n        this._delimiterLength = value.length;\n    }\n}\n","export abstract class IgxExporterOptionsBase {\n    private _fileName: string;\n\n    /**\n     * Specifies whether hidden columns should be exported.\n     * ```typescript\n     * let ignoreColumnsVisibility = this.exportOptions.ignoreColumnsVisibility;\n     * this.exportOptions.ignoreColumnsVisibility = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsVisibility = false;\n\n    /**\n     * Specifies whether filtered out rows should be exported.\n     * ```typescript\n     * let ignoreFiltering = this.exportOptions.ignoreFiltering;\n     * this.exportOptions.ignoreFiltering = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreFiltering = false;\n\n    /**\n     * Specifies if the exporter should ignore the current column order in the IgxGrid.\n     * ```typescript\n     * let ignoreColumnsOrder = this.exportOptions.ignoreColumnsOrder;\n     * this.exportOptions.ignoreColumnsOrder = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsOrder = false;\n\n    /**\n     * Specifies whether the exported data should be sorted as in the provided IgxGrid.\n     * ```typescript\n     * let ignoreSorting = this.exportOptions.ignoreSorting;\n     * this.exportOptions.ignoreSorting = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreSorting = false;\n\n    constructor(fileName: string, protected _fileExtension: string) {\n        this.setFileName(fileName);\n    }\n\n    private setFileName(fileName: string): void {\n        this._fileName = fileName + (fileName.endsWith(this._fileExtension) === false ? this._fileExtension : '');\n    }\n\n    /**\n     * Gets the file name which will be used for the exporting operation.\n     * ```typescript\n     * let fileName = this.exportOptions.fileName;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    get fileName() {\n        return this._fileName;\n    }\n\n    /**\n     * Sets the file name which will be used for the exporting operation.\n     * ```typescript\n     * this.exportOptions.fileName = 'exportedData01';\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    set fileName(value) {\n        this.setFileName(value);\n    }\n\n}\n","import { EventEmitter, Injectable, Output } from '@angular/core';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { CharSeparatedValueData } from './char-separated-value-data';\nimport { CsvFileTypes, IgxCsvExporterOptions } from './csv-exporter-options';\nimport { IBaseEventArgs } from '../../core/utils';\n\nexport interface ICsvExportEndedEventArgs extends IBaseEventArgs {\n    csvData: string;\n}\n\n/**\n * **Ignite UI for Angular CSV Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_csv.html)\n *\n * The Ignite UI for Angular CSV Exporter service can export data in a Character Separated Values format from\n * both raw data (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private csvExportService: IgxCsvExporterService) {\n * }\n *\n * const opt: IgxCsvExporterOptions = new IgxCsvExporterOptions(\"FileName\", CsvFileTypes.CSV);\n * this.csvExportService.exportData(this.localData, opt);\n * ```\n */\n@Injectable()\nexport class IgxCsvExporterService extends IgxBaseExporter {\n    private _stringData: string;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: ICsvExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxCsvExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<ICsvExportEndedEventArgs>();\n\n    protected exportDataImplementation(data: any[], options: IgxCsvExporterOptions) {\n        data = data.map((item) => item.rowData);\n        const csvData = new CharSeparatedValueData(data, options.valueDelimiter);\n        this._stringData = csvData.prepareData();\n\n        this.saveFile(options);\n        this.onExportEnded.emit({ csvData: this._stringData });\n    }\n\n    private saveFile(options: IgxCsvExporterOptions) {\n        switch (options.fileType) {\n            case CsvFileTypes.CSV:\n                this.exportFile(this._stringData, options.fileName, 'text/csv;charset=utf-8;');\n                break;\n            case CsvFileTypes.TSV:\n            case CsvFileTypes.TAB:\n                this.exportFile(this._stringData, options.fileName, 'text/tab-separated-values;charset=utf-8;');\n                break;\n        }\n    }\n\n    private exportFile(data: string, fileName: string, fileType: string): void {\n        const blob = new Blob(['\\ufeff', data], { type: fileType });\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","/**\n * @hidden\n */\nexport enum ExcelFolderTypes {\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    DocPropsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    TablesExcelFolder\n}\n/**\n * @hidden\n */\nexport enum ExcelFileTypes {\n    RootRelsFile,\n    AppFile,\n    CoreFile,\n    WorkbookRelsFile,\n    ThemeFile,\n    WorksheetFile,\n    StyleFile,\n    WorkbookFile,\n    ContentTypesFile,\n    SharedStringsFile,\n    WorksheetRelsFile,\n    TablesFile\n}\n","/** @hidden */\nexport class ExcelStrings {\n    /* tslint:disable max-line-length */\n    private static XML_STRING = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\r\\n';\n    private static SHARED_STRING_RELATIONSHIP = '<Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\" />';\n\n    public static getRels(): string {\n        return ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\" Target=\"docProps/app.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"docProps/core.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\"/></Relationships>';\n    }\n\n    public static getApp(): string {\n        return ExcelStrings.XML_STRING + '<Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\" xmlns:vt=\"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"><Application>Microsoft Excel</Application><DocSecurity>0</DocSecurity><ScaleCrop>false</ScaleCrop><HeadingPairs><vt:vector size=\"2\" baseType=\"variant\"><vt:variant><vt:lpstr>Worksheets</vt:lpstr></vt:variant><vt:variant><vt:i4>1</vt:i4></vt:variant></vt:vector></HeadingPairs><TitlesOfParts><vt:vector size=\"1\" baseType=\"lpstr\"><vt:lpstr>Sheet1</vt:lpstr></vt:vector></TitlesOfParts><Company></Company><LinksUpToDate>false</LinksUpToDate><SharedDoc>false</SharedDoc><HyperlinksChanged>false</HyperlinksChanged><AppVersion>16.0300</AppVersion></Properties>';\n    }\n\n    public static getCore(): string {\n        return ExcelStrings.XML_STRING + '<cp:coreProperties xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:dcmitype=\"http://purl.org/dc/dcmitype/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><dc:creator></dc:creator><cp:lastModifiedBy></cp:lastModifiedBy><dcterms:created xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:20Z</dcterms:created><dcterms:modified xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:26Z</dcterms:modified></cp:coreProperties>';\n    }\n\n    public static getTheme(): string {\n        return ExcelStrings.XML_STRING + '<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\"><a:themeElements><a:clrScheme name=\"Office\"><a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"44546A\"/></a:dk2><a:lt2><a:srgbClr val=\"E7E6E6\"/></a:lt2><a:accent1><a:srgbClr val=\"5B9BD5\"/></a:accent1><a:accent2><a:srgbClr val=\"ED7D31\"/></a:accent2><a:accent3><a:srgbClr val=\"A5A5A5\"/></a:accent3><a:accent4><a:srgbClr val=\"FFC000\"/></a:accent4><a:accent5><a:srgbClr val=\"4472C4\"/></a:accent5><a:accent6><a:srgbClr val=\"70AD47\"/></a:accent6><a:hlink><a:srgbClr val=\"0563C1\"/></a:hlink><a:folHlink><a:srgbClr val=\"954F72\"/></a:folHlink></a:clrScheme><a:fontScheme name=\"Office\"><a:majorFont><a:latin typeface=\"Calibri Light\" panose=\"020F0302020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯ Light\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿ Light\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Times New Roman\"/><a:font script=\"Hebr\" typeface=\"Times New Roman\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"MoolBoran\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Times New Roman\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:majorFont><a:minorFont><a:latin typeface=\"Calibri\" panose=\"020F0502020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Arial\"/><a:font script=\"Hebr\" typeface=\"Arial\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"DaunPenh\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Arial\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:minorFont></a:fontScheme><a:fmtScheme name=\"Office\"><a:fillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"110000\"/><a:satMod val=\"105000\"/><a:tint val=\"67000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"103000\"/><a:tint val=\"73000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"109000\"/><a:tint val=\"81000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:satMod val=\"103000\"/><a:lumMod val=\"102000\"/><a:tint val=\"94000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:satMod val=\"110000\"/><a:lumMod val=\"100000\"/><a:shade val=\"100000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"99000\"/><a:satMod val=\"120000\"/><a:shade val=\"78000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:fillStyleLst><a:lnStyleLst><a:ln w=\"6350\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"12700\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"19050\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln></a:lnStyleLst><a:effectStyleLst><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"57150\" dist=\"19050\" dir=\"5400000\" algn=\"ctr\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"63000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle></a:effectStyleLst><a:bgFillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:solidFill><a:schemeClr val=\"phClr\"><a:tint val=\"95000\"/><a:satMod val=\"170000\"/></a:schemeClr></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"93000\"/><a:satMod val=\"150000\"/><a:shade val=\"98000\"/><a:lumMod val=\"102000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:tint val=\"98000\"/><a:satMod val=\"130000\"/><a:shade val=\"90000\"/><a:lumMod val=\"103000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"63000\"/><a:satMod val=\"120000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:bgFillStyleLst></a:fmtScheme></a:themeElements><a:objectDefaults/><a:extraClrSchemeLst/><a:extLst><a:ext uri=\"{05A4C25C-085E-4340-85A3-A5531E510DB2}\"><thm15:themeFamily xmlns:thm15=\"http://schemas.microsoft.com/office/thememl/2012/main\" name=\"Office Theme\" id=\"{62F939B6-93AF-4DB8-9C6B-D6C7DFDC589F}\" vid=\"{4A3C46E8-61CC-4603-A589-7422A47A8E4A}\"/></a:ext></a:extLst></a:theme>';\n    }\n\n    public static getStyles(hasNonStringValues: boolean): string {\n        const additionalCellXF = '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\" applyNumberFormat=\"1\"/>';\n        const cellXFCount = hasNonStringValues ? 2 : 1;\n        return ExcelStrings.XML_STRING + '<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac x16r2\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns:x16r2=\"http://schemas.microsoft.com/office/spreadsheetml/2015/02/main\"><fonts count=\"1\" x14ac:knownFonts=\"1\"><font><sz val=\"11\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts><fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills><borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders><cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs><cellXfs count=\"' + cellXFCount + '\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\"/>' + additionalCellXF + '</cellXfs><cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles><dxfs count=\"0\"/><tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium2\" defaultPivotStyle=\"PivotStyleLight16\"/><extLst><ext uri=\"{EB79DEF2-80B8-43e5-95BD-54CBDDF9020C}\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\"><x14:slicerStyles defaultSlicerStyle=\"SlicerStyleLight1\"/></ext><ext uri=\"{9260A510-F301-46a8-8635-F512D64BE5F5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:timelineStyles defaultTimelineStyle=\"TimeSlicerStyleLight1\"/></ext></extLst></styleSheet>';\n    }\n\n    public static getWorkbook(): string {\n        return ExcelStrings.XML_STRING + '<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x15\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><fileVersion appName=\"xl\" lastEdited=\"6\" lowestEdited=\"6\" rupBuild=\"14420\"/><workbookPr filterPrivacy=\"1\" defaultThemeVersion=\"164011\"/><bookViews><workbookView xWindow=\"0\" yWindow=\"0\" windowWidth=\"22260\" windowHeight=\"12645\"/></bookViews><sheets><sheet name=\"Sheet1\" sheetId=\"1\" r:id=\"rId1\"/></sheets><calcPr calcId=\"162913\"/><extLst><ext uri=\"{140A7094-0E35-4892-8432-C4D2E57EDEB5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:workbookPr chartTrackingRefBase=\"1\"/></ext></extLst></workbook>';\n    }\n\n    public static getWorksheetRels(): string {\n        return ExcelStrings.XML_STRING + `<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/table\" Target=\"../tables/table1.xml\"/></Relationships>`;\n    }\n\n    public static getWorkbookRels(hasSharedStrings): string {\n        let retVal = ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\" Target=\"theme/theme1.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet1.xml\"/>';\n\n        if (hasSharedStrings) {\n            retVal += ExcelStrings.SHARED_STRING_RELATIONSHIP;\n        }\n\n        retVal += '</Relationships>';\n\n        return retVal;\n    }\n\n    public static getSheetXML(dimension: string, freezePane: string, cols: string, sheetData: string, hasTable: boolean, hasGroupedRows = false, outlineLevel = 0): string {\n        const tableParts = hasTable ? '<tableParts count=\"1\"><tablePart r:id=\"rId1\"/></tableParts>' : '';\n        const sheetOutlineProp = hasGroupedRows ? '<sheetPr><outlinePr summaryBelow=\"0\"/></sheetPr>' : '';\n        const sOutlineLevel = outlineLevel > 0 ? `outlineLevelRow=\"${outlineLevel}\"` : '';\n        // return ExcelStrings.XML_STRING +\n        //     '<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\"><dimension ref=\"' + dimension + '\"/><sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">' + freezePane + '</sheetView></sheetViews><sheetFormatPr defaultRowHeight=\"15\" x14ac:dyDescent=\"0.25\"/>' + cols + sheetData + '<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>' + tableParts + '</worksheet>';\n\n        return `${ExcelStrings.XML_STRING}\n<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">\n${sheetOutlineProp}\n<dimension ref=\"${dimension}\"/>\n<sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">${freezePane}</sheetView></sheetViews>\n<sheetFormatPr defaultRowHeight=\"15\" ${sOutlineLevel} x14ac:dyDescent=\"0.25\"/>\n${cols}\n${sheetData}\n<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>\n${tableParts}</worksheet>`;\n\n    }\n\n    public static getSharedStringXML(count: number, uniqueCount: number, table: string): string {\n        return ExcelStrings.XML_STRING + '<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"' + count + '\" uniqueCount=\"' + uniqueCount + '\">' + table + '</sst>';\n    }\n\n    public static getContentTypesXML(hasSharedStrings: boolean, hasTable: boolean): string {\n        let contentTypes = ExcelStrings.XML_STRING +\n        `<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\\\">\n            <Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\"/>\n            <Default Extension=\"xml\" ContentType=\"application/xml\"/>\n            <Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\"/>\n            <Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\"/>\n            <Override PartName=\"/xl/theme/theme1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.theme+xml\"/>\n            <Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\"/>\n            <Override PartName=\"/docProps/core.xml\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\"/>\n            <Override PartName=\"/docProps/app.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.extended-properties+xml\"/>`;\n\n        contentTypes += hasSharedStrings ?\n        `\t<Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\"/>` : '';\n\n        contentTypes += hasTable ?\n            `<Override PartName=\"/xl/tables/table1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\"/>` : '';\n        contentTypes += `</Types>`;\n\n        return contentTypes;\n    }\n\n    public static getTablesXML(dimension: string, tableColumns: string, sort: string): string {\n        return `${ExcelStrings.XML_STRING}<table xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" id=\"1\" name=\"Table1\" displayName=\"Table1\" ref=\"${dimension}\" totalsRowShown=\"0\">\n    <autoFilter ref=\"${dimension}\"/>${sort}${tableColumns}<tableStyleInfo name=\"TableStyleMedium2\" showFirstColumn=\"0\" showLastColumn=\"0\" showRowStripes=\"1\" showColumnStripes=\"0\"/>\n</table>`;\n    }\n    /* tslint:enable max-line-length */\n\n    public static getExcelColumn(index: number): string {\n        // Returns the excel column name for given 0-based index\n        // For example 27 should return \"AB\"\n        let returnString = '';\n        while (index >= 0) {\n            const char = index % 26;\n            returnString = String.fromCharCode(65 + char) + returnString;\n            index = Math.floor(index / 26) - 1;\n        }\n        return returnString;\n    }\n}\n","import { IPositionStrategy } from './position/IPositionStrategy';\n\nimport { IScrollStrategy } from './scroll';\nimport { AnimationReferenceMetadata, AnimationPlayer } from '@angular/animations';\nimport { ComponentRef, ElementRef, NgZone } from '@angular/core';\nimport { IgxOverlayOutletDirective } from '../../directives/toggle/toggle.directive';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, cloneValue, IBaseEventArgs } from '../../core/utils';\n\nexport enum HorizontalAlignment {\n    Left = -1,\n    Center = -0.5,\n    Right = 0\n}\n\nexport enum VerticalAlignment {\n    Top = -1,\n    Middle = -0.5,\n    Bottom = 0\n}\n\nexport class Point {\n    constructor(public x: number, public y: number) { }\n}\n\n/** @hidden */\nexport interface OutOfViewPort {\n    /** Out of view port at Top or Left */\n    back: number;\n    /** Out of view port at Bottom or Right */\n    forward: number;\n}\n\nexport interface PositionSettings {\n    /** Attaching target for the component to show */\n    target?: Point | HTMLElement;\n    /** Direction in which the component should show */\n    horizontalDirection?: HorizontalAlignment;\n    /** Direction in which the component should show */\n    verticalDirection?: VerticalAlignment;\n    /** Target's starting point */\n    horizontalStartPoint?: HorizontalAlignment;\n    /** Target's starting point */\n    verticalStartPoint?: VerticalAlignment;\n    /** Animation applied while overlay opens */\n    openAnimation?: AnimationReferenceMetadata;\n    /** Animation applied while overlay closes */\n    closeAnimation?: AnimationReferenceMetadata;\n    /** The size up to which element may shrink when shown in elastic position strategy */\n    minSize?: Size;\n}\n\nexport interface OverlaySettings {\n    /** Position strategy to use with this settings */\n    positionStrategy?: IPositionStrategy;\n    /** Scroll strategy to use with this settings */\n    scrollStrategy?: IScrollStrategy;\n    /** Set if the overlay should be in modal mode */\n    modal?: boolean;\n    /** Set if the overlay should closed on outside click */\n    closeOnOutsideClick?: boolean;\n    /** Set the outlet container to attach the overlay to */\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n    /**\n     * @hidden @internal\n     * Exclude the position strategy target for outside clicks\n     */\n    excludePositionTarget?: boolean;\n}\n\nexport interface OverlayEventArgs extends IBaseEventArgs {\n    /** Id of the overlay generated with `attach()` method */\n    id: string;\n    /** Available when `Type<T>` is provided to the `attach()` method and allows access to the created Component instance */\n    componentRef?: ComponentRef<{}>;\n}\n\nexport interface OverlayCancelableEventArgs extends OverlayEventArgs, CancelableEventArgs {\n}\n\nexport interface OverlayClosingEventArgs extends OverlayEventArgs, CancelableBrowserEventArgs {\n}\n\nexport interface OverlayAnimationEventArgs extends IBaseEventArgs {\n    /** Id of the overlay generated with `attach()` method */\n    id: string;\n    /** Animation player that will play the animation */\n    animationPlayer: AnimationPlayer;\n    /** Type of animation to be played. It should be either 'open' or 'close' */\n    animationType: 'open' | 'close';\n}\n\nexport interface Size {\n    /** Gets or sets the horizontal component of Size */\n    width: number;\n\n    /** Gets or sets the vertical component of Size */\n    height: number;\n}\n\n/** @hidden */\nexport interface OverlayInfo {\n    id?: string;\n    elementRef?: ElementRef;\n    componentRef?: ComponentRef<{}>;\n    settings?: OverlaySettings;\n    initialSize?: Size;\n    hook?: HTMLElement;\n    openAnimationPlayer?: AnimationPlayer;\n    closeAnimationPlayer?: AnimationPlayer;\n    openAnimationInnerPlayer?: any;\n    closeAnimationInnerPlayer?: any;\n    ngZone: NgZone;\n    transformX?: number;\n    transformY?: number;\n}\n\n/** @hidden */\nexport interface ConnectedFit {\n    contentElementRect?: ClientRect;\n    targetRect?: ClientRect;\n    viewPortRect?: ClientRect;\n    fitHorizontal?: OutOfViewPort;\n    fitVertical?: OutOfViewPort;\n    left?: number;\n    right?: number;\n    top?: number;\n    bottom?: number;\n    horizontalOffset?: number;\n    verticalOffset?: number;\n}\n\n/** @hidden */\nexport class Util {\n    /**\n     * @hidden\n     * Calculates the rectangle of target for provided overlay settings. Defaults to 0,0,0,0,0,0 rectangle\n     * if no target is provided\n     * @param settings Overlay settings for which to calculate target rectangle\n     */\n    static getTargetRect(settings: PositionSettings): ClientRect {\n        let targetRect: ClientRect = {\n            bottom: 0,\n            height: 0,\n            left: 0,\n            right: 0,\n            top: 0,\n            width: 0\n        };\n\n        if (settings.target instanceof HTMLElement) {\n            targetRect = (settings.target as HTMLElement).getBoundingClientRect();\n        } else if (settings.target instanceof Point) {\n            const targetPoint = settings.target as Point;\n            targetRect = {\n                bottom: targetPoint.y,\n                height: 0,\n                left: targetPoint.x,\n                right: targetPoint.x,\n                top: targetPoint.y,\n                width: 0\n            };\n        }\n\n        return targetRect;\n    }\n\n    /** @hidden @internal */\n    static getViewportRect(document: Document): ClientRect {\n        const width = document.documentElement.clientWidth;\n        const height = document.documentElement.clientHeight;\n        const scrollPosition = Util.getViewportScrollPosition(document);\n\n        return {\n            top: scrollPosition.y,\n            left: scrollPosition.x,\n            right: scrollPosition.x + width,\n            bottom: scrollPosition.y + height,\n            width: width,\n            height: height,\n        };\n    }\n\n    /** @hidden @internal */\n    static getViewportScrollPosition(document: Document): Point {\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n\n        const horizontalScrollPosition =\n            -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n        const verticalScrollPosition = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n\n        return new Point(horizontalScrollPosition, verticalScrollPosition);\n    }\n\n    /** @hidden @internal*/\n    static cloneInstance(object) {\n        const clonedObj = Object.assign(Object.create(Object.getPrototypeOf(object)), object);\n        clonedObj.settings = cloneValue(clonedObj.settings);\n        return clonedObj;\n    }\n}\n","import { IExcelFile } from './excel-interfaces';\nimport { ExcelStrings } from './excel-strings';\nimport { WorksheetData } from './worksheet-data';\n\nimport * as JSZip from 'jszip/dist/jszip';\n\n/**\n * @hidden\n */\nexport class RootRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('.rels', ExcelStrings.getRels());\n    }\n}\n\n/**\n * @hidden\n */\nexport class AppFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('app.xml', ExcelStrings.getApp());\n    }\n}\n\n/**\n * @hidden\n */\nexport class CoreFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('core.xml', ExcelStrings.getCore());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const hasSharedStrings = worksheetData.isEmpty === false;\n        folder.file('workbook.xml.rels', ExcelStrings.getWorkbookRels(hasSharedStrings));\n    }\n}\n\n/**\n * @hidden\n */\nexport class ThemeFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('theme1.xml', ExcelStrings.getTheme());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetFile implements IExcelFile {\n    private static MIN_WIDTH = 8.34;\n\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const sheetData = [];\n        const cols = [];\n        let dimension: string;\n        const dictionary = worksheetData.dataDictionary;\n        let freezePane = '';\n        let maxOutlineLevel = 0;\n\n        if (worksheetData.isEmpty) {\n            sheetData.push('<sheetData/>');\n            dimension = 'A1';\n        } else {\n            sheetData.push('<sheetData>');\n            const height =  worksheetData.options.rowHeight;\n            const rowHeight = height ? ' ht=\"' + height + '\" customHeight=\"1\"' : '';\n\n            sheetData.push(`<row r=\"1\"${rowHeight}>`);\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const column = ExcelStrings.getExcelColumn(i) + 1;\n                const value = dictionary.saveValue(worksheetData.keys[i], i, true);\n                sheetData.push(`<c r=\"${column}\" t=\"s\"><v>${value}</v></c>`);\n            }\n            sheetData.push('</row>');\n\n            for (let i = 1; i < worksheetData.rowCount; i++) {\n                if (!worksheetData.isTreeGridData) {\n                    sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}>`);\n                } else {\n                    const rowData = worksheetData.data[i - 1].originalRowData;\n                    const sCollapsed = (!rowData.expanded) ? '' : (rowData.expanded === true) ? '' : ` collapsed=\"1\"`;\n                    const sHidden = (rowData.parent && this.hasCollapsedParent(rowData)) ? ` hidden=\"1\"` : '';\n                    const rowOutlineLevel = rowData.level ? rowData.level : 0;\n                    const sOutlineLevel = rowOutlineLevel > 0 ? ` outlineLevel=\"${rowOutlineLevel}\"` : '';\n                    maxOutlineLevel = maxOutlineLevel < rowOutlineLevel ? rowOutlineLevel : maxOutlineLevel;\n\n                    sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}${sOutlineLevel}${sCollapsed}${sHidden}>`);\n                }\n                for (let j = 0; j < worksheetData.columnCount; j++) {\n                    const cellData = WorksheetFile.getCellData(worksheetData, i, j);\n                    sheetData.push(cellData);\n                }\n                sheetData.push('</row>');\n            }\n            sheetData.push('</sheetData>');\n            dimension = 'A1:' + ExcelStrings.getExcelColumn(worksheetData.columnCount - 1) + worksheetData.rowCount;\n\n            cols.push('<cols>');\n\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const width = dictionary.columnWidths[i];\n                // Use the width provided in the options if it exists\n                const widthInTwips = worksheetData.options.columnWidth ?\n                                    worksheetData.options.columnWidth :\n                                    Math.max(((width / 96) * 14.4), WorksheetFile.MIN_WIDTH);\n\n                cols.push(`<col min=\"${(i + 1)}\" max=\"${(i + 1)}\" width=\"${widthInTwips}\" customWidth=\"1\"/>`);\n            }\n\n            cols.push('</cols>');\n\n            if (worksheetData.indexOfLastPinnedColumn !== -1 &&\n                !worksheetData.options.ignorePinning &&\n                !worksheetData.options.ignoreColumnsOrder) {\n                const frozenColumnCount = worksheetData.indexOfLastPinnedColumn + 1;\n                const firstCell = ExcelStrings.getExcelColumn(frozenColumnCount) + '1';\n                freezePane = `<pane xSplit=\"${frozenColumnCount}\" topLeftCell=\"${firstCell}\" activePane=\"topRight\" state=\"frozen\"/>`;\n            }\n        }\n        const hasTable = !worksheetData.isEmpty && worksheetData.options.exportAsTable;\n\n        folder.file('sheet1.xml',\n                    ExcelStrings.getSheetXML(dimension, freezePane, cols.join(''), sheetData.join(''), hasTable,\n                    worksheetData.isTreeGridData, maxOutlineLevel));\n    }\n\n    private hasCollapsedParent(rowData) {\n        let result = !rowData.parent.expanded;\n        while (rowData.parent) {\n            result = result || !rowData.parent.expanded;\n            rowData = rowData.parent;\n        }\n\n        return result;\n    }\n    /* tslint:disable member-ordering */\n    private static getCellData(worksheetData: WorksheetData, row: number, column: number): string {\n        const dictionary = worksheetData.dataDictionary;\n        const columnName = ExcelStrings.getExcelColumn(column) + (row + 1);\n        const columnHeader = worksheetData.keys[column];\n\n        const rowData = worksheetData.data[row - 1].rowData;\n\n        const cellValue = worksheetData.isSpecialData ? rowData : rowData[columnHeader];\n\n        if (cellValue === undefined || cellValue === null) {\n            return `<c r=\"${columnName}\" s=\"1\"/>`;\n        } else {\n            const savedValue = dictionary.saveValue(cellValue, column, false);\n            const isSavedAsString = savedValue !== -1;\n\n            const value = isSavedAsString ? savedValue : cellValue;\n            const type = isSavedAsString ? ` t=\"s\"` : '';\n            const format = isSavedAsString ? '' : ` s=\"1\"`;\n\n            return `<c r=\"${columnName}\"${type}${format}><v>${value}</v></c>`;\n        }\n    }\n    /* tslint:enable member-ordering */\n}\n\n/**\n * @hidden\n */\nexport class StyleFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('styles.xml', ExcelStrings.getStyles(worksheetData.dataDictionary && worksheetData.dataDictionary.hasNonStringValues));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('workbook.xml', ExcelStrings.getWorkbook());\n    }\n}\n\n/**\n * @hidden\n */\nexport class ContentTypesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('[Content_Types].xml', ExcelStrings.getContentTypesXML(!worksheetData.isEmpty, worksheetData.options.exportAsTable));\n    }\n}\n\n/**\n * @hidden\n */\nexport class SharedStringsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const dict = worksheetData.dataDictionary;\n        const sortedValues = dict.getKeys();\n        const sharedStrings = new Array<string>(sortedValues.length);\n\n        for (const value of sortedValues) {\n            sharedStrings[dict.getSanitizedValue(value)] = '<si><t>' + value + '</t></si>';\n        }\n\n        folder.file('sharedStrings.xml', ExcelStrings.getSharedStringXML(\n                        dict.stringsCount,\n                        sortedValues.length,\n                        sharedStrings.join(''))\n                    );\n    }\n}\n\n/**\n * @hidden\n */\nexport class TablesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const columnCount = worksheetData.columnCount;\n        const lastColumn = ExcelStrings.getExcelColumn(columnCount - 1) + worksheetData.rowCount;\n        const dimension = 'A1:' + lastColumn;\n        const values = worksheetData.keys;\n        let sortString = '';\n\n        let tableColumns = '<tableColumns count=\"' + columnCount + '\">';\n        for (let i = 0; i < columnCount; i++) {\n            const value =  values[i];\n            tableColumns += '<tableColumn id=\"' + (i + 1) + '\" name=\"' + value + '\"/>';\n        }\n\n        tableColumns += '</tableColumns>';\n\n        if (worksheetData.sort) {\n            const sortingExpression = worksheetData.sort;\n            const sc = ExcelStrings.getExcelColumn(values.indexOf(sortingExpression.fieldName));\n            const dir = sortingExpression.dir - 1;\n            sortString = `<sortState ref=\"A2:${lastColumn}\"><sortCondition descending=\"${dir}\" ref=\"${sc}1:${sc}15\"/></sortState>`;\n        }\n\n        folder.file('table1.xml', ExcelStrings.getTablesXML(dimension, tableColumns, sortString));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('sheet1.xml.rels', ExcelStrings.getWorksheetRels());\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport { IExcelFolder } from './excel-interfaces';\nimport { WorksheetData } from './worksheet-data';\n\n/** @hidden */\nexport class RootExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ContentTypesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [\n            ExcelFolderTypes.RootRelsExcelFolder,\n            ExcelFolderTypes.DocPropsExcelFolder,\n            ExcelFolderTypes.XLExcelFolder\n        ];\n    }\n}\n\n/** @hidden */\nexport class RootRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.RootRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class DocPropsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'docProps';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [\n            ExcelFileTypes.AppFile,\n            ExcelFileTypes.CoreFile\n        ];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class XLExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'xl';\n    }\n\n    childFiles(data: WorksheetData) {\n        const retVal = [\n            ExcelFileTypes.StyleFile,\n            ExcelFileTypes.WorkbookFile\n        ];\n\n        if (!data.isEmpty) {\n            retVal.push(ExcelFileTypes.SharedStringsFile);\n        }\n\n        return retVal;\n    }\n\n    childFolders(data: WorksheetData) {\n        const retVal = [\n            ExcelFolderTypes.XLRelsExcelFolder,\n            ExcelFolderTypes.ThemeExcelFolder,\n            ExcelFolderTypes.WorksheetsExcelFolder\n        ];\n\n        if (!data.isEmpty && data.options.exportAsTable) {\n            retVal.push(ExcelFolderTypes.TablesExcelFolder);\n        }\n\n        return retVal;\n    }\n}\n\n/** @hidden */\nexport class XLRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorkbookRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class ThemeExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'theme';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ThemeFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'worksheets';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return data.isEmpty || !data.options.exportAsTable ? [] : [ExcelFolderTypes.WorksheetsRelsExcelFolder];\n    }\n}\n\n/** @hidden */\nexport class TablesExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return 'tables';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.TablesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport {\n    AppFile,\n    ContentTypesFile,\n    CoreFile,\n    RootRelsFile,\n    SharedStringsFile,\n    StyleFile,\n    TablesFile,\n    ThemeFile,\n    WorkbookFile,\n    WorkbookRelsFile,\n    WorksheetFile,\n    WorksheetRelsFile\n} from './excel-files';\n\nimport {\n    DocPropsExcelFolder,\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    TablesExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder\n} from './excel-folders';\n\nimport {\n    IExcelFile,\n    IExcelFolder\n} from './excel-interfaces';\n\n/** @hidden */\nexport class ExcelElementsFactory {\n\n    public static getExcelFolder(type: ExcelFolderTypes): IExcelFolder {\n        switch (type) {\n            case ExcelFolderTypes.RootExcelFolder:\n                return new RootExcelFolder();\n            case ExcelFolderTypes.RootRelsExcelFolder:\n                return new RootRelsExcelFolder();\n            case ExcelFolderTypes.DocPropsExcelFolder:\n                return new DocPropsExcelFolder();\n            case ExcelFolderTypes.XLExcelFolder:\n                return new XLExcelFolder();\n            case ExcelFolderTypes.XLRelsExcelFolder:\n                return new XLRelsExcelFolder();\n            case ExcelFolderTypes.ThemeExcelFolder:\n                return new ThemeExcelFolder();\n            case ExcelFolderTypes.WorksheetsExcelFolder:\n                return  new WorksheetsExcelFolder();\n            case ExcelFolderTypes.WorksheetsRelsExcelFolder:\n                return new WorksheetsRelsExcelFolder();\n            case ExcelFolderTypes.TablesExcelFolder:\n                return new TablesExcelFolder();\n            default:\n                throw new Error('Unknown excel folder type!');\n        }\n    }\n\n    public static getExcelFile(type: ExcelFileTypes): IExcelFile {\n        switch (type) {\n            case ExcelFileTypes.RootRelsFile:\n                return  new RootRelsFile();\n            case ExcelFileTypes.AppFile:\n                return  new AppFile();\n            case ExcelFileTypes.CoreFile:\n                return new CoreFile();\n            case ExcelFileTypes.WorkbookRelsFile:\n                return new WorkbookRelsFile();\n            case ExcelFileTypes.ThemeFile:\n                return new ThemeFile();\n            case ExcelFileTypes.WorksheetFile:\n                return new WorksheetFile();\n            case ExcelFileTypes.StyleFile:\n                return new StyleFile();\n            case ExcelFileTypes.WorkbookFile:\n                return new WorkbookFile();\n            case ExcelFileTypes.ContentTypesFile:\n                return new ContentTypesFile();\n            case ExcelFileTypes.SharedStringsFile:\n                return new SharedStringsFile();\n            case ExcelFileTypes.WorksheetRelsFile:\n                return new WorksheetRelsFile();\n            case ExcelFileTypes.TablesFile:\n                return new TablesFile();\n            default:\n                throw Error('Unknown excel file type!');\n        }\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/** @hidden */\nexport class WorksheetDataDictionary {\n    private static DEFAULT_FONT = '11pt Calibri';\n    private static TEXT_PADDING = 5;\n\n    private _dictionary: any;\n    private _widthsDictionary: any;\n\n    private _sortedKeysByValue: string[];\n    private _sortedKeysByValueAreValid: boolean;\n\n    private _keys: string[];\n    private _keysAreValid: boolean;\n\n    private _counter: number;\n    private _calculateColumnWidth: boolean;\n    private _columnWidths: number[];\n    private _context: any;\n\n    private _columnTypeInfo: boolean[];\n    public hasNonStringValues = false;\n\n    public stringsCount: number;\n\n    constructor(columnCount: number, columnWidth: number) {\n        this._dictionary = {};\n        this._widthsDictionary = {};\n        this._counter = 0;\n        this.dirtyKeyCollections();\n\n        this._calculateColumnWidth = !columnWidth;\n        this._columnWidths = new Array<number>(columnCount);\n        this._columnTypeInfo = new Array<boolean>(columnCount);\n\n        if (!this._calculateColumnWidth) {\n            this._columnWidths.fill(columnWidth);\n        }\n\n        this.stringsCount = 0;\n    }\n\n    public get columnWidths() {\n        return this._columnWidths;\n    }\n\n    public saveValue(value: any, column: number, isHeader: boolean): number {\n        if (this._columnTypeInfo[column] === undefined && isHeader === false) {\n            this._columnTypeInfo[column] = typeof value === 'string' ||\n                                            typeof value === 'boolean' ||\n                                            value instanceof Date;\n        }\n\n        let sanitizedValue = '';\n        const isSavedAsString = this._columnTypeInfo[column] || isHeader;\n\n        if (isSavedAsString) {\n            sanitizedValue = this.sanitizeValue(value);\n\n            if (this._dictionary[sanitizedValue] === undefined) {\n                this._dictionary[sanitizedValue] = this._counter++;\n                this.dirtyKeyCollections();\n            }\n\n            this.stringsCount ++;\n        } else {\n            this.hasNonStringValues = true;\n        }\n\n        if (this._calculateColumnWidth) {\n            const width = this.getTextWidth(value);\n            const maxWidth = Math.max(this._columnWidths[column] || 0, width);\n            this._columnWidths[column] = maxWidth;\n        }\n\n        return isSavedAsString ? this.getSanitizedValue(sanitizedValue) : -1;\n    }\n\n    public getValue(value: string): number {\n        return this.getSanitizedValue(this.sanitizeValue(value));\n    }\n\n    public getSanitizedValue(sanitizedValue: string): number {\n        return this._dictionary[sanitizedValue];\n    }\n\n    public getKeys(): string[] {\n        if (!this._keysAreValid) {\n            this._keys = Object.keys(this._dictionary);\n            this._keysAreValid = true;\n        }\n\n        return this._keys;\n    }\n\n    private getTextWidth(value: any): number {\n        if (this._widthsDictionary[value] === undefined) {\n            const context = this.getContext();\n            const metrics = context.measureText(value);\n            this._widthsDictionary[value] = metrics.width + WorksheetDataDictionary.TEXT_PADDING;\n        }\n\n        return this._widthsDictionary[value];\n    }\n\n    private getContext(): any {\n        if (!this._context) {\n            const canvas = document.createElement('canvas');\n            this._context = canvas.getContext('2d');\n            this._context.font = WorksheetDataDictionary.DEFAULT_FONT;\n        }\n\n        return this._context;\n    }\n\n    private sanitizeValue(value: any): string {\n        if (ExportUtilities.hasValue(value) === false) {\n            return '';\n        } else {\n            const stringValue = String(value);\n            return stringValue.replace(/&/g, '&amp;')\n                            .replace(/</g, '&lt;')\n                            .replace(/>/g, '&gt;')\n                            .replace(/\"/g, '&quot;')\n                            .replace(/'/g, '&apos;');\n        }\n    }\n\n    private dirtyKeyCollections(): void {\n        this._keysAreValid = false;\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { WorksheetDataDictionary } from './worksheet-data-dictionary';\n\n/** @hidden */\nexport class WorksheetData {\n    private _columnCount: number;\n    private _rowCount: number;\n    private _dataDictionary: WorksheetDataDictionary;\n    private _keys: string[];\n    private _isSpecialData: boolean;\n\n    constructor(private _data: any[], public options: IgxExcelExporterOptions, public indexOfLastPinnedColumn,\n                public sort: any, public isTreeGridData = false) {\n        this.initializeData();\n    }\n\n    public get data() {\n        return this._data;\n    }\n\n    public get columnCount(): number {\n        return this._columnCount;\n    }\n\n    public get rowCount(): number {\n        return this._rowCount;\n    }\n\n    public get isEmpty() {\n        return !this.rowCount || !this._columnCount;\n    }\n\n    public get keys(): string[] {\n        return this._keys;\n    }\n\n    public get isSpecialData(): boolean {\n        return this._isSpecialData;\n    }\n\n    public get dataDictionary() {\n        return this._dataDictionary;\n    }\n\n    private initializeData() {\n        if (!this._data || this._data.length === 0) {\n            return;\n        }\n\n        const actualData = this._data.map((item) => item.rowData);\n\n        this._keys = ExportUtilities.getKeysFromData(actualData);\n        if (this._keys.length === 0) {\n            return;\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(actualData);\n\n        this._columnCount = this._keys.length;\n        this._rowCount = this._data.length + 1;\n\n        this._dataDictionary = new WorksheetDataDictionary(this._columnCount, this.options.columnWidth);\n    }\n}\n","import * as JSZip from 'jszip/dist/jszip';\n\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { ExcelElementsFactory } from './excel-elements-factory';\nimport { ExcelFolderTypes } from './excel-enums';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { IExcelFolder } from './excel-interfaces';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { WorksheetData } from './worksheet-data';\nimport { IBaseEventArgs } from '../../core/utils';\n\nexport interface IExcelExportEndedEventArgs extends IBaseEventArgs {\n    xlsx: JSZip;\n}\n\n/**\n * **Ignite UI for Angular Excel Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_excel.html)\n *\n * The Ignite UI for Angular Excel Exporter service can export data in MicrosoftÂ® ExcelÂ® format from both raw data\n * (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private excelExportService: IgxExcelExporterService) {\n * }\n *\n * this.excelExportService.exportData(this.localData, new IgxExcelExporterOptions(\"FileName\"));\n * ```\n */\n@Injectable()\nexport class IgxExcelExporterService extends IgxBaseExporter {\n\n    private static ZIP_OPTIONS = { compression: 'DEFLATE', type: 'base64' };\n    private _xlsx: JSZip;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: IExcelExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxExcelExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<IExcelExportEndedEventArgs>();\n\n    private static populateFolder(folder: IExcelFolder, zip: JSZip, worksheetData: WorksheetData): any {\n        for (const childFolder of folder.childFolders(worksheetData)) {\n            const folderIntance = ExcelElementsFactory.getExcelFolder(childFolder);\n            const zipFolder = zip.folder(folderIntance.folderName);\n            IgxExcelExporterService.populateFolder(folderIntance, zipFolder, worksheetData);\n        }\n\n        for (const childFile of folder.childFiles(worksheetData)) {\n            const fileInstance = ExcelElementsFactory.getExcelFile(childFile);\n            fileInstance.writeElement(zip, worksheetData);\n        }\n    }\n\n    protected exportDataImplementation(data: any[], options: IgxExcelExporterOptions): void {\n        if (this._isTreeGrid) {\n            let maxLevel = 0;\n            data.forEach((r) => {\n                maxLevel = Math.max(maxLevel, r.originalRowData.level);\n            });\n            if (maxLevel > 7) {\n                throw Error('Can create an outline of up to eight levels!');\n            }\n        }\n\n        const worksheetData = new WorksheetData(data, options, this._indexOfLastPinnedColumn, this._sort, this._isTreeGrid);\n        this._xlsx = new JSZip();\n\n        const rootFolder = ExcelElementsFactory.getExcelFolder(ExcelFolderTypes.RootExcelFolder);\n        IgxExcelExporterService.populateFolder(rootFolder, this._xlsx, worksheetData);\n\n        this._xlsx.generateAsync(IgxExcelExporterService.ZIP_OPTIONS).then((result) => {\n            this.saveFile(result, options.fileName);\n\n            this.onExportEnded.emit({ xlsx: this._xlsx });\n        });\n    }\n\n    private saveFile(data: string, fileName: string): void {\n        const blob = new Blob([ExportUtilities.stringToArrayBuffer(atob(data))], {\n            type: ''\n        });\n\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the Excel exporting process.\n */\nexport class IgxExcelExporterOptions extends IgxExporterOptionsBase {\n    private _columnWidth: number;\n    private _rowHeight: number;\n\n    /**\n     * Specifies if column pinning should be ignored. If ignoreColumnsOrder is set to true,\n     * this option will always be considered as set to true.\n     * ```typescript\n     * let ignorePinning = this.exportOptions.ignorePinning;\n     * this.exportOptions.ignorePinning = true;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public ignorePinning = false;\n\n    /**\n     * Specifies whether the exported data should be formatted as Excel table. (True by default)\n     * ```typescript\n     * let exportAsTable = this.exportOptions.exportAsTable;\n     * this.exportOptions.exportAsTable = false;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public exportAsTable = true;\n\n    constructor(fileName: string) {\n        super(fileName, '.xlsx');\n    }\n\n    /**\n     * Gets the width of the columns in the exported excel file.\n     * ```typescript\n     * let width = this.exportOptions.columnWidth;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get columnWidth(): number {\n        return this._columnWidth;\n    }\n\n    /**\n     * Sets the width of the columns in the exported excel file. If left unspecified or 0,\n     * the width of the largest string in the column will be used.\n     * ```typescript\n     * this.exportOptions.columnWidth = 55;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set columnWidth(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for column width!');\n        }\n\n        this._columnWidth = value;\n    }\n\n    /**\n     * Gets the height of the rows in the exported excel file.\n     * ```typescript\n     * let height = this.exportOptions.rowHeight;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get rowHeight(): number {\n        return this._rowHeight;\n    }\n\n    /**\n     * Sets the height of the rows in the exported excel file. If left unspecified or 0,\n     * the default height of the excel rows will be used.\n     * ```typescript\n     * this.exportOptions.rowHeight = 25;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set rowHeight(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for row height!');\n        }\n\n        this._rowHeight = value;\n    }\n}\n","import { IPositionStrategy } from './IPositionStrategy';\nimport { PositionSettings, HorizontalAlignment, VerticalAlignment, Size, Util, OverlaySettings } from './../utilities';\nimport { fadeIn, fadeOut } from '../../../animations/main';\n\n/**\n * Positions the element based on the directions passed in trough PositionSettings.\n * These are Top/Middle/Bottom for verticalDirection and Left/Center/Right for horizontalDirection\n */\nexport class GlobalPositionStrategy implements IPositionStrategy {\n    protected _defaultSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Center,\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut,\n        minSize: { width: 0, height: 0 }\n    };\n\n    /** @inheritdoc */\n    public settings: PositionSettings;\n\n    constructor(settings?: PositionSettings) {\n        this.settings = Object.assign({}, this._defaultSettings, settings);\n    }\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size?: Size, document?: Document, initialCall?: boolean): void {\n        contentElement.classList.add('igx-overlay__content--relative');\n        contentElement.parentElement.classList.add('igx-overlay__wrapper--flex');\n        this.setPosition(contentElement, this.settings);\n    }\n\n    protected setPosition(contentElement: HTMLElement, settings: PositionSettings) {\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                contentElement.parentElement.style.justifyContent = 'flex-start';\n                break;\n            case HorizontalAlignment.Center:\n                contentElement.parentElement.style.justifyContent = 'center';\n                break;\n            case HorizontalAlignment.Right:\n                contentElement.parentElement.style.justifyContent = 'flex-end';\n                break;\n            default:\n                break;\n        }\n\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                contentElement.parentElement.style.alignItems = 'flex-start';\n                break;\n            case VerticalAlignment.Middle:\n                contentElement.parentElement.style.alignItems = 'center';\n                break;\n            case VerticalAlignment.Bottom:\n                contentElement.parentElement.style.alignItems = 'flex-end';\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** @inheritdoc */\n    clone(): IPositionStrategy {\n        return Util.cloneInstance(this);\n    }\n}\n\n","import { IScrollStrategy } from './IScrollStrategy';\nimport { IgxOverlayService } from '../overlay';\n\nexport abstract class ScrollStrategy implements IScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) { }\n    /** @inheritdoc */\n    abstract initialize(document: Document, overlayService: IgxOverlayService, id: string);\n\n    /** @inheritdoc */\n    abstract attach(): void;\n\n    /** @inheritdoc */\n    abstract detach(): void;\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Empty scroll strategy. Does nothing.\n */\nexport class NoOpScrollStrategy extends ScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n    }\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) { }\n\n    /** @inheritdoc */\n    attach(): void { }\n\n    /** @inheritdoc */\n    detach(): void { }\n}\n","import { isDevMode } from '@angular/core';\n\n/**\n * @hidden\n */\nexport function DeprecateMethod(message: string): MethodDecorator {\n    let isMessageShown = false;\n\n    return function (target: any, key: string, descriptor: PropertyDescriptor) {\n        if (descriptor && descriptor.value) {\n            const originalMethod = descriptor.value;\n\n            descriptor.value = function () {\n                const targetName = typeof target === 'function' ? target.name : target.constructor.name;\n                isMessageShown = showMessage(`${targetName}.${key}: ${message}`, isMessageShown);\n\n                return originalMethod.call(this, arguments);\n            };\n\n            return descriptor;\n        }\n    };\n}\n\n/**\n * @hidden\n */\nexport function DeprecateProperty(message: string): PropertyDecorator {\n    return function(target: any, key: string) {\n        let isMessageShown = false;\n        const messageToDisplay = `${target.constructor.name}.${key}: ${message}`;\n\n        // if the target already has the property defined\n        const originalDescriptor = Object.getOwnPropertyDescriptor(target, key);\n        if (originalDescriptor) {\n            let getter, setter;\n            getter = originalDescriptor.get;\n            setter = originalDescriptor.set;\n\n            if (getter) {\n                originalDescriptor.get = function() {\n                    isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                    return getter.call(this);\n                };\n            }\n\n            if (setter) {\n                originalDescriptor.set = function (value) {\n                    isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                    setter.call(this, value);\n                };\n            }\n\n            return originalDescriptor;\n        }\n\n        // the target doesn't contain a descriptor for that property, so create one\n        // use backing field to set/get the value of the property to ensure there won't be infinite recursive calls\n        const newKey = generateUniqueKey(target, key);\n        Object.defineProperty(target, key, {\n            configurable: true,\n            enumerable: true,\n            set: function(value) {\n                isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                this[newKey] = value;\n            },\n            get: function() {\n                isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                return this[newKey];\n            }\n        });\n    };\n}\n\n/**\n * @hidden\n */\nfunction generateUniqueKey(target: any, key: string): string {\n    let newKey = '_' + key;\n    while (target.hasOwnProperty(newKey)) {\n        newKey = '_' + newKey;\n    }\n\n    return newKey;\n}\n\n/**\n * @hidden\n */\nexport function showMessage(message: string, isMessageShown: boolean): boolean {\n    if (!isMessageShown && isDevMode()) {\n        console.warn(message);\n    }\n\n    return true;\n}\n","import { DOCUMENT } from '@angular/common';\nimport { GlobalPositionStrategy } from './position/global-position-strategy';\nimport { NoOpScrollStrategy } from './scroll/NoOpScrollStrategy';\nimport {\n    OverlaySettings,\n    OverlayEventArgs,\n    OverlayInfo,\n    OverlayAnimationEventArgs,\n    OverlayCancelableEventArgs,\n    OverlayClosingEventArgs\n} from './utilities';\n\nimport {\n    ApplicationRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injectable,\n    Injector,\n    Type,\n    OnDestroy,\n    NgModuleRef,\n    NgZone\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, AnimationMetadataType, AnimationAnimateRefMetadata } from '@angular/animations';\nimport { fromEvent, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { IAnimationParams } from '../../animations/main';\nimport { showMessage } from '../../core/deprecateDecorators';\n\nlet warningShown = false;\n\n/**\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/overlay_main.html)\n * The overlay service allows users to show components on overlay div above all other elements in the page.\n */\n@Injectable({ providedIn: 'root' })\nexport class IgxOverlayService implements OnDestroy {\n    private _componentId = 0;\n    private _overlayInfos: OverlayInfo[] = [];\n    private _overlayElement: HTMLElement;\n    private _document: Document;\n    private destroy$ = new Subject<boolean>();\n\n    private _defaultSettings: OverlaySettings = {\n        positionStrategy: new GlobalPositionStrategy(),\n        scrollStrategy: new NoOpScrollStrategy(),\n        modal: true,\n        closeOnOutsideClick: true\n    };\n\n    /**\n     * Emitted before the component is opened.\n     * ```typescript\n     * onOpening(event: OverlayCancelableEventArgs){\n     *     const onOpening = event;\n     * }\n     * ```\n     */\n    public onOpening = new EventEmitter<OverlayCancelableEventArgs>();\n\n    /**\n     * Emitted after the component is appended to the overlay, and before animations are started.\n     * ```typescript\n     * onAppended(event: OverlayEventArgs){\n     *     const onAppended = event;\n     * }\n     * ```\n     */\n    public onAppended = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted after the component is opened and all animations are finished.\n     * ```typescript\n     * onOpened(event: OverlayEventArgs){\n     *     const onOpened = event;\n     * }\n     * ```\n     */\n    public onOpened = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before the component is closed.\n     * ```typescript\n     * onClosing(event: OverlayCancelableEventArgs){\n     *     const onClosing = event;\n     * }\n     * ```\n     */\n    public onClosing = new EventEmitter<OverlayClosingEventArgs>();\n\n    /**\n     * Emitted after the component is closed and all animations are finished.\n     * ```typescript\n     * onClosed(event: OverlayEventArgs){\n     *     const onClosed = event;\n     * }\n     * ```\n     */\n    public onClosed = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before animation is started\n     * ```typescript\n     * onAnimation(event: OverlayAnimationEventArgs){\n     *     const onAnimation = event;\n     * }\n     * ```\n     */\n    public onAnimation = new EventEmitter<OverlayAnimationEventArgs>();\n\n    constructor(\n        private _factoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private builder: AnimationBuilder,\n        @Inject(DOCUMENT) private document: any,\n        private _zone: NgZone) {\n        this._document = <Document>this.document;\n    }\n\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component ElementRef to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(element: ElementRef, settings?: OverlaySettings): string;\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @param moduleRef Optional reference to an object containing Injector and ComponentFactoryResolver\n     * that can resolve the component's factory\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(component: Type<any>, settings?: OverlaySettings,\n        moduleRef?: Pick<NgModuleRef<any>, 'injector' | 'componentFactoryResolver'>): string;\n    attach(component: ElementRef | Type<any>, settings?: OverlaySettings,\n        moduleRef?: Pick<NgModuleRef<any>, 'injector' | 'componentFactoryResolver'>): string {\n        let info: OverlayInfo;\n        info = this.getOverlayInfo(component, moduleRef);\n\n        //  if there is no info most probably wrong type component was provided and we just go out\n        if (!info) {\n            return null;\n        }\n\n        info.id = (this._componentId++).toString();\n        settings = Object.assign({}, this._defaultSettings, settings);\n        info.settings = settings;\n        this._overlayInfos.push(info);\n        return info.id;\n    }\n\n    /**\n     * Shows the overlay for provided id.\n     * @param id Id to show overlay for\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     */\n    show(id: string, settings?: OverlaySettings): string;\n    /**\n     * Shows the provided component.\n     * @param component ElementRef or Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     * ```typescript\n     * this.overlay.show(element, settings);\n     * ```\n     * @deprecated Use `attach(component)` to obtain an Id. Then `show(id, settings?)` with provided Id.\n     */\n    // tslint:disable-next-line:unified-signatures\n    show(component: ElementRef | Type<any>, settings?: OverlaySettings): string;\n    show(compOrId: string | ElementRef | Type<any>, settings?: OverlaySettings): string {\n        let info: OverlayInfo;\n        let id: string;\n        if (typeof compOrId === 'string') {\n            id = compOrId;\n            info = this.getOverlayById(compOrId);\n            if (!info) {\n                console.warn('igxOverlay.show was called with wrong id: ' + compOrId);\n                return null;\n            }\n        } else {\n            warningShown = showMessage(\n                '`show(component, settings?)` overload is deprecated. Use `attach(component)` to obtain an Id.' +\n                'Then `show(id, settings?)` with provided Id.',\n                warningShown);\n            id = (this._componentId++).toString();\n            info = this.getOverlayInfo(compOrId);\n\n            //  if there is no info most probably wrong type component was provided and we just go out\n            if (!info) {\n                return;\n            }\n\n            info.id = id;\n        }\n\n        settings = Object.assign({}, this._defaultSettings, info.settings, settings);\n        info.settings = settings;\n\n        this._show(info);\n        return id;\n    }\n\n    /**\n     * Hides the component with the ID provided as a parameter.\n     * ```typescript\n     * this.overlay.hide(id);\n     * ```\n     */\n    hide(id: string) {\n        this._hide(id);\n    }\n\n    /**\n     * Hides all the components and the overlay.\n     * ```typescript\n     * this.overlay.hideAll();\n     * ```\n     */\n    hideAll() {\n        // since overlays are removed on animation done, que all hides\n        for (let i = this._overlayInfos.length; i--;) {\n            this.hide(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     * Repositions the component with ID provided as a parameter.\n     * ```typescript\n     * this.overlay.reposition(id);\n     * ```\n     */\n    reposition(id: string) {\n        const overlayInfo = this.getOverlayById(id);\n        if (!overlayInfo || !overlayInfo.settings) {\n            console.error('Wrong id provided in overlay.reposition method. Id: ' + id);\n            return;\n        }\n\n        const contentElement = overlayInfo.elementRef.nativeElement.parentElement;\n        const contentElementRect = contentElement.getBoundingClientRect();\n        overlayInfo.settings.positionStrategy.position(\n            contentElement,\n            {\n                width: contentElementRect.width,\n                height: contentElementRect.height\n            },\n            this._document,\n            false);\n    }\n\n    /**\n     * Offsets the content along the corresponding axis by the provided amount\n     * ```typescript\n     * this.overlay.setOffset(id, deltaX, deltaY);\n     * ```\n     */\n    setOffset(id: string, deltaX: number, deltaY: number) {\n        const info: OverlayInfo = this.getOverlayById(id);\n\n        if (!info) {\n           return;\n        }\n\n        info.transformX += deltaX;\n        info.transformY += deltaY;\n\n        const transformX = info.transformX;\n        const transformY = info.transformY;\n\n        const translate = `translate(${transformX}px, ${transformY}px)`;\n        info.elementRef.nativeElement.parentElement.style.transform = translate;\n    }\n\n    private _show(info: OverlayInfo) {\n        const eventArgs: OverlayCancelableEventArgs = { id: info.id, componentRef: info.componentRef, cancel: false };\n        this.onOpening.emit(eventArgs);\n        if (eventArgs.cancel) {\n            if (info.componentRef) {\n                this._appRef.detachView(info.componentRef.hostView);\n                info.componentRef.destroy();\n            }\n\n            return;\n        }\n\n        //  if there is no close animation player, or there is one but it is not started yet we are in clear\n        //  opening. Otherwise, if there is close animation player playing animation now we should not setup\n        //  overlay this is already done\n        if (!info.closeAnimationPlayer || (info.closeAnimationPlayer && !info.closeAnimationPlayer.hasStarted())) {\n            const elementRect = info.elementRef.nativeElement.getBoundingClientRect();\n            info.initialSize = { width: elementRect.width, height: elementRect.height };\n            info.hook = this.placeElementHook(info.elementRef.nativeElement);\n\n            this.moveElementToOverlay(info);\n            if (info.componentRef) {\n                info.componentRef.changeDetectorRef.detectChanges();\n            }\n\n            this.onAppended.emit({ id: info.id, componentRef: info.componentRef });\n\n            this.updateSize(info);\n            if (this._overlayInfos.indexOf(info) === -1) {\n                this._overlayInfos.push(info);\n            }\n\n            info.settings.positionStrategy.position(\n                info.elementRef.nativeElement.parentElement,\n                { width: info.initialSize.width, height: info.initialSize.height },\n                document,\n                true);\n            info.settings.scrollStrategy.initialize(this._document, this, info.id);\n            info.settings.scrollStrategy.attach();\n        }\n\n        this.addOutsideClickListener(info);\n        this.addResizeHandler(info.id);\n\n        if (info.settings.modal) {\n            this.setupModalWrapper(info);\n        }\n\n        if (info.settings.positionStrategy.settings.openAnimation) {\n            this.playOpenAnimation(info);\n        } else {\n            //  to eliminate flickering show the element just before onOpened fire\n            info.elementRef.nativeElement.parentElement.style.visibility = '';\n            this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n        }\n    }\n\n    private _hide(id: string, event?: Event) {\n        const info: OverlayInfo = this.getOverlayById(id);\n\n        if (!info) {\n            console.warn('igxOverlay.hide was called with wrong id: ' + id);\n            return;\n        }\n\n        const eventArgs = { id, componentRef: info.componentRef, cancel: false, event };\n        this.onClosing.emit(eventArgs);\n        if (eventArgs.cancel) {\n            return;\n        }\n\n        //  TODO: synchronize where these are added/attached and where removed/detached\n        info.settings.scrollStrategy.detach();\n        this.removeOutsideClickListener(info);\n        this.removeResizeHandler(info.id);\n\n        const child: HTMLElement = info.elementRef.nativeElement;\n        if (info.settings.modal) {\n            const parent = child.parentNode.parentNode as HTMLElement;\n            this.applyAnimationParams(parent, info.settings.positionStrategy.settings.closeAnimation);\n            parent.classList.remove('igx-overlay__wrapper--modal');\n            parent.classList.add('igx-overlay__wrapper');\n        }\n\n        if (info.settings.positionStrategy.settings.closeAnimation) {\n            this.playCloseAnimation(info);\n        } else {\n            this.onCloseDone(info);\n        }\n    }\n\n    private getOverlayInfo(component: any, moduleRef?: Pick<NgModuleRef<any>, 'injector' | 'componentFactoryResolver'>): OverlayInfo {\n        const info: OverlayInfo = { ngZone: this._zone, transformX: 0, transformY: 0 };\n        if (component instanceof ElementRef) {\n            info.elementRef = <ElementRef>component;\n        } else {\n            let dynamicFactory: ComponentFactory<{}>;\n            const factoryResolver = moduleRef ? moduleRef.componentFactoryResolver : this._factoryResolver;\n            try {\n                dynamicFactory = factoryResolver.resolveComponentFactory(component);\n            } catch (error) {\n                console.error(error);\n                return null;\n            }\n\n            const injector = moduleRef ? moduleRef.injector : this._injector;\n            const dynamicComponent: ComponentRef<{}> = dynamicFactory.create(injector);\n            this._appRef.attachView(dynamicComponent.hostView);\n\n            // If the element is newly created from a Component, it is wrapped in 'ng-component' tag - we do not want that.\n            const element = dynamicComponent.location.nativeElement;\n            info.elementRef = <ElementRef>{ nativeElement: element };\n            info.componentRef = dynamicComponent;\n        }\n\n        return info;\n    }\n\n    private placeElementHook(element: HTMLElement): HTMLElement {\n        if (!element.parentElement) {\n            return null;\n        }\n\n        const hook = this._document.createElement('div');\n        element.parentElement.insertBefore(hook, element);\n        return hook;\n    }\n\n    private moveElementToOverlay(info: OverlayInfo) {\n        const wrapperElement = this.getWrapperElement();\n        const contentElement = this.getContentElement(wrapperElement, info.settings.modal);\n        this.getOverlayElement(info).appendChild(wrapperElement);\n        contentElement.appendChild(info.elementRef.nativeElement);\n    }\n\n    private getWrapperElement(): HTMLElement {\n        const wrapper: HTMLElement = this._document.createElement('div');\n        wrapper.classList.add('igx-overlay__wrapper');\n        return wrapper;\n    }\n\n    private getContentElement(wrapperElement: HTMLElement, modal: boolean): HTMLElement {\n        const content: HTMLElement = this._document.createElement('div');\n        if (modal) {\n            content.classList.add('igx-overlay__content--modal');\n            content.addEventListener('click', (ev: Event) => {\n                ev.stopPropagation();\n            });\n        } else {\n            content.classList.add('igx-overlay__content');\n        }\n\n        content.addEventListener('scroll', (ev: Event) => {\n            ev.stopPropagation();\n        });\n\n        //  hide element to eliminate flickering. Show the element exactly before animation starts\n        content.style.visibility = 'hidden';\n\n        wrapperElement.appendChild(content);\n        return content;\n    }\n\n    private getOverlayElement(info: OverlayInfo): HTMLElement {\n        if (info.settings.outlet) {\n            return info.settings.outlet.nativeElement;\n        }\n        if (!this._overlayElement) {\n            this._overlayElement = this._document.createElement('div');\n            this._overlayElement.classList.add('igx-overlay');\n            this._document.body.appendChild(this._overlayElement);\n        }\n\n        return this._overlayElement;\n    }\n\n    private updateSize(info: OverlayInfo) {\n        if (info.componentRef) {\n            //  if we are positioning component this is first time it gets visible\n            //  and we can finally get its size\n            info.initialSize = info.elementRef.nativeElement.getBoundingClientRect();\n        }\n\n        // set content div width only if element to show has width\n        if (info.initialSize.width !== 0) {\n            info.elementRef.nativeElement.parentElement.style.width = info.initialSize.width + 'px';\n        }\n    }\n\n    private setupModalWrapper(info: OverlayInfo) {\n        const wrapperElement = info.elementRef.nativeElement.parentElement.parentElement;\n        fromEvent(wrapperElement, 'keydown').pipe(\n            filter((ev: KeyboardEvent) => ev.key === 'Escape' || ev.key === 'Esc'),\n            takeUntil(this.destroy$)\n        ).subscribe(() => this.hide(info.id));\n        wrapperElement.classList.remove('igx-overlay__wrapper');\n        this.applyAnimationParams(wrapperElement, info.settings.positionStrategy.settings.openAnimation);\n        wrapperElement.classList.add('igx-overlay__wrapper--modal');\n    }\n\n    private onCloseDone(info: OverlayInfo) {\n        this.cleanUp(info);\n        this.onClosed.emit({ id: info.id, componentRef: info.componentRef });\n    }\n\n    private cleanUp(info: OverlayInfo) {\n        const child: HTMLElement = info.elementRef.nativeElement;\n        const outlet = this.getOverlayElement(info);\n        if (!outlet.contains(child)) {\n            console.warn('Component with id:' + info.id + ' is already removed!');\n            return;\n        }\n\n        outlet.removeChild(child.parentNode.parentNode);\n        if (info.componentRef) {\n            this._appRef.detachView(info.componentRef.hostView);\n            info.componentRef.destroy();\n        }\n\n        if (info.hook) {\n            info.hook.parentElement.insertBefore(info.elementRef.nativeElement, info.hook);\n            info.hook.parentElement.removeChild(info.hook);\n        }\n\n        const index = this._overlayInfos.indexOf(info);\n        this._overlayInfos.splice(index, 1);\n\n        // this._overlayElement.parentElement check just for tests that manually delete the element\n        if (this._overlayInfos.length === 0 && this._overlayElement && this._overlayElement.parentElement) {\n            this._overlayElement.parentElement.removeChild(this._overlayElement);\n            this._overlayElement = null;\n        }\n    }\n\n    private playOpenAnimation(info: OverlayInfo) {\n        if (!info.openAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.openAnimation);\n            info.openAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.openAnimationPlayer)._renderer;\n            info.openAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n            info.openAnimationPlayer.onDone(() => {\n                this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n                if (info.openAnimationPlayer) {\n                    info.openAnimationPlayer.reset();\n                    info.openAnimationPlayer = null;\n                }\n\n                if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n                    info.closeAnimationPlayer.reset();\n                }\n            });\n        }\n\n        //  if there is opening animation already started do nothing\n        if (info.openAnimationPlayer.hasStarted()) {\n            return;\n        }\n\n        //  if there is closing animation already started start open animation from where close one has reached\n        //  and remove close animation\n        if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.closeAnimationInnerPlayer.getPosition();\n            info.closeAnimationPlayer.reset();\n            info.closeAnimationPlayer = null;\n            info.openAnimationPlayer.init();\n            info.openAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.openAnimationPlayer, animationType: 'open' });\n\n        //  to eliminate flickering show the element just before animation start\n        info.elementRef.nativeElement.parentElement.style.visibility = '';\n        info.openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(info: OverlayInfo) {\n        if (!info.closeAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.closeAnimation);\n            info.closeAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.closeAnimationPlayer)._renderer;\n            info.closeAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n\n            info.closeAnimationPlayer.onDone(() => {\n                if (info.closeAnimationPlayer) {\n                    info.closeAnimationPlayer.reset();\n                    info.closeAnimationPlayer = null;\n                }\n\n                if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n                    info.openAnimationPlayer.reset();\n                }\n                this.onCloseDone(info);\n            });\n        }\n\n        //  if there is closing animation already started do nothing\n        if (info.closeAnimationPlayer.hasStarted()) {\n            return;\n        }\n\n        //  if there is opening animation already started start close animation from where open one has reached\n        //  and remove open animation\n        if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.openAnimationInnerPlayer.getPosition();\n            info.openAnimationPlayer.reset();\n            info.openAnimationPlayer = null;\n            info.closeAnimationPlayer.init();\n            info.closeAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.closeAnimationPlayer, animationType: 'close' });\n        info.closeAnimationPlayer.play();\n    }\n\n    //  TODO: check if applyAnimationParams will work with complex animations\n    private applyAnimationParams(wrapperElement: HTMLElement, animationOptions: AnimationReferenceMetadata) {\n        if (!animationOptions) {\n            wrapperElement.style.transitionDuration = '0ms';\n            return;\n        }\n        if (animationOptions.type === AnimationMetadataType.AnimateRef) {\n            animationOptions = (animationOptions as AnimationAnimateRefMetadata).animation;\n        }\n        if (!animationOptions.options || !animationOptions.options.params) {\n            return;\n        }\n        const params = animationOptions.options.params as IAnimationParams;\n        if (params.duration) {\n            wrapperElement.style.transitionDuration = params.duration;\n        }\n        if (params.easing) {\n            wrapperElement.style.transitionTimingFunction = params.easing;\n        }\n    }\n\n    /** @hidden @internal */\n    public getOverlayById(id: string): OverlayInfo {\n        if (!id) {\n            return null;\n        }\n\n        const info = this._overlayInfos.find(e => e.id === id);\n        return info;\n    }\n\n    private documentClicked = (ev: MouseEvent) => {\n        //  if we get to modal overlay just return - we should not close anything under it\n        //  if we get to non-modal overlay do the next:\n        //   1. Check it has close on outside click. If not go on to next overlay;\n        //   2. If true check if click is on the element. If it is on the element we have closed\n        //  already all previous non-modal with close on outside click elements, so we return. If\n        //  not close the overlay and check next\n        for (let i = this._overlayInfos.length; i--;) {\n            const info = this._overlayInfos[i];\n            if (info.settings.modal) {\n                return;\n            }\n            if (info.settings.closeOnOutsideClick) {\n                const target = ev.target as any;\n                //  if the click is on the element do not close this overlay\n                if (!info.elementRef.nativeElement.contains(target)) {\n                    // if we should exclude position target check if the click is over it. If so do not close overlay\n                    const positionTarget = info.settings.positionStrategy.settings.target as HTMLElement;\n                    let clickOnPositionTarget = false;\n                    if (positionTarget) {\n                        clickOnPositionTarget = positionTarget.contains(target);\n                    }\n\n                    if (!(info.settings.excludePositionTarget && clickOnPositionTarget)) {\n                        //  if the click is outside click, but close animation has started do nothing\n                        if (!(info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted())) {\n                            this._hide(info.id, ev);\n                        }\n                    }\n                } else {\n                    //  TODO: should we return here, or continue with next overlays\n                    return;\n                }\n            }\n        }\n    }\n\n    private addOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.closeOnOutsideClick) {\n            if (info.settings.modal) {\n                fromEvent(info.elementRef.nativeElement.parentElement.parentElement, 'click')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe((e: Event) => this._hide(info.id, e));\n            } else if (\n                //  if all overlays minus closing overlays equals one add the handler\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal).length -\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal &&\n                    x.closeAnimationPlayer &&\n                    x.closeAnimationPlayer.hasStarted()).length === 1) {\n                this._document.addEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private removeOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.modal === false) {\n            let shouldRemoveClickEventListener = true;\n            this._overlayInfos.forEach(o => {\n                if (o.settings.modal === false && o.id !== info.id) {\n                    shouldRemoveClickEventListener = false;\n                }\n            });\n\n            if (shouldRemoveClickEventListener) {\n                this._document.removeEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private addResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.addEventListener('resize', this.repositionAll);\n        }\n    }\n\n    private removeResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.removeEventListener('resize', this.repositionAll);\n        }\n    }\n\n    /** @hidden */\n    public repositionAll = () => {\n        for (let i = this._overlayInfos.length; i--;) {\n            this.reposition(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { CancelableEventArgs, CancelableBrowserEventArgs, IBaseEventArgs } from '../core/utils';\nimport { IgxDropDownItemBaseDirective } from './drop-down-item.base';\nimport { IToggleView } from '../core/navigation/IToggleView';\nimport { EventEmitter, InjectionToken } from '@angular/core';\nimport { DisplayDensityBase } from '../core/density';\n\n/** @hidden */\nexport enum Navigate {\n    Up = -1,\n    Down = 1\n}\n\n/** Key actions that have designated handlers in IgxDropDownComponent */\nexport enum DropDownActionKey {\n    ESCAPE = 'escape',\n    ENTER = 'enter',\n    SPACE = 'space'\n}\n\n/**\n * Interface that encapsulates onSelection event arguments - old selection, new selection and cancel selection.\n * @export\n */\nexport interface ISelectionEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    oldSelection: IgxDropDownItemBaseDirective;\n    newSelection: IgxDropDownItemBaseDirective;\n}\n\n/**\n * Interface for an instance of IgxDropDownNavigationDirective\n * @export\n */\nexport interface IDropDownNavigationDirective {\n    target: any;\n    handleKeyDown(event: KeyboardEvent): void;\n    onArrowDownKeyDown(event?: KeyboardEvent): void;\n    onArrowUpKeyDown(event?: KeyboardEvent): void;\n    onEndKeyDown(event?: KeyboardEvent): void;\n    onHomeKeyDown(event?: KeyboardEvent): void;\n}\n\nexport const IGX_DROPDOWN_BASE = new InjectionToken<IDropDownBase>('IgxDropDownBaseToken');\n\n/**\n * @hidden\n */\nexport interface IDropDownList extends DisplayDensityBase {\n    onSelection: EventEmitter<ISelectionEventArgs>;\n    width: string;\n    height: string;\n    id: string;\n    maxHeight: string;\n    collapsed: boolean;\n    items: IgxDropDownItemBaseDirective[];\n    headers: IgxDropDownItemBaseDirective[];\n    focusedItem: IgxDropDownItemBaseDirective;\n    navigateFirst(): void;\n    navigateLast(): void;\n    navigateNext(): void;\n    navigatePrev(): void;\n    navigateItem(newIndex: number, direction?: Navigate): void;\n    onItemActionKey(key: DropDownActionKey, event?: Event): void;\n}\n\n/**\n * @hidden\n */\nexport interface IDropDownBase extends IDropDownList, IToggleView {\n    selectedItem: any;\n    onOpening: EventEmitter<CancelableEventArgs>;\n    onOpened: EventEmitter<void>;\n    onClosing: EventEmitter<CancelableBrowserEventArgs>;\n    onClosed: EventEmitter<void>;\n    allowItemsFocus?: boolean;\n    setSelectedItem(index: number): void;\n    selectItem(item: IgxDropDownItemBaseDirective, event?: Event): void;\n}\n\n","import { PositionSettings, Size } from '../utilities';\nimport { GlobalPositionStrategy } from './global-position-strategy';\n\n/**\n * Positions the element inside the containing outlet based on the directions passed in trough PositionSettings.\n * These are Top/Middle/Bottom for verticalDirection and Left/Center/Right for horizontalDirection\n */\nexport class ContainerPositionStrategy extends GlobalPositionStrategy {\n    constructor(settings?: PositionSettings) {\n        super(settings);\n    }\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size?: Size, document?: Document, initialCall?: boolean): void {\n        contentElement.classList.add('igx-overlay__content--relative');\n        contentElement.parentElement.classList.add('igx-overlay__wrapper--flex-container');\n        this.setPosition(contentElement, this.settings);\n    }\n}\n\n","import { IPositionStrategy } from './IPositionStrategy';\nimport {\n  HorizontalAlignment,\n  Point,\n  PositionSettings,\n  Size,\n  Util,\n  VerticalAlignment\n} from './../utilities';\nimport { scaleInVerTop, scaleOutVerTop } from '../../../animations/main';\nimport { ConnectedFit } from '../utilities';\n\n/**\n * Positions the element based on the directions and start point passed in trough PositionSettings.\n * It is possible to either pass a start point or an HTMLElement as a positioning base.\n */\nexport class ConnectedPositioningStrategy implements IPositionStrategy {\n  private _defaultSettings: PositionSettings = {\n    // default Point(0, 0) in getPointFromPositionsSettings\n    target: null,\n    horizontalDirection: HorizontalAlignment.Right,\n    verticalDirection: VerticalAlignment.Bottom,\n    horizontalStartPoint: HorizontalAlignment.Left,\n    verticalStartPoint: VerticalAlignment.Bottom,\n    openAnimation: scaleInVerTop,\n    closeAnimation: scaleOutVerTop,\n    minSize: { width: 0, height: 0 }\n  };\n\n  /** @inheritdoc */\n  public settings: PositionSettings;\n\n  constructor(settings?: PositionSettings) {\n    this.settings = Object.assign({}, this._defaultSettings, settings);\n  }\n\n  /**\n   * Obtains the ClientRect objects for the required elements - target and element to position\n   * @returns target and element ClientRect objects\n   */\n  protected calculateElementRectangles(contentElement): { targetRect: ClientRect, elementRect: ClientRect } {\n      return {\n          targetRect: Util.getTargetRect(this.settings),\n          elementRect: contentElement.getBoundingClientRect() as ClientRect\n      };\n  }\n\n  /** @inheritdoc */\n  position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n    const rects =  this.calculateElementRectangles(contentElement);\n    this.setStyle(contentElement, rects.targetRect, rects.elementRect, {});\n  }\n\n  /**\n   * @inheritdoc\n   * Creates clone of this position strategy\n   * @returns clone of this position strategy\n   */\n  clone(): IPositionStrategy {\n    return Util.cloneInstance(this);\n  }\n\n  /**\n   * Sets element's style which effectively positions provided element according\n   * to provided position settings\n   * @param element Element to position\n   * @param targetRect Bounding rectangle of strategy target\n   * @param elementRect Bounding rectangle of the element\n   */\n  protected setStyle(element: HTMLElement, targetRect: ClientRect, elementRect: ClientRect, connectedFit: ConnectedFit) {\n      const horizontalOffset = connectedFit.horizontalOffset ? connectedFit.horizontalOffset : 0;\n      const verticalOffset = connectedFit.verticalOffset ? connectedFit.verticalOffset : 0;\n    const startPoint: Point = {\n      x: targetRect.right + targetRect.width * this.settings.horizontalStartPoint + horizontalOffset,\n      y: targetRect.bottom + targetRect.height * this.settings.verticalStartPoint + verticalOffset\n    };\n    const wrapperRect: ClientRect = element.parentElement.getBoundingClientRect();\n\n    //  clean up styles - if auto position strategy is chosen we may pass here several times\n    element.style.right = '';\n    element.style.left = '';\n    element.style.bottom = '';\n    element.style.top = '';\n\n    switch (this.settings.horizontalDirection) {\n      case HorizontalAlignment.Left:\n        element.style.right = `${Math.round(wrapperRect.right - startPoint.x)}px`;\n        break;\n      case HorizontalAlignment.Center:\n        element.style.left = `${Math.round(startPoint.x - wrapperRect.left - elementRect.width / 2)}px`;\n        break;\n      case HorizontalAlignment.Right:\n        element.style.left = `${Math.round(startPoint.x - wrapperRect.left)}px`;\n        break;\n    }\n\n    switch (this.settings.verticalDirection) {\n      case VerticalAlignment.Top:\n        element.style.bottom = `${Math.round(wrapperRect.bottom - startPoint.y)}px`;\n        break;\n      case VerticalAlignment.Middle:\n        element.style.top = `${Math.round(startPoint.y - wrapperRect.top - elementRect.height / 2)}px`;\n        break;\n      case VerticalAlignment.Bottom:\n        element.style.top = `${Math.round(startPoint.y - wrapperRect.top)}px`;\n        break;\n    }\n  }\n}\n","import { ConnectedPositioningStrategy } from './connected-positioning-strategy';\nimport { HorizontalAlignment, VerticalAlignment, PositionSettings, Size, Util, ConnectedFit, OutOfViewPort } from '../utilities';\n\nexport abstract class BaseFitPositionStrategy extends ConnectedPositioningStrategy {\n    protected _initialSize: Size;\n    protected _initialSettings: PositionSettings;\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n        const rects = super.calculateElementRectangles(contentElement);\n        const connectedFit: ConnectedFit = {};\n        if (initialCall) {\n            connectedFit.targetRect = rects.targetRect;\n            connectedFit.contentElementRect = rects.elementRect;\n            this._initialSettings = this._initialSettings || Object.assign({}, this.settings);\n            this.settings = Object.assign({}, this._initialSettings);\n            connectedFit.viewPortRect = Util.getViewportRect(document);\n            this.updateViewPortFit(connectedFit);\n            if (this.shouldFitInViewPort(connectedFit)) {\n                this.fitInViewport(contentElement, connectedFit);\n            }\n        }\n        this.setStyle(contentElement, rects.targetRect, rects.elementRect, connectedFit);\n    }\n\n    /**\n     * Checks if element can fit in viewport and updates provided connectedFit\n     * with the result\n     * @param connectedFit connectedFit to update\n     */\n    protected updateViewPortFit(connectedFit: ConnectedFit) {\n        connectedFit.left = this.calculateLeft(\n            connectedFit.targetRect,\n            connectedFit.contentElementRect,\n            this.settings.horizontalStartPoint,\n            this.settings.horizontalDirection,\n            connectedFit.horizontalOffset ? connectedFit.horizontalOffset : 0);\n        connectedFit.right = connectedFit.left + connectedFit.contentElementRect.width;\n        connectedFit.fitHorizontal = {\n                back: Math.round(connectedFit.left),\n                forward: Math.round(connectedFit.viewPortRect.width - connectedFit.right)\n            };\n\n        connectedFit.top = this.calculateTop(\n            connectedFit.targetRect,\n            connectedFit.contentElementRect,\n            this.settings.verticalStartPoint,\n            this.settings.verticalDirection,\n            connectedFit.verticalOffset ? connectedFit.verticalOffset : 0);\n        connectedFit.bottom = connectedFit.top + connectedFit.contentElementRect.height;\n        connectedFit.fitVertical = {\n            back: Math.round(connectedFit.top),\n            forward: Math.round(connectedFit.viewPortRect.height - connectedFit.bottom)\n        };\n    }\n\n    /**\n     * Calculates the position of the left border of the element if it gets positioned\n     * with provided start point and direction\n     * @param targetRect Rectangle of the target where element is attached\n     * @param elementRect Rectangle of the element\n     * @param startPoint Start point of the target\n     * @param direction Direction in which to show the element\n     */\n    protected calculateLeft(\n        targetRect: ClientRect, elementRect: ClientRect, startPoint: HorizontalAlignment, direction: HorizontalAlignment, offset?: number):\n        number {\n        return targetRect.right + targetRect.width * startPoint + elementRect.width * direction + offset;\n    }\n\n    /**\n     * Calculates the position of the top border of the element if it gets positioned\n     * with provided position settings related to the target\n     * @param targetRect Rectangle of the target where element is attached\n     * @param elementRect Rectangle of the element\n     * @param startPoint Start point of the target\n     * @param direction Direction in which to show the element\n     */\n    protected calculateTop(\n        targetRect: ClientRect, elementRect: ClientRect, startPoint: VerticalAlignment, direction: VerticalAlignment, offset?: number):\n        number {\n        return targetRect.bottom + targetRect.height * startPoint + elementRect.height * direction + offset;\n    }\n\n    /**\n     * Returns whether the element should fit in viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     */\n    protected shouldFitInViewPort(connectedFit: ConnectedFit) {\n        return connectedFit.fitHorizontal.back < 0 || connectedFit.fitHorizontal.forward < 0 ||\n            connectedFit.fitVertical.back < 0 || connectedFit.fitVertical.forward < 0;\n    }\n\n    /**\n     * Fits the element into viewport according to the position settings\n     * @param element element to fit in viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     */\n    protected abstract fitInViewport(\n        element: HTMLElement,\n        connectedFit: ConnectedFit);\n}\n","import { VerticalAlignment, HorizontalAlignment, ConnectedFit } from './../utilities';\nimport { BaseFitPositionStrategy } from './base-fit-position-strategy';\n\n/**\n * Positions the element as in **Connected** positioning strategy and re-positions the element in\n * the view port (calculating a different start point) in case the element is partially getting out of view\n */\nexport class AutoPositionStrategy extends BaseFitPositionStrategy {\n\n    /** @inheritdoc */\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        const transformString: string[] = [];\n        if (connectedFit.fitHorizontal.back < 0 || connectedFit.fitHorizontal.forward < 0) {\n            if (this.canFlipHorizontal(connectedFit)) {\n                this.flipHorizontal();\n            } else {\n                const horizontalPush = this.horizontalPush(connectedFit);\n                transformString.push(`translateX(${horizontalPush}px)`);\n            }\n        }\n\n        if (connectedFit.fitVertical.back < 0 || connectedFit.fitVertical.forward < 0) {\n            if (this.canFlipVertical(connectedFit)) {\n                this.flipVertical();\n            } else {\n                const verticalPush = this.verticalPush(connectedFit);\n                transformString.push(`translateY(${verticalPush}px)`);\n            }\n        }\n\n        element.style.transform = transformString.join(' ').trim();\n    }\n\n    /**\n     * Checks if element can be flipped without get off the viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns true if element can be flipped and stain in viewport\n     */\n    private canFlipHorizontal(connectedFit: ConnectedFit): boolean {\n        //  HorizontalAlignment can be Left = -1; Center = -0.5 or Right = 0.\n        //  To virtually flip direction and start point (both are HorizontalAlignment) we can do this:\n        //  flippedAlignment = (-1) * (HorizontalAlignment + 1)\n        //  this way:\n        //  (-1) * (Left + 1) = 0 = Right\n        //  (-1) * (Center + 1) = -0.5 = Center\n        //  (-1) * (Right + 1) = -1 = Left\n        const flippedStartPoint = (-1) * (this.settings.horizontalStartPoint + 1);\n        const flippedDirection = (-1) * (this.settings.horizontalDirection + 1);\n\n        const leftBorder = this.calculateLeft(\n            connectedFit.targetRect, connectedFit.contentElementRect, flippedStartPoint, flippedDirection, 0);\n        const rightBorder = leftBorder + connectedFit.contentElementRect.width;\n        return 0 < leftBorder && rightBorder < connectedFit.viewPortRect.width;\n    }\n\n    /**\n     * Checks if element can be flipped without get off the viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns true if element can be flipped and stain in viewport\n     */\n    private canFlipVertical(connectedFit: ConnectedFit): boolean {\n        const flippedStartPoint = (-1) * (this.settings.verticalStartPoint + 1);\n        const flippedDirection = (-1) * (this.settings.verticalDirection + 1);\n\n        const topBorder = this.calculateTop(\n            connectedFit.targetRect, connectedFit.contentElementRect, flippedStartPoint, flippedDirection, 0);\n        const bottomBorder = topBorder + connectedFit.contentElementRect.height;\n        return 0 < topBorder && bottomBorder < connectedFit.viewPortRect.height;\n    }\n\n    /**\n     * Flips direction and start point of the position settings\n     */\n    private flipHorizontal() {\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                this.settings.horizontalDirection = HorizontalAlignment.Right;\n                break;\n            case HorizontalAlignment.Right:\n                this.settings.horizontalDirection = HorizontalAlignment.Left;\n                break;\n        }\n        switch (this.settings.horizontalStartPoint) {\n            case HorizontalAlignment.Left:\n                this.settings.horizontalStartPoint = HorizontalAlignment.Right;\n                break;\n            case HorizontalAlignment.Right:\n                this.settings.horizontalStartPoint = HorizontalAlignment.Left;\n                break;\n        }\n    }\n\n    /**\n     * Flips direction and start point of the position settings\n     */\n    private flipVertical() {\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                this.settings.verticalDirection = VerticalAlignment.Bottom;\n                break;\n            case VerticalAlignment.Bottom:\n                this.settings.verticalDirection = VerticalAlignment.Top;\n                break;\n        }\n        switch (this.settings.verticalStartPoint) {\n            case VerticalAlignment.Top:\n                this.settings.verticalStartPoint = VerticalAlignment.Bottom;\n                break;\n            case VerticalAlignment.Bottom:\n                this.settings.verticalStartPoint = VerticalAlignment.Top;\n                break;\n        }\n    }\n\n    /**\n     * Calculates necessary horizontal push according to provided connectedFit\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns amount of necessary translation which will push the element into viewport\n     */\n    private horizontalPush(connectedFit: ConnectedFit): number {\n        const leftExtend = connectedFit.left;\n        const rightExtend = connectedFit.right - connectedFit.viewPortRect.right;\n        //  if leftExtend < 0 overlay goes beyond left end of the screen. We should push it back with exactly\n        //  as much as it is beyond the screen.\n        //  if rightExtend > 0 overlay goes beyond right end of the screen. We should push it back with the\n        //  extend but with amount not bigger than what left between left border of screen and left border of\n        //  overlay, e.g. leftExtend\n        if (leftExtend < 0) {\n            return Math.abs(leftExtend);\n        } else if (rightExtend > 0) {\n            return - Math.min(rightExtend, leftExtend);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Calculates necessary vertical push according to provided connectedFit\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns amount of necessary translation which will push the element into viewport\n     */\n    private verticalPush(connectedFit: ConnectedFit): number {\n        const topExtend = connectedFit.top;\n        const bottomExtend = connectedFit.bottom - connectedFit.viewPortRect.bottom;\n        if (topExtend < 0) {\n            return Math.abs(topExtend);\n        } else if (bottomExtend > 0) {\n            return - Math.min(bottomExtend, topExtend);\n        } else {\n            return 0;\n        }\n    }\n}\n","import { BaseFitPositionStrategy } from './base-fit-position-strategy';\nimport { HorizontalAlignment, VerticalAlignment, ConnectedFit } from '../utilities';\n\n/**\n * Positions the element as in **Connected** positioning strategy and resize the element\n * to fit in the view port in case the element is partially getting out of view\n */\nexport class ElasticPositionStrategy extends BaseFitPositionStrategy {\n    /** @inheritdoc */\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        element.classList.add('igx-overlay__content--elastic');\n        const transformString: string[] = [];\n        if (connectedFit.fitHorizontal.back < 0 || connectedFit.fitHorizontal.forward < 0) {\n            const maxReduction = Math.max(0, connectedFit.contentElementRect.width - this.settings.minSize.width);\n            const leftExtend = Math.max(0, -connectedFit.fitHorizontal.back);\n            const rightExtend = Math.max(0, -connectedFit.fitHorizontal.forward);\n            const reduction = Math.min(maxReduction, leftExtend + rightExtend);\n            element.style.width = `${connectedFit.contentElementRect.width - reduction}px`;\n\n            //  if direction is center and element goes off the screen in left direction we should push the\n            //  element to the right. Prevents left still going out of view when normally positioned\n            if (this.settings.horizontalDirection === HorizontalAlignment.Center) {\n                //  the amount of translation depends on whether element goes off the screen to the left,\n                //  to the right or in both directions, as well as how much it goes of the screen and finally\n                //  on the minSize. The translation should be proportional between left and right extend\n                //  taken from the reduction\n                const translation = leftExtend * reduction / (leftExtend + rightExtend);\n                if (translation > 0) {\n                    transformString.push(`translateX(${translation}px)`);\n                }\n            }\n        }\n\n        if (connectedFit.fitVertical.back < 0 || connectedFit.fitVertical.forward < 0) {\n            const maxReduction = Math.max(0, connectedFit.contentElementRect.height - this.settings.minSize.height);\n            const topExtend = Math.max(0, -connectedFit.fitVertical.back);\n            const bottomExtend = Math.max(0, -connectedFit.fitVertical.forward);\n            const reduction = Math.min(maxReduction, topExtend + bottomExtend);\n            element.style.height = `${connectedFit.contentElementRect.height - reduction}px`;\n\n            //  if direction is middle and element goes off the screen in top direction we should push the\n            //  element to the bottom. Prevents top still going out of view when normally positioned\n            if (this.settings.verticalDirection === VerticalAlignment.Middle) {\n                //  the amount of translation depends on whether element goes off the screen to the top,\n                //  to the bottom or in both directions, as well as how much it goes of the screen and finally\n                //  on the minSize. The translation should be proportional between top and bottom extend\n                //  taken from the reduction\n                const translation = topExtend * reduction / (topExtend + bottomExtend);\n                if (translation > 0) {\n                    transformString.push(`translateY(${translation}px)`);\n                }\n            }\n        }\n        element.style.transform = transformString.join(' ').trim();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\nimport { NgZone } from '@angular/core';\n\n/**\n * On scroll reposition the overlay content.\n */\nexport class AbsoluteScrollStrategy extends ScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private _scrollContainer: HTMLElement;\n    private _zone: NgZone;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n        this._scrollContainer = scrollContainer;\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._zone = overlayService.getOverlayById(id).ngZone;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        if (this._zone) {\n            this._zone.runOutsideAngular(() => {\n                this.addScrollEventListener();\n            });\n        } else {\n            this.addScrollEventListener();\n        }\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n        }\n\n        this._initialized = false;\n    }\n\n    private addScrollEventListener() {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.addEventListener('scroll', this.onScroll, true);\n        }\n    }\n\n    private onScroll = (e: Event) => {\n        const overlayInfo = this._overlayService.getOverlayById(this._id);\n        if (!overlayInfo) {\n            return;\n        }\n        if (!overlayInfo.elementRef.nativeElement.contains(e.target)) {\n            this._overlayService.reposition(this._id);\n        }\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Prevents scrolling while the overlay content is shown.\n */\nexport class BlockScrollStrategy extends ScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _initialScrollTop: number;\n    private _initialScrollLeft: number;\n    private _sourceElement: Element;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n\n        this._document = document;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        this._document.addEventListener('scroll', this.onScroll, true);\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        this._document.removeEventListener('scroll', this.onScroll, true);\n        this._sourceElement = null;\n        this._initialScrollTop = 0;\n        this._initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        ev.preventDefault();\n        if (!this._sourceElement || this._sourceElement !== ev.target) {\n            this._sourceElement = ev.target as Element;\n            this._initialScrollTop = this._sourceElement.scrollTop;\n            this._initialScrollLeft = this._sourceElement.scrollLeft;\n        }\n\n        this._sourceElement.scrollTop = this._initialScrollTop;\n        this._sourceElement.scrollLeft = this._initialScrollLeft;\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Uses a tolerance and closes the shown component upon scrolling if the tolerance is exceeded\n */\nexport class CloseScrollStrategy extends ScrollStrategy {\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private initialScrollTop: number;\n    private initialScrollLeft: number;\n    private cumulativeScrollTop: number;\n    private cumulativeScrollLeft: number;\n    private _threshold: number;\n    private _initialized = false;\n    private _sourceElement: Element;\n    private _scrollContainer: HTMLElement;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n        this._scrollContainer = scrollContainer;\n        this._threshold = 10;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll);\n            this._sourceElement = this._scrollContainer;\n        } else {\n            this._document.addEventListener('scroll', this.onScroll);\n            if (document.documentElement.scrollHeight > document.documentElement.clientHeight) {\n                this._sourceElement = document.documentElement as Element;\n            } else if (document.body.scrollHeight > document.body.clientHeight) {\n                this._sourceElement = document.body as Element;\n            }\n        }\n\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = this._sourceElement.scrollTop;\n        this.initialScrollLeft = this._sourceElement.scrollLeft;\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        // TODO: check why event listener removes only on first call and remains on each next!!!\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll);\n        }\n        this._sourceElement = null;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = 0;\n        this.initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop += this._sourceElement.scrollTop;\n        this.cumulativeScrollLeft += this._sourceElement.scrollLeft;\n\n        if (Math.abs(this.cumulativeScrollTop - this.initialScrollTop) > this._threshold ||\n            Math.abs(this.cumulativeScrollLeft - this.initialScrollLeft) > this._threshold) {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n            this._overlayService.hide(this._id);\n        }\n    }\n}\n","import { TransactionService, Transaction, State } from './transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxBaseTransactionService<T extends Transaction, S extends State> implements TransactionService<T, S> {\n    protected _isPending = false;\n    protected _pendingTransactions: T[] = [];\n    protected _pendingStates: Map<any, S> = new Map();\n\n    /**\n     * @inheritdoc\n     */\n    public get canRedo(): boolean {\n        return false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get canUndo(): boolean {\n        return false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get enabled(): boolean {\n        return this._isPending;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public onStateUpdate = new EventEmitter<void>();\n\n    /**\n     * @inheritdoc\n     */\n    public add(transaction: T, recordRef?: any): void {\n        if (this._isPending) {\n            this.updateState(this._pendingStates, transaction, recordRef);\n            this._pendingTransactions.push(transaction);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getTransactionLog(id?: any): T[] { return []; }\n\n    /**\n     * @inheritdoc\n     */\n    undo(): void { }\n\n    /**\n     * @inheritdoc\n     */\n    redo(): void { }\n\n    /**\n     * @inheritdoc\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._pendingStates.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.getAggregatedValue(key, mergeChanges) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getState(id: any): S {\n        return this._pendingStates.get(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._pendingStates.get(id);\n        if (!state) {\n            return null;\n        }\n        if (mergeChanges) {\n            return this.updateValue(state);\n        }\n        return state.value;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    commit(data: any[], id?: any): void { }\n\n    /**\n     * @inheritdoc\n     */\n    clear(id?: any): void {\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public startPending(): void {\n        this._isPending = true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        if (state) {\n            if (isObject(state.value)) {\n                mergeObjects(state.value, transaction.newValue);\n            } else {\n                state.value = transaction.newValue;\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n    }\n\n    /**\n     * Updates the recordRef of the provided state with all the changes in the state. Accepts primitive and object value types\n     * @param state State to update value for\n     * @returns updated value including all the changes in provided state\n     */\n    protected updateValue(state: S) {\n        return this.mergeValues(state.recordRef, state.value);\n    }\n\n    /**\n     * Merges second values in first value and the result in empty object. If values are primitive type\n     * returns second value if exists, or first value.\n     * @param first Value to merge into\n     * @param second Value to merge\n     */\n    protected mergeValues<U>(first: U, second: U): U {\n        let result: U;\n        if (isObject(first) || isObject(second)) {\n            result = mergeObjects(mergeObjects({}, first), second);\n        } else {\n            result = second ? second : first;\n        }\n        return result;\n    }\n}\n","import { Transaction, State, TransactionType } from './transaction';\nimport { IgxBaseTransactionService } from './base-transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxTransactionService<T extends Transaction, S extends State> extends IgxBaseTransactionService<T, S> {\n    protected _transactions: T[] = [];\n    protected _redoStack: { transaction: T, recordRef: any }[][] = [];\n    protected _undoStack: { transaction: T, recordRef: any }[][] = [];\n    protected _states: Map<any, S> = new Map();\n\n    /**\n     * @inheritdoc\n     */\n    get canUndo(): boolean {\n        return this._undoStack.length > 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get canRedo(): boolean {\n        return this._redoStack.length > 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public onStateUpdate = new EventEmitter<void>();\n\n    /**\n     * @inheritdoc\n     */\n    public add(transaction: T, recordRef?: any): void {\n        const states = this._isPending ? this._pendingStates : this._states;\n        this.verifyAddedTransaction(states, transaction, recordRef);\n        this.addTransaction(transaction, states, recordRef);\n    }\n\n    protected addTransaction(transaction: T, states: Map<any, S>, recordRef?: any) {\n        this.updateState(states, transaction, recordRef);\n\n        const transactions = this._isPending ? this._pendingTransactions : this._transactions;\n        transactions.push(transaction);\n\n        if (!this._isPending) {\n            this._undoStack.push([{ transaction, recordRef }]);\n            this._redoStack = [];\n            this.onStateUpdate.emit();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getTransactionLog(id?: any): T[] {\n        if (id !== undefined) {\n            return this._transactions.filter(t => t.id === id);\n        }\n        return [...this._transactions];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getState(id: any, pending: boolean = false): S {\n        return pending ? this._pendingStates.get(id) : this._states.get(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get enabled(): boolean {\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._states.get(id);\n        const pendingState = super.getState(id);\n\n        //  if there is no state and there is no pending state return null\n        if (!state && !pendingState) {\n            return null;\n        }\n\n        const pendingChange = super.getAggregatedValue(id, false);\n        const change = state && state.value;\n        let aggregatedValue = this.mergeValues(change, pendingChange);\n        if (mergeChanges) {\n            const originalValue = state ? state.recordRef : pendingState.recordRef;\n            aggregatedValue = this.mergeValues(originalValue, aggregatedValue);\n        }\n        return aggregatedValue;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        if (commit) {\n            const actions: { transaction: T, recordRef: any }[] = [];\n            // don't use addTransaction due to custom undo handling\n            for (const transaction of this._pendingTransactions) {\n                const pendingState = this._pendingStates.get(transaction.id);\n                this._transactions.push(transaction);\n                this.updateState(this._states, transaction, pendingState.recordRef);\n                actions.push({ transaction, recordRef: pendingState.recordRef });\n            }\n\n            this._undoStack.push(actions);\n            this._redoStack = [];\n\n            this.onStateUpdate.emit();\n        }\n        super.endPending(commit);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public commit(data: any[], id?: any): void {\n        if (id !== undefined) {\n            const state = this.getState(id);\n            if (state) {\n                this.updateRecord(data, state);\n            }\n        } else {\n            this._states.forEach((s: S) => {\n                this.updateRecord(data, s);\n            });\n        }\n        this.clear(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public clear(id?: any): void {\n        if (id !== undefined) {\n            this._transactions = this._transactions.filter(t => t.id !== id);\n            this._states.delete(id);\n            //  Undo stack is an array of actions. Each action is array of transaction like objects\n            //  We are going trough all the actions. For each action we are filtering out transactions\n            //  with provided id. Finally if any action ends up as empty array we are removing it from\n            //  undo stack\n            this._undoStack = this._undoStack.map(a => a.filter(t => t.transaction.id !== id)).filter(a => a.length > 0);\n        } else {\n            this._transactions = [];\n            this._states.clear();\n            this._undoStack = [];\n        }\n        this._redoStack = [];\n        this.onStateUpdate.emit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public undo(): void {\n        if (this._undoStack.length <= 0) {\n            return;\n        }\n\n        const lastActions: { transaction: T, recordRef: any }[] = this._undoStack.pop();\n        this._transactions.splice(this._transactions.length - lastActions.length);\n        this._redoStack.push(lastActions);\n\n        this._states.clear();\n        for (const currentActions of this._undoStack) {\n            for (const transaction of currentActions) {\n                this.updateState(this._states, transaction.transaction, transaction.recordRef);\n            }\n        }\n\n        this.onStateUpdate.emit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public redo(): void {\n        if (this._redoStack.length > 0) {\n            let actions: { transaction: T, recordRef: any, useInUndo?: boolean }[];\n            actions = this._redoStack.pop();\n            for (const action of actions) {\n                this.updateState(this._states, action.transaction, action.recordRef);\n                this._transactions.push(action.transaction);\n            }\n\n            this._undoStack.push(actions);\n            this.onStateUpdate.emit();\n        }\n    }\n\n    /**\n     * Verifies if the passed transaction is correct. If not throws an exception.\n     * @param transaction Transaction to be verified\n     */\n    protected verifyAddedTransaction(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        const state = states.get(transaction.id);\n        switch (transaction.type) {\n            case TransactionType.ADD:\n                if (state) {\n                    //  cannot add same item twice\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already added.`);\n                }\n                break;\n            case TransactionType.DELETE:\n            case TransactionType.UPDATE:\n                if (state && state.type === TransactionType.DELETE) {\n                    //  cannot delete or update deleted items\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already deleted.`);\n                }\n                if (!state && !recordRef && !this._isPending) {\n                    //  cannot initially add transaction or delete item with no recordRef\n                    throw new Error(`Cannot add this transaction. This is first transaction of type ${transaction.type} ` +\n                        `for id ${transaction.id}. For first transaction of this type recordRef is mandatory.`);\n                }\n                break;\n        }\n    }\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        //  if TransactionType is ADD simply add transaction to states;\n        //  if TransactionType is DELETE:\n        //    - if there is state with this id of type ADD remove it from the states;\n        //    - if there is state with this id of type UPDATE change its type to DELETE;\n        //    - if there is no state with this id add transaction to states;\n        //  if TransactionType is UPDATE:\n        //    - if there is state with this id of type ADD merge new value and state recordRef into state new value\n        //    - if there is state with this id of type UPDATE merge new value into state new value\n        //    - if there is state with this id and state type is DELETE change its type to UPDATE\n        //    - if there is no state with this id add transaction to states;\n        if (state) {\n            switch (transaction.type) {\n                case TransactionType.DELETE:\n                    if (state.type === TransactionType.ADD) {\n                        states.delete(transaction.id);\n                    } else if (state.type === TransactionType.UPDATE) {\n                        state.value = transaction.newValue;\n                        state.type = TransactionType.DELETE;\n                    }\n                    break;\n                case TransactionType.UPDATE:\n                    if (isObject(state.value)) {\n                        if (state.type === TransactionType.ADD) {\n                            state.value = this.mergeValues(state.value, transaction.newValue);\n                        }\n                        if (state.type === TransactionType.UPDATE) {\n                            mergeObjects(state.value, transaction.newValue);\n                        }\n                    } else {\n                        state.value = transaction.newValue;\n                    }\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n\n        //  should not clean pending state. This will happen automatically on endPending call\n        if (!this._isPending) {\n            this.cleanState(transaction.id, states);\n        }\n    }\n\n    /**\n     * Compares the state with recordRef and clears all duplicated values. If any state ends as\n     * empty object removes it from states.\n     * @param state State to clean\n     */\n    protected cleanState(id: any, states: Map<any, S>): void {\n        const state = states.get(id);\n        //  do nothing if\n        //  there is no state, or\n        //  there is no state value (e.g. DELETED transaction), or\n        //  there is no recordRef (e.g. ADDED transaction)\n        if (state && state.value && state.recordRef) {\n            //  if state's value is object compare each key with the ones in recordRef\n            //  if values in any key are the same delete it from state's value\n            //  if state's value is not object, simply compare with recordRef and remove\n            //  the state if they are equal\n            if (isObject(state.recordRef)) {\n                for (const key of Object.keys(state.value)) {\n                    if (JSON.stringify(state.recordRef[key]) === JSON.stringify(state.value[key])) {\n                        delete state.value[key];\n                    }\n                }\n\n                //  if state's value is empty remove the state from the states, only if state is not DELETE type\n                if (state.type !== TransactionType.DELETE && Object.keys(state.value).length === 0) {\n                    states.delete(id);\n                }\n            } else {\n                if (state.recordRef === state.value) {\n                    states.delete(id);\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates state related record in the provided data\n     * @param data Data source to update\n     * @param state State to update data from\n     */\n    protected updateRecord(data: any[], state: S) {\n        const index = data.findIndex(i => JSON.stringify(i) === JSON.stringify(state.recordRef || {}));\n        switch (state.type) {\n            case TransactionType.ADD:\n                data.push(state.value);\n                break;\n            case TransactionType.DELETE:\n                if (0 <= index && index < data.length) {\n                    data.splice(index, 1);\n                }\n                break;\n            case TransactionType.UPDATE:\n                if (0 <= index && index < data.length) {\n                    data[index] = this.updateValue(state);\n                }\n                break;\n        }\n    }\n}\n","import { HierarchicalTransaction, HierarchicalState, TransactionType } from './transaction';\nimport { Injectable } from '@angular/core';\nimport { IgxTransactionService } from './igx-transaction';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneValue } from '../../core/utils';\n\n/** @experimental @hidden */\n@Injectable()\nexport class IgxHierarchicalTransactionService<T extends HierarchicalTransaction, S extends HierarchicalState>\n    extends IgxTransactionService<T, S> {\n\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : cloneValue(state.value);\n            this.clearArraysFromObject(value);\n            result.push({ id: key, path: state.path, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        super.updateState(states, transaction, recordRef);\n\n        //  if transaction has no path, e.g. flat data source, get out\n        if (!transaction.path) {\n            return;\n        }\n\n        const currentState = states.get(transaction.id);\n        if (currentState) {\n            currentState.path = transaction.path;\n        }\n\n        //  if transaction has path, Hierarchical data source, and it is DELETE\n        //  type transaction for all child rows remove ADD states and update\n        //  transaction type and value of UPDATE states\n        if (transaction.type === TransactionType.DELETE) {\n            states.forEach((v: S, k: any) => {\n                if (v.path && v.path.indexOf(transaction.id) !== -1) {\n                    switch (v.type) {\n                        case TransactionType.ADD:\n                            states.delete(k);\n                            break;\n                        case TransactionType.UPDATE:\n                            states.get(k).type = TransactionType.DELETE;\n                            states.get(k).value = null;\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Applies all transactions over the provided data\n     * @param data Data source to update\n     * @param primaryKey Primary key of the hierarchical data\n     * @param childDataKey Kye of child data collection\n     * @param id Optional record id to commit transactions for\n     */\n    public commit(data: any[], primaryKey?: any, childDataKey?: any, id?: any): void {\n        if (childDataKey !== undefined) {\n            let transactions = this.getAggregatedChanges(true);\n            if (id !== undefined) {\n                transactions = transactions.filter(t => t.id === id);\n            }\n            DataUtil.mergeHierarchicalTransactions(data, transactions, childDataKey, primaryKey, true);\n        } else {\n            super.commit(data, id);\n        }\n        this.clear(id);\n    }\n\n    //  TODO: remove this method. Force cloning to strip child arrays when needed instead\n    private clearArraysFromObject(obj: {}) {\n        if (obj) {\n            for (const prop of Object.keys(obj)) {\n                if (Array.isArray(obj[prop])) {\n                    delete obj[prop];\n                }\n            }\n        }\n    }\n}\n\n","import {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Inject\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../../core/navigation';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { OverlaySettings, OverlayEventArgs, ConnectedPositioningStrategy, AbsoluteScrollStrategy, IPositionStrategy } from '../../services';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subscription, Subject, MonoTypeOperatorFunction } from 'rxjs';\nimport { OverlayClosingEventArgs } from '../../services/overlay/utilities';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, IBaseEventArgs } from '../../core/utils';\n\n@Directive({\n    exportAs: 'toggle',\n    selector: '[igxToggle]'\n})\nexport class IgxToggleDirective implements IToggleView, OnInit, OnDestroy {\n    protected _overlayId: string;\n    private destroy$ = new Subject<boolean>();\n    private _overlaySubFilter: [MonoTypeOperatorFunction<OverlayEventArgs>, MonoTypeOperatorFunction<OverlayEventArgs>] = [\n        filter(x => x.id === this._overlayId),\n        takeUntil(this.destroy$)\n    ];\n    private _overlayOpenedSub: Subscription;\n    private _overlayClosingSub: Subscription;\n    private _overlayClosedSub: Subscription;\n    private _overlayAppendedSub: Subscription;\n\n    /**\n     * Emits an event after the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpened(event) {\n     *    alert(\"Toggle opened!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpened)='onToggleOpened($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpening(event) {\n     *  alert(\"Toggle opening!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpening)='onToggleOpening($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emits an event after the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosed(event) {\n     *  alert(\"Toggle closed!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onClosed)='onToggleClosed($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosing(event) {\n     *  alert(\"Toggle closing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *  igxToggle\n     *  (onClosing)='onToggleClosing($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    private _collapsed = true;\n    /**\n     * @hidden\n     */\n    public get collapsed(): boolean {\n        return this._collapsed;\n    }\n\n    /**\n     * Identifier which is registered into `IgxNavigationService`\n     *\n     * ```typescript\n     * let myToggleId = this.toggle.id;\n     * ```\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * @hidden\n     */\n    public get element(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle--hidden')\n    @HostBinding('attr.aria-hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    constructor(\n        private elementRef: ElementRef,\n        private cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        @Optional() private navigationService: IgxNavigationService) {\n    }\n\n    /**\n     * Emits an event after the toggle element is appended to the overlay container.\n     *\n     * ```typescript\n     * onAppended() {\n     *  alert(\"Content appended!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onAppended)='onToggleAppended()'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onAppended = new EventEmitter();\n\n    /**\n     * Opens the toggle.\n     *\n     * ```typescript\n     * this.myToggle.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        //  if there is open animation do nothing\n        //  if toggle is not collapsed and there is no close animation do nothing\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasOpenAnimation = info ? info.openAnimationPlayer : false;\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n        if (hasOpenAnimation || !(this._collapsed || hasCloseAnimation)) {\n            return;\n        }\n\n        if (!info) {\n            this._overlayId = this.overlayService.attach(this.elementRef, overlaySettings);\n        }\n\n        this._collapsed = false;\n        this.cdr.detectChanges();\n\n        const openEventArgs: CancelableEventArgs = { cancel: false };\n        this.onOpening.emit(openEventArgs);\n        if (openEventArgs.cancel) {\n            this._collapsed = true;\n            this.cdr.detectChanges();\n            return;\n        }\n\n        this.unsubscribe();\n\n        this._overlayAppendedSub = this.overlayService.onAppended.pipe(...this._overlaySubFilter).subscribe(() => {\n            this.onAppended.emit();\n        });\n\n        this._overlayOpenedSub = this.overlayService.onOpened.pipe(...this._overlaySubFilter).subscribe(() => {\n            this.onOpened.emit();\n        });\n\n        this._overlayClosingSub = this.overlayService\n        .onClosing\n        .pipe(...this._overlaySubFilter)\n        .subscribe((e: OverlayClosingEventArgs) => {\n            const eventArgs: CancelableBrowserEventArgs = { cancel: false, event: e.event };\n            this.onClosing.emit(eventArgs);\n            e.cancel = eventArgs.cancel;\n\n            //  in case event is not canceled this will close the toggle and we need to unsubscribe.\n            //  Otherwise if for some reason, e.g. close on outside click, close() gets called before\n            //  onClosed was fired we will end with calling onClosing more than once\n            if (!e.cancel) {\n                this.clearSubscription(this._overlayClosingSub);\n            }\n        });\n\n        this._overlayClosedSub = this.overlayService.onClosed\n        .pipe(...this._overlaySubFilter)\n        .subscribe(this.overlayClosed);\n\n        this.overlayService.show(this._overlayId, overlaySettings);\n    }\n\n    /**\n     * Closes the toggle.\n     *\n     * ```typescript\n     * this.myToggle.close();\n     * ```\n     */\n    public close() {\n        //  if toggle is collapsed do nothing\n        //  if there is close animation do nothing, toggle will close anyway\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n        if (this._collapsed || hasCloseAnimation) {\n            return;\n        }\n\n        this.overlayService.hide(this._overlayId);\n    }\n\n    /**\n     * Opens or closes the toggle, depending on its current state.\n     *\n     * ```typescript\n     * this.myToggle.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        //  if toggle is collapsed call open\n        //  if there is close animation call open\n        if (this.collapsed || this.isClosing) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /** @hidden @internal */\n    public get isClosing() {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        return info ? info.closeAnimationPlayer : false;\n    }\n\n    /**\n     * Repositions the toggle.\n     * ```typescript\n     * this.myToggle.reposition();\n     * ```\n     */\n    public reposition() {\n        this.overlayService.reposition(this._overlayId);\n    }\n\n    /**\n     * Offsets the content along the corresponding axis by the provided amount\n     */\n    setOffset(deltaX: number, deltaY: number) {\n        this.overlayService.setOffset(this._overlayId, deltaX, deltaY);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navigationService && this.id) {\n            this.navigationService.add(this.id, this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navigationService && this.id) {\n            this.navigationService.remove(this.id);\n        }\n        if (!this.collapsed && this._overlayId) {\n            this.overlayService.hide(this._overlayId);\n        }\n        this.unsubscribe();\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    private overlayClosed = () => {\n        this._collapsed = true;\n        this.cdr.detectChanges();\n        delete this._overlayId;\n        this.unsubscribe();\n        this.onClosed.emit();\n    }\n\n    private unsubscribe() {\n        this.clearSubscription(this._overlayOpenedSub);\n        this.clearSubscription(this._overlayClosingSub);\n        this.clearSubscription(this._overlayClosedSub);\n        this.clearSubscription(this._overlayAppendedSub);\n    }\n\n    private clearSubscription(subscription: Subscription) {\n        if (subscription && !subscription.closed) {\n            subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    exportAs: 'toggle-action',\n    selector: '[igxToggleAction]'\n})\nexport class IgxToggleActionDirective implements OnInit {\n    protected _overlayDefaults: OverlaySettings;\n\n    /**\n     * Provide settings that control the toggle overlay positioning, interaction and scroll behavior.\n     * ```typescript\n     * const settings: OverlaySettings = {\n     *      closeOnOutsideClick: false,\n     *      modal: false\n     *  }\n     * ```\n     * ---\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [overlaySettings]=\"settings\"></div>\n     * ```\n     */\n    @Input()\n    public overlaySettings: OverlaySettings;\n\n    /**\n     * Determines where the toggle element overlay should be attached.\n     *\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [igxToggleOutlet]=\"outlet\"></div>\n     * ```\n     * Where `outlet` in an instance of `IgxOverlayOutletDirective` or an `ElementRef`\n     */\n    @Input('igxToggleOutlet')\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     * @hidden\n     */\n    @Input('igxToggleAction')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this.navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    protected _target: IToggleView | string;\n\n    constructor(private element: ElementRef, @Optional() private navigationService: IgxNavigationService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._overlayDefaults = {\n            positionStrategy: new ConnectedPositioningStrategy({ target: this.element.nativeElement }),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            closeOnOutsideClick: true,\n            modal: false,\n            excludePositionTarget: true\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n\n        const clonedSettings = Object.assign({}, this._overlayDefaults, this.overlaySettings);\n        this.updateOverlaySettings(clonedSettings);\n        this.target.toggle(clonedSettings);\n    }\n\n    /**\n     * Updates provided overlay settings\n     * @param settings settings to update\n     * @returns returns updated copy of provided overlay settings\n     */\n    protected updateOverlaySettings(settings: OverlaySettings): OverlaySettings {\n        if (settings && settings.positionStrategy) {\n            const positionStrategyClone: IPositionStrategy = settings.positionStrategy.clone();\n            positionStrategyClone.settings.target = this.element.nativeElement;\n            settings.positionStrategy = positionStrategyClone;\n        }\n\n        return settings;\n    }\n}\n\n/**\n * Mark an element as an igxOverlay outlet container.\n * Directive instance is exported as `overlay-outlet` to be assigned to templates variables:\n * ```html\n * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n * ```\n */\n@Directive({\n    exportAs: 'overlay-outlet',\n    selector: '[igxOverlayOutlet]'\n})\nexport class IgxOverlayOutletDirective {\n    constructor(public element: ElementRef) { }\n\n    /** @hidden */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    exports: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxToggleModule { }\n","import { InjectionToken, Input, Output, EventEmitter, DoCheck, OnInit, Directive, NgModule, Optional, Inject } from '@angular/core';\nimport { IBaseEventArgs } from './utils';\n\n\n/**\n * Defines the posible values of the components' display density.\n */\nexport enum DisplayDensity {\n    comfortable = 'comfortable',\n    cosy = 'cosy',\n    compact = 'compact'\n}\n\n/**\n * Describes the object used to configure the DisplayDensity in Angular DI.\n */\nexport interface IDisplayDensityOptions {\n    displayDensity: DisplayDensity;\n}\n\nexport interface IDensityChangedEventArgs extends IBaseEventArgs {\n    oldDensity: DisplayDensity;\n    newDensity: DisplayDensity;\n}\n\n/**\n * Defines the DisplayDensity DI token.\n */\nexport const DisplayDensityToken = new InjectionToken<IDisplayDensityOptions>('DisplayDensity');\n\n/**\n * Base class containing all logic required for implementing DisplayDensity.\n */\n@Directive({\n    selector: '[igxDisplayDensityBase]'\n})\n// tslint:disable-next-line: directive-class-suffix\nexport class DisplayDensityBase implements DoCheck, OnInit {\n    protected _displayDensity: DisplayDensity;\n\n     /**\n     * @hidden\n     */\n    public initialDensity: DisplayDensity;\n\n    /**\n     * Returns the theme of the component.\n     * The default theme is `comfortable`.\n     * Available options are `comfortable`, `cosy`, `compact`.\n     * ```typescript\n     * let componentTheme = this.component.displayDensity;\n     * ```\n     */\n    @Input()\n    public get displayDensity(): DisplayDensity | string {\n        return this._displayDensity ||\n            ((this.displayDensityOptions && this.displayDensityOptions.displayDensity) || DisplayDensity.comfortable);\n    }\n\n    /**\n     * Sets the theme of the component.\n     */\n    public set displayDensity(val: DisplayDensity | string) {\n        const currentDisplayDensity = this._displayDensity;\n        this._displayDensity = val as DisplayDensity;\n\n        if (currentDisplayDensity !== this._displayDensity) {\n            const densityChangedArgs: IDensityChangedEventArgs = {\n                oldDensity: currentDisplayDensity,\n                newDensity: this._displayDensity\n            };\n\n            this.onDensityChanged.emit(densityChangedArgs);\n        }\n    }\n\n    @Output()\n    public onDensityChanged = new EventEmitter<IDensityChangedEventArgs>();\n\n    protected oldDisplayDensityOptions: IDisplayDensityOptions = { displayDensity: DisplayDensity.comfortable };\n\n\n    constructor(@Optional() @Inject(DisplayDensityToken) protected displayDensityOptions: IDisplayDensityOptions) {\n        Object.assign(this.oldDisplayDensityOptions, displayDensityOptions);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        this.initialDensity = this._displayDensity;\n    }\n\n    public ngDoCheck() {\n        if (!this._displayDensity && this.displayDensityOptions &&\n                this.oldDisplayDensityOptions.displayDensity !== this.displayDensityOptions.displayDensity) {\n            const densityChangedArgs: IDensityChangedEventArgs = {\n                oldDensity: this.oldDisplayDensityOptions.displayDensity,\n                newDensity: this.displayDensityOptions.displayDensity\n            };\n\n            this.onDensityChanged.emit(densityChangedArgs);\n            this.oldDisplayDensityOptions = Object.assign(this.oldDisplayDensityOptions, this.displayDensityOptions);\n        }\n    }\n\n    /**\n     * Given a style class of a component/element returns the modified version of it based\n     * on the current display density.\n     */\n    protected getComponentDensityClass(baseStyleClass: string): string {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return `${baseStyleClass}--${DisplayDensity.cosy}`;\n            case DisplayDensity.compact:\n                return `${baseStyleClass}--${DisplayDensity.compact}`;\n            default:\n                return baseStyleClass;\n        }\n    }\n}\n\n@NgModule({\n    declarations: [\n        DisplayDensityBase\n    ],\n    exports: [\n        DisplayDensityBase\n    ]\n})\nexport class IgxDisplayDensityModule {}\n","import { Injectable } from '@angular/core';\n\n/** @hidden */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxSelectionAPIService {\n    /**\n     * If primaryKey is defined, then multiple selection is based on the primaryKey, and it is array of numbers, strings, etc.\n     * If the primaryKey is omitted, then selection is based on the item data\n     */\n    protected selection: Map<string,  Set<any>> = new Map<string, Set<any>>();\n\n    /**\n     * Get current component selection.\n     * @param componentID ID of the component.\n     */\n    public get(componentID: string): Set<any> {\n        return this.selection.get(componentID);\n    }\n\n    /**\n     * Set new component selection.\n     * @param componentID ID of the component.\n     * @param newSelection The new component selection to be set.\n     */\n    public set(componentID: string, newSelection: Set<any>) {\n        if (!componentID) {\n            throw Error('Invalid value for component id!');\n        }\n        this.selection.set(componentID, newSelection);\n    }\n\n    /**\n     * Clears selection for component.\n     * @param componentID ID of the component.\n     */\n    public clear(componentID: string) {\n        this.selection.set(componentID, this.get_empty());\n    }\n\n    /**\n     * Get current component selection length.\n     * @param componentID ID of the component.\n     */\n    public size(componentID: string): number {\n        const sel = this.get(componentID);\n        return sel ? sel.size : 0;\n    }\n\n    /**\n     * Creates new selection that consist of the new item added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_item() one.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (add_items method) to accumulate selection for multiple items.\n     *\n     * @returns Selection after the new item is added.\n     */\n    public add_item(componentID: string, itemID, sel?: Set<any>): Set<any> {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            sel = this.get_empty();\n        }\n        if (!itemID && itemID !== 0) {\n            throw Error('Invalid value for item id!');\n        }\n        sel.add(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_items() one.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     *\n     * @returns Selection after the new items are added.\n     */\n    public add_items(componentID: string, itemIDs: any[], clearSelection?: boolean): Set<any> {\n        let selection: Set<any>;\n        if (clearSelection) {\n            selection = this.get_empty();\n        } else if (itemIDs && itemIDs.length === 0) {\n            selection = new Set(this.get(componentID));\n        }\n        itemIDs.forEach((item) => selection = this.add_item(componentID, item, selection));\n        return selection;\n    }\n\n    /**\n     * Add item to the current component selection.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (select_items method) to accumulate selection for multiple items.\n     */\n    public select_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.add_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Add items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     */\n    public select_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.add_items(componentID, itemID, clearSelection));\n    }\n\n    /**\n     * Creates new selection that consist of the new items excluded from the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_item() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (delete_items method) to accumulate deselected items.\n     *\n     * @returns Selection after the item is removed.\n     */\n    public delete_item(componentID: string, itemID, sel?: Set<any>) {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            return;\n        }\n        sel.delete(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items removed to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_items() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the items to remove from component selection.\n     *\n     * @returns Selection after the items are removed.\n     */\n    public delete_items(componentID: string, itemIDs: any[]): Set<any> {\n        let selection: Set<any>;\n        itemIDs.forEach((deselectedItem) => selection = this.delete_item(componentID, deselectedItem, selection));\n        return selection;\n    }\n\n    /**\n     * Remove item from the current component selection.\n     * @param componentID ID of the component, which we remove item from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (deselect_items method) to accumulate selection for multiple items.\n     */\n    public deselect_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.delete_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Remove items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     */\n    public deselect_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.delete_items(componentID, itemID));\n    }\n\n    /**\n     * Check if the item is selected in the component selection.\n     * @param componentID ID of the component.\n     * @param itemID ID of the item to search.\n     *\n     * @returns If item is selected.\n     */\n    public is_item_selected(componentID: string, itemID): boolean {\n        const sel = this.get(componentID);\n        if (!sel) {\n            return false;\n        }\n        return sel.has(itemID);\n    }\n\n    /**\n     * Get first element in the selection.\n     * This is correct when we have only one item in the collection (for single selection purposes)\n     * and the method returns that item.\n     * @param componentID ID of the component.\n     *\n     * @returns First element in the set.\n     */\n    public first_item(componentID: string) {\n        const sel = this.get(componentID);\n        if (sel && sel.size > 0) {\n            return sel.values().next().value;\n       }\n    }\n\n    /**\n     * Returns whether all items are selected.\n     * @param componentID ID of the component.\n     * @param dataCount: number Number of items in the data.\n     *\n     * @returns If all items are selected.\n     */\n    public are_all_selected(componentID: string, dataCount: number): boolean {\n        return dataCount > 0 && dataCount === this.size(componentID);\n    }\n\n    /**\n     * Returns whether any of the items is selected.\n     * @param componentID ID of the component.\n     * @param data Entire data array.\n     *\n     * @returns If there is any item selected.\n     */\n    public are_none_selected(componentID: string): boolean {\n        return this.size(componentID) === 0;\n    }\n\n    /**\n     * Get all primary key values from a data array. If there isn't a primary key defined that the entire data is returned instead.\n     * @param data Entire data array.\n     * @param primaryKey Data primary key.\n     *\n     * @returns Array of identifiers, either primary key values or the entire data array.\n     */\n    public get_all_ids(data, primaryKey?) {\n        // If primaryKey is 0, this should still map to the property\n        return primaryKey !== undefined && primaryKey !== null ? data.map((x) => x[primaryKey]) : data;\n    }\n\n    /**\n     * Returns empty selection collection.\n     * @returns empty set.\n    */\n    public get_empty() {\n        return new Set();\n    }\n}\n","import { Component, Input, HostBinding } from '@angular/core';\n\nlet NEXT_ID = 0;\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n@Component({\n    selector: 'igx-drop-down-item-group',\n    template: `\n        <label id=\"{{labelId}}\">{{ label }}</label>\n        <ng-content select=\"igx-drop-down-item\"></ng-content>\n    `\n})\nexport class IgxDropDownGroupComponent {\n    private _id = NEXT_ID++;\n\n    /**\n     * @hidden @internal\n     */\n    public get labelId(): string {\n        return `igx-item-group-label-${this._id}`;\n    }\n\n    @HostBinding(`attr.aria-labelledby`)\n    public get labelledBy(): string {\n        return this.labelId;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.role')\n    public role = 'group';\n\n    /** @hidden @internal */\n    @HostBinding('class.igx-drop-down__group')\n    public groupClass = true;\n    /**\n     * Sets/gets if the item group is disabled\n     *\n     * ```typescript\n     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;\n     * // get\n     * ...\n     * const groupState: boolean = myDropDownGroup.disabled;\n     * ...\n     * //set\n     * ...\n     * myDropDownGroup,disabled = false;\n     * ...\n     * ```\n     *\n     * ```html\n     * <igx-drop-down-item-group [label]=\"'My Items'\" [disabled]=\"true\">\n     *     <igx-drop-down-item *ngFor=\"let item of items[index]\" [value]=\"item.value\">\n     *         {{ item.text }}\n     *     </igx-drop-down-item>\n     * </igx-drop-down-item-group>\n     * ```\n     *\n     * **NOTE:** All items inside of a disabled drop down group will be treated as disabled\n     */\n    @Input()\n    @HostBinding(`attr.aria-disabled`)\n    @HostBinding('class.igx-drop-down__group--disabled')\n    public disabled = false;\n\n    /**\n     * Sets/gets the label of the item group\n     *\n     * ```typescript\n     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;\n     * // get\n     * ...\n     * const myLabel: string = myDropDownGroup.label;\n     * ...\n     * // set\n     * ...\n     * myDropDownGroup.label = 'My New Label';\n     * ...\n     * ```\n     *\n     * ```html\n     * <igx-drop-down-item-group [label]=\"'My new Label'\">\n     *      ...\n     * </igx-drop-down-item-group>\n     * ```\n    */\n    @Input()\n    public label: string;\n}\n","import { IDropDownBase, IGX_DROPDOWN_BASE } from './drop-down.common';\nimport { Directive, Input, HostBinding, HostListener, ElementRef, Optional, Inject, DoCheck, Output, EventEmitter } from '@angular/core';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { DeprecateProperty, showMessage } from '../core/deprecateDecorators';\nimport { IgxDropDownGroupComponent } from './drop-down-group.component';\n\nlet NEXT_ID = 0;\nlet warningShown = false;\n\n/**\n * An abstract class defining a drop-down item:\n * With properties / styles for selection, highlight, height\n * Bindable property for passing data (`value: any`)\n * Parent component (has to be used under a parent with type `IDropDownBase`)\n * Method for handling click on Host()\n */\n@Directive({\n    selector: '[igxDropDownItemBase]'\n})\nexport class IgxDropDownItemBaseDirective implements DoCheck {\n    /**\n     * @hidden\n     */\n    protected _focused = false;\n    protected _selected = false;\n    protected _index = null;\n    protected _disabled = false;\n    protected get hasIndex(): boolean {\n        return this._index !== null && this._index !== undefined;\n    }\n\n    /**\n     * Sets/gets the `id` of the item.\n     * ```html\n     * <igx-drop-down-item [id] = 'igx-drop-down-item-0'></igx-drop-down-item>\n     * ```\n     * ```typescript\n     * let itemId =  this.item.id;\n     * ```\n     * @memberof IgxSelectItemComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-drop-down-item-${NEXT_ID++}`;\n\n    /**\n     * @hidden @internal\n     */\n    public get itemID() {\n        return this;\n    }\n\n    /**\n     * The data index of the dropdown item.\n     *\n     * ```typescript\n     * // get the data index of the selected dropdown item\n     * let selectedItemIndex = this.dropdown.selectedItem.index\n     * ```\n     */\n    @Input()\n    public get index(): number {\n        if (this._index === null) {\n            warningShown = showMessage(\n                'IgxDropDownItemBaseDirective: Automatic index is deprecated.' +\n                'Bind in the template instead using `<igx-drop-down-item [index]=\"i\"` instead.`',\n                warningShown);\n            return this.itemIndex;\n        }\n        return this._index;\n    }\n\n    public set index(value) {\n        this._index = value;\n    }\n\n    /**\n     * Gets/sets the value of the item if the item is databound\n     *\n     * ```typescript\n     * // usage in IgxDropDownItemComponent\n     * // get\n     * let mySelectedItemValue = this.dropdown.selectedItem.value;\n     *\n     * // set\n     * let mySelectedItem = this.dropdown.selectedItem;\n     * mySelectedItem.value = { id: 123, name: 'Example Name' }\n     *\n     * // usage in IgxComboItemComponent\n     * // get\n     * let myComboItemValue = this.combo.items[0].value;\n     * ```\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item')\n    get itemStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item--cosy')\n    public get itemStyleCosy() {\n        return this.dropDown.displayDensity === 'cosy' && !this.isHeader;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item--compact')\n    public get itemStyleCompact() {\n        return this.dropDown.displayDensity === 'compact' && !this.isHeader;\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the dropdown\n     *\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.selected; // true\n     * ```\n     *\n     * Two-way data binding\n     * ```html\n     * <igx-drop-down-item [(selected)]='model.isSelected'></igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-selected')\n    @HostBinding('class.igx-drop-down__item--selected')\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n        this.selectedChange.emit(this._selected);\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public selectedChange = new EventEmitter<boolean>();\n\n    /**\n     * @hidden @internal\n     */\n    @Input()\n    @DeprecateProperty(`IgxDropDownItemBaseDirective \\`isSelected\\` property is deprecated.\\n` +\n        `Use \\`selected\\` instead.`)\n    get isSelected(): boolean {\n        return this.selected;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    set isSelected(value: boolean) {\n        this.selected = value;\n    }\n\n    /**\n     * Sets/gets if the given item is focused\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemFocused = mySelectedItem.focused;\n     * ```\n     */\n    @HostBinding('class.igx-drop-down__item--focused')\n    get focused(): boolean {\n        return this.isSelectable && this._focused;\n    }\n\n    /**\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" focused={{!item.focused}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`IgxDropDownItemBaseDirective \\`isFocused\\` property is depracated.\\n` +\n        `Use \\`focused\\` instead.`)\n    get isFocused(): boolean {\n        return this.focused;\n    }\n    /**\n     * @hidden @internal\n     */\n    set isFocused(value: boolean) {\n        this.focused = value;\n    }\n\n    /**\n     * Sets/gets if the given item is header\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemHeader = mySelectedItem.isHeader;\n     * ```\n     *\n     * ```html\n     *  <!--set-->\n     *  <igx-dropdown-item *ngFor=\"let item of items\">\n     *      <div *ngIf=\"items.indexOf(item) === 5; then item.isHeader = true\">\n     *          {{item.field}}\n*           </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-drop-down__header')\n    public isHeader: boolean;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__header--cosy')\n    public get headerClassCosy() {\n        return this.isHeader && this.dropDown.displayDensity === 'cosy';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__header--compact')\n    public get headerClassCompact() {\n        return this.isHeader && this.dropDown.displayDensity === 'compact';\n    }\n\n    /**\n     * Sets/gets if the given item is disabled\n     *\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let myItemIsDisabled = mySelectedItem.disabled;\n     * ```\n     *\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" disabled={{!item.disabled}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     * **NOTE:** Drop-down items inside of a disabled `IgxDropDownGroup` will always count as disabled\n     */\n    @Input()\n    @HostBinding('attr.aria-disabled')\n    @HostBinding('class.igx-drop-down__item--disabled')\n    public get disabled(): boolean {\n        return this.group ? this.group.disabled || this._disabled : this._disabled;\n    }\n\n    public set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    /**\n     * Gets/sets the `role` attribute of the item. Default is 'option'.\n     *\n     * ```html\n     *  <igx-drop-down-item [role]=\"customRole\"></igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'option';\n\n    /**\n     * Gets item index\n     * @hidden @internal\n     */\n    public get itemIndex(): number {\n        return this.dropDown.items.indexOf(this);\n    }\n\n    /**\n     * Gets item element height\n     * @hidden @internal\n     */\n    public get elementHeight(): number {\n        return this.elementRef.nativeElement.clientHeight;\n    }\n\n    /**\n     * Get item html element\n     * @hidden @internal\n     */\n    public get element(): ElementRef {\n        return this.elementRef;\n    }\n\n    constructor(\n        @Inject(IGX_DROPDOWN_BASE) protected dropDown: IDropDownBase,\n        protected elementRef: ElementRef,\n        @Optional() protected group: IgxDropDownGroupComponent,\n        @Optional() @Inject(IgxSelectionAPIService) protected selection?: IgxSelectionAPIService\n    ) { }\n\n    ngDoCheck(): void {\n        if (this._selected) {\n            const dropDownSelectedItem = this.dropDown.selectedItem;\n            if (!dropDownSelectedItem) {\n                this.dropDown.selectItem(this);\n            } else if (this.hasIndex\n                ? this._index !== dropDownSelectedItem.index || this.value !== dropDownSelectedItem.value :\n                this !== dropDownSelectedItem) {\n                this.dropDown.selectItem(this);\n            }\n        }\n    }\n\n    /** Returns true if the items is not a header or disabled  */\n    protected get isSelectable(): boolean {\n        return  !(this.disabled || this.isHeader);\n    }\n\n    /** If `allowItemsFocus` is enabled, keep the browser focus on the active item */\n    protected ensureItemFocus() {\n        if (this.dropDown.allowItemsFocus) {\n            const focusedItem = this.dropDown.items.find((item) => item.focused);\n            if (!focusedItem) { return; }\n            focusedItem.element.nativeElement.focus({ preventScroll: true });\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('click', ['$event'])\n    clicked(event): void {\n    }\n}\n","import {\n    Component,\n    HostBinding\n} from '@angular/core';\nimport { IgxDropDownItemBaseDirective } from './drop-down-item.base';\n\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n@Component({\n    selector: 'igx-drop-down-item',\n    templateUrl: 'drop-down-item.component.html'\n})\nexport class IgxDropDownItemComponent extends IgxDropDownItemBaseDirective {\n    /**\n     * @inheritdoc\n     */\n    get focused(): boolean {\n        let focusedState = this._focused;\n        if (this.hasIndex) {\n            const focusedItem = this.selection.first_item(`${this.dropDown.id}-active`);\n            const focusedIndex = focusedItem ? focusedItem.index : -1;\n            focusedState = this._index === focusedIndex;\n        }\n        return this.isSelectable && focusedState;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n    /**\n     * @inheritdoc\n     */\n    get selected(): boolean {\n        if (this.hasIndex) {\n            const item = this.selection.first_item(`${this.dropDown.id}`);\n            return item ? item.index === this._index && item.value === this.value : false;\n        }\n        return this._selected;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n        this.selectedChange.emit(this._selected);\n    }\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.tabindex')\n    get setTabIndex() {\n        const shouldSetTabIndex = this.dropDown.allowItemsFocus && this.isSelectable;\n        if (shouldSetTabIndex) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clicked(event): void {\n        if (!this.isSelectable) {\n            this.ensureItemFocus();\n            return;\n        }\n        if (this.selection) {\n            this.dropDown.selectItem(this, event);\n        }\n    }\n}\n","import {\n    Input, HostBinding, ElementRef, QueryList, Output, EventEmitter, ChangeDetectorRef, Optional, Inject, Directive\n} from '@angular/core';\n\nimport { Navigate, ISelectionEventArgs } from './drop-down.common';\nimport { IDropDownList } from './drop-down.common';\nimport { DropDownActionKey } from './drop-down.common';\nimport { IgxDropDownItemBaseDirective } from './drop-down-item.base';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\nlet NEXT_ID = 0;\n\n/**\n * An abstract class, defining a drop-down component, with:\n * Properties for display styles and classes\n * A collection items of type `IgxDropDownItemBaseDirective`\n * Properties and methods for navigating (highlighting/focusing) items from the collection\n * Properties and methods for selecting items from the collection\n */\n@Directive({\n    selector: '[igxDropDownBase]'\n})\nexport class IgxDropDownBaseDirective extends DisplayDensityBase implements IDropDownList {\n    protected _width;\n    protected _height;\n    protected _focusedItem: any = null;\n    protected _id = `igx-drop-down-${NEXT_ID++}`;\n\n    /**\n     * @hidden @internal\n     * Get dropdown's html element of its scroll container\n     */\n    public get scrollContainer(): HTMLElement {\n        return this.element;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public children: QueryList<IgxDropDownItemBaseDirective>;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-drop-down (onSelection)='handleSelection()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<ISelectionEventArgs>();\n\n    /**\n     *  Gets/Sets the width of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentWidth = this.dropdown.width;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [width]='160px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public width: string;\n\n    /**\n     * Gets/Sets the height of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentHeight = this.dropdown.height;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [height]='400px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public height: string;\n\n    /**\n     * Gets/Sets the drop down's id\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentId = this.dropdown.id;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [id]='newDropDownId'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * Gets/Sets the drop down's container max height.\n     *\n     * ```typescript\n     * // get\n     * let maxHeight = this.dropdown.maxHeight;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [maxHeight]='200px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    @HostBinding('style.maxHeight')\n    public maxHeight = null;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down')\n    public cssClass = true;\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxDropDownItemBaseDirective[] {\n        const items: IgxDropDownItemBaseDirective[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * Get all header items\n     *\n     * ```typescript\n     * let myDropDownHeaderItems = this.dropdown.headers;\n     * ```\n     */\n    public get headers(): IgxDropDownItemBaseDirective[] {\n        const headers: IgxDropDownItemBaseDirective[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n\n        return headers;\n    }\n\n    /**\n     * Get dropdown html element\n     *\n     * ```typescript\n     * let myDropDownElement = this.dropdown.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     */\n    public collapsed: boolean;\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /** Keydown Handler */\n    public onItemActionKey(key: DropDownActionKey, event?: Event) {\n        switch (key) {\n            case DropDownActionKey.ENTER:\n            case DropDownActionKey.SPACE:\n                this.selectItem(this.focusedItem, event);\n                break;\n            case DropDownActionKey.ESCAPE:\n        }\n    }\n\n    /**\n     * Emits onSelection with the target item & event\n     * @hidden @internal\n     * @param newSelection the item selected\n     * @param event the event that triggered the call\n     */\n    public selectItem(newSelection?: IgxDropDownItemBaseDirective, event?: Event) {\n        this.onSelection.emit({\n            newSelection,\n            oldSelection: null,\n            cancel: false\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get focusedItem(): IgxDropDownItemBaseDirective {\n        return this._focusedItem;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set focusedItem(item: IgxDropDownItemBaseDirective) {\n        this._focusedItem = item;\n    }\n\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        let index = -1;\n        if (this._focusedItem) {\n            index = currentIndex ? currentIndex : this.focusedItem.itemIndex;\n        }\n        const newIndex = this.getNearestSiblingFocusableItemIndex(index, direction);\n        this.navigateItem(newIndex);\n    }\n\n    protected getNearestSiblingFocusableItemIndex(startIndex: number, direction: Navigate): number {\n        let index = startIndex;\n        const items = this.items;\n        while (items[index + direction] && items[index + direction].disabled) {\n            index += direction;\n        }\n\n        index += direction;\n        if (index >= 0 && index < items.length) {\n            return index;\n        } else {\n            return -1;\n        }\n    }\n\n    /**\n     * Navigates to the item on the specified index\n     * @param newIndex number - the index of the item in the `items` collection\n     */\n    public navigateItem(newIndex: number) {\n        if (newIndex !== -1) {\n            const oldItem = this._focusedItem;\n            const newItem = this.items[newIndex];\n            if (oldItem) {\n                oldItem.focused = false;\n            }\n            this.focusedItem = newItem;\n            this.scrollToHiddenItem(newItem);\n            this.focusedItem.focused = true;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateFirst() {\n        this.navigate(Navigate.Down, -1);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateLast() {\n        this.navigate(Navigate.Up, this.items.length);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateNext() {\n        this.navigate(Navigate.Down);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigatePrev() {\n        this.navigate(Navigate.Up);\n    }\n\n    protected scrollToHiddenItem(newItem: IgxDropDownItemBaseDirective) {\n        const elementRect = newItem.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        if (parentRect.top > elementRect.top) {\n            this.scrollContainer.scrollTop -= (parentRect.top - elementRect.top);\n        }\n\n        if (parentRect.bottom < elementRect.bottom) {\n            this.scrollContainer.scrollTop += (elementRect.bottom - parentRect.bottom);\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    HostBinding,\n    ViewChild,\n    ViewContainerRef\n} from '@angular/core';\n\n@Component({\n    selector: 'igx-display-container',\n    template: `\n        <ng-template\n            #display_container\n            igxScrollInertia\n            [IgxScrollInertiaScrollContainer]=\"scrollContainer\"\n            [IgxScrollInertiaDirection]=\"scrollDirection\">\n        </ng-template>\n    `\n})\nexport class DisplayContainerComponent {\n    @ViewChild('display_container', { read: ViewContainerRef, static: true })\n    public _vcr;\n\n    public scrollDirection: string;\n\n    @HostBinding('class')\n    public cssClass = 'igx-display-container';\n\n    @HostBinding('class.igx-display-container--inactive')\n    public notVirtual = true;\n\n    public scrollContainer;\n\n    constructor(public cdr: ChangeDetectorRef, public _viewContainer: ViewContainerRef) { }\n}\n","import {\n    EventEmitter,\n    Output,\n    HostListener,\n    ElementRef,\n    ChangeDetectorRef,\n    OnDestroy,\n    Directive,\n    AfterViewInit\n} from '@angular/core';\n\n@Directive({\n    selector: '[igxVirtualHelperBase]'\n})\nexport class VirtualHelperBaseDirective implements OnDestroy, AfterViewInit {\n    public scrollAmount = 0;\n\n    public _size = 0;\n\n    public destroyed;\n\n    private _afterViewInit = false;\n\n    ngAfterViewInit() {\n        this._afterViewInit = true;\n    }\n\n    @HostListener('scroll', ['$event'])\n    onScroll(event) {\n        this.scrollAmount = event.target.scrollTop || event.target.scrollLeft;\n    }\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    public ngOnDestroy() {\n        this.destroyed = true;\n    }\n\n    public set size(value) {\n        if (this.destroyed) {\n            return;\n        }\n        this._size = value;\n        if (this._afterViewInit) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    public get size() {\n        return this._size;\n    }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef, ChangeDetectorRef } from '@angular/core';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-horizontal-virtual-helper',\n    template: '<div #horizontal_container class=\"igx-vhelper__placeholder-content\" [style.width.px]=\"size\"></div>'\n})\nexport class HVirtualHelperComponent extends VirtualHelperBaseDirective {\n    @ViewChild('horizontal_container', { read: ViewContainerRef, static: true }) public _vcr;\n    @Input() public width: number;\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--horizontal';\n\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef) {\n        super(elementRef, cdr);\n     }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\n\n@Component({\n    selector: 'igx-virtual-helper',\n    template: '<div #container class=\"igx-vhelper__placeholder-content\" [style.height.px]=\"size\"></div>'\n})\nexport class VirtualHelperComponent extends VirtualHelperBaseDirective implements OnDestroy  {\n    @HostBinding('scrollTop')\n    public scrollTop;\n\n    @ViewChild('container', { read: ViewContainerRef, static: true }) public _vcr;\n    @Input() public itemsLength: number;\n\n\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--vertical';\n\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef) {\n        super(elementRef, cdr);\n    }\n\n}\n","import { Directive, Input, ElementRef, NgZone, OnInit, NgModule, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxScrollInertia]' })\nexport class IgxScrollInertiaDirective implements OnInit, OnDestroy {\n\n    constructor(private element: ElementRef, private _zone: NgZone) {\n\n    }\n\n    @Input()\n    public IgxScrollInertiaDirection: string;\n\n    @Input()\n    public IgxScrollInertiaScrollContainer: any;\n\n    @Input()\n    public wheelStep = 50;\n\n    @Input()\n    public inertiaStep = 1.5;\n\n    @Input()\n    public swipeToleranceX = 20;\n\n    @Input()\n    public inertiaDeltaY = 3;\n\n    @Input()\n    public inertiaDeltaX = 2;\n\n    @Input()\n    public inertiaDuration = 0.5;\n\n    private _touchInertiaAnimID;\n    private _startX;\n    private _startY;\n    private _touchStartX;\n    private _touchStartY;\n    private _lastTouchEnd;\n    private _lastTouchX;\n    private _lastTouchY;\n    private _savedSpeedsX = [];\n    private _savedSpeedsY;\n    private _totalMovedX;\n    private _offsetRecorded;\n    private _offsetDirection;\n    private _touchPrevented;\n    private _lastMovedX;\n    private _lastMovedY;\n    private _gestureObject;\n    private setPointerCaptureFName = typeof Element.prototype['msSetPointerCapture'] === 'function' ?\n    'msSetPointerCapture' :\n    'setPointerCapture';\n    private releasePointerCaptureFName = typeof Element.prototype['msReleasePointerCapture'] === 'function' ?\n    'msReleasePointerCapture' :\n    'releasePointerCapture';\n    private _pointer;\n    private _nextX;\n    private _nextY;\n    private parentElement;\n\n    ngOnInit(): void {\n        this._zone.runOutsideAngular(() => {\n            this.parentElement = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n            const targetElem = this.parentElement;\n            targetElem.addEventListener('wheel',\n                    (evt) => { this.onWheel(evt); });\n            targetElem.addEventListener('touchstart',\n                    (evt) => { this.onTouchStart(evt); });\n            targetElem.addEventListener('touchmove',\n                    (evt) => { this.onTouchMove(evt); });\n            targetElem.addEventListener('touchend',\n                    (evt) => { this.onTouchEnd(evt); });\n            targetElem.addEventListener('pointerdown',\n                    (evt) => { this.onPointerDown(evt); });\n            targetElem.addEventListener('pointerup',\n                     (evt) => { this.onPointerUp(evt); });\n            targetElem.addEventListener('MSGestureStart',\n                    (evt) => { this.onMSGestureStart(evt); });\n            targetElem.addEventListener('MSGestureChange',\n                    (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n     /**\n     * @hidden\n     * Function that is called when scrolling with the mouse wheel or using touchpad\n     */\n    protected onWheel(evt) {\n        // if no scrollbar return\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        let scrollDeltaX;\n        let scrollDeltaY;\n        const scrollStep = this.wheelStep;\n        const minWheelStep = 1 / this.wheelStep;\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        if (evt.wheelDeltaX) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaX = -evt.wheelDeltaX / 120;\n\n            if (-minWheelStep < scrollDeltaX && scrollDeltaX < minWheelStep) {\n                scrollDeltaX = Math.sign(scrollDeltaX) * minWheelStep;\n            }\n        } else if (evt.deltaX) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaX = this.calcAxisCoords(evt.deltaX, -1, 1);\n        }\n\n        /** Get delta for the Y axis*/\n        if (evt.wheelDeltaY) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaY = -evt.wheelDeltaY / 120;\n\n            if (-minWheelStep < scrollDeltaY && scrollDeltaY < minWheelStep) {\n                scrollDeltaY = Math.sign(scrollDeltaY) * minWheelStep;\n            }\n        } else if (evt.deltaY) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaY = this.calcAxisCoords(evt.deltaY, -1, 1);\n        }\n        if (scrollDeltaX && this.IgxScrollInertiaDirection === 'horizontal') {\n            this._scrollToX(\n                this._startX + scrollDeltaX * scrollStep\n            );\n            const curScrollLeft = this.IgxScrollInertiaScrollContainer.scrollLeft;\n            const maxScrollLeft = parseInt(this.IgxScrollInertiaScrollContainer.children[0].style.width, 10);\n            if (0 < curScrollLeft && curScrollLeft < maxScrollLeft) {\n                // Prevent navigating through pages when scrolling on Mac\n                evt.preventDefault();\n            }\n        } else if (scrollDeltaY && this.IgxScrollInertiaDirection === 'vertical') {\n            this._scrollToY(\n                this._startY + scrollDeltaY * scrollStep\n            );\n            this.preventParentScroll(evt, true);\n        }\n    }\n\n    /**\n     * @hidden\n     * When there is still room to scroll up/down prevent the parent elements from scrolling too.\n     */\n    protected preventParentScroll(evt, preventDefault) {\n        const curScrollTop = this.IgxScrollInertiaScrollContainer.scrollTop;\n        const maxScrollTop = this.IgxScrollInertiaScrollContainer.children[0].scrollHeight -\n            this.IgxScrollInertiaScrollContainer.offsetHeight;\n        if (0 < curScrollTop && curScrollTop < maxScrollTop) {\n            if (preventDefault) {\n                 evt.preventDefault();\n            }\n            if (evt.stopPropagation) {\n                evt.stopPropagation();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called the first moment we start interacting with the content on a touch device\n     */\n    protected onTouchStart(event) {\n        if (typeof MSGesture === 'function' || !this.IgxScrollInertiaScrollContainer) {\n            return false;\n        }\n\n        // stops any current ongoing inertia\n        cancelAnimationFrame(this._touchInertiaAnimID);\n\n        const touch = event.touches[ 0 ];\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        this._touchStartX = touch.pageX;\n        this._touchStartY = touch.pageY;\n\n        this._lastTouchEnd = new Date().getTime();\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n        this._savedSpeedsX = [];\n        this._savedSpeedsY = [];\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n\n        this._touchPrevented = false;\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, false);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to scroll the content based on touch interactions\n     */\n    protected onTouchMove(event) {\n        if (typeof MSGesture === 'function') {\n            this._touchPrevented = false;\n            return false;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n\n        const touch = event.touches[ 0 ];\n        const destX = this._startX + (this._touchStartX - touch.pageX) * Math.sign(this.inertiaStep);\n        const destY = this._startY + (this._touchStartY - touch.pageY) * Math.sign(this.inertiaStep);\n\n        /* Handle complex touchmoves when swipe stops but the toch doesn't end and then a swipe is initiated again */\n        /* **********************************************************/\n\n\n        const timeFromLastTouch = (new Date().getTime()) - this._lastTouchEnd;\n        if (timeFromLastTouch !== 0 && timeFromLastTouch < 100) {\n            const speedX = (this._lastTouchX - touch.pageX) / timeFromLastTouch;\n            const speedY = (this._lastTouchY - touch.pageY) / timeFromLastTouch;\n\n            // Save the last 5 speeds between two touchmoves on X axis\n            if (this._savedSpeedsX.length < 5) {\n                this._savedSpeedsX.push(speedX);\n            } else {\n                this._savedSpeedsX.shift();\n                this._savedSpeedsX.push(speedX);\n            }\n\n            // Save the last 5 speeds between two touchmoves on Y axis\n            if (this._savedSpeedsY.length < 5) {\n                this._savedSpeedsY.push(speedY);\n            } else {\n                this._savedSpeedsY.shift();\n                this._savedSpeedsY.push(speedY);\n            }\n        }\n        this._lastTouchEnd = new Date().getTime();\n        this._lastMovedX = this._lastTouchX - touch.pageX;\n        this._lastMovedY = this._lastTouchY - touch.pageY;\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n\n        this._totalMovedX += this._lastMovedX;\n\n        let scrolledXY; // Object: {x, y}\n        /*\tDo not scroll using touch untill out of the swipeToleranceX bounds */\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            scrolledXY = this._scrollTo(this._startX, destY);\n        } else {\n            /*\tRecord the direction the first time we are out of the swipeToleranceX bounds.\n\t\t\t*\tThat way we know which direction we apply the offset so it doesn't hickup when moving out of the swipeToleranceX bounds */\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n\n            /*\tScroll with offset ammout of swipeToleranceX in the direction we have exited the bounds and\n            don't change it after that ever until touchend and again touchstart */\n            scrolledXY = this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX,\n                destY);\n        }\n\n        if (scrolledXY.x === 0 && scrolledXY.y === 0) {\n            this._touchPrevented = true;\n        }\n\n        // On Safari preventing the touchmove would prevent default page scroll behaviour even if there is the element doesn't have overflow\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, true);\n        }\n    }\n\n    protected onTouchEnd(event) {\n        if (typeof MSGesture === 'function') {\n            return;\n        }\n        let speedX = 0;\n        let speedY = 0;\n\n        // savedSpeedsX and savedSpeedsY have same length\n        for (let i = 0; i < this._savedSpeedsX.length; i++) {\n            speedX += this._savedSpeedsX[ i ];\n            speedY += this._savedSpeedsY[ i ];\n        }\n        speedX = this._savedSpeedsX.length ? speedX / this._savedSpeedsX.length : 0;\n        speedY = this._savedSpeedsX.length ? speedY / this._savedSpeedsY.length : 0;\n\n         // Use the lastMovedX and lastMovedY to determine if the swipe stops without lifting the finger so we don't start inertia\n        if ((Math.abs(speedX) > 0.1 || Math.abs(speedY) > 0.1) &&\n                        (Math.abs(this._lastMovedX) > 2 || Math.abs(this._lastMovedY) > 2)) {\n                    this._inertiaInit(speedX, speedY);\n        }\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, false);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch starting on a touch device on IE/Edge\n     */\n    protected onPointerDown(event) {\n        if (!event || (event.pointerType !== 2 && event.pointerType !== 'touch') ||\n            typeof MSGesture !== 'function') {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        // setPointerCaptureFName is the name of the function that is supported\n        event.target[this.setPointerCaptureFName](this._pointer = event.pointerId);\n\n        // create gestureObject only one time to prevent overlapping during intertia\n        if (!this._gestureObject) {\n            this._gestureObject = new MSGesture();\n            this._gestureObject.target = this.parentElement;\n        }\n        this._gestureObject.addPointer(this._pointer);\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch ending on a touch device on IE/Edge\n     */\n    protected onPointerUp(event) {\n        if (!this._pointer) {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        /* releasePointerCaptureFName is the name of the function that is supported */\n        event.target[ this.releasePointerCaptureFName ](this._pointer);\n\n        delete this._pointer;\n    }\n\n    /**\n     * @hidden\n     *  Function that is called when a gesture begins on IE/Edge\n     */\n    protected onMSGestureStart(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n\n        this._touchStartX = event.screenX;\n        this._touchStartY = event.screenY;\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n        return false;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when a we need to scroll based on the gesture performed on IE/Edge\n     */\n    protected onMSGestureChange(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        const touchPos = event,\n            destX = this._startX + this._touchStartX - touchPos.screenX,\n            destY = this._startY + this._touchStartY - touchPos.screenY;\n        /* Logic regarding x tolerance to prevent accidental horizontal scrolling when scrolling vertically */\n        this._totalMovedX = this._touchStartX - touchPos.screenX;\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            /* Do not scroll horizontally yet while in the tolerance range */\n            this._scrollToY(destY);\n        } else {\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n            /* Once the tolerance is exceeded it can be scrolled horizontally */\n            this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX, destY);\n        }\n\n        return false;\n    }\n\n    private calcAxisCoords(target, min, max) {\n        if (target === undefined || target < min) {\n            target = min;\n        } else if (target > max) {\n            target = max;\n        }\n\n        return target;\n    }\n\n    private _scrollTo(destX, destY) {\n        const curPosX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        const curPosY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n         // TODO Trigger scrolling event?\n        const scrolledX = this._scrollToX(destX);\n        const scrolledY = this._scrollToY(destY);\n\n        return { x: scrolledX, y: scrolledY };\n    }\n    private _scrollToX(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollLeft = dest;\n    }\n    private _scrollToY(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollTop = dest;\n    }\n\n   protected _inertiaInit(speedX, speedY) {\n    const stepModifer = this.inertiaStep,\n        inertiaDuration = this.inertiaDuration;\n    let x = 0;\n    this._nextX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n    this._nextY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n    // Sets timeout until executing next movement iteration of the inertia\n    const inertiaStep = () => {\n        if (x > 6) {\n            cancelAnimationFrame(this._touchInertiaAnimID);\n            return;\n        }\n\n        if (Math.abs(speedX) > Math.abs(speedY)) {\n            x += 0.05 / (1 * inertiaDuration);\n        } else {\n            x += 0.05 / (1 * inertiaDuration);\n        }\n\n        if (x <= 1) {\n            // We use constant quation to determine the offset without speed falloff befor x reaches 1\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += 1 * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += 1 * speedY * 15 * stepModifer;\n            }\n        } else {\n            // We use the quation \"y = 2 / (x + 0.55) - 0.3\" to determine the offset\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += Math.abs(2 / (x + 0.55) - 0.3) * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += Math.abs(2 / (x + 0.55) - 0.3) * speedY * 15 * stepModifer;\n            }\n        }\n\n        // If we have mixed environment we use the default behaviour. i.e. touchscreen + mouse\n        this._scrollTo(this._nextX, this._nextY);\n\n        this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n    };\n\n    // Start inertia and continue it recursively\n    this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n   }\n\n    ngOnDestroy() {\n        this._zone.runOutsideAngular(() => {\n            const targetElem = this.parentElement;\n            targetElem.removeEventListener('wheel',\n                (evt) => { this.onWheel(evt); });\n            targetElem.removeEventListener('touchstart',\n                (evt) => { this.onTouchStart(evt); });\n            targetElem.removeEventListener('touchmove',\n                (evt) => { this.onTouchMove(evt); });\n            targetElem.removeEventListener('touchend',\n                (evt) => { this.onTouchEnd(evt); });\n            targetElem.removeEventListener('pointerdown',\n                (evt) => { this.onPointerDown(evt); });\n            targetElem.removeEventListener('pointerup',\n                (evt) => { this.onPointerUp(evt); });\n            targetElem.removeEventListener('MSGestureStart',\n                (evt) => { this.onMSGestureStart(evt); });\n            targetElem.removeEventListener('MSGestureChange',\n                (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxScrollInertiaDirective],\n    exports: [IgxScrollInertiaDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxScrollInertiaModule {\n}\n\n","import { Injectable, Component } from '@angular/core';\nimport { IgxGridForOfDirective } from './for_of.directive';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxForOfSyncService {\n\n    private _master: Map<string, IgxGridForOfDirective<any>> = new Map<string, IgxGridForOfDirective<any>>();\n\n    /**\n     * @hidden\n     */\n    public isMaster(directive: IgxGridForOfDirective<any>): boolean {\n        return this._master.get(directive.igxForScrollOrientation) === directive;\n    }\n\n    /**\n     * @hidden\n     */\n    public setMaster(directive: IgxGridForOfDirective<any>, forced = false) {\n        const orientation = directive.igxForScrollOrientation;\n        if (orientation && (forced || !this._master.has(orientation))) {\n            this._master.set(orientation, directive);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public resetMaster() {\n        this._master.clear();\n    }\n\n    /**\n     * @hidden\n     */\n    public sizesCache(dir: string): number[] {\n        return this._master.get(dir).sizesCache;\n    }\n\n    /**\n     * @hidden\n     */\n    public chunkSize(dir: string): number {\n        return this._master.get(dir).state.chunkSize;\n    }\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxForOfScrollSyncService {\n    private _masterScroll: Map<string, VirtualHelperBaseDirective> = new Map<string, any>();\n    public setScrollMaster(dir: string, scroll: VirtualHelperBaseDirective) {\n        this._masterScroll.set(dir, scroll);\n    }\n\n    public getScrollMaster(dir: string) {\n        return this._masterScroll.get(dir);\n    }\n}\n","ï»¿import { CommonModule, NgForOfContext } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    DoCheck,\n    EmbeddedViewRef,\n    EventEmitter,\n    Input,\n    IterableChanges,\n    IterableDiffer,\n    IterableDiffers,\n    NgModule,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    TrackByFunction,\n    ViewContainerRef,\n    ViewRef,\n    AfterViewInit\n} from '@angular/core';\n\nimport { DisplayContainerComponent } from './display.container';\nimport { HVirtualHelperComponent } from './horizontal.virtual.helper.component';\nimport { VirtualHelperComponent } from './virtual.helper.component';\nimport { IgxScrollInertiaModule } from './../scroll-inertia/scroll_inertia.directive';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from './for_of.sync.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil, filter, throttleTime, first } from 'rxjs/operators';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\n\n/**\n *  @publicApi\n */\nexport class IgxForOfContext<T> {\n    constructor(\n       public $implicit: T,\n       public index: number,\n       public count: number\n    ) {}\n\n    /**\n     * A function that returns whether the element is the first or not\n     */\n    get first(): boolean { return this.index === 0; }\n\n    /**\n     * A function that returns whether the element is the last or not\n     */\n    get last(): boolean { return this.index === this.count - 1; }\n\n    /**\n     * A function that returns whether the element is even or not\n     */\n    get even(): boolean { return this.index % 2 === 0; }\n\n    /**\n     * A function that returns whether the element is odd or not\n     */\n    get odd(): boolean { return !this.even; }\n\n}\n\n@Directive({ selector: '[igxFor][igxForOf]' })\nexport class IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck, OnDestroy, AfterViewInit {\n\n    /**\n     * An @Input property that sets the data to be rendered.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForOf: any[];\n\n    /**\n     * An @Input property that sets the property name from which to read the size in the data object.\n     */\n    @Input()\n    public igxForSizePropName;\n\n    /**\n     * An @Input property that specifies the scroll orientation.\n     * Scroll orientation can be \"vertical\" or \"horizontal\".\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollOrientation = 'vertical';\n\n    /**\n     * Optionally pass the parent `igxFor` instance to create a virtual template scrolling both horizontally and vertically.\n     * ```html\n     * <ng-template #scrollContainer igxFor let-rowData [igxForOf]=\"data\"\n     *       [igxForScrollOrientation]=\"'vertical'\"\n     *       [igxForContainerSize]=\"'500px'\"\n     *       [igxForItemSize]=\"'50px'\"\n     *       let-rowIndex=\"index\">\n     *       <div [style.display]=\"'flex'\" [style.height]=\"'50px'\">\n     *           <ng-template #childContainer igxFor let-item [igxForOf]=\"data\"\n     *               [igxForScrollOrientation]=\"'horizontal'\"\n     *               [igxForScrollContainer]=\"parentVirtDir\"\n     *               [igxForContainerSize]=\"'500px'\">\n     *                   <div [style.min-width]=\"'50px'\">{{rowIndex}} : {{item.text}}</div>\n     *           </ng-template>\n     *       </div>\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollContainer: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the container along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the container and for \"vertical\" is the height.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForContainerSize]=\"'500px'\"\n     *      [igxForScrollOrientation]=\"'horizontal'\">\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForContainerSize: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the item along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the column and for \"vertical\" is the height or the row.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" [igxForItemSize]=\"'50px'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForItemSize: any;\n\n    /**\n     * The total count of the virtual data items, when using remote service.\n     * Similar to the property totalItemCount, but this will allow setting the data count into the template.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data | async\" [igxForTotalItemCount]=\"count | async\"\n     *  [igxForContainerSize]=\"'500px'\" [igxForItemSize]=\"'50px'\"></ng-template>\n     * ```\n     */\n    @Input()\n    get igxForTotalItemCount(): number {\n        return this.totalItemCount;\n    }\n    set igxForTotalItemCount(value: number) {\n        this.totalItemCount = value;\n    }\n    /**\n     * @hidden\n     */\n    public dc: ComponentRef<DisplayContainerComponent>;\n\n    /**\n     * The current state of the directive. It contains `startIndex` and `chunkSize`.\n     * state.startIndex - The index of the item at which the current visible chunk begins.\n     * state.chunkSize - The number of items the current visible chunk holds.\n     * These options can be used when implementing remote virtualization as they provide the necessary state information.\n     * ```typescript\n     * const gridState = this.parentVirtDir.state;\n     * ```\n     */\n    public state: IForOfState = {\n        startIndex: 0,\n        chunkSize: 0\n    };\n    /**\n     * The total count of the virtual data items, when using remote service.\n     * ```typescript\n     * this.parentVirtDir.totalItemCount = data.Count;\n     * ```\n     */\n    public totalItemCount: number = null;\n\n    /**\n     * An event that is emitted after a new chunk has been loaded.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkLoad)=\"chunkLoad($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkLoad(e){\n     * alert(\"chunk loaded!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * @hidden @internal\n     * An event that is emitted when scrollbar visibility has changed.\n     */\n    @Output()\n    public onScrollbarVisibilityChanged = new EventEmitter<any>();\n\n    /**\n     * An event that is emitted after the rendered content size of the igxForOf has been changed.\n    */\n    @Output()\n    public onContentSizeChange = new EventEmitter<any>();\n\n    /**\n     * An event that is emitted after data has been changed.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onDataChanged)=\"dataChanged($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * dataChanged(e){\n     * alert(\"data changed!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onDataChanged = new EventEmitter<any>();\n\n    @Output()\n    public onBeforeViewDestroyed = new EventEmitter<EmbeddedViewRef<any>>();\n\n    /**\n     * An event that is emitted on chunk loading to emit the current state information - startIndex, endIndex, totalCount.\n     * Can be used for implementing remote load on demand for the igxFor data.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkPreload)=\"chunkPreload($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkPreload(e){\n     * alert(\"chunk is loading!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkPreload = new EventEmitter<IForOfState>();\n    protected func;\n    protected _sizesCache: number[] = [];\n    protected scrollComponent: VirtualHelperBaseDirective;\n    protected _differ: IterableDiffer<T> | null = null;\n    protected _trackByFn: TrackByFunction<T>;\n    protected heightCache = [];\n    private _adjustToIndex;\n    private MAX_PERF_SCROLL_DIFF = 4;\n\n\n    public get displayContainer(): HTMLElement | undefined {\n        return this.dc.instance._viewContainer.element.nativeElement;\n    }\n\n    public get virtualHelper() {\n        return this.scrollComponent.nativeElement;\n    }\n\n    protected get sizesCache(): number[] {\n        return this._sizesCache;\n    }\n    protected set sizesCache(value: number[]) {\n        this._sizesCache = value;\n    }\n\n    private get _isScrolledToBottom() {\n        if (!this.getScroll()) {\n            return true;\n        }\n        const scrollHeight = this.getScroll().scrollHeight;\n        // Use === and not >= because `scrollTop + container size` can't be bigger than `scrollHeight`, unless something isn't updated.\n        // Also use Math.round because Chrome has some inconsistencies and `scrollTop + container` can be float when zooming the page.\n        return Math.round(this.getScroll().scrollTop + this.igxForContainerSize) === scrollHeight;\n    }\n\n    private get _isAtBottomIndex() {\n        return this.igxForOf && this.state.startIndex + this.state.chunkSize > this.igxForOf.length;\n    }\n\n    // Start properties related to virtual height handling due to browser limitation\n    /** Maximum height for an element of the browser. */\n    private _maxHeight;\n\n    /** Height that is being virtualized. */\n    protected _virtHeight = 0;\n\n    /**\n     * Ratio for height that's being virtualizaed and the one visible\n     * If _virtHeightRatio = 1, the visible height and the virtualized are the same, also _maxHeight > _virtHeight.\n     */\n    private _virtHeightRatio = 1;\n\n    /** Internal track for scroll top that is being virtualized */\n    protected _virtScrollTop = 0;\n\n    /** If the next onScroll event is triggered due to internal setting of scrollTop */\n    protected _bScrollInternal = false;\n    // End properties related to virtual height handling\n\n    protected _embeddedViews: Array<EmbeddedViewRef<any>> = [];\n\n    protected contentResizeNotify = new Subject();\n    protected contentObserver: ResizeObserver;\n\n    /**\n     * @hidden\n     */\n    protected destroy$ = new Subject<any>();\n\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        protected _template: TemplateRef<NgForOfContext<T>>,\n        protected _differs: IterableDiffers,\n        private resolver: ComponentFactoryResolver,\n        public cdr: ChangeDetectorRef,\n        protected _zone: NgZone,\n        protected syncScrollService: IgxForOfScrollSyncService) { }\n\n    /**\n     * @hidden\n     */\n    protected get isRemote(): boolean {\n        return this.totalItemCount !== null;\n    }\n\n    /**\n     *\n     * Gets/Sets the scroll position.\n     * ```typescript\n     * const position = directive.scrollPosition;\n     * directive.scrollPosition = value;\n     * ```\n     */\n    public get scrollPosition(): number {\n        return this.scrollComponent.scrollAmount;\n    }\n    public set scrollPosition(val: number) {\n        if (val === this.scrollComponent.scrollAmount) {\n            return;\n        }\n        if (this.igxForScrollOrientation === 'horizontal' && this.scrollComponent) {\n            this.scrollComponent.nativeElement.scrollLeft = val;\n        } else if (this.scrollComponent) {\n            this.scrollComponent.nativeElement.scrollTop = val;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected removeScrollEventListeners() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._zone.runOutsideAngular(() =>\n                this.scrollComponent.nativeElement.removeEventListener('scroll', this.func)\n            );\n        } else {\n            this._zone.runOutsideAngular(() =>\n                this.scrollComponent.nativeElement.removeEventListener('scroll', this.verticalScrollHandler)\n            );\n        }\n    }\n\n    public verticalScrollHandler(event) {\n        this.onScroll(event);\n    }\n\n    public isScrollable() {\n        return this.scrollComponent.size > parseInt(this.igxForContainerSize, 10);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        let totalSize = 0;\n        const vc = this.igxForScrollContainer ? this.igxForScrollContainer._viewContainer : this._viewContainer;\n        this.igxForSizePropName = this.igxForSizePropName || 'width';\n\n        const dcFactory: ComponentFactory<DisplayContainerComponent> = this.resolver.resolveComponentFactory(DisplayContainerComponent);\n        this.dc = this._viewContainer.createComponent(dcFactory, 0);\n        this.dc.instance.scrollDirection = this.igxForScrollOrientation;\n        if (typeof MSGesture === 'function') {\n            // On Edge and IE when scrolling on touch the page scroll instead of the grid.\n            this.dc.instance._viewContainer.element.nativeElement.style.touchAction = 'none';\n        }\n        if (this.igxForOf && this.igxForOf.length) {\n            totalSize = this.initSizesCache(this.igxForOf);\n            this.scrollComponent = this.syncScrollService.getScrollMaster(this.igxForScrollOrientation);\n            this.state.chunkSize = this._calculateChunkSize();\n            this.dc.instance.notVirtual = !(this.igxForContainerSize && this.state.chunkSize < this.igxForOf.length);\n            if (this.scrollComponent) {\n                this.state.startIndex = Math.min(this.getIndexAt(this.scrollPosition, this.sizesCache, 0),\n                    this.igxForOf.length - this.state.chunkSize);\n            }\n            for (let i = this.state.startIndex; i < this.state.startIndex + this.state.chunkSize &&\n                    this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n                    this._template,\n                    new IgxForOfContext<T>(input, this.getContextIndex(input), this.igxForOf.length)\n                );\n                this._embeddedViews.push(embeddedView);\n            }\n        }\n\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n            const factory: ComponentFactory<VirtualHelperComponent> = this.resolver.resolveComponentFactory(VirtualHelperComponent);\n            this.scrollComponent = vc.createComponent(factory).instance;\n            this._maxHeight = this._calcMaxBrowserHeight();\n            this.scrollComponent.size = this.igxForOf ? this._calcHeight() : 0;\n            this.syncScrollService.setScrollMaster(this.igxForScrollOrientation, this.scrollComponent);\n            this._zone.runOutsideAngular(() => {\n                this.verticalScrollHandler = this.verticalScrollHandler.bind(this);\n                this.scrollComponent.nativeElement.addEventListener('scroll', this.verticalScrollHandler);\n                this.dc.instance.scrollContainer = this.scrollComponent.nativeElement;\n            });\n            const destructor = takeUntil<any>(this.destroy$);\n            this.contentResizeNotify.pipe(destructor,\n            filter(() => this.igxForContainerSize && this.igxForOf && this.igxForOf.length > 0),\n            throttleTime(40, undefined, {leading: true, trailing: true}))\n            .subscribe(() => {\n                this._zone.runTask(() => {\n                    this.updateSizes();\n                });\n            });\n        }\n\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.func = (evt) => { this.onHScroll(evt); };\n            this.scrollComponent = this.syncScrollService.getScrollMaster(this.igxForScrollOrientation);\n            if (!this.scrollComponent) {\n                const hvFactory: ComponentFactory<HVirtualHelperComponent> =\n                    this.resolver.resolveComponentFactory(HVirtualHelperComponent);\n                this.scrollComponent = vc.createComponent(hvFactory).instance;\n                this.scrollComponent.size = totalSize;\n                this.syncScrollService.setScrollMaster(this.igxForScrollOrientation, this.scrollComponent);\n                this._zone.runOutsideAngular(() => {\n                    this.scrollComponent.nativeElement.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.scrollComponent.nativeElement;\n                });\n            } else {\n                this._zone.runOutsideAngular(() => {\n                    this.scrollComponent.nativeElement.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.scrollComponent.nativeElement;\n                });\n            }\n            this._updateHScrollOffset();\n        }\n    }\n\n    ngAfterViewInit(): void {\n        if (this.igxForScrollOrientation === 'vertical') {\n            this._zone.runOutsideAngular(() => {\n                this.contentObserver = new ResizeObserver(() => this.contentResizeNotify.next());\n                this.contentObserver.observe(this.dc.instance._viewContainer.element.nativeElement);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.removeScrollEventListeners();\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        if (this.contentObserver) {\n            this.contentObserver.disconnect();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        const forOf = 'igxForOf';\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange &&\n            this.igxForScrollOrientation === 'vertical' && this.igxForOf) {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n            this._applyChanges();\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    this.igxForOf = [];\n                }\n                this._updateSizeCache();\n                this._zone.run(() => {\n                    this._applyChanges();\n                    this.cdr.markForCheck();\n                    this._updateScrollOffset();\n                    this.onDataChanged.emit();\n                });\n            }\n        }\n    }\n\n    /**\n     * Shifts the scroll thumb position.\n     * ```typescript\n     * this.parentVirtDir.addScrollTop(5);\n     * ```\n     * @param addTop negative value to scroll up and positive to scroll down;\n     */\n    public addScrollTop(addTop: number): boolean {\n        if (addTop === 0 && this.igxForScrollOrientation === 'horizontal') {\n            return false;\n        }\n        const originalVirtScrollTop = this._virtScrollTop;\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxVirtScrollTop = this._virtHeight - containerSize;\n\n        this._bScrollInternal = true;\n        this._virtScrollTop += addTop;\n        this._virtScrollTop = this._virtScrollTop > 0 ?\n            (this._virtScrollTop < maxVirtScrollTop ? this._virtScrollTop : maxVirtScrollTop) :\n            0;\n\n        this.scrollPosition += addTop / this._virtHeightRatio;\n        if (Math.abs(addTop / this._virtHeightRatio) < 1) {\n            // Actual scroll delta that was added is smaller than 1 and onScroll handler doesn't trigger when scrolling < 1px\n            const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n            // scrollOffset = scrollOffset !== parseInt(this.igxForItemSize, 10) ? scrollOffset : 0;\n            this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n        }\n\n        const maxRealScrollTop = this.scrollComponent.nativeElement.scrollHeight - containerSize;\n        if ((this._virtScrollTop > 0 && this.scrollPosition === 0) ||\n            (this._virtScrollTop < maxVirtScrollTop && this.scrollPosition === maxRealScrollTop)) {\n            // Actual scroll position is at the top or bottom, but virtual one is not at the top or bottom (there's more to scroll)\n            // Recalculate actual scroll position based on the virtual scroll.\n            this.scrollPosition = this._virtScrollTop / this._virtHeightRatio;\n        } else if (this._virtScrollTop === 0 && this.scrollPosition > 0) {\n            // Actual scroll position is not at the top, but virtual scroll is. Just update the actual scroll\n            this.scrollPosition = 0;\n        } else if (this._virtScrollTop === maxVirtScrollTop && this.scrollPosition < maxRealScrollTop) {\n            // Actual scroll position is not at the bottom, but virtual scroll is. Just update the acual scroll\n            this.scrollPosition = maxRealScrollTop;\n        }\n        return this._virtScrollTop !== originalVirtScrollTop;\n    }\n\n    /**\n     * Scrolls to the specified index.\n     * ```typescript\n     * this.parentVirtDir.scrollTo(5);\n     * ```\n     * @param index\n     */\n    public scrollTo(index) {\n        if (index < 0 || index > (this.isRemote ? this.totalItemCount : this.igxForOf.length) - 1) {\n            return;\n        }\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const isPrevItem = index < this.state.startIndex || this.scrollPosition > this.sizesCache[index];\n        let nextScroll = isPrevItem ? this.sizesCache[index] : this.sizesCache[index + 1] - containerSize;\n        if (nextScroll < 0) {\n            return;\n        }\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition = nextScroll;\n        } else {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            if (nextScroll > maxVirtScrollTop) {\n                nextScroll = maxVirtScrollTop;\n            }\n            this._bScrollInternal = true;\n            this._virtScrollTop = nextScroll;\n            this.scrollPosition = this._virtScrollTop / this._virtHeightRatio;\n            this._adjustToIndex = !isPrevItem ? index : null;\n        }\n    }\n\n    /**\n     * Scrolls by one item into the appropriate next direction.\n     * For \"horizontal\" orientation that will be the right column and for \"vertical\" that is the lower row.\n     * ```typescript\n     * this.parentVirtDir.scrollNext();\n     * ```\n     */\n    public scrollNext() {\n        const scr = Math.ceil(this.scrollPosition);\n        const endIndex = this.getIndexAt(\n            scr + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        this.scrollTo(endIndex);\n    }\n\n    /**\n     * Scrolls by one item into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be the left column and for \"vertical\" that is the upper row.\n     * ```typescript\n     * this.parentVirtDir.scrollPrev();\n     * ```\n     */\n    public scrollPrev() {\n        this.scrollTo(this.state.startIndex - 1);\n    }\n\n    /**\n     * Scrolls by one page into the appropriate next direction.\n     * For \"horizontal\" orientation that will be one view to the right and for \"vertical\" that is one view to the bottom.\n     * ```typescript\n     * this.parentVirtDir.scrollNextPage();\n     * ```\n     */\n    public scrollNextPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition += parseInt(this.igxForContainerSize, 10);\n        } else {\n            this.addScrollTop(parseInt(this.igxForContainerSize, 10));\n        }\n    }\n\n    /**\n     * Scrolls by one page into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be one view to the left and for \"vertical\" that is one view to the top.\n     * ```typescript\n     * this.parentVirtDir.scrollPrevPage();\n     * ```\n     */\n    public scrollPrevPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition -= parseInt(this.igxForContainerSize, 10);\n        } else {\n            const containerSize = (parseInt(this.igxForContainerSize, 10));\n            this.addScrollTop(-containerSize);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getColumnScrollLeft(colIndex) {\n        return this.sizesCache[colIndex];\n    }\n\n    /**\n     * Returns the total number of items that are fully visible.\n     * ```typescript\n     * this.parentVirtDir.getItemCountInView();\n     * ```\n     */\n    public getItemCountInView() {\n        let startIndex = this.getIndexAt(\n            this.scrollPosition,\n            this.sizesCache,\n            0\n        );\n        if (this.scrollPosition - this.sizesCache[startIndex] > 0) {\n            // fisrt item is not fully in view\n            startIndex++;\n        }\n        const endIndex = this.getIndexAt(\n            this.scrollPosition + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        return endIndex - startIndex;\n    }\n\n    /**\n     * Returns a reference to the scrollbar DOM element.\n     * This is either a vertical or horizontal scrollbar depending on the specified igxForScrollOrientation.\n     * ```typescript\n     * dir.getScroll();\n     * ```\n     */\n    public getScroll() {\n        return this.scrollComponent.nativeElement;\n    }\n    /**\n     * Returns the size of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getSizeAt(1);\n     * ```\n     */\n    public getSizeAt(index: number) {\n        return this.sizesCache[index + 1] - this.sizesCache[index];\n    }\n\n    /**\n     * Returns the scroll offset of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getScrollForIndex(1);\n     * ```\n     */\n    public getScrollForIndex(index: number, bottom?: boolean) {\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const scroll = bottom ? Math.max(0, this.sizesCache[index + 1] - containerSize) : this.sizesCache[index];\n        return scroll;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling vertically\n     */\n    protected onScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.scrollComponent.nativeElement.style.height, 10)) {\n            return;\n        }\n\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;\n        const realPercentScrolled = maxRealScrollTop !== 0 ?  event.target.scrollTop / maxRealScrollTop : 0;\n        if (!this._bScrollInternal) {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n        } else {\n            this._bScrollInternal = false;\n        }\n        const prevStartIndex = this.state.startIndex;\n        const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    protected updateSizes() {\n        this.recalcUpdateSizes();\n        this._applyChanges();\n        this._updateScrollOffset();\n        this.onContentSizeChange.emit();\n    }\n\n    /**\n     * @hidden\n     * Function that recaculates and updates cache sizes.\n     */\n    public recalcUpdateSizes() {\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        const diffs = [];\n        let totalDiff = 0;\n        const l = this._embeddedViews.length;\n        const rNodes = this._embeddedViews.map(view =>\n            view.rootNodes.find(node => node.nodeType === Node.ELEMENT_NODE) || view.rootNodes[0].nextElementSibling);\n        for (let i = 0; i < l; i++) {\n            const rNode = rNodes[i];\n            if (rNode) {\n                const h = rNode.offsetHeight || parseInt(this.igxForItemSize, 10);\n                const index = this.state.startIndex + i;\n                if (!this.isRemote && !this.igxForOf[index]) {\n                    continue;\n                }\n                const oldVal = dimension === 'height' ? this.heightCache[index] : this.igxForOf[index][dimension];\n                const newVal = dimension === 'height' ? h : rNode.clientWidth;\n                if (dimension === 'height') {\n                    this.heightCache[index] = newVal;\n                } else {\n                    this.igxForOf[index][dimension] = newVal;\n                }\n                const currDiff = newVal - oldVal;\n                diffs.push(currDiff);\n                totalDiff += currDiff;\n                this.sizesCache[index + 1] += totalDiff;\n            }\n        }\n        // update cache\n        if (Math.abs(totalDiff) > 0) {\n            for (let j = this.state.startIndex + this.state.chunkSize + 1; j < this.sizesCache.length; j++) {\n                this.sizesCache[j] += totalDiff;\n            }\n\n            // update scrBar heights/widths\n            if (this.igxForScrollOrientation === 'horizontal') {\n                const totalWidth = parseInt(this.scrollComponent.nativeElement.children[0].style.width, 10) + totalDiff;\n                this.scrollComponent.nativeElement.children[0].style.width = totalWidth + 'px';\n            }\n            const reducer = (acc, val) => acc + val;\n            if (this.igxForScrollOrientation === 'vertical') {\n                const scrToBottom = this._isScrolledToBottom && !this.dc.instance.notVirtual;\n                const hSum = this.heightCache.reduce(reducer);\n                if (hSum > this._maxHeight) {\n                    this._virtHeightRatio = hSum / this._maxHeight;\n                }\n                this.scrollComponent.size = Math.min(this.scrollComponent.size + totalDiff, this._maxHeight);\n                this._virtHeight = hSum;\n                if (!this.scrollComponent.destroyed) {\n                    this.scrollComponent.cdr.detectChanges();\n                }\n                if (scrToBottom && !this._isAtBottomIndex) {\n                    const containerSize = parseInt(this.igxForContainerSize, 10);\n                    const maxVirtScrollTop = this._virtHeight - containerSize;\n                    this._bScrollInternal = true;\n                    this._virtScrollTop = maxVirtScrollTop;\n                    this.scrollPosition = maxVirtScrollTop;\n                    return;\n                }\n                if (this._adjustToIndex) {\n                    // in case scrolled to specific index where after scroll heights are changed\n                    // need to adjust the offsets so that item is last in view.\n                    const updatesToIndex = this._adjustToIndex - this.state.startIndex + 1;\n                    const sumDiffs = diffs.slice(0, updatesToIndex).reduce(reducer);\n                    const currOffset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n                    this.dc.instance._viewContainer.element.nativeElement.style.top = (currOffset - sumDiffs) + 'px';\n                    this._adjustToIndex = null;\n                }\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected fixedUpdateAllElements(inScrollTop: number): number {\n        const count = this.isRemote ? this.totalItemCount : this.igxForOf.length;\n        let newStart = this.getIndexAt(\n            inScrollTop,\n            this.sizesCache,\n            0\n        );\n        if (newStart + this.state.chunkSize > count) {\n            newStart = count - this.state.chunkSize;\n        }\n        const prevStart = this.state.startIndex;\n        const diff = newStart - this.state.startIndex;\n        this.state.startIndex = newStart;\n        if (diff) {\n            this.onChunkPreload.emit(this.state);\n            if (!this.isRemote) {\n                /*recalculate and apply page size.*/\n                if (diff > 0 && diff <= this.MAX_PERF_SCROLL_DIFF) {\n                    this.moveApplyScrollNext(prevStart);\n                } else if (diff < 0 && Math.abs(diff) <= this.MAX_PERF_SCROLL_DIFF) {\n                    this.moveApplyScrollPrev(prevStart);\n                } else {\n                    this.fixedApplyScroll();\n                }\n            }\n        }\n        return inScrollTop - this.sizesCache[this.state.startIndex];\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling down/right employing context change with view rearrangement\n     */\n    protected moveApplyScrollNext(prevIndex: number): void {\n        const start = prevIndex + this.state.chunkSize;\n        for (let i = start; i < start + this.state.startIndex - prevIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews.shift();\n            const cntx = embView.context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            cntx.count = this.igxForOf.length;\n            const view: ViewRef = this.dc.instance._vcr.detach(0);\n            this.dc.instance._vcr.insert(view);\n            this._embeddedViews.push(embView);\n        }\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling up/left employing context change with view rearrangement\n     */\n    protected moveApplyScrollPrev(prevIndex: number): void {\n        for (let i = prevIndex - 1; i >= this.state.startIndex && this.igxForOf[i] !== undefined; i--) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews.pop();\n            const cntx = embView.context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            const view: ViewRef = this.dc.instance._vcr.detach(this.dc.instance._vcr.length - 1);\n            this.dc.instance._vcr.insert(view, 0);\n            this._embeddedViews.unshift(embView);\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    protected getContextIndex(input) {\n        return this.isRemote ? this.state.startIndex + this.igxForOf.indexOf(input) : this.igxForOf.indexOf(input);\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change through context change for each view\n     */\n    protected fixedApplyScroll(): void {\n        let j = 0;\n        const endIndex = this.state.startIndex + this.state.chunkSize;\n        for (let i = this.state.startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews[j++];\n            const cntx = (embView as EmbeddedViewRef<any>).context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            cntx.count = this.igxForOf.length;\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling horizontally\n     */\n    protected onHScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.scrollComponent.nativeElement.children[0].style.width, 10)) {\n            return;\n        }\n        const prevStartIndex = this.state.startIndex;\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllElements(event.target.scrollLeft);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    /**\n     * Gets the function used to track changes in the items collection.\n     * By default the object references are compared. However this can be optimized if you have unique identifier\n     * value that can be used for the comparison instead of the object ref or if you have some other property values\n     * in the item object that should be tracked for changes.\n     * This option is similar to ngForTrackBy.\n     * ```typescript\n     * const trackFunc = this.parentVirtDir.igxForTrackBy;\n     * ```\n     */\n    @Input()\n    get igxForTrackBy(): TrackByFunction<T> { return this._trackByFn; }\n\n    /**\n     * Sets the function used to track changes in the items collection.\n     * This function can be set in scenarios where you want to optimize or\n     * customize the tracking of changes for the items in the collection.\n     * The igxForTrackBy function takes the index and the current item as arguments and needs to return the unique identifier for this item.\n     * ```typescript\n     * this.parentVirtDir.igxForTrackBy = (index, item) => {\n     *      return item.id + item.width;\n     * };\n     * ```\n     */\n    set igxForTrackBy(fn: TrackByFunction<T>) { this._trackByFn = fn; }\n\n    /**\n     * @hidden\n     */\n    protected _applyChanges() {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex = this.state.startIndex;\n            let endIndex = this.state.chunkSize + this.state.startIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            }\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.getContextIndex(input);\n                cntx.count = this.igxForOf.length;\n            }\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxBrowserHeight(): number {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.position = 'absolute';\n        style.top = '9999999999999999px';\n        document.body.appendChild(div);\n        const size = Math.abs(div.getBoundingClientRect()['top']);\n        document.body.removeChild(div);\n        return size;\n    }\n\n    /**\n     * @hidden\n     * Recalculates the chunkSize based on current startIndex and returns the new size.\n     * This should be called after this.state.startIndex is updated, not before.\n     */\n    protected _calculateChunkSize(): number {\n        let chunkSize = 0;\n        if (this.igxForContainerSize !== null && this.igxForContainerSize !== undefined) {\n            if (!this.sizesCache) {\n                this.initSizesCache(this.igxForOf);\n            }\n            chunkSize = this._calcMaxChunkSize();\n            if (this.igxForOf && chunkSize > this.igxForOf.length) {\n                chunkSize = this.igxForOf.length;\n            }\n        } else {\n            if (this.igxForOf) {\n                chunkSize = this.igxForOf.length;\n            }\n        }\n        return chunkSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElement(viewref, nodeName) {\n        const elem = viewref.element.nativeElement.parentNode.getElementsByTagName(nodeName);\n        return elem.length > 0 ? elem[0] : null;\n    }\n\n    /**\n     * @hidden\n     */\n    protected initSizesCache(items: any[]): number {\n        let totalSize = 0;\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            if (dimension === 'height') {\n                // cols[i][dimension] = parseInt(this.igxForItemSize, 10) || 0;\n                size = parseInt(this.igxForItemSize, 10) || 0;\n                this.heightCache.push(size);\n            } else {\n                size = this._getItemSize(items[i], dimension);\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    protected _updateSizeCache() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.initSizesCache(this.igxForOf);\n            return;\n        }\n        const oldHeight = this.heightCache.length > 0 ? this.heightCache.reduce((acc, val) => acc + val) : 0;\n        const newHeight = this.initSizesCache(this.igxForOf);\n\n        const diff = oldHeight - newHeight;\n\n        // if data has been changed while container is scrolled\n        // should update scroll top/left according to change so that same startIndex is in view\n        if (Math.abs(diff) > 0 && this.scrollPosition > 0) {\n            this.recalcUpdateSizes();\n            const offset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n            this.scrollPosition = this.sizesCache[this.state.startIndex] - offset;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number {\n        let i = 0;\n        let length = 0;\n        let maxLength = 0;\n        const arr = [];\n        let sum = 0;\n        const availableSize = parseInt(this.igxForContainerSize, 10);\n        if (!availableSize) {\n            return 0;\n        }\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        const reducer = (accumulator, currentItem) => accumulator + this._getItemSize(currentItem, dimension);\n        for (i; i < this.igxForOf.length; i++) {\n            let item = this.igxForOf[i];\n            if (dimension === 'height') {\n                item = { value: this.igxForOf[i], height: this.heightCache[i] };\n            }\n            const size = dimension === 'height' ?\n                this.heightCache[i] :\n                this._getItemSize(item, dimension);\n            sum = arr.reduce(reducer, size);\n            if (sum < availableSize) {\n                arr.push(item);\n                length = arr.length;\n                if (i === this.igxForOf.length - 1) {\n                    // reached end without exceeding\n                    // include prev items until size is filled or first item is reached.\n                    let curItem = dimension === 'height' ? arr[0].value : arr[0];\n                    let prevIndex = this.igxForOf.indexOf(curItem) - 1;\n                    while (prevIndex >= 0 && sum <= availableSize) {\n                        curItem = dimension === 'height' ? arr[0].value : arr[0];\n                        prevIndex = this.igxForOf.indexOf(curItem) - 1;\n                        const prevItem = this.igxForOf[prevIndex];\n                        const prevSize = dimension === 'height' ?\n                            this.heightCache[prevIndex] :\n                            parseInt(prevItem[dimension], 10);\n                        sum = arr.reduce(reducer, prevSize);\n                        arr.unshift(prevItem);\n                        length = arr.length;\n                    }\n                }\n            } else {\n                arr.push(item);\n                length = arr.length + 1;\n                arr.shift();\n            }\n            if (length > maxLength) {\n                maxLength = length;\n            }\n        }\n        return maxLength;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getIndexAt(left, set, index) {\n        let start = 0;\n        let end = set.length - 1;\n        if (left === 0) {\n            return 0;\n        }\n        while (start <= end) {\n            const midIdx = Math.floor((start + end) / 2);\n            const midLeft = set[midIdx];\n            const cmp = left - midLeft;\n            if (cmp > 0) {\n                start = midIdx + 1;\n            } else if (cmp < 0) {\n                end = midIdx - 1;\n            } else {\n                return midIdx;\n            }\n        }\n        return end;\n    }\n\n    protected _recalcScrollBarSize() {\n        const count = this.isRemote ? this.totalItemCount : (this.igxForOf ? this.igxForOf.length : 0);\n        this.dc.instance.notVirtual = !(this.igxForContainerSize && this.dc && this.state.chunkSize < count);\n        const scrollable = this.isScrollable();\n        if (this.igxForScrollOrientation === 'horizontal') {\n            const totalWidth = this.igxForContainerSize ? this.initSizesCache(this.igxForOf) : 0;\n            this.scrollComponent.nativeElement.style.width = this.igxForContainerSize + 'px';\n            this.scrollComponent.size = totalWidth;\n            if (totalWidth <= parseInt(this.igxForContainerSize, 10)) {\n                this.scrollPosition = 0;\n                // Need to reset the scrollAmount value here, because horizontalScrollBar is hidden, therefore\n                // onScroll event handler for VirtualHelperBaseDirective will not be called\n                this.scrollComponent.scrollAmount = 0;\n            }\n        }\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.scrollComponent.nativeElement.style.height = parseInt(this.igxForContainerSize, 10) + 'px';\n            this.scrollComponent.size = this._calcHeight();\n            if ( this.scrollComponent.size <= parseInt(this.igxForContainerSize, 10)) {\n                this.scrollPosition = 0;\n                // Need to reset the scrollAmount value here, because verticalScrollBar is hidden, therefore\n                // onScroll event handler for VirtualHelperBaseDirective will not be called\n                this.scrollComponent.scrollAmount = 0;\n            }\n        }\n        if (scrollable !== this.isScrollable()) {\n            // scrollbar visibility has changed\n            this.onScrollbarVisibilityChanged.emit();\n        }\n    }\n\n    protected _calcHeight(): number {\n        let height;\n        if (this.heightCache) {\n            height = this.heightCache.reduce((acc, val) => acc + val, 0);\n        } else {\n            height = this.initSizesCache(this.igxForOf);\n        }\n        this._virtHeight = height;\n        if (height > this._maxHeight) {\n            this._virtHeightRatio = height / this._maxHeight;\n            height = this._maxHeight;\n        }\n        return height;\n    }\n\n    protected _recalcOnContainerChange(changes: SimpleChanges) {\n        this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n        this.dc.instance._viewContainer.element.nativeElement.style.left = '0px';\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (prevChunkSize !== this.state.chunkSize) {\n            this.onChunkLoad.emit(this.state);\n        }\n        if (this.sizesCache && this.igxForScrollOrientation === 'horizontal') {\n            // Updating horizontal chunks and offsets based on the new scrollLeft\n            const scrollOffset = this.fixedUpdateAllElements(this.scrollPosition);\n            this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n        }\n    }\n\n    /**\n     * @hidden\n     * Removes an elemenet from the embedded views and updates chunkSize.\n     */\n    protected removeLastElem() {\n        const oldElem = this._embeddedViews.pop();\n        this.onBeforeViewDestroyed.emit(oldElem);\n        // also detach from ViewContainerRef to make absolutely sure this is removed from the view container.\n        this.dc.instance._vcr.detach(this.dc.instance._vcr.length - 1);\n        oldElem.destroy();\n\n        this.state.chunkSize--;\n    }\n\n    /**\n     * @hidden\n     * If there exists an element that we can create embedded view for creates it, appends it and updates chunkSize\n     */\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            new IgxForOfContext<T>(input, this.getContextIndex(input), this.igxForOf.length)\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n\n        this._zone.run(() => {\n            this.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * Recalculates chunkSize and adds/removes elements if need due to the change.\n     * this.state.chunkSize is updated in @addLastElem() or @removeLastElem()\n     */\n    protected applyChunkSizeChange() {\n        const chunkSize = this.isRemote ? (this.igxForOf ? this.igxForOf.length : 0) : this._calculateChunkSize();\n        if (chunkSize > this.state.chunkSize) {\n            const diff = chunkSize - this.state.chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.addLastElem();\n            }\n        } else if (chunkSize < this.state.chunkSize) {\n            const diff = this.state.chunkSize - chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.removeLastElem();\n            }\n        }\n    }\n\n    protected _updateScrollOffset() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._updateHScrollOffset();\n        } else {\n            this._updateVScrollOffset();\n        }\n    }\n    private _updateVScrollOffset() {\n        let scrollOffset = 0;\n        const vScroll =  this.scrollComponent.nativeElement;\n        scrollOffset = vScroll && this.scrollComponent.size ?\n            this.scrollPosition - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n    }\n    private _updateHScrollOffset() {\n        let scrollOffset = 0;\n        scrollOffset =  this.scrollComponent.nativeElement &&\n            this.scrollComponent.size ?\n            this.scrollPosition - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    private _getItemSize(item, dimension: string): number {\n        const dim = item[dimension];\n        return typeof dim === 'number' ? dim : parseInt(this.igxForItemSize, 10) || 0;\n    }\n}\n\nexport function getTypeNameForDebugging(type: any): string {\n    const name = 'name';\n    return type[name] || typeof type;\n}\n\nexport interface IForOfState extends IBaseEventArgs {\n    startIndex?: number;\n    chunkSize?: number;\n}\n\nexport interface IForOfDataChangingEventArgs extends IBaseEventArgs {\n    containerSize: number;\n}\n\n@Directive({\n    selector: '[igxGridFor][igxGridForOf]'\n})\nexport class IgxGridForOfDirective<T> extends IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck {\n\n    constructor(\n        _viewContainer: ViewContainerRef,\n        _template: TemplateRef<NgForOfContext<T>>,\n        _differs: IterableDiffers,\n        resolver: ComponentFactoryResolver,\n        cdr: ChangeDetectorRef,\n        _zone: NgZone,\n        protected syncScrollService: IgxForOfScrollSyncService,\n        protected syncService: IgxForOfSyncService) {\n        super(_viewContainer, _template, _differs, resolver, cdr, _zone, syncScrollService);\n    }\n\n    @Input()\n    set igxGridForOf(value) {\n        this.igxForOf = value;\n    }\n\n    get igxGridForOf() {\n        return this.igxForOf;\n    }\n\n    /**\n     * @hidden @internal\n     * An event that is emitted after data has been changed but before the view is refreshed\n     */\n    @Output()\n    public onDataChanging = new EventEmitter<IForOfDataChangingEventArgs>();\n\n    ngOnInit() {\n        this.syncService.setMaster(this);\n        super.ngOnInit();\n        this.removeScrollEventListeners();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const forOf = 'igxGridForOf';\n        this.syncService.setMaster(this);\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange &&\n             this.igxForScrollOrientation === 'vertical' && this.igxForOf) {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get sizesCache(): number[] {\n        if (this.syncService.isMaster(this)) {\n            return this._sizesCache;\n        }\n        return this.syncService.sizesCache(this.igxForScrollOrientation);\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public set sizesCache(value: number[]) {\n        this._sizesCache = value;\n    }\n\n    protected get itemsDimension() {\n        return this.igxForScrollOrientation === 'horizontal' ? this.igxForSizePropName : 'height';\n    }\n\n    protected getItemSize(item) {\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        if (dimension === 'height') {\n            size = parseInt(this.igxForItemSize, 10) || 0;\n            if (item && item.summaries) {\n                size = item.max;\n            } else if (item && item.groups && item.height) {\n                size = item.height;\n            }\n        } else {\n            size = parseInt(item[dimension], 10) || 0;\n        }\n        return size;\n    }\n\n    protected initSizesCache(items: any[]): number {\n        if (!this.syncService.isMaster(this)) {\n            const masterSizesCache = this.syncService.sizesCache(this.igxForScrollOrientation);\n            return masterSizesCache[masterSizesCache.length - 1];\n        }\n        let totalSize = 0;\n        let size = 0;\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            size = this.getItemSize(items[i]);\n            if (this.itemsDimension === 'height') {\n                this.heightCache.push(size);\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    protected _updateSizeCache(changes: IterableChanges<T> = null) {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.initSizesCache(this.igxForOf);\n            return;\n        }\n\n        const oldHeight = this.heightCache.length > 0 ? this.heightCache.reduce((acc, val) => acc + val) : 0;\n        let newHeight = oldHeight;\n        if (changes && !this.isRemote) {\n            newHeight = this.handleCacheChanges(changes);\n        } else {\n            newHeight = this.initSizesCache(this.igxForOf);\n        }\n\n        const diff = oldHeight - newHeight;\n\n        // if data has been changed while container is scrolled\n        // should update scroll top/left according to change so that same startIndex is in view\n        if (Math.abs(diff) > 0) {\n            // TODO: This code can be removed. However tests need to be rewritten in a way that they wait for ResizeObserved to complete.\n            // So leaving as is for the moment.\n            requestAnimationFrame(() => {\n                this.recalcUpdateSizes();\n                const offset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n                if (this.scrollPosition !== 0) {\n                    this.scrollPosition = this.sizesCache[this.state.startIndex] - offset;\n                } else {\n                    this._updateScrollOffset();\n                }\n            });\n        }\n    }\n\n    protected handleCacheChanges(changes: IterableChanges<T>) {\n        const identityChanges = [];\n        const newHeightCache = [];\n        const newSizesCache = [];\n        newSizesCache.push(0);\n        let newHeight = 0;\n\n        // When there are more than one removed items the changes are not reliable so those with identity change should be default size.\n        let numRemovedItems = 0;\n        changes.forEachRemovedItem(() => numRemovedItems++);\n\n        // Get the identity changes to determine later if those that have changed their indexes should be assigned default item size.\n        changes.forEachIdentityChange((item) => {\n            if (item.currentIndex !== item.previousIndex) {\n                // Filter out ones that have not changed their index.\n                identityChanges[item.currentIndex] = item;\n            }\n        });\n\n        // Processing each item that is passed to the igxForOf so far seem to be most reliable. We parse the updated list of items.\n        changes.forEachItem((item) => {\n            if (item.previousIndex !== null &&\n                (numRemovedItems < 2 || !identityChanges.length || identityChanges[item.currentIndex])) {\n                // Reuse cache on those who have previousIndex.\n                // When there are more than one removed items currently the changes are not readable so ones with identity change\n                // should be racalculated.\n                newHeightCache[item.currentIndex] = this.heightCache[item.previousIndex];\n            } else {\n                // Assign default item size.\n                newHeightCache[item.currentIndex] = this.getItemSize(item.item);\n            }\n            newSizesCache[item.currentIndex + 1] = newSizesCache[item.currentIndex] + newHeightCache[item.currentIndex];\n            newHeight += newHeightCache[item.currentIndex];\n        });\n        this.heightCache = newHeightCache;\n        this.sizesCache = newSizesCache;\n        return newHeight;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public assumeMaster(): void {\n        this._sizesCache = this.syncService.sizesCache(this.igxForScrollOrientation);\n        this.syncService.setMaster(this, true);\n    }\n\n    ngDoCheck() {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                const args: IForOfDataChangingEventArgs = {\n                    containerSize: this.igxForContainerSize\n                };\n                this.onDataChanging.emit(args);\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    this.igxForOf = [];\n                }\n                /* we need to reset the master dir if all rows are removed\n                (e.g. because of filtering); if all columns are hidden, rows are\n                still rendered empty, so we should not reset master */\n                if (!this.igxForOf.length &&\n                    this.igxForScrollOrientation === 'vertical') {\n                    this.syncService.resetMaster();\n                }\n                this.syncService.setMaster(this);\n                this.igxForContainerSize = args.containerSize;\n                this._updateSizeCache(changes);\n                this._applyChanges();\n                this._updateScrollOffset();\n                this.onDataChanged.emit();\n            }\n        }\n    }\n\n    onScroll(event) {\n        if (!parseInt(this.scrollComponent.nativeElement.style.height, 10)) {\n            return;\n        }\n\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;\n        const realPercentScrolled = maxRealScrollTop !== 0 ?  event.target.scrollTop / maxRealScrollTop : 0;\n        if (!this._bScrollInternal) {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n        } else {\n            this._bScrollInternal = false;\n        }\n        const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n\n        this._zone.onStable.pipe(first()).subscribe( () => {\n            this.recalcUpdateSizes();\n        });\n        this.cdr.markForCheck();\n    }\n\n    onHScroll(scrollAmount) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!this.scrollComponent || !parseInt(this.scrollComponent.nativeElement.children[0].style.width, 10)) {\n            return;\n        }\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllElements(scrollAmount);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            new IgxForOfContext<T>(input, this.getContextIndex(input), this.igxForOf.length)\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n    }\n\n    protected _updateViews(prevChunkSize) {\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex;\n            let endIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            } else {\n                startIndex = this.getIndexAt(\n                    this.scrollPosition,\n                    this.sizesCache,\n                    0\n                );\n                if (startIndex + this.state.chunkSize > this.igxForOf.length) {\n                    startIndex = this.igxForOf.length - this.state.chunkSize;\n                }\n                this.state.startIndex = startIndex;\n                endIndex = this.state.chunkSize + this.state.startIndex;\n            }\n\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.getContextIndex(input);\n                cntx.count = this.igxForOf.length;\n            }\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n        }\n    }\n    protected _applyChanges() {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        this._updateViews(prevChunkSize);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number {\n        if (this.syncService.isMaster(this)) {\n            return super._calcMaxChunkSize();\n        }\n        return this.syncService.chunkSize(this.igxForScrollOrientation);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxForOfDirective, IgxGridForOfDirective, DisplayContainerComponent, VirtualHelperComponent,\n         HVirtualHelperComponent, VirtualHelperBaseDirective],\n    entryComponents: [DisplayContainerComponent, VirtualHelperComponent, HVirtualHelperComponent],\n    exports: [IgxForOfDirective, IgxGridForOfDirective],\n    imports: [IgxScrollInertiaModule, CommonModule]\n})\n\nexport class IgxForOfModule {\n}\n","import { Directive, ElementRef, HostBinding, Input, OnInit } from '@angular/core';\n\nenum IgxHintPosition {\n    START,\n    END\n}\n\n@Directive({\n    selector: 'igx-hint,[igxHint]'\n})\nexport class IgxHintDirective implements OnInit {\n    private _position: IgxHintPosition = IgxHintPosition.START;\n    /**\n     * Sets/gets whether the hint position is at the start.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionStart = true;\n     * ```\n     * ```typescript\n     * let isHintPositionStart = this.igxHint.isPositionStart;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--start')\n    public isPositionStart = false;\n    /**\n     * Sets/gets whether the hint position is at the end.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionEnd = true;\n     * ```\n     * ```typescript\n     * let isHintPositionEnd = this.igxHint.isPositionEnd;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--end')\n    public isPositionEnd = false;\n\n    constructor(private _element: ElementRef) {\n    }\n    /**\n     * Sets the position of the hint.\n     * ```html\n     * <igx-input-group>\n     *  <input igxInput type=\"text\"/>\n     *  <igx-hint #hint [position]=\"'start'\">IgxHint displayed at the start</igx-hint>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @Input('position')\n    set position(value: string) {\n        const position: IgxHintPosition = (IgxHintPosition as any)[value.toUpperCase()];\n        if (position !== undefined) {\n            this._position = position;\n            this._applyPosition(this._position);\n        }\n    }\n    /**\n     * Gets the position of the hint.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * let hintPosition =  this.igxHint.position;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    get position() {\n        return this._position.toString();\n    }\n    /**\n     *@hidden\n     */\n    ngOnInit() {\n        this._applyPosition(this._position);\n    }\n\n    private _applyPosition(position: IgxHintPosition) {\n        this.isPositionStart = this.isPositionEnd = false;\n        switch (position) {\n            case IgxHintPosition.START:\n                this.isPositionStart = true;\n                break;\n            case IgxHintPosition.END:\n                this.isPositionEnd = true;\n                break;\n            default: break;\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    forwardRef,\n    QueryList,\n    OnChanges,\n    Input,\n    OnDestroy,\n    ViewChild,\n    ContentChild,\n    AfterViewInit,\n    Output,\n    EventEmitter,\n    Optional,\n    Inject,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownItemComponent } from './drop-down-item.component';\nimport { IgxDropDownBaseDirective } from './drop-down.base';\nimport { DropDownActionKey, Navigate } from './drop-down.common';\nimport { IGX_DROPDOWN_BASE, IDropDownBase } from './drop-down.common';\nimport { ISelectionEventArgs } from './drop-down.common';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, isIE, IBaseEventArgs } from '../core/utils';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { Subject } from 'rxjs';\nimport { IgxDropDownItemBaseDirective } from './drop-down-item.base';\nimport { OverlaySettings } from '../services';\nimport { IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { take } from 'rxjs/operators';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/**\n * **Ignite UI for Angular DropDown** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/drop_down.html)\n *\n * The Ignite UI for Angular Drop Down displays a scrollable list of items which may be visually grouped and\n * supports selection of a single item. Clicking or tapping an item selects it and closes the Drop Down\n *\n * Example:\n * ```html\n * <igx-drop-down>\n *   <igx-drop-down-item *ngFor=\"let item of items\" disabled={{item.disabled}} isHeader={{item.header}}>\n *     {{ item.value }}\n *   </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Component({\n    selector: 'igx-drop-down',\n    templateUrl: './drop-down.component.html',\n    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxDropDownComponent }]\n})\nexport class IgxDropDownComponent extends IgxDropDownBaseDirective implements IDropDownBase, OnChanges, AfterViewInit, OnDestroy {\n    protected destroy$ = new Subject<boolean>();\n    protected _scrollPosition: number;\n\n    @ContentChild(IgxForOfDirective, { read: IgxForOfDirective })\n    protected virtDir: IgxForOfDirective<any>;\n\n    @ViewChild(IgxToggleDirective, { static: true })\n    protected toggleDirective: IgxToggleDirective;\n\n    @ViewChild('scrollContainer', { static: true })\n    protected scrollContainerRef: ElementRef;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(forwardRef(() => IgxDropDownItemComponent), { descendants: true })\n    public children: QueryList<IgxDropDownItemBaseDirective>;\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpening)='handleOpening()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpened)='handleOpened()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<void>();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosing)='handleClosing()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosed)='handleClosed()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<void>();\n\n    /**\n     * Gets/sets whether items take focus. Disabled by default.\n     * When enabled, drop down items gain tab index and are focused when active -\n     * this includes activating the selected item when opening the drop down and moving with keyboard navigation.\n     *\n     * Note: Keep that focus shift in mind when using the igxDropDownItemNavigation directive\n     * and ensure it's placed either on each focusable item or a common ancestor to allow it to handle keyboard events.\n     *\n     * ```typescript\n     * // get\n     * let dropDownAllowsItemFocus = this.dropdown.allowItemsFocus;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [allowItemsFocus]='true'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public allowItemsFocus = false;\n\n    /**\n     * @hidden @internal\n     */\n    public get focusedItem(): IgxDropDownItemBaseDirective {\n        if (this.virtDir) {\n            return this._focusedItem && this._focusedItem.index !== -1 ?\n                (this.children.find(e => e.index === this._focusedItem.index) || null) :\n                null;\n        }\n        return this._focusedItem;\n    }\n\n    public set focusedItem(value: IgxDropDownItemBaseDirective) {\n        if (!value) {\n            this.selection.clear(`${this.id}-active`);\n            this._focusedItem = null;\n            return;\n        }\n        this._focusedItem = value;\n        if (this.virtDir) {\n            this._focusedItem = {\n                value: value.value,\n                index: value.index\n            } as IgxDropDownItemBaseDirective;\n        }\n        this.selection.set(`${this.id}-active`, new Set([this._focusedItem]));\n    }\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n    set id(value: string) {\n        this.selection.set(value, this.selection.get(this.id));\n        this.selection.clear(this.id);\n        this.selection.set(value, this.selection.get(`${this.id}-active`));\n        this.selection.clear(`${this.id}-active`);\n        this._id = value;\n    }\n\n    /** Id of the internal listbox of the drop down */\n    public get listId() {\n        return this.id + '-list';\n    }\n\n    /**\n     * Get currently selected item\n     *\n     * ```typescript\n     * let currentItem = this.dropdown.selectedItem;\n     * ```\n     */\n    public get selectedItem(): IgxDropDownItemBaseDirective {\n        const selectedItem = this.selection.first_item(this.id);\n        if (selectedItem) {\n            return selectedItem;\n        }\n        return null;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     *\n     * ```typescript\n     * let isCollapsed = this.dropdown.collapsed;\n     * ```\n     */\n    public get collapsed(): boolean {\n        return this.toggleDirective.collapsed;\n    }\n\n    /** @hidden @internal */\n    public get scrollContainer(): HTMLElement {\n        return this.scrollContainerRef.nativeElement;\n    }\n\n    protected get collectionLength() {\n        if (this.virtDir) {\n            return this.virtDir.totalItemCount || this.virtDir.igxForOf.length;\n        }\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(elementRef, cdr, _displayDensityOptions);\n    }\n\n    /**\n     * Opens the dropdown\n     *\n     * ```typescript\n     * this.dropdown.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        this.toggleDirective.open(overlaySettings);\n        this.updateScrollPosition();\n    }\n\n    /**\n     * Closes the dropdown\n     *\n     * ```typescript\n     * this.dropdown.close();\n     * ```\n     */\n    public close() {\n        this.toggleDirective.close();\n    }\n\n    /**\n     * Toggles the dropdown\n     *\n     * ```typescript\n     * this.dropdown.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        if (this.collapsed || this.toggleDirective.isClosing) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /**\n     * Select an item by index\n     * @param index of the item to select; If the drop down uses *igxFor, pass the index in data\n     */\n    public setSelectedItem(index: number) {\n        if (index < 0 || index >= this.items.length) {\n            return;\n        }\n        let newSelection: IgxDropDownItemBaseDirective;\n        if (this.virtDir) {\n            newSelection = {\n                value: this.virtDir.igxForOf[index],\n                index\n            } as IgxDropDownItemBaseDirective;\n        } else {\n            newSelection = this.items[index];\n        }\n        this.selectItem(newSelection);\n    }\n\n    /**\n     * Navigates to the item on the specified index\n     * If the data in the drop-down is virtualized, pass the index of the item in the virtualized data.\n     * @param newIndex number\n     */\n    public navigateItem(index: number) {\n        if (this.virtDir) {\n            if (index === -1 || index >= this.collectionLength) {\n                return;\n            }\n            const direction = index > (this.focusedItem ? this.focusedItem.index : -1) ? Navigate.Down : Navigate.Up;\n            const subRequired = this.isIndexOutOfBounds(index, direction);\n            this.focusedItem = {\n                value: this.virtDir.igxForOf[index],\n                index: index\n            } as IgxDropDownItemBaseDirective;\n            if (subRequired) {\n                this.virtDir.scrollTo(index);\n            }\n            if (subRequired) {\n                this.virtDir.onChunkLoad.pipe(take(1)).subscribe(() => {\n                    this.skipHeader(direction);\n                });\n            } else {\n                this.skipHeader(direction);\n            }\n        } else {\n            super.navigateItem(index);\n        }\n        if (this.allowItemsFocus && this.focusedItem) {\n            this.focusedItem.element.nativeElement.focus();\n            this.cdr.markForCheck();\n        }\n    }\n\n    private isIndexOutOfBounds(index: number, direction: Navigate) {\n        const virtState = this.virtDir.state;\n        const currentPosition = this.virtDir.getScroll().scrollTop;\n        const itemPosition = this.virtDir.getScrollForIndex(index, direction === Navigate.Down);\n        const indexOutOfChunk = index < virtState.startIndex || index > virtState.chunkSize + virtState.startIndex;\n        const scrollNeeded = direction === Navigate.Down ? currentPosition < itemPosition : currentPosition > itemPosition;\n        const subRequired = indexOutOfChunk || scrollNeeded;\n        return subRequired;\n    }\n\n    protected skipHeader(direction: Navigate) {\n        if (!this.focusedItem) {\n            return;\n        }\n        if (this.focusedItem.isHeader || this.focusedItem.disabled) {\n            if (direction === Navigate.Up) {\n                this.navigatePrev();\n            } else {\n                this.navigateNext();\n            }\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    updateScrollPosition() {\n        if (!this.virtDir) {\n            return;\n        }\n        if (!this.selectedItem) {\n            this.virtDir.scrollTo(0);\n            return;\n        }\n        let targetScroll = this.virtDir.getScrollForIndex(this.selectedItem.index);\n        const itemsInView = this.virtDir.igxForContainerSize / this.virtDir.igxForItemSize;\n        targetScroll -= (itemsInView / 2 - 1) * this.virtDir.igxForItemSize;\n        this.virtDir.getScroll().scrollTop = targetScroll;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpening(e: CancelableEventArgs) {\n        this.onOpening.emit(e);\n        if (e.cancel) {\n            return;\n        }\n\n        if (this.virtDir) {\n            this.virtDir.scrollPosition = this._scrollPosition;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleContentAppended() {\n        if (!this.virtDir && this.selectedItem) {\n           this.scrollToItem(this.selectedItem);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpened() {\n        if (this.selectedItem) {\n            this.focusedItem = this.selectedItem;\n            this._focusedItem.focused = true;\n        } else if (this.allowItemsFocus) {\n            this.navigateFirst();\n        }\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleClosing(e: CancelableBrowserEventArgs) {\n        this.onClosing.emit(e);\n        if (this.virtDir) {\n            this._scrollPosition = this.virtDir.scrollPosition;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleClosed() {\n        if (this._focusedItem) {\n            this._focusedItem.focused = false;\n        }\n        this.onClosed.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this.selection.clear(this.id);\n        this.selection.clear(`${this.id}-active`);\n    }\n\n    protected scrollToItem(item: IgxDropDownItemBaseDirective) {\n        const itemPosition = this.calculateScrollPosition(item);\n\n        //  in IE11 setting sctrollTop is somehow slow and forces dropdown\n        //  to appear on screen before animation start. As a result dropdown\n        //  flickers badly. This is why we set scrollTop just a little later\n        //  allowing animation to start and prevent dropdown flickering\n        if (isIE()) {\n            setTimeout(() => {\n                this.scrollContainer.scrollTop = (itemPosition);\n            }, 1);\n        } else {\n            this.scrollContainer.scrollTop = (itemPosition);\n        }\n    }\n\n    /** @hidden @internal */\n    public calculateScrollPosition(item: IgxDropDownItemBaseDirective): number {\n        if (!item) {\n            return 0;\n        }\n\n        const elementRect = item.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        const scrollDelta = parentRect.top - elementRect.top;\n        let scrollPosition = this.scrollContainer.scrollTop - scrollDelta;\n\n        const dropDownHeight = this.scrollContainer.clientHeight;\n        scrollPosition -= dropDownHeight / 2;\n        scrollPosition += item.elementHeight / 2;\n\n        return Math.floor(scrollPosition);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    // temp workaround until fix --> https://github.com/angular/angular/issues/34992\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.id) {\n            this.toggleDirective.id = changes.id.currentValue;\n        }\n    }\n\n    ngAfterViewInit() {\n        if (this.virtDir) {\n            this.virtDir.igxForItemSize = 28;\n        }\n    }\n\n    /** Keydown Handler */\n    public onItemActionKey(key: DropDownActionKey, event?: Event) {\n        super.onItemActionKey(key, event);\n        this.close();\n    }\n\n    /**\n     * Virtual scroll implementation\n     * @hidden @internal\n     */\n    public navigateFirst() {\n        if (this.virtDir) {\n            this.navigateItem(0);\n        } else {\n            super.navigateFirst();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateLast() {\n        if (this.virtDir) {\n            this.navigateItem(this.virtDir.totalItemCount ? this.virtDir.totalItemCount - 1 : this.virtDir.igxForOf.length - 1);\n        } else {\n            super.navigateLast();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateNext() {\n        if (this.virtDir) {\n            this.navigateItem(this._focusedItem ? this._focusedItem.index + 1 : 0);\n        } else {\n            super.navigateNext();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigatePrev() {\n        if (this.virtDir) {\n            this.navigateItem(this._focusedItem ? this._focusedItem.index - 1 : 0);\n        } else {\n            super.navigatePrev();\n        }\n    }\n\n    /**\n     * Handles the `onSelection` emit and the drop down toggle when selection changes\n     * @hidden\n     * @internal\n     * @param newSelection\n     * @param event\n     */\n    public selectItem(newSelection?: IgxDropDownItemBaseDirective, event?: Event) {\n        const oldSelection = this.selectedItem;\n        if (!newSelection) {\n            newSelection = this.focusedItem;\n        }\n        if (newSelection === null) {\n            return;\n        }\n        if (newSelection instanceof IgxDropDownItemBaseDirective && newSelection.isHeader) {\n            return;\n        }\n        if (this.virtDir) {\n            newSelection = {\n                value: newSelection.value,\n                index: newSelection.index\n            } as IgxDropDownItemBaseDirective;\n        }\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n\n        if (!args.cancel) {\n            if (this.isSelectionValid(args.newSelection)) {\n                this.selection.set(this.id, new Set([args.newSelection]));\n                if (!this.virtDir) {\n                    if (oldSelection) {\n                        oldSelection.selected = false;\n                    }\n                    if (args.newSelection) {\n                        args.newSelection.selected = true;\n                    }\n                }\n                if (event) {\n                    this.toggleDirective.close();\n                }\n            } else {\n                throw new Error('Please provide a valid drop-down item for the selection!');\n            }\n        }\n    }\n\n    /**\n     * Clears the selection of the dropdown\n     * ```typescript\n     * this.dropdown.clearSelection();\n     * ```\n     */\n    public clearSelection() {\n        const oldSelection = this.selectedItem;\n        const newSelection: IgxDropDownItemBaseDirective = null;\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n        if (this.selectedItem && !args.cancel) {\n            this.selectedItem.selected = false;\n            this.selection.clear(this.id);\n        }\n    }\n\n    /**\n     * Checks whether the selection is valid\n     * `null` - the selection should be emptied\n     * Virtual? - the selection should at least have and `index` and `value` property\n     * Non-virtual? - the selection should be a valid drop-down item and **not** be a header\n     */\n    protected isSelectionValid(selection: any): boolean {\n        return selection === null\n        || (this.virtDir && selection.hasOwnProperty('value') && selection.hasOwnProperty('index'))\n        || (selection instanceof IgxDropDownItemComponent && !selection.isHeader);\n    }\n}\n\n","import { Directive, Optional, Self, Input, HostListener, Inject } from '@angular/core';\nimport { IGX_DROPDOWN_BASE } from './drop-down.common';\nimport { IDropDownNavigationDirective } from './drop-down.common';\nimport { IgxDropDownBaseDirective } from './drop-down.base';\nimport { DropDownActionKey } from './drop-down.common';\n\n/**\n * Navigation Directive that handles keyboard events on its host and controls a targeted IgxDropDownBaseDirective component\n */\n@Directive({\n    selector: '[igxDropDownItemNavigation]'\n})\nexport class IgxDropDownItemNavigationDirective implements IDropDownNavigationDirective {\n\n    protected _target: IgxDropDownBaseDirective = null;\n\n    constructor(@Self() @Optional() @Inject(IGX_DROPDOWN_BASE) public dropdown: IgxDropDownBaseDirective) { }\n\n    /**\n     * Gets the target of the navigation directive;\n     *\n     * ```typescript\n     * // Get\n     * export class MyComponent {\n     *  ...\n     *  @ContentChild(IgxDropDownNavigationDirective)\n     *  navDirective: IgxDropDownNavigationDirective = null\n     *  ...\n     *  const navTarget: IgxDropDownBaseDirective = navDirective.navTarget\n     * }\n     * ```\n     */\n    get target(): IgxDropDownBaseDirective {\n        return this._target;\n    }\n\n    /**\n     * Sets the target of the navigation directive;\n     * If no valid target is passed, it falls back to the drop down context\n     *\n     * ```html\n     * <!-- Set -->\n     * <input [igxDropDownItemNavigation]=\"dropdown\" />\n     * ...\n     * <igx-drop-down #dropdown>\n     * ...\n     * </igx-drop-down>\n     * ```\n     */\n    @Input('igxDropDownItemNavigation')\n    set target(target: IgxDropDownBaseDirective) {\n        this._target = target ? target : this.dropdown;\n    }\n\n    /**\n     * Captures keydown events and calls the appropriate handlers on the target component\n     */\n    @HostListener('keydown', ['$event'])\n    handleKeyDown(event: KeyboardEvent) {\n        if (event) {\n            const key = event.key.toLowerCase();\n            if (!this.target.collapsed) { // If dropdown is opened\n                const navKeys = ['esc', 'escape', 'enter', 'space', 'spacebar', ' ',\n            'arrowup', 'up', 'arrowdown', 'down', 'home', 'end'];\n                if (navKeys.indexOf(key) === -1) { // If key has appropriate function in DD\n                    return;\n                }\n                event.preventDefault();\n                event.stopPropagation();\n            } else { // If dropdown is closed, do nothing\n                return;\n            }\n            switch (key) {\n                case 'esc':\n                case 'escape':\n                    this.target.onItemActionKey(DropDownActionKey.ESCAPE, event);\n                    break;\n                case 'enter':\n                    this.target.onItemActionKey(DropDownActionKey.ENTER, event);\n                    break;\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                    this.target.onItemActionKey(DropDownActionKey.SPACE, event);\n                    break;\n                case 'arrowup':\n                case 'up':\n                    this.onArrowUpKeyDown();\n                    break;\n                case 'arrowdown':\n                case 'down':\n                    this.onArrowDownKeyDown();\n                    break;\n                case 'home':\n                    this.onHomeKeyDown();\n                    break;\n                case 'end':\n                    this.onEndKeyDown();\n                    break;\n                default:\n                    return;\n            }\n        }\n    }\n\n    /**\n     * Navigates to previous item\n     */\n    onArrowDownKeyDown() {\n        this.target.navigateNext();\n    }\n\n    /**\n     * Navigates to previous item\n     */\n    onArrowUpKeyDown() {\n        this.target.navigatePrev();\n    }\n\n    /**\n     * Navigates to target's last item\n     */\n    onEndKeyDown() {\n        this.target.navigateLast();\n    }\n\n    /**\n     * Navigates to target's first item\n     */\n    onHomeKeyDown() {\n        this.target.navigateFirst();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxDropDownComponent } from './drop-down.component';\nimport { IgxDropDownItemComponent } from './drop-down-item.component';\nimport { IgxDropDownItemNavigationDirective } from './drop-down-navigation.directive';\nimport { CommonModule } from '@angular/common';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxDropDownGroupComponent } from './drop-down-group.component';\nimport { IgxDropDownBaseDirective } from './drop-down.base';\nimport { IgxDropDownItemBaseDirective } from './drop-down-item.base';\n\nexport * from './drop-down.component';\nexport * from './drop-down-item.component';\nexport { ISelectionEventArgs, IDropDownNavigationDirective,  } from './drop-down.common';\nexport * from './drop-down-navigation.directive';\nexport * from './drop-down.base';\nexport * from './drop-down-item.base';\nexport * from './drop-down-group.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxDropDownBaseDirective,\n        IgxDropDownComponent,\n        IgxDropDownItemBaseDirective,\n        IgxDropDownItemComponent,\n        IgxDropDownGroupComponent,\n        IgxDropDownItemNavigationDirective\n    ],\n    exports: [\n        IgxDropDownComponent,\n        IgxDropDownItemComponent,\n        IgxDropDownGroupComponent,\n        IgxDropDownItemNavigationDirective\n    ],\n    imports: [\n        CommonModule,\n        IgxToggleModule\n    ]\n})\nexport class IgxDropDownModule { }\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport { AbstractControl, FormControlName, NgControl, NgModel } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { IgxInputGroupBase } from '../../input-group/input-group.common';\n\nconst nativeValidationAttributes = ['required', 'pattern', 'minlength', 'maxlength', 'min', 'max', 'step'];\n\nexport enum IgxInputState {\n    INITIAL,\n    VALID,\n    INVALID\n}\n\n/**\n * The `igxInput` directive creates single- or multiline text elements, covering common scenarios when dealing with form inputs.\n *\n * @igxModule IgxInputGroupModule\n *\n * @igxParent Data Entry & Display\n *\n * @igxTheme igx-input-group-theme\n *\n * @igxKeywords input, input group, form, field, validation\n *\n * @igxGroup presentation\n *\n * @example\n * ```html\n * <input-group>\n *  <label for=\"address\">Adress</label>\n *  <input igxInput name=\"address\" type=\"text\" [(ngModel)]=\"customer.address\">\n * </input-group>\n * ```\n */\n@Directive({\n    selector: '[igxInput]',\n    exportAs: 'igxInput'\n})\nexport class IgxInputDirective implements AfterViewInit, OnDestroy {\n    private _valid = IgxInputState.INITIAL;\n    private _statusChanges$: Subscription;\n\n    constructor(\n        public inputGroup: IgxInputGroupBase,\n        @Optional() @Self() @Inject(NgModel) protected ngModel: NgModel,\n        @Optional() @Self() @Inject(FormControlName) protected formControl: FormControlName,\n        protected element: ElementRef,\n        protected cdr: ChangeDetectorRef) { }\n\n    private get ngControl(): NgControl {\n        return this.ngModel ? this.ngModel : this.formControl;\n    }\n    /**\n     * Sets the `value` property.\n     *\n     * @example\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [value]=\"'IgxInput Value'\">\n     * </input-group>\n     * ```\n     */\n    @Input('value')\n    set value(value: any) {\n        this.nativeElement.value = value;\n        this.checkValidity();\n    }\n    /**\n     * Gets the `value` propery.\n     *\n     * @example\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let inputValue = this.igxInput.value;\n     * ```\n     */\n    get value() {\n        return this.nativeElement.value;\n    }\n    /**\n     * Sets the `disabled` property.\n     *\n     * @example\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [disabled]=\"true\">\n     * </input-group>\n     * ```\n     */\n    @Input()\n    public set disabled(value: boolean) {\n        this.nativeElement.disabled = value;\n        this.inputGroup.disabled = value;\n    }\n    /**\n     * Gets the `disabled` property\n     *\n     * @example\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let isDisabled = this.igxInput.disabled;\n     * ```\n     */\n    public get disabled() {\n        return this.nativeElement.hasAttribute('disabled');\n    }\n\n    /**\n     * Sets the `required` property.\n     *\n     * @example\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [required]=\"true\">\n     * </input-group>\n     * ```\n     */\n    @Input()\n    public set required(value: boolean) {\n        if (typeof value === 'boolean') {\n            this.nativeElement.required = this.inputGroup.isRequired = value;\n\n            if (value && !this.nativeElement.checkValidity()) {\n                this._valid = IgxInputState.INVALID;\n            } else {\n                this._valid = IgxInputState.INITIAL;\n            }\n        }\n    }\n\n    /**\n     * Gets whether the igxInput is required.\n     *\n     * @example\n     * ```typescript\n     * let isRequired = this.igxInput.required;\n     * ```\n     */\n    public get required() {\n        return this.nativeElement.hasAttribute('required');\n    }\n\n    /**\n     * Sets/gets whether the `\"igx-input-group__input\"` class is added to the host element.\n     * Default value is `false`.\n     *\n     * @example\n     * ```typescript\n     * this.igxInput.isInput = true;\n     * ```\n     *\n     * @example\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isInput;\n     * ```\n     */\n    @HostBinding('class.igx-input-group__input')\n    public isInput = false;\n    /**\n     * Sets/gets whether the `\"class.igx-input-group__textarea\"` class is added to the host element.\n     * Default value is `false`.\n     *\n     * @example\n     * ```typescript\n     * this.igxInput.isTextArea = true;\n     * ```\n     *\n     * @example\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isTextArea;\n     * ```\n     */\n    @HostBinding('class.igx-input-group__textarea')\n    public isTextArea = false;\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event) {\n        this.inputGroup.isFocused = true;\n    }\n    /**\n     * @param event The event to invoke the handler\n     *\n     * @hidden\n     * @internal\n     */\n    @HostListener('blur', ['$event'])\n    public onBlur(event) {\n        this.inputGroup.isFocused = false;\n        this._valid = IgxInputState.INITIAL;\n        if (this.ngControl) {\n            if (!this.ngControl.valid) {\n                this._valid = IgxInputState.INVALID;\n            }\n        } else if (this._hasValidators() && !this.nativeElement.checkValidity()) {\n            this._valid = IgxInputState.INVALID;\n        }\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('input')\n    public onInput() {\n        this.checkValidity();\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngAfterViewInit() {\n        this.inputGroup.hasPlaceholder = this.nativeElement.hasAttribute('placeholder');\n        this.inputGroup.disabled = this.inputGroup.disabled || this.nativeElement.hasAttribute('disabled');\n        this.inputGroup.isRequired = this.nativeElement.hasAttribute('required');\n\n        // Make sure we do not invalidate the input on init\n        if (!this.ngControl) {\n            this._valid = IgxInputState.INITIAL;\n        }\n        // Also check the control's validators for required\n        if (!this.inputGroup.isRequired && this.ngControl && this.ngControl.control.validator) {\n            const validation = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = validation && validation.required;\n        }\n\n\n        const elTag = this.nativeElement.tagName.toLowerCase();\n        if (elTag === 'textarea') {\n            this.isTextArea = true;\n        } else {\n            this.isInput = true;\n        }\n\n        if (this.ngControl) {\n            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n        }\n\n        this.cdr.detectChanges();\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngOnDestroy() {\n        if (this._statusChanges$) {\n            this._statusChanges$.unsubscribe();\n        }\n    }\n    /**\n     * Sets a focus on the igxInput.\n     *\n     * @example\n     * ```typescript\n     * this.igxInput.focus();\n     * ```\n     */\n    public focus() {\n        this.nativeElement.focus();\n    }\n    /**\n     * Gets the `nativeElement` of the igxInput.\n     *\n     * @example\n     * ```typescript\n     * let igxInputNativeElement = this.igxInput.nativeElement;\n     * ```\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    protected onStatusChanged() {\n        if (this.ngControl.control.validator || this.ngControl.control.asyncValidator) {\n            if (this.ngControl.control.touched || this.ngControl.control.dirty) {\n                //  TODO: check the logic when control is touched or dirty\n                if (this.inputGroup.isFocused) {\n                    // the user is still typing in the control\n                    this._valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n                } else {\n                    // the user had touched the control previously but now the value is changing due to changes in the form\n                    this._valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n                }\n            } else {\n                //  if control is untouched and pristine its state is initial. This is when user did not interact\n                //  with the input or when form/control is reset\n                this._valid = IgxInputState.INITIAL;\n            }\n        }\n    }\n    /**\n     * Gets whether the igxInput has a placeholder.\n     *\n     * @example\n     * ```typescript\n     * let hasPlaceholder = this.igxInput.hasPlaceholder;\n     * ```\n     */\n    public get hasPlaceholder() {\n        return this.nativeElement.hasAttribute('placeholder');\n    }\n    /**\n     * Gets the placeholder element of the igxInput.\n     *\n     * @example\n     * ```typescript\n     * let igxInputPlaceholder = this.igxInput.placeholder;\n     * ```\n     */\n    public get placeholder() {\n        return this.nativeElement.placeholder;\n    }\n\n    /**\n     * @returns An indicator of whether the input has validator attributes or not\n     *\n     * @hidden\n     * @internal\n     */\n    private _hasValidators(): boolean {\n        for (const nativeValidationAttribute of nativeValidationAttributes) {\n            if (this.nativeElement.hasAttribute(nativeValidationAttribute)) {\n                return true;\n            }\n        }\n\n        return !!this.ngControl && (!!this.ngControl.control.validator || !!this.ngControl.control.asyncValidator);\n    }\n\n    /**\n     * Gets whether the igxInput is focused.\n     *\n     * @example\n     * ```typescript\n     * let isFocused = this.igxInput.focused;\n     * ```\n     */\n    public get focused() {\n        return this.inputGroup.isFocused;\n    }\n    /**\n     * Gets the state of the igxInput.\n     *\n     * @example\n     * ```typescript\n     * let igxInputState = this.igxInput.valid;\n     * ```\n     */\n    public get valid(): IgxInputState {\n        return this._valid;\n    }\n\n    /**\n     * Gets whether the igxInput is valid.\n     *\n     * @example\n     * ```typescript\n     * let valid = this.igxInput.isValid;\n     * ```\n     */\n    public get isValid(): boolean {\n        return this.valid !== IgxInputState.INVALID;\n    }\n\n    /**\n     * Sets the state of the igxInput.\n     *\n     * @example\n     * ```typescript\n     * this.igxInput.valid = IgxInputState.INVALID;\n     * ```\n     */\n    public set valid(value: IgxInputState) {\n        this._valid = value;\n    }\n\n    /**\n     * A function to assign a validity property of an input.\n     *\n     * @hidden\n     * @internal\n     */\n    private checkValidity() {\n        if (!this.ngControl && this._hasValidators()) {\n            this._valid = this.nativeElement.checkValidity() ? IgxInputState.VALID : IgxInputState.INVALID;\n        }\n    }\n}\n","/** @hidden */\nexport abstract class IgxInputGroupBase {\n    disabled: boolean;\n    isFocused: boolean;\n    isRequired: boolean;\n    hasPlaceholder: boolean;\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    QueryList,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { IgxHintDirective } from '../directives/hint/hint.directive';\nimport { IgxInputDirective, IgxInputState } from '../directives/input/input.directive';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxPrefixDirective, IgxPrefixModule} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixDirective, IgxSuffixModule } from '../directives/suffix/suffix.directive';\nimport { DisplayDensity, IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport { IgxInputGroupBase } from './input-group.common';\n\nlet NEXT_ID = 0;\n\nenum IgxInputGroupType {\n    LINE,\n    BOX,\n    BORDER,\n    FLUENT,\n    BOOTSTRAP,\n    SEARCH,\n    FLUENT_SEARCH,\n}\n\n@Component({\n    selector: 'igx-input-group',\n    templateUrl: 'input-group.component.html',\n    providers: [{ provide: IgxInputGroupBase, useExisting: IgxInputGroupComponent }]\n})\nexport class IgxInputGroupComponent extends DisplayDensityBase implements IgxInputGroupBase {\n    private _type = IgxInputGroupType.LINE;\n    private _filled = false;\n    private _supressInputAutofocus = false;\n\n    /**\n     * An ElementRef property of the `IgxInputGroupComponent`.\n     */\n    public element: ElementRef;\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-input-group [id]=\"'igx-input-group-55'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-input-group-${NEXT_ID++}`;\n\n    /**\n     * Property that enables/disables the autogenerated class of the `IgxInputGroupComponent`.\n     * By default applied the class is applied.\n     *```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *this.inputGroup.defaultClass = false;\n     *```\n     *}\n     */\n    @HostBinding('class.igx-input-group')\n    public defaultClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--placeholder')\n    public hasPlaceholder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--required')\n    public isRequired = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--focused')\n    public isFocused = false;\n\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--box')\n    public isBox = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--border')\n    public isBorder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--search')\n    public isSearch = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--fluent-search')\n    public isFluentSearch = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--fluent')\n    public isFluent = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--bootstrap')\n    public isBootstrap = false;\n\n    /**\n     * An @Input property that disables the `IgxInputGroupComponent`.\n     * ```html\n     * <igx-input-group [disabled]=\"'true'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('class.igx-input-group--disabled')\n    @Input()\n    public disabled = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--valid')\n    public get validClass(): boolean {\n        return this.input.valid === IgxInputState.VALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--invalid')\n    public get invalidClass(): boolean {\n        return this.input.valid === IgxInputState.INVALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--warning')\n    public hasWarning = false;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxHintDirective, { read: IgxHintDirective })\n    protected hints: QueryList<IgxHintDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxInputDirective, { read: IgxInputDirective, static: true })\n    protected input: IgxInputDirective;\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this._supressInputAutofocus) {\n            this.input.focus();\n        }\n    }\n\n    /**\n     * An @Input property that sets how the input will be styled.\n     * The allowed values are `line`, `box`, `border`, `fluent`, `search` and `fluentSearch`. The default is `line`.\n     * ```html\n     *<igx-input-group [type]=\"'search'\">\n     * ```\n     */\n    @Input('type')\n    set type(value: string) {\n        const type: IgxInputGroupType = (IgxInputGroupType as any)[value.toUpperCase()];\n        if (type !== undefined) {\n            this.isBox = this.isBootstrap = this.isFluent = this.isFluentSearch = this.isBorder = this.isSearch = false;\n            switch (type) {\n                case IgxInputGroupType.BOX:\n                    this.isBox = true;\n                    break;\n                case IgxInputGroupType.BORDER:\n                    this.isBorder = true;\n                    break;\n                case IgxInputGroupType.FLUENT:\n                    this.isFluent = true;\n                    break;\n                case IgxInputGroupType.FLUENT_SEARCH:\n                    this.isFluentSearch = true;\n                    break;\n                case IgxInputGroupType.SEARCH:\n                    this.isSearch = true;\n                    break;\n                case IgxInputGroupType.BOOTSTRAP:\n                    this.isBootstrap = true;\n                    break;\n                default: break;\n            }\n\n            this._type = type;\n        }\n    }\n\n    /**\n     * Returns whether the input element of the input group will be automatically focused on click.\n     * ```typescript\n     * let supressInputAutofocus = this.inputGroup.supressInputAutofocus;\n     * ```\n     */\n    @Input()\n    public get supressInputAutofocus(): boolean {\n        return this._supressInputAutofocus;\n    }\n\n    /**\n     * Sets whether the input element of the input group will be automatically focused on click.\n     * ```html\n     * <igx-input-group [supressInputAutofocus]=\"true\"></igx-input-group>\n     * ```\n     */\n    public set supressInputAutofocus(value: boolean) {\n        this._supressInputAutofocus = value;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--filled')\n    get isFilled() {\n        return this._filled || (this.input && this.input.value);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--cosy')\n    get isDisplayDensityCosy() {\n        return this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--comfortable')\n    get isDisplayDensityComfortable() {\n        return this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--compact')\n    get isDisplayDensityCompact() {\n        return this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * Returns the type of the `IgxInputGroupComponent`. How the input is styled.\n     * Values are `line` - 0, `box` - 1, `border` - 2,  `fluent` - 3 `fluentSearch` - 4 and `search` - 5. The default is `line`.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputType = this.inputGroup.type;\n     *}\n     * ```\n     */\n    get type() {\n        return this._type.toString();\n    }\n\n    constructor(private _element: ElementRef,\n        @Optional() @Inject(DisplayDensityToken) private _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n        this.element = _element;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has hints.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputHints = this.inputGroup.hasHints;\n     *}\n     * ```\n     */\n    get hasHints() {\n        return this.hints.length > 0;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputBroder = this.inputGroup.hasBorder;\n     *}\n     * ```\n     */\n    get hasBorder() {\n        return this._type === IgxInputGroupType.LINE ||\n            this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is line.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeLine = this.inputGroup.isTypeLine;\n     *}\n     * ```\n     */\n    public get isTypeLine(): boolean {\n        return  this._type === IgxInputGroupType.LINE;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is box.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBox = this.inputGroup.isTypeBox;\n     *}\n     *```\n     */\n    get isTypeBox() {\n        return this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBorder = this.inputGroup.isTypeBorder;\n     *}\n     * ```\n     */\n    get isTypeBorder() {\n        return this._type === IgxInputGroupType.BORDER;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is Fluent.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeFluent = this.inputGroup.isTypeFluent;\n     *}\n     * ```\n     */\n    get isTypeFluent() {\n        return this._type === IgxInputGroupType.FLUENT;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is Bootstrap.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBootstrap = this.inputGroup.isTypeBootstrap;\n     *}\n     * ```\n     */\n    get isTypeBootstrap() {\n        return this._type === IgxInputGroupType.BOOTSTRAP;\n    }\n\n    get isNotMaterial() {\n        return this._type === IgxInputGroupType.FLUENT || this._type === IgxInputGroupType.BOOTSTRAP;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is search.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeSearch = this.inputGroup.isTypeSearch;\n     *}\n     * ```\n     */\n    get isTypeSearch() {\n        return  this._type === IgxInputGroupType.SEARCH;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is fluentSearch.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeFluentSearch = this.inputGroup.isTypeFluentSearch;\n     *}\n     * ```\n     */\n    get isTypeFluentSearch() {\n        return  this._type === IgxInputGroupType.FLUENT_SEARCH;\n    }\n\n    get filled() {\n        return this._filled;\n    }\n\n    set filled(val) {\n        this._filled = val;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxInputGroupComponent,\n        IgxHintDirective,\n        IgxInputDirective,\n        IgxLabelDirective\n    ],\n    exports: [\n        IgxInputGroupComponent,\n        IgxHintDirective,\n        IgxInputDirective,\n        IgxLabelDirective,\n        IgxPrefixModule,\n        IgxSuffixModule\n    ],\n    imports: [\n        CommonModule,\n        IgxPrefixModule,\n        IgxSuffixModule\n    ]\n})\nexport class IgxInputGroupModule { }\n","import { Directive, HostBinding, Input } from '@angular/core';\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxLabel]'\n})\nexport class IgxLabelDirective {\n    @HostBinding('class.igx-input-group__label')\n    public defaultClass = true;\n\n/**\n * @hidden\n */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-label-${NEXT_ID++}`;\n}\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-prefix,[igxPrefix]'\n})\nexport class IgxPrefixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxPrefixDirective],\n    exports: [IgxPrefixDirective]\n})\nexport class IgxPrefixModule { }\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-suffix,[igxSuffix]'\n})\nexport class IgxSuffixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSuffixDirective],\n    exports: [IgxSuffixDirective]\n})\nexport class IgxSuffixModule { }\n","import { Directive, HostBinding, NgModule, Input } from '@angular/core';\n\nexport enum IgxDividerType {\n    SOLID = 'solid',\n    DASHED = 'dashed'\n}\n\nlet NEXT_ID = 0;\n\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-divider'\n})\nexport class IgxDividerDirective {\n    /**\n     * Sets/gets the `id` of the divider.\n     * If not set, `id` will have value `\"igx-divider-0\"`;\n     * ```html\n     * <igx-divider id=\"my-divider\"></igx-divider>\n     * ```\n     * ```typescript\n     * let dividerId =  this.divider.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-divider-${NEXT_ID++}`;\n\n\n    /**\n     * An @Input property that sets the value of the `inset` attribute.\n     * If not provided it will be set to `'0'`.\n     * ```html\n     * <igx-divider inset=\"16px\"></igx-divider>\n     * ```\n     */\n    @Input('inset')\n    private _inset = '0';\n\n    /**\n     * An @Input property that sets the value of `role` attribute.\n     * If not the default value of `separator` will be used.\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'separator';\n\n    /**\n     * Sets the type of the divider. The default value\n     * is `default`. The divider can also be `dashed`;\n     * ```html\n     * <igx-divider type=\"dashed\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider')\n    @Input()\n    public type: IgxDividerType | string = IgxDividerType.SOLID;\n\n    @HostBinding('class.igx-divider--dashed')\n    get isDashed() {\n        return this.type === IgxDividerType.DASHED;\n    }\n\n    /**\n     * An @Input that sets the `middle` attribute of the divider.\n     * If set to `true` and an `inset` value has been provided,\n     * the divider will start shrinking from both ends.\n     * ```html\n     * <igx-divider [middle]=\"true\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider--inset')\n    @Input()\n    public middle = false;\n\n    /**\n     * A getter that returns `true` if the type of the divider is `default`;\n     * ```typescript\n     * const isDefault = this.divider.isDefault;\n     * ```\n     */\n    get isSolid() {\n        return this.type === IgxDividerType.SOLID;\n    }\n\n    /**\n     * An @Input that sets the vertical attribute of the divider.\n     * ```html\n     * <igx-divider [vertical]=\"true\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider--vertical')\n    @Input()\n    public vertical = false;\n\n    /**\n     * Sets the inset of the divider from the side(s).\n     * If the divider attribute `middle` is set to `true`,\n     * it will inset the divider on both sides.\n     * ```typescript\n     * this.divider.inset = '32px';\n     * ```\n     */\n    @HostBinding('style.margin')\n    set inset(value: string) {\n        this._inset = value;\n    }\n\n    /**\n     * Gets the current divider inset in terms of\n     * margin representation as applied to the divider.\n     * ```typescript\n     * const inset = this.divider.inset;\n     * ```\n     */\n    get inset() {\n        const baseMargin = '0';\n\n        if (this.middle) {\n            if (this.vertical) {\n                return `${this._inset} ${baseMargin}`;\n            }\n            return `${baseMargin} ${this._inset}`;\n        } else {\n            if (this.vertical) {\n                return `${this._inset} ${baseMargin} 0 ${baseMargin}`;\n            }\n            return `${baseMargin} 0 ${baseMargin} ${this._inset}`;\n        }\n    }\n}\n\n@NgModule({\n    declarations: [IgxDividerDirective],\n    exports: [IgxDividerDirective]\n})\nexport class IgxDividerModule { }\n","import {\n    Directive, Input, Self, Optional, Inject, HostBinding, Output, EventEmitter,\n    NgModule, ElementRef, HostListener, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { NgModel, FormControlName } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { CancelableEventArgs, IBaseEventArgs } from '../../core/utils';\nimport { OverlaySettings, AbsoluteScrollStrategy, IScrollStrategy, IPositionStrategy, AutoPositionStrategy } from '../../services/index';\nimport { IgxDropDownModule, IgxDropDownComponent, ISelectionEventArgs, IgxDropDownItemNavigationDirective } from '../../drop-down/index';\nimport { IgxInputGroupComponent } from '../../input-group/index';\nimport { IgxOverlayOutletDirective } from '../toggle/toggle.directive';\n\n/**\n * Interface that encapsulates onItemSelection event arguments - new value and cancel selection.\n * @export\n */\nexport interface AutocompleteItemSelectionEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    /**\n     * New value selected from the drop down\n     */\n    value: string;\n}\n\nexport interface AutocompleteOverlaySettings {\n    /** Position strategy to use with this settings */\n    positionStrategy?: IPositionStrategy;\n    /** Scroll strategy to use with this settings */\n    scrollStrategy?: IScrollStrategy;\n    /** Set the outlet container to attach the overlay to */\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n}\n\n/**\n * **Ignite UI for Angular Autocomplete** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/autocomplete.html)\n *\n * The igxAutocomplete directive provides a way to enhance a text input\n * by showing a drop down of suggested options, provided by the developer.\n *\n * Example:\n * ```html\n * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" />\n * <igx-drop-down #townsPanel>\n *     <igx-drop-down-item *ngFor=\"let town of towns | startsWith:townSelected\" [value]=\"town\">\n *         {{town}}\n *     </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Directive({\n    selector: '[igxAutocomplete]'\n})\nexport class IgxAutocompleteDirective extends IgxDropDownItemNavigationDirective implements OnDestroy {\n\n    constructor(@Self() @Optional() @Inject(NgModel) protected ngModel: NgModel,\n                @Self() @Optional() @Inject(FormControlName) protected formControl: FormControlName,\n                @Optional() protected group: IgxInputGroupComponent,\n                protected elementRef: ElementRef,\n                protected cdr: ChangeDetectorRef) {\n        super(null);\n    }\n\n    private defaultSettings: OverlaySettings = {\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new AutoPositionStrategy({ target: this.parentElement }),\n        excludePositionTarget: true\n    };\n\n    protected id: string;\n    protected dropDownOpened$ = new Subject<boolean>();\n    protected get model() {\n        return this.ngModel || this.formControl;\n    }\n\n    /** @hidden @internal */\n    get nativeElement(): HTMLInputElement {\n        return this.elementRef.nativeElement;\n    }\n\n    /** @hidden @internal */\n    get parentElement(): HTMLElement {\n        return this.group ? this.group.element.nativeElement : this.nativeElement;\n    }\n\n    private get settings(): OverlaySettings {\n        const settings = Object.assign({}, this.defaultSettings, this.autocompleteSettings);\n        if (!settings.positionStrategy.settings.target) {\n            const positionStrategyClone: IPositionStrategy = settings.positionStrategy.clone();\n            positionStrategyClone.settings.target = this.parentElement;\n            settings.positionStrategy = positionStrategyClone;\n        }\n        return settings;\n    }\n\n    /**\n     * Sets the target of the autocomplete directive\n     *\n     * ```html\n     * <!-- Set -->\n     * <input [igxAutocomplete]=\"dropdown\" />\n     * ...\n     * <igx-drop-down #dropdown>\n     * ...\n     * </igx-drop-down>\n     * ```\n     */\n    @Input('igxAutocomplete')\n    public target: IgxDropDownComponent;\n\n    /**\n     * Enables/disables autocomplete component\n     *\n     * ```typescript\n     * // get\n     * let disabled = this.autocomplete.disabled;\n     * ```\n     * ```html\n     * <!--set-->\n     * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" [igxAutocompleteDisabled]=\"disabled\"/>\n     * ```\n     * ```typescript\n     * // set\n     * public disabled = true;\n     * ```\n     */\n    @Input('igxAutocompleteDisabled')\n    public disabled = false;\n\n    /**\n     * Provide overlay settings for the autocomplete drop down\n     *\n     * ```typescript\n     * // get\n     * let settings = this.autocomplete.autocompleteSettings;\n     * ```\n     * ```html\n     * <!--set-->\n     * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" [igxAutocompleteSettings]=\"settings\"/>\n     * ```\n     * ```typescript\n     * // set\n     * this.settings = {\n     *  positionStrategy: new ConnectedPositioningStrategy({\n     *      closeAnimation: null,\n     *      openAnimation: null\n     *  })\n     * };\n     * ```\n     */\n    @Input('igxAutocompleteSettings')\n    autocompleteSettings: AutocompleteOverlaySettings;\n\n    /**\n     * Emitted after item from the drop down is selected\n     *\n     * ```html\n     * <input igxInput [igxAutocomplete]=\"townsPanel\" (onItemSelected)='itemSelected($event)' />\n     * ```\n     */\n    @Output()\n    onItemSelected = new EventEmitter<AutocompleteItemSelectionEventArgs>();\n\n    /** @hidden @internal */\n    @HostBinding('attr.autocomplete')\n    public autofill = 'off';\n\n    /** @hidden  @internal */\n    @HostBinding('attr.role')\n    public role = 'combobox';\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-expanded')\n    public get ariaExpanded() {\n        return !this.collapsed;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-haspopup')\n    public get hasPopUp() {\n        return 'listbox';\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-owns')\n    public get ariaOwns() {\n        return this.target.listId;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-activedescendant')\n    public get ariaActiveDescendant() {\n        return !this.target.collapsed && this.target.focusedItem ? this.target.focusedItem.id : null;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-autocomplete')\n    public get ariaAutocomplete() {\n        return 'list';\n    }\n\n    /** @hidden  @internal */\n    @HostListener('input')\n    onInput() {\n        this.open();\n    }\n\n    /** @hidden  @internal */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    @HostListener('keydown.ArrowUp', ['$event'])\n    @HostListener('keydown.Alt.ArrowUp', ['$event'])\n    onArrowDown(event: Event) {\n        event.preventDefault();\n        this.open();\n    }\n\n    /** @hidden  @internal */\n    @HostListener('keydown.Tab')\n    @HostListener('keydown.Shift.Tab')\n    onTab() {\n        this.close();\n    }\n\n    /** @hidden  @internal */\n    handleKeyDown(event) {\n        if (!this.collapsed) {\n            switch (event.key.toLowerCase()) {\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                case 'home':\n                case 'end':\n                    return;\n                default:\n                    super.handleKeyDown(event);\n            }\n        }\n    }\n\n    /** @hidden  @internal */\n    onArrowDownKeyDown() {\n        super.onArrowDownKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onArrowUpKeyDown() {\n        super.onArrowUpKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onEndKeyDown() {\n        super.onEndKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onHomeKeyDown() {\n        super.onHomeKeyDown();\n    }\n\n    /**\n     * Closes autocomplete drop down\n     */\n    public close() {\n        if (this.collapsed) {\n            return;\n        }\n        this.target.close();\n        this.dropDownOpened$.next();\n    }\n\n    /**\n     * Opens autocomplete drop down\n     */\n    public open() {\n        if (this.disabled || !this.collapsed) {\n            return;\n        }\n        // If no drop-down width is set, the drop-down will be as wide as the autocomplete input;\n        this.target.width = this.target.width || (this.parentElement.clientWidth + 'px');\n        this.target.open(this.settings);\n        this.target.onSelection.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.select);\n        this.target.onOpened.pipe(first()).subscribe(this.highlightFirstItem);\n        this.target.children.changes.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.highlightFirstItem);\n    }\n\n    private get collapsed(): boolean {\n        return this.target ? this.target.collapsed : true;\n    }\n\n    private select = (value: ISelectionEventArgs) => {\n        if (!value.newSelection) {\n            return;\n        }\n        value.cancel = true; // Disable selection in the drop down, because in autocomplete we do not save selection.\n        const newValue = value.newSelection.value;\n        const args: AutocompleteItemSelectionEventArgs = { value: newValue, cancel: false };\n        this.onItemSelected.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        this.close();\n        this.nativeElement.focus();\n\n        // Update model after the input is re-focused, in order to have proper valid styling.\n        // Otherwise when item is selected using mouse (and input is blurred), then valid style will be removed.\n        this.model ? this.model.control.setValue(newValue) : this.nativeElement.value = newValue;\n    }\n\n    private highlightFirstItem = () => {\n        if (this.target.focusedItem) {\n            this.target.focusedItem.focused = false;\n            this.target.focusedItem = null;\n        }\n        this.target.navigateFirst();\n        this.cdr.detectChanges();\n    }\n\n    /** @hidden */\n    public ngOnDestroy() {\n        this.dropDownOpened$.complete();\n    }\n}\n\n/** @hidden */\n@NgModule({\n    imports: [IgxDropDownModule, CommonModule],\n    declarations: [IgxAutocompleteDirective],\n    exports: [IgxAutocompleteDirective]\n})\nexport class IgxAutocompleteModule { }\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    NgModule,\n    Renderer2,\n    HostListener,\n    Optional,\n    Inject\n} from '@angular/core';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions, DisplayDensity } from '../../core/density';\n\n/**\n * The Button directive provides the Ignite UI Button functionality to every component that's intended to be used as a button.\n *\n * @igxModule IgxButtonModule\n *\n * @igxParent Data Entry & Display\n *\n * @igxTheme igx-button-theme\n *\n * @igxKeywords button, span, div, click\n *\n * @remarks\n * The Ignite UI Button directive is intended to be used by any button, span or div and turn it into a fully functional button.\n *\n * @example\n * ```html\n * <button igxButton=\"outlined\">A Button</button>\n * ```\n */\n@Directive({\n    selector: '[igxButton]'\n})\nexport class IgxButtonDirective extends DisplayDensityBase {\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _type: string;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _defaultType = 'flat';\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _cssClassPrefix = 'igx-button';\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _color: string;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _label: string;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _backgroundColor: string;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _disabled: boolean;\n\n    constructor(public element: ElementRef, private _renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Returns the underlying DOM element.\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Called when the button is clicked.\n     */\n    @Output()\n    public buttonClick = new EventEmitter<any>();\n\n    /**\n     * Sets/gets the `role` attribute.\n     *\n     * @example\n     * ```typescript\n     * this.button.role = 'navbutton';\n     * let buttonRole = this.button.role;\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'button';\n\n    /**\n     * Sets the type of the button.\n     *\n     * @example\n     * ```html\n     * <button igxButton=\"icon\"></button>\n     * ```\n     */\n    @Input('igxButton')\n    set type(value: string) {\n        const newValue = value ? value : this._defaultType;\n        if (this._type !== newValue) {\n            this._renderer.removeClass(this.nativeElement, `${this._cssClassPrefix}--${this._type}`);\n            this._type = newValue;\n            this._renderer.addClass(this.nativeElement, `${this._cssClassPrefix}--${this._type}`);\n        }\n    }\n\n    /**\n     * Sets the button text color.\n     *\n     * @example\n     * ```html\n     * <button igxButton=\"gradient\" igxButtonColor=\"blue\"></button>\n     * ```\n     */\n    @Input('igxButtonColor') set color(value: string) {\n        this._color = value || this.nativeElement.style.color;\n        this._renderer.setStyle(this.nativeElement, 'color', this._color);\n    }\n\n    /**\n     * Sets the background color of the button.\n     *\n     * @example\n     *  ```html\n     * <button igxButton=\"raised\" igxButtonBackground=\"red\"></button>\n     * ```\n     */\n    @Input('igxButtonBackground') set background(value: string) {\n        this._backgroundColor = value || this._backgroundColor;\n        this._renderer.setStyle(this.nativeElement, 'background', this._backgroundColor);\n    }\n\n    /**\n     * Sets the `aria-label` attribute.\n     *\n     * @example\n     *  ```html\n     * <button igxButton= \"flat\" igxLabel=\"Label\"></button>\n     * ```\n     */\n    @Input('igxLabel') set label(value: string) {\n        this._label = value || this._label;\n        this._renderer.setAttribute(this.nativeElement, `aria-label`, this._label);\n    }\n\n    /**\n     * Enables/disables the button.\n     *\n     * @example\n     * ```html\n     * <button igxButton= \"fab\" [disabled]=\"true\"></button>\n     * ```\n     */\n    @Input() set disabled(val) {\n        val = !!val;\n        this._disabled = val;\n        if (val) {\n            this._renderer.addClass(this.nativeElement, `${this._cssClassPrefix}--disabled`);\n        } else {\n            this._renderer.removeClass(this.nativeElement, `${this._cssClassPrefix}--disabled`);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-button--cosy')\n    public get cssClassCosy(): boolean {\n        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&\n            this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-button--compact')\n    public get cssClassCompact(): boolean {\n        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&\n            this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-button--fab-cosy')\n    public get cssClassCosyFab(): boolean {\n        return this._type === 'fab' && this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-button--fab-compact')\n    public get cssClassCompactFab(): boolean {\n        return this._type === 'fab' && this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('attr.disabled')\n    public get disabledAttribute() {\n        return this._disabled ? this._disabled : null;\n    }\n\n    /**\n     * Gets or sets whether the button is selected.\n     * Mainly used in the IgxButtonGroup component and it will have no effect if set separately.\n     *\n     * @example\n     * ```html\n     * <button igxButton=\"flat\" [selected]=\"button.selected\"></button>\n     * ```\n     */\n    @Input() public selected = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('click', ['$event'])\n    public onClick(ev) {\n        this.buttonClick.emit(ev);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxButtonDirective],\n    exports: [IgxButtonDirective]\n})\nexport class IgxButtonModule { }\n","ï»¿import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    ChangeDetectorRef,\n    ViewContainerRef,\n    AfterContentInit,\n    TemplateRef,\n    ContentChildren,\n    QueryList\n} from '@angular/core';\nimport { animationFrameScheduler, fromEvent, interval, Subject } from 'rxjs';\nimport { takeUntil, throttle } from 'rxjs/operators';\nimport { IgxDragHandleDirective } from './drag-handle.directive';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { IDropStrategy, IgxDefaultDropStrategy } from './drag-drop.strategy';\n\nexport enum RestrictDrag {\n    VERTICALLY,\n    HORIZONTALLY,\n    NONE\n}\n\nexport interface IgxDragCustomEventDetails {\n    startX: number;\n    startY: number;\n    pageX: number;\n    pageY: number;\n    owner: IgxDragDirective;\n    originalEvent: any;\n}\n\nexport interface IDropBaseEventArgs extends IBaseEventArgs {\n        /**\n     * Reference to the original event that caused the draggable element to enter the igxDrop element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: any;\n    /** The owner igxDrop directive that triggered this event. */\n    owner: IgxDropDirective;\n    /** The igxDrag directive instanced on an element that entered the area of the igxDrop element */\n    drag: IgxDragDirective;\n    /** The data contained for the draggable element in igxDrag directive. */\n    dragData: any;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n    /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n    /**\n     * The current position of the pointer on X axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetX: number;\n    /**\n     * The current position of the pointer on Y axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetY: number;\n}\n\nexport interface IDropDroppedEventArgs extends IDropBaseEventArgs {\n    /** Specifies if the default drop logic related to the event should be canceled. */\n    cancel: boolean;\n}\n\nexport interface IDragBaseEventArgs extends IBaseEventArgs {\n    /**\n     * Reference to the original event that caused the interaction with the element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: PointerEvent | MouseEvent | TouchEvent;\n    /** The owner igxDrag directive that triggered this event. */\n    owner: IgxDragDirective;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n        /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n}\n\nexport interface IDragStartEventArgs extends IDragBaseEventArgs {\n    /** Set if the the dragging should be canceled. */\n    cancel: boolean;\n}\n\nexport interface IDragMoveEventArgs extends IDragStartEventArgs {\n    /** The new pageX position of the pointer that the igxDrag will use. It can be overridden to limit dragged element X movement. */\n    nextPageX: number;\n    /** The new pageX position of the pointer that the igxDrag will use. It can be overridden to limit dragged element Y movement. */\n    nextPageY: number;\n}\n\n\nexport interface IDragGhostBaseEventArgs extends IBaseEventArgs {\n    /** The owner igxDrag directive that triggered this event. */\n    owner: IgxDragDirective;\n    /** Instance to the ghost element that is created when dragging starts. */\n    ghostElement: any;\n    /** Set if the ghost creation/destruction should be canceled. */\n    cancel: boolean;\n}\n\nexport interface IDragCustomTransitionArgs {\n    duration?: number;\n    timingFunction?: string;\n    delay?: number;\n}\n\nexport class IgxDragLocation {\n    public pageX: number;\n    public pageY: number;\n\n    constructor(private _pageX, private _pageY) {\n        this.pageX = parseFloat(_pageX);\n        this.pageY = parseFloat(_pageY);\n    }\n}\n\n@Directive({\n    exportAs: 'drag',\n    selector: '[igxDrag]'\n})\nexport class IgxDragDirective implements AfterContentInit, OnDestroy {\n\n    protected ghostContext: any = null;\n\n    /**\n     * - Save data inside the `igxDrag` directive. This can be set when instancing `igxDrag` on an element.\n     * ```html\n     * <div [igxDrag]=\"{ source: myElement }\"></div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input('igxDrag')\n    public data: any;\n\n    /**\n     * An @Input property that indicates when the drag should start.\n     * By default the drag starts after the draggable element is moved by 5px.\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public dragTolerance = 5;\n\n    /**\n     * An @Input property that provide a way for igxDrag and igxDrop to be linked through channels.\n     * It accepts single value or an array of values and evaluates then using strict equality.\n     * ```html\n     * <div igxDrag [dragChannel]=\"'odd'\">\n     *         <span>95</span>\n     * </div>\n     * <div igxDrop [dropChannel]=\"['odd', 'irrational']\">\n     *         <span>Numbers drop area!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public dragChannel: number | string | number[] | string[];\n\n    /**\n     * An @Input property that specifies if the base element should not be moved and a ghost element should be rendered that represents it.\n     * By default it is set to `true`.\n     * If it is set to `false` when dragging the base element is moved instead and no ghost elements are rendered.\n     * ```html\n     * <div igxDrag [ghost]=\"false\">\n     *      <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghost = true;\n\n    /**\n     * Sets a custom class that will be added to the `ghostElement` element.\n     * ```html\n     * <div igxDrag [ghostClass]=\"'ghostElement'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghostClass = '';\n\n    /**\n     * @deprecated Please use custom base styling instead.\n     * An @Input property that hides the draggable element.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\" [hideBaseOnDrag]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @DeprecateProperty(`'hideBaseOnDrag' @Input property is deprecated and will be removed in future major versions.\n        Alternatives to it are using the new no ghost dragging and custom base styling.`)\n    @Input()\n    public hideBaseOnDrag = false;\n\n    /**\n     * @deprecated Please use provided transition functions in future.\n     * An @Input property that enables/disables the draggable element animation\n     * when the element is released.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @DeprecateProperty(`'animateOnRelease' @Input property is deprecated and will be removed in future major versions.\n        Please use 'transitionToOrigin' or 'transitionTo' methods instead.`)\n    @Input()\n    public animateOnRelease = false;\n\n    /**\n     * An @Input property that specifies a template for the ghost element created when dragging starts and `ghost` is true.\n     * By default a clone of the base element the igxDrag is instanced is created.\n     * ```html\n     * <div igxDrag [ghostTemplate]=\"customGhost\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * <ng-template #customGhost>\n     *      <div class=\"customGhostStyle\">\n     *          <span>I am being dragged!</span>\n     *      </div>\n     * </ng-template>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghostTemplate: TemplateRef<any>;\n\n    /**\n     * An @Input property that sets the element to which the dragged element will be appended.\n     * By default it's set to null and the dragged element is appended to the body.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [ghostHost]=\"hostDiv\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghostHost;\n\n    /**\n     * An @Input property that specifies the offset of the dragged element relative to the mouse in pixels.\n     * By default it's taking the relative position to the mouse when the drag started and keeps it the same.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [ghostOffsetX]=\"0\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public set ghostOffsetX(value) {\n        this._offsetX = parseInt(value, 10);\n    }\n\n    public get ghostOffsetX() {\n        return this._offsetX !== undefined ? this._offsetX : this._defaultOffsetX;\n    }\n\n    /**\n     * An @Input property that specifies the offset of the dragged element relative to the mouse in pixels.\n     * By default it's taking the relative position to the mouse when the drag started and keeps it the same.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [ghostOffsetY]=\"0\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public set ghostOffsetY(value) {\n        this._offsetY = parseInt(value, 10);\n    }\n\n    public get ghostOffsetY() {\n        return this._offsetY !== undefined ? this._offsetY : this._defaultOffsetY ;\n    }\n\n    /**\n     * Event triggered when the draggable element drag starts.\n     * ```html\n     * <div igxDrag (dragStart)=\"onDragStart()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragStart(){\n     *      alert(\"The drag has stared!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragStart = new EventEmitter<IDragStartEventArgs>();\n\n    /**\n     * Event triggered when the draggable element has been moved.\n     * ```html\n     * <div igxDrag  (dragMove)=\"onDragMove()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragMove(){\n     *      alert(\"The element has moved!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragMove = new EventEmitter<IDragMoveEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is released.\n     * ```html\n     * <div igxDrag (dragEnd)=\"onDragEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragEnd(){\n     *      alert(\"The drag has ended!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragEnd = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is clicked.\n     * ```html\n     * <div igxDrag (dragClick)=\"onDragClick()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragClick(){\n     *      alert(\"The element has been clicked!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragClick = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered when the drag ghost element is created.\n     * ```html\n     * <div igxDrag (ghostCreate)=\"ghostCreated()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public ghostCreated(){\n     *      alert(\"The ghost has been created!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public ghostCreate = new EventEmitter<IDragGhostBaseEventArgs>();\n\n    /**\n     * Event triggered when the drag ghost element is created.\n     * ```html\n     * <div igxDrag (ghostDestroy)=\"ghostDestroyed()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public ghostDestroyed(){\n     *      alert(\"The ghost has been destroyed!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public ghostDestroy = new EventEmitter<IDragGhostBaseEventArgs>();\n\n    /**\n     * Event triggered after the draggable element is released and after its animation has finished.\n     * ```html\n     * <div igxDrag (transitioned)=\"onMoveEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onMoveEnd(){\n     *      alert(\"The move has ended!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public transitioned = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxDragHandleDirective)\n    public dragHandles: QueryList<IgxDragHandleDirective>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.visibility')\n    public _visibility = 'visible';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-drag')\n    public baseClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-drag--select-disabled')\n    public selectDisabled = false;\n\n    /**\n     * @deprecated Please use native angular ways of hiding it using custom to the base element styling for future versions.\n     * Sets the visibility of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     this.myDrag.visible = false;\n     * }\n     * ```\n     */\n    @DeprecateProperty(`'visible' @Input property is deprecated and will be removed in future major versions.\n        Please use native angular ways of hiding the base element using styling.`)\n    public set visible(bVisible) {\n        this._visibility = bVisible ? 'visible' : 'hidden';\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns the visibility state of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let dragVisibility = this.myDrag.visible;\n     * }\n     * ```\n     */\n    public get visible() {\n        return this._visibility === 'visible';\n    }\n\n    /**\n     * Gets the current location of the element relative to the page.\n     */\n    public get location(): IgxDragLocation {\n        return new IgxDragLocation(this.pageX, this.pageY);\n    }\n\n    /**\n     * Gets the original location of the element before dragging started.\n     */\n    public get originLocation(): IgxDragLocation {\n        return new IgxDragLocation(this.baseOriginLeft, this.baseOriginTop);\n    }\n\n    /**\n     * @hidden\n     */\n    public get pointerEventsEnabled() {\n        return typeof PointerEvent !== 'undefined';\n    }\n\n    /**\n     * @hidden\n     */\n    public get touchEventsEnabled() {\n        return 'ontouchstart' in window;\n    }\n\n    /**\n     * @hidden\n     */\n    public get pageX() {\n        if (this.ghost && this.ghostElement) {\n            return this.ghostLeft;\n        }\n        return this.baseLeft;\n    }\n\n    /**\n     * @hidden\n     */\n    public get pageY() {\n        if (this.ghost && this.ghostElement) {\n            return this.ghostTop;\n        }\n        return this.baseTop;\n    }\n\n    protected get baseLeft(): number {\n        return this.element.nativeElement.getBoundingClientRect().left;\n    }\n\n    protected get baseTop(): number {\n        return this.element.nativeElement.getBoundingClientRect().top;\n    }\n\n    protected get baseOriginLeft(): number {\n        return this.baseLeft - this.getTransformX(this.element.nativeElement);\n    }\n\n    protected get baseOriginTop(): number {\n        return this.baseTop - this.getTransformY(this.element.nativeElement);\n    }\n\n    protected set ghostLeft(pageX: number) {\n        if (this.ghostElement) {\n            // We need to take into account marginLeft, since top style does not include margin, but pageX includes the margin.\n            const ghostMarginLeft = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-left'], 10);\n            // If ghost host is defined it needs to be taken into account.\n            this.ghostElement.style.left = (pageX - ghostMarginLeft - this._ghostHostX) + 'px';\n        }\n    }\n\n    protected get ghostLeft() {\n        return parseInt(this.ghostElement.style.left, 10) + this._ghostHostX;\n    }\n\n    protected set ghostTop(pageY: number) {\n        if (this.ghostElement) {\n            // We need to take into account marginTop, since top style does not include margin, but pageY includes the margin.\n            const ghostMarginTop = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-top'], 10);\n            // If ghost host is defined it needs to be taken into account.\n            this.ghostElement.style.top = (pageY - ghostMarginTop - this._ghostHostY) + 'px';\n        }\n    }\n\n    protected get ghostTop() {\n        return parseInt(this.ghostElement.style.top, 10) + this._ghostHostY;\n    }\n\n    /**\n     * @hidden\n     */\n    public defaultReturnDuration = '0.5s';\n\n    /**\n     * @hidden\n     */\n    public ghostElement;\n\n    /**\n     * @hidden\n     */\n    public animInProgress = false;\n\n    protected _startX = 0;\n    protected _startY = 0;\n    protected _lastX = 0;\n    protected _lastY = 0;\n    protected _dragStarted = false;\n\n    /** Drag ghost related properties */\n    protected _defaultOffsetX;\n    protected _defaultOffsetY;\n    protected _offsetX;\n    protected _offsetY;\n    protected _ghostStartX;\n    protected _ghostStartY;\n    protected _ghostHostX = 0;\n    protected _ghostHostY = 0;\n\n    protected _pointerDownId = null;\n    protected _clicked = false;\n    protected _lastDropArea = null;\n\n    protected _destroy = new Subject<boolean>();\n    protected _removeOnDestroy = true;\n\n    constructor(\n        public cdr: ChangeDetectorRef,\n        public element: ElementRef,\n        public viewContainer: ViewContainerRef,\n        public zone: NgZone,\n        public renderer: Renderer2\n    ) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (!this.dragHandles || !this.dragHandles.length ) {\n            // Set user select none to the whole draggable element if no drag handles are defined.\n            this.selectDisabled = true;\n        }\n\n        // Bind events\n        this.zone.runOutsideAngular(() => {\n            const targetElements = this.dragHandles && this.dragHandles.length ?\n                this.dragHandles.map((item) => item.element.nativeElement) : [this.element.nativeElement];\n            targetElements.forEach((element) => {\n                if (this.pointerEventsEnabled) {\n                    fromEvent(element, 'pointerdown').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerDown(res));\n\n                    fromEvent(element, 'pointermove').pipe(\n                        throttle(() => interval(0, animationFrameScheduler)),\n                        takeUntil(this._destroy)\n                    ).subscribe((res) => this.onPointerMove(res));\n\n                    fromEvent(element, 'pointerup').pipe(takeUntil(this._destroy))\n                        .subscribe((res) => this.onPointerUp(res));\n\n                    if (!this.ghost) {\n                        // Do not bind `lostpointercapture` to the target, because we will bind it on the ghost later.\n                        fromEvent(element, 'lostpointercapture').pipe(takeUntil(this._destroy))\n                        .subscribe((res) => this.onPointerLost(res));\n                    }\n                } else if (this.touchEventsEnabled) {\n                    fromEvent(element, 'touchstart').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerDown(res));\n                } else {\n                    // We don't have pointer events and touch events. Use then mouse events.\n                    fromEvent(element, 'mousedown').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerDown(res));\n                }\n            });\n\n            // We should bind to document events only once when there are no pointer events.\n            if (!this.pointerEventsEnabled && this.touchEventsEnabled) {\n                fromEvent(document.defaultView, 'touchmove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'touchend').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            } else if (!this.pointerEventsEnabled) {\n                fromEvent(document.defaultView, 'mousemove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            }\n\n            this.element.nativeElement.addEventListener('transitionend', (args) => {\n                this.onTransitionEnd(args);\n            });\n        });\n\n        // Set transition duration to 0s. This also helps with setting `visibility: hidden` to the base to not lag.\n        this.element.nativeElement.style.transitionDuration = '0.0s';\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n\n        if (this.ghost && this.ghostElement && this._removeOnDestroy) {\n            this.ghostElement.parentNode.removeChild(this.ghostElement);\n            this.ghostElement = null;\n        }\n    }\n\n    /**\n     * Sets desired location of the base element or ghost element if rended relative to the document.\n     * @param newLocation New location that should be applied. It is advised to get new location using getBoundingClientRects() + scroll.\n     */\n    public setLocation(newLocation: IgxDragLocation) {\n        // We do not subtract marginLeft and marginTop here because here we calculate deltas.\n        if (this.ghost && this.ghostElement) {\n            const offsetHostX = this.ghostHost ? this.ghostHostOffsetLeft(this.ghostHost) : 0;\n            const offsetHostY = this.ghostHost ? this.ghostHostOffsetTop(this.ghostHost) : 0;\n            this.ghostLeft = newLocation.pageX - offsetHostX + this.getWindowScrollLeft();\n            this.ghostTop = newLocation.pageY - offsetHostY + this.getWindowScrollTop();\n        } else if (!this.ghost) {\n            const deltaX = newLocation.pageX - this.pageX;\n            const deltaY = newLocation.pageY - this.pageY;\n            const transformX = this.getTransformX(this.element.nativeElement);\n            const transformY = this.getTransformY(this.element.nativeElement);\n            this.setTransformXY(transformX + deltaX, transformY + deltaY);\n        }\n\n        this._startX = this.baseLeft;\n        this._startY = this.baseTop;\n    }\n\n    /**\n     * Animates the base or ghost element depending on the `ghost` input to its initial location.\n     * If `ghost` is true but there is not ghost rendered, it will be created and animated.\n     * If the base element has changed its DOM position its initial location will be changed accordingly.\n     * @param customAnimArgs Custom transition properties that will be applied when performing the transition.\n     * @param startLocation Start location from where the transition should start.\n     */\n    public transitionToOrigin(customAnimArgs?: IDragCustomTransitionArgs, startLocation?: IgxDragLocation) {\n        if ((!!startLocation && startLocation.pageX === this.baseOriginLeft && startLocation.pageY === this.baseOriginLeft) ||\n            (!startLocation && this.ghost && !this.ghostElement)) {\n            return;\n        }\n\n        if (!!startLocation && startLocation.pageX !== this.pageX && startLocation.pageY !== this.pageY) {\n            if (this.ghost && !this.ghostElement) {\n                this._startX = startLocation.pageX;\n                this._startY = startLocation.pageY;\n                this._ghostStartX = this._startX;\n                this._ghostStartY = this._startY;\n                this.createGhost(this._startX, this._startY);\n            }\n\n            this.setLocation(startLocation);\n        }\n\n        this.animInProgress = true;\n        // Use setTimeout because we need to be sure that the element is positioned first correctly if there is start location.\n        setTimeout(() => {\n            if (this.ghost) {\n                this.ghostElement.style.transitionProperty = 'top, left';\n                this.ghostElement.style.transitionDuration =\n                    customAnimArgs && customAnimArgs.duration ? customAnimArgs.duration + 's' : this.defaultReturnDuration ;\n                this.ghostElement.style.transitionTimingFunction =\n                    customAnimArgs && customAnimArgs.timingFunction ? customAnimArgs.timingFunction : '';\n                this.ghostElement.style.transitionDelay = customAnimArgs && customAnimArgs.delay ? customAnimArgs.delay + 's' : '';\n                this.setLocation(new IgxDragLocation(this.baseLeft, this.baseTop));\n            } else if (!this.ghost) {\n                this.element.nativeElement.style.transitionProperty = 'transform';\n                this.element.nativeElement.style.transitionDuration =\n                    customAnimArgs && customAnimArgs.duration ? customAnimArgs.duration + 's' : this.defaultReturnDuration ;\n                this.element.nativeElement.style.transitionTimingFunction =\n                    customAnimArgs && customAnimArgs.timingFunction ? customAnimArgs.timingFunction : '';\n                this.element.nativeElement.style.transitionDelay = customAnimArgs && customAnimArgs.delay ? customAnimArgs.delay + 's' : '';\n                this._startX = this.baseLeft;\n                this._startY = this.baseTop;\n                this.setTransformXY(0, 0);\n            }\n        }, 0);\n    }\n\n    /**\n     * Animates the base or ghost element to a specific target location or other element using transition.\n     * If `ghost` is true but there is not ghost rendered, it will be created and animated.\n     * It is recommended to use 'getBoundingClientRects() + pageScroll' when determining desired location.\n     * @param target Target that the base or ghost will transition to. It can be either location in the page or another HTML element.\n     * @param customAnimArgs Custom transition properties that will be applied when performing the transition.\n     * @param startLocation Start location from where the transition should start.\n     */\n    public transitionTo(target: IgxDragLocation | ElementRef, customAnimArgs?: IDragCustomTransitionArgs, startLocation?: IgxDragLocation) {\n        if (!!startLocation && this.ghost && !this.ghostElement) {\n            this._startX = startLocation.pageX;\n            this._startY = startLocation.pageY;\n            this._ghostStartX = this._startX;\n            this._ghostStartY = this._startY;\n        } else if (!!startLocation && (!this.ghost || this.ghostElement)) {\n            this.setLocation(startLocation);\n        } else if (this.ghost && !this.ghostElement) {\n            this._startX = this.baseLeft;\n            this._startY = this.baseTop;\n            this._ghostStartX = this._startX + this.getWindowScrollLeft();\n            this._ghostStartY = this._startY + this.getWindowScrollTop();\n        }\n\n        if (this.ghost && !this.ghostElement) {\n            this.createGhost(this._startX, this._startY);\n        }\n\n        this.animInProgress = true;\n        // Use setTimeout because we need to be sure that the element is positioned first correctly if there is start location.\n        setTimeout(() => {\n            const movedElem = this.ghost ? this.ghostElement : this.element.nativeElement;\n            movedElem.style.transitionProperty = this.ghost && this.ghostElement ? 'left, top' : 'transform';\n            movedElem.style.transitionDuration =\n                customAnimArgs && customAnimArgs.duration ? customAnimArgs.duration + 's' : this.defaultReturnDuration ;\n            movedElem.style.transitionTimingFunction =\n                customAnimArgs && customAnimArgs.timingFunction ? customAnimArgs.timingFunction : '';\n            movedElem.style.transitionDelay = customAnimArgs && customAnimArgs.delay ? customAnimArgs.delay + 's' : '';\n\n            if (target instanceof IgxDragLocation) {\n                this.setLocation(new IgxDragLocation (target.pageX, target.pageY));\n            } else {\n                const targetRects = target.nativeElement.getBoundingClientRect();\n                this.setLocation(new IgxDragLocation(\n                    targetRects.left -  this.getWindowScrollLeft(),\n                    targetRects.top - this.getWindowScrollTop()\n                ));\n            }\n        }, 0);\n    }\n\n    /**\n     * @hidden\n     * Method bound to the PointerDown event of the base element igxDrag is initialized.\n     * @param event PointerDown event captured\n     */\n    public onPointerDown(event) {\n        this._clicked = true;\n        this._pointerDownId = event.pointerId;\n\n        // Set pointer capture so we detect pointermove even if mouse is out of bounds until ghostElement is created.\n        const handleFound = this.dragHandles.find(handle => handle.element.nativeElement === event.currentTarget);\n        const targetElement = handleFound ? handleFound.element.nativeElement : this.element.nativeElement;\n        if (this.pointerEventsEnabled) {\n            targetElement.setPointerCapture(this._pointerDownId);\n        } else {\n            targetElement.focus();\n            event.preventDefault();\n        }\n\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n            this._startX = event.pageX;\n            this._startY = event.pageY;\n        } else if (this.touchEventsEnabled) {\n            this._startX = event.touches[0].pageX;\n            this._startY = event.touches[0].pageY;\n        }\n\n        this._defaultOffsetX = this.baseLeft - this._startX + this.getWindowScrollLeft();\n        this._defaultOffsetY = this.baseTop - this._startY + this.getWindowScrollTop();\n        this._ghostStartX = this._startX + this.ghostOffsetX;\n        this._ghostStartY = this._startY + this.ghostOffsetY;\n        this._lastX = this._startX;\n        this._lastY = this._startY;\n    }\n\n    /**\n     * @hidden\n     * Perform drag move logic when dragging and dispatching events if there is igxDrop under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the ghostElement is rendered the pointerId is reassigned it. Then this method is bound to it.\n     * @param event PointerMove event captured\n     */\n    public onPointerMove(event) {\n        if (this._clicked) {\n            let pageX, pageY;\n            if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n                // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n                pageX = event.pageX;\n                pageY = event.pageY;\n            } else if (this.touchEventsEnabled) {\n                pageX = event.touches[0].pageX;\n                pageY = event.touches[0].pageY;\n\n                // Prevent scrolling on touch while dragging\n                event.preventDefault();\n            }\n\n            const totalMovedX = pageX - this._startX;\n            const totalMovedY = pageY - this._startY;\n            if (!this._dragStarted &&\n                (Math.abs(totalMovedX) > this.dragTolerance || Math.abs(totalMovedY) > this.dragTolerance)) {\n                const dragStartArgs: IDragStartEventArgs = {\n                    originalEvent: event,\n                    owner: this,\n                    startX: pageX - totalMovedX,\n                    startY: pageY - totalMovedY,\n                    pageX: pageX,\n                    pageY: pageY,\n                    cancel: false\n                };\n                this.zone.run(() => {\n                    this.dragStart.emit(dragStartArgs);\n                });\n\n                if (!dragStartArgs.cancel) {\n                    this._dragStarted = true;\n                    if (this.ghost) {\n                        // We moved enough so ghostElement can be rendered and actual dragging to start.\n                        // When creating it will take into account any offset set by the user by default.\n                        this.createGhost(pageX, pageY);\n                    } else if (this._offsetX !== undefined || this._offsetY !== undefined) {\n                        // There is no need for ghost, but we will need to position initially the base element to reflect any offset.\n                        const transformX = (this._offsetX !== undefined ? this._offsetX - this._defaultOffsetX : 0) +\n                            this.getTransformX(this.element.nativeElement);\n                        const transformY = (this._offsetY !== undefined ? this._offsetY - this._defaultOffsetY : 0) +\n                            this.getTransformY(this.element.nativeElement);\n                        this.setTransformXY(transformX, transformY);\n                    }\n                } else {\n                    return;\n                }\n            } else if (!this._dragStarted) {\n                return;\n            }\n\n            const moveArgs: IDragMoveEventArgs = {\n                originalEvent: event,\n                owner: this,\n                startX: this._startX,\n                startY: this._startY,\n                pageX: this._lastX,\n                pageY: this._lastY,\n                nextPageX: pageX,\n                nextPageY: pageY,\n                cancel: false\n            };\n            this.dragMove.emit(moveArgs);\n\n            const setPageX = moveArgs.nextPageX;\n            const setPageY = moveArgs.nextPageY;\n            const updatedMovedX = setPageX - this._startX;\n            const updatedMovedY = setPageY - this._startY;\n\n            if (!moveArgs.cancel) {\n                if (this.ghost) {\n                    this.ghostLeft = this._ghostStartX + updatedMovedX;\n                    this.ghostTop = this._ghostStartY + updatedMovedY;\n                } else {\n                    const lastMovedX = setPageX - this._lastX;\n                    const lastMovedY = setPageY - this._lastY;\n                    const translateX = this.getTransformX(this.element.nativeElement) + lastMovedX;\n                    const translateY = this.getTransformY(this.element.nativeElement) + lastMovedY;\n                    this.setTransformXY(translateX, translateY);\n                }\n                this.dispatchDragEvents(pageX, pageY, event);\n            }\n\n            this._lastX = setPageX;\n            this._lastY = setPageY;\n        }\n    }\n\n    /**\n     * @hidden\n     * Perform drag end logic when releasing the ghostElement and dispatching drop event if igxDrop is under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the ghostElement is rendered the pointerId is reassigned to it. Then this method is bound to it.\n     * @param event PointerUp event captured\n     */\n    public onPointerUp(event) {\n        if (!this._clicked) {\n            return;\n        }\n\n        let pageX, pageY;\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n            pageX = event.pageX;\n            pageY = event.pageY;\n        } else if (this.touchEventsEnabled) {\n            pageX = event.touches[0].pageX;\n            pageY = event.touches[0].pageY;\n\n            // Prevent scrolling on touch while dragging\n            event.preventDefault();\n        }\n\n        const eventArgs: IDragBaseEventArgs = {\n            originalEvent: event,\n            owner: this,\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY\n        };\n        this._pointerDownId = null;\n        this._clicked = false;\n        if (this._dragStarted) {\n            if (this._lastDropArea && this._lastDropArea !== this.element.nativeElement ) {\n                this.dispatchDropEvent(event.pageX, event.pageY, event);\n            } else if (this.animateOnRelease) {\n                this.transitionToOrigin();\n            }\n\n            this.zone.run(() => {\n                this.dragEnd.emit(eventArgs);\n            });\n\n            if (!this.animInProgress) {\n                this.onTransitionEnd(null);\n            }\n        } else {\n            // Trigger our own click event because when there is no ghost, native click cannot be prevented when dragging.\n            this.zone.run(() => {\n                this.dragClick.emit(eventArgs);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * Execute this method whe the pointer capture has been lost.\n     * This means that during dragging the user has performed other action like right clicking and then clicking somewhere else.\n     * This method will ensure that the drag state is being reset in this case as if the user released the dragged element.\n     * @param event Event captured\n     */\n    public onPointerLost(event) {\n        if (!this._clicked) {\n            return;\n        }\n\n        const eventArgs = {\n            originalEvent: event,\n            owner: this,\n            startX: this._startX,\n            startY: this._startY,\n            pageX: event.pageX,\n            pageY: event.pageY\n        };\n        this._pointerDownId = null;\n        this._clicked = false;\n        if (this._dragStarted) {\n            this.zone.run(() => {\n                this.dragEnd.emit(eventArgs);\n            });\n            if (this.animateOnRelease) {\n                this.transitionToOrigin();\n            } else if (!this.animInProgress) {\n                this.onTransitionEnd(null);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * Create ghost element - if a Node object is provided it creates a clone of that node,\n     * otherwise it clones the host element.\n     * Bind all needed events.\n     * @param pageX Latest pointer position on the X axis relative to the page.\n     * @param pageY Latest pointer position on the Y axis relative to the page.\n     * @param node The Node object to be cloned.\n     */\n    protected createGhost(pageX, pageY, node: any = null) {\n        if (!this.ghost) {\n            return;\n        }\n\n        let dynamicGhostRef;\n        if (this.ghostTemplate) {\n            dynamicGhostRef = this.viewContainer.createEmbeddedView(this.ghostTemplate, this.ghostContext);\n            this.ghostElement = dynamicGhostRef.rootNodes[0];\n        } else {\n            this.ghostElement = node ? node.cloneNode(true) : this.element.nativeElement.cloneNode(true);\n        }\n\n        const totalMovedX = pageX - this._startX;\n        const totalMovedY = pageY - this._startY;\n        this._ghostHostX = this.ghostHost ? this.ghostHostOffsetLeft(this.ghostHost) : 0;\n        this._ghostHostY = this.ghostHost ? this.ghostHostOffsetTop(this.ghostHost) : 0;\n\n        this.ghostElement.style.transitionDuration = '0.0s';\n        this.ghostElement.style.position = 'absolute';\n\n\n        if (this.ghostClass) {\n            this.renderer.addClass(this.ghostElement, this.ghostClass);\n        }\n\n        const createEventArgs = {\n            owner: this,\n            ghostElement: this.ghostElement,\n            cancel: false\n        };\n        this.ghostCreate.emit(createEventArgs);\n        if (createEventArgs.cancel) {\n            this.ghostElement = null;\n            if (this.ghostTemplate && dynamicGhostRef) {\n                dynamicGhostRef.destroy();\n            }\n            return;\n        }\n\n        if (this.ghostHost) {\n            this.ghostHost.appendChild(this.ghostElement);\n        } else {\n            document.body.appendChild(this.ghostElement);\n        }\n\n        const ghostMarginLeft = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-left'], 10);\n        const ghostMarginTop = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-top'], 10);\n        this.ghostElement.style.left = (this._ghostStartX - ghostMarginLeft + totalMovedX - this._ghostHostX) + 'px';\n        this.ghostElement.style.top = (this._ghostStartY - ghostMarginTop + totalMovedY - this._ghostHostX) + 'px';\n\n        if (this.pointerEventsEnabled) {\n            // The ghostElement takes control for moving and dragging after it has been rendered.\n            if (this._pointerDownId !== null) {\n                this.ghostElement.setPointerCapture(this._pointerDownId);\n            }\n            this.ghostElement.addEventListener('pointermove', (args) => {\n                this.onPointerMove(args);\n            });\n            this.ghostElement.addEventListener('pointerup', (args) => {\n                this.onPointerUp(args);\n            });\n            this.ghostElement.addEventListener('lostpointercapture', (args) => {\n                this.onPointerLost(args);\n            });\n        }\n\n        // Transition animation when the ghostElement is released and it returns to it's original position.\n        this.ghostElement.addEventListener('transitionend', (args) => {\n            this.onTransitionEnd(args);\n        });\n\n        // Hide the base after the ghostElement is created, because otherwise the ghostElement will be not visible.\n        if (this.hideBaseOnDrag) {\n            this.visible = false;\n        }\n\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDragEnter/igxDragLeave events based on current pointer position and if drop area is under.\n     */\n    protected dispatchDragEvents(pageX: number, pageY: number, originalEvent) {\n        let topDropArea;\n        const customEventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this,\n            originalEvent: originalEvent\n        };\n\n        const elementsFromPoint = this.getElementsAtPoint(pageX, pageY);\n        for (let i = 0; i < elementsFromPoint.length; i++) {\n            if (elementsFromPoint[i].getAttribute('droppable') === 'true' &&\n                elementsFromPoint[i] !== this.ghostElement && elementsFromPoint[i] !== this.element.nativeElement) {\n                topDropArea = elementsFromPoint[i];\n                break;\n            }\n        }\n\n        if (topDropArea &&\n            (!this._lastDropArea || (this._lastDropArea && this._lastDropArea !== topDropArea))) {\n                if (this._lastDropArea) {\n                    this.dispatchEvent(this._lastDropArea, 'igxDragLeave', customEventArgs);\n                }\n\n                this._lastDropArea = topDropArea;\n                this.dispatchEvent(this._lastDropArea, 'igxDragEnter', customEventArgs);\n            } else if (!topDropArea && this._lastDropArea) {\n                this.dispatchEvent(this._lastDropArea, 'igxDragLeave', customEventArgs);\n                this._lastDropArea = null;\n                return;\n            }\n\n        if (topDropArea) {\n            this.dispatchEvent(topDropArea, 'igxDragOver', customEventArgs);\n        }\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDrop event based on current pointer position if there is last recorder drop area under the pointer.\n     * Last recorder drop area is updated in @dispatchDragEvents method.\n     */\n    protected dispatchDropEvent(pageX: number, pageY: number, originalEvent) {\n        const eventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this,\n            originalEvent: originalEvent\n        };\n\n        this.dispatchEvent(this._lastDropArea, 'igxDrop', eventArgs);\n        this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n        this._lastDropArea = null;\n    }\n\n    /**\n     * @hidden\n     */\n    public onTransitionEnd(event) {\n        if ((!this._dragStarted && !this.animInProgress) || this._clicked) {\n            // Return if no dragging started and there is no animation in progress.\n            return ;\n        }\n\n        if (this.ghost && this.ghostElement) {\n            this._ghostStartX = this.baseLeft + this.getWindowScrollLeft();\n            this._ghostStartY = this.baseTop + this.getWindowScrollTop();\n\n            const ghostDestroyArgs: IDragGhostBaseEventArgs = {\n                owner: this,\n                ghostElement: this.ghostElement,\n                cancel: false\n            };\n            this.ghostDestroy.emit(ghostDestroyArgs);\n            if (ghostDestroyArgs.cancel) {\n                return;\n            }\n\n            if (this.hideBaseOnDrag) {\n                this.visible = true;\n            }\n            this.ghostElement.parentNode.removeChild(this.ghostElement);\n            this.ghostElement = null;\n        } else if (!this.ghost) {\n            this.element.nativeElement.style.transitionProperty = '';\n            this.element.nativeElement.style.transitionDuration = '0.0s';\n            this.element.nativeElement.style.transitionTimingFunction = '';\n            this.element.nativeElement.style.transitionDelay = '';\n        }\n        this.animInProgress = false;\n        this._dragStarted = false;\n\n        // Execute transitioned after everything is reset so if the user sets new location on the base now it would work as expected.\n        this.zone.run(() => {\n            this.transitioned.emit({\n                originalEvent: event,\n                owner: this,\n                startX: this._startX,\n                startY: this._startY,\n                pageX: this._startX,\n                pageY: this._startY\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElementsAtPoint(pageX: number, pageY: number) {\n        // correct the coordinates with the current scroll position, because\n        // document.elementsFromPoint consider position within the current viewport\n        // window.pageXOffset == window.scrollX; // always true\n        // using window.pageXOffset for IE9 compatibility\n        const viewPortX = pageX - window.pageXOffset;\n        const viewPortY = pageY - window.pageYOffset;\n        if (document['msElementsFromPoint']) {\n            // Edge and IE special snowflakes\n            const elements = document['msElementsFromPoint'](viewPortX, viewPortY);\n            return elements === null ? [] : elements;\n        } else {\n            // Other browsers like Chrome, Firefox, Opera\n            return document.elementsFromPoint(viewPortX, viewPortY);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected dispatchEvent(target, eventName: string, eventArgs: IgxDragCustomEventDetails) {\n        // This way is IE11 compatible.\n        const dragLeaveEvent = document.createEvent('CustomEvent');\n        dragLeaveEvent.initCustomEvent(eventName, false, false, eventArgs);\n        target.dispatchEvent(dragLeaveEvent);\n        // Otherwise can be used `target.dispatchEvent(new CustomEvent(eventName, eventArgs));`\n    }\n\n    protected getTransformX(elem) {\n        let posX = 0;\n        if (elem.style.transform) {\n            const matrix = elem.style.transform;\n            const values = matrix ? matrix.match(/-?[\\d\\.]+/g) : undefined;\n            posX = values ? Number(values[ 1 ]) : 0;\n        }\n\n        return posX;\n    }\n\n    protected getTransformY(elem) {\n        let posY = 0;\n        if (elem.style.transform) {\n            const matrix = elem.style.transform;\n            const values = matrix ? matrix.match(/-?[\\d\\.]+/g) : undefined;\n            posY = values ? Number(values[ 2 ]) : 0;\n        }\n\n        return posY;\n    }\n\n    /** Method setting transformation to the base draggable element. */\n    protected setTransformXY(x: number, y: number) {\n        this.element.nativeElement.style.transform = 'translate3d(' + x + 'px, ' + y + 'px, 0px)';\n    }\n\n    protected getWindowScrollTop() {\n        return window.scrollY ? window.scrollY : (window.pageYOffset ? window.pageYOffset : 0);\n    }\n\n    protected getWindowScrollLeft() {\n        return window.scrollX ? window.scrollX : (window.pageXOffset ? window.pageXOffset : 0);\n    }\n\n    protected ghostHostOffsetLeft(ghostHost: any) {\n        const ghostPosition = document.defaultView.getComputedStyle(ghostHost).getPropertyValue('position');\n        if (ghostPosition === 'static' && ghostHost.offsetParent && ghostHost.offsetParent === document.body) {\n            return 0;\n        } else if (ghostPosition === 'static' && ghostHost.offsetParent) {\n            return ghostHost.offsetParent.getBoundingClientRect().left - this.getWindowScrollLeft();\n        }\n        return ghostHost.getBoundingClientRect().left - this.getWindowScrollLeft();\n    }\n\n    protected ghostHostOffsetTop(ghostHost: any) {\n        const ghostPosition = document.defaultView.getComputedStyle(ghostHost).getPropertyValue('position');\n        if (ghostPosition === 'static' && ghostHost.offsetParent && ghostHost.offsetParent === document.body) {\n            return 0;\n        } else if (ghostPosition === 'static' && ghostHost.offsetParent) {\n            return ghostHost.offsetParent.getBoundingClientRect().top - this.getWindowScrollTop();\n        }\n        return ghostHost.getBoundingClientRect().top - this.getWindowScrollTop();\n    }\n}\n\n@Directive({\n    exportAs: 'drop',\n    selector: '[igxDrop]'\n})\nexport class IgxDropDirective implements OnInit, OnDestroy {\n\n    /**\n     * - Save data inside the `igxDrop` directive. This can be set when instancing `igxDrop` on an element.\n     * ```html\n     * <div [igxDrop]=\"{ source: myElement }\"></div>\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Input('igxDrop')\n    public data: any;\n\n    /**\n     * An @Input property that provide a way for igxDrag and igxDrop to be linked through channels.\n     * It accepts single value or an array of values and evaluates then using strict equality.\n     * ```html\n     * <div igxDrag [dragChannel]=\"'odd'\">\n     *         <span>95</span>\n     * </div>\n     * <div igxDrop [dropChannel]=\"['odd', 'irrational']\">\n     *         <span>Numbers drop area!</span>\n     * </div>\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Input()\n    public dropChannel: number | string | number[] | string[];\n\n    /**\n     * An @Input property that specifies a drop strategy type that will be executed when an `IgxDrag` element is released inside\n     *  the current drop area. The provided strategies are:\n     *  - IgxDefaultDropStrategy - This is the default base strategy and it doesn't perform any actions.\n     *  - IgxAppendDropStrategy - Appends the dropped element to last position as a direct child to the `igxDrop`.\n     *  - IgxPrependDropStrategy - Prepends the dropped element to first position as a direct child to the `igxDrop`.\n     *  - IgxInsertDropStrategy - If the dropped element is released above a child element of the `igxDrop`, it will be inserted\n     *      at that position. Otherwise the dropped element will be appended if released outside any child of the `igxDrop`.\n     * ```html\n     * <div igxDrag>\n     *      <span>DragMe</span>\n     * </div>\n     * <div igxDrop [dropStrategy]=\"myDropStrategy\">\n     *         <span>Numbers drop area!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * import { IgxAppendDropStrategy } from 'igniteui-angular';\n     *\n     * export class App {\n     *      public myDropStrategy = IgxAppendDropStrategy;\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Input()\n    public set dropStrategy(classRef: any) {\n        this._dropStrategy = new classRef(this._renderer);\n    }\n\n    public get dropStrategy() {\n        return this._dropStrategy;\n    }\n\n    /** Event triggered when dragged element enters the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (enter)=\"dragEnter()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragEnter(){\n     *     alert(\"A draggable element has entered the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public enter = new EventEmitter<IDropBaseEventArgs>();\n\n        /** Event triggered when dragged element enters the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (enter)=\"dragEnter()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragEnter(){\n     *     alert(\"A draggable element has entered the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public over = new EventEmitter<IDropBaseEventArgs>();\n\n    /** Event triggered when dragged element leaves the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (leave)=\"dragLeave()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragLeave(){\n     *     alert(\"A draggable element has left the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public leave = new EventEmitter<IDropBaseEventArgs>();\n\n    /** Event triggered when dragged element is dropped in the area of the element.\n     * Since the `igxDrop` has default logic that appends the dropped element as a child, it can be canceled here.\n     * To cancel the default logic the `cancel` property of the event needs to be set to true.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (dropped)=\"dragDrop()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragDrop(){\n     *     alert(\"A draggable element has been dropped in the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public dropped = new EventEmitter<IDropDroppedEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.droppable')\n    public droppable = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.dragOver')\n    public dragover = false;\n\n    /**\n     * @hidden\n     */\n    protected _destroy = new Subject<boolean>();\n    protected _dropStrategy: IDropStrategy;\n\n    constructor(public element: ElementRef, private _renderer: Renderer2, private _zone: NgZone) {\n        this._dropStrategy = new IgxDefaultDropStrategy();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._zone.runOutsideAngular(() => {\n            fromEvent(this.element.nativeElement, 'igxDragEnter').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onDragEnter(res as CustomEvent<IgxDragCustomEventDetails>));\n\n            fromEvent(this.element.nativeElement, 'igxDragLeave').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragLeave(res));\n            fromEvent(this.element.nativeElement, 'igxDragOver').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragOver(res));\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragOver(event) {\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IDropBaseEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n\n        this.over.emit(eventArgs);\n     }\n\n    /**\n     * @hidden\n     */\n    public onDragEnter(event: CustomEvent<IgxDragCustomEventDetails>) {\n        if (!this.isDragLinked(event.detail.owner)) {\n            return;\n        }\n\n        this.dragover = true;\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IDropBaseEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n        this._zone.run(() => {\n            this.enter.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragLeave(event) {\n        if (!this.isDragLinked(event.detail.owner)) {\n            return;\n        }\n\n        this.dragover = false;\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IDropBaseEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n        this._zone.run(() => {\n            this.leave.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('igxDrop', ['$event'])\n    public onDragDrop(event) {\n        if (!this.isDragLinked(event.detail.owner)) {\n            return;\n        }\n\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const args: IDropDroppedEventArgs = {\n            owner: this,\n            originalEvent: event.detail.originalEvent,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY,\n            cancel: false\n        };\n        this._zone.run(() => {\n            this.dropped.emit(args);\n        });\n\n        if (this._dropStrategy && !args.cancel) {\n            const elementsAtPoint = event.detail.owner.getElementsAtPoint(event.detail.pageX, event.detail.pageY);\n            const insertIndex = this.getInsertIndexAt(event.detail.owner, elementsAtPoint);\n            this._dropStrategy.dropAction(event.detail.owner, this, insertIndex);\n        }\n    }\n\n    protected getWindowScrollTop() {\n        return window.scrollY ? window.scrollY : (window.pageYOffset ? window.pageYOffset : 0);\n    }\n\n    protected getWindowScrollLeft() {\n        return window.scrollX ? window.scrollX : (window.pageXOffset ? window.pageXOffset : 0);\n    }\n\n    protected isDragLinked(drag: IgxDragDirective): boolean {\n        const dragLinkArray = drag.dragChannel instanceof Array;\n        const dropLinkArray = this.dropChannel instanceof Array;\n\n        if (!dragLinkArray && !dropLinkArray) {\n            return this.dropChannel === drag.dragChannel;\n        } else if (!dragLinkArray && dropLinkArray) {\n            const dropLinks = <Array<any>>this.dropChannel;\n            for (let i = 0; i < dropLinks.length; i ++) {\n                if (dropLinks[i] === drag.dragChannel) {\n                    return true;\n                }\n            }\n        } else if (dragLinkArray && !dropLinkArray) {\n            const dragLinks = <Array<any>>drag.dragChannel;\n            for (let i = 0; i < dragLinks.length; i ++) {\n                if (dragLinks[i] === this.dropChannel) {\n                    return true;\n                }\n            }\n        } else {\n            const dragLinks = <Array<any>>drag.dragChannel;\n            const dropLinks = <Array<any>>this.dropChannel;\n            for (let i = 0; i < dragLinks.length; i ++) {\n                for (let j = 0; j < dropLinks.length; j ++) {\n                    if (dragLinks[i] === dropLinks[j]) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    protected getInsertIndexAt(draggedDir: IgxDragDirective, elementsAtPoint: any[]): number {\n        let insertIndex = -1;\n        const dropChildren = Array.prototype.slice.call(this.element.nativeElement.children);\n        if (!dropChildren.length) {\n            return insertIndex;\n        }\n\n        let i = 0;\n        let childUnder = null;\n        while (!childUnder && i < elementsAtPoint.length) {\n            if (elementsAtPoint[i].parentElement === this.element.nativeElement) {\n                childUnder = elementsAtPoint[i];\n            }\n            i++;\n        }\n\n        const draggedElemIndex = dropChildren.indexOf(draggedDir.element.nativeElement);\n        insertIndex = dropChildren.indexOf(childUnder);\n        if (draggedElemIndex !== -1 && draggedElemIndex < insertIndex) {\n            insertIndex++;\n        }\n\n        return insertIndex;\n    }\n}\n\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDragDirective, IgxDropDirective, IgxDragHandleDirective],\n    exports: [IgxDragDirective, IgxDropDirective, IgxDragHandleDirective]\n})\nexport class IgxDragDropModule { }\n","import { Renderer2 } from '@angular/core';\nimport { IgxDragDirective, IgxDropDirective } from './drag-drop.directive';\n\n\nexport interface IDropStrategy {\n    dropAction: (drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) => void;\n}\n\n// @dynamic\nexport class IgxDefaultDropStrategy implements IDropStrategy {\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) { }\n}\n\n// @dynamic\nexport class IgxAppendDropStrategy implements IDropStrategy {\n\n    constructor(private _renderer: Renderer2) { }\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) {\n        const dragElement = drag.element.nativeElement;\n        const dropAreaElement = drop.element.nativeElement;\n        this._renderer.removeChild(dragElement.parentNode, dragElement);\n        this._renderer.appendChild(dropAreaElement, dragElement);\n    }\n}\n\n// @dynamic\nexport class IgxPrependDropStrategy implements IDropStrategy {\n\n    constructor(private _renderer: Renderer2) { }\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) {\n        const dragElement = drag.element.nativeElement;\n        const dropAreaElement = drop.element.nativeElement;\n        this._renderer.removeChild(dragElement.parentNode, dragElement);\n        if (dropAreaElement.children.length) {\n            this._renderer.insertBefore(dropAreaElement, dragElement, dropAreaElement.children[0]);\n        } else {\n            this._renderer.appendChild(dropAreaElement, dragElement);\n        }\n    }\n}\n\n// @dynamic\nexport class IgxInsertDropStrategy implements IDropStrategy {\n\n    constructor(private _renderer: Renderer2) { }\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) {\n        if (drag.element.nativeElement.parentElement === drop.element.nativeElement && atIndex === -1) {\n            return;\n        }\n\n        const dragElement = drag.element.nativeElement;\n        const dropAreaElement = drop.element.nativeElement;\n        this._renderer.removeChild(dragElement.parentNode, dragElement);\n        if (atIndex !== -1 && dropAreaElement.children.length > atIndex) {\n            this._renderer.insertBefore(dropAreaElement, dragElement, dropAreaElement.children[atIndex]);\n        } else {\n            this._renderer.appendChild(dropAreaElement, dragElement);\n        }\n    }\n}\n","import { Directive, ElementRef, HostBinding } from '@angular/core';\n\n@Directive({\n    selector: '[igxDragHandle]'\n})\nexport class IgxDragHandleDirective {\n\n    @HostBinding('class.igx-drag__handle')\n    public baseClass = true;\n\n    constructor(public element: ElementRef<any>) {}\n}\n","import {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { isIE, IBaseEventArgs } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport interface IChangeRadioEventArgs extends IBaseEventArgs {\n    value: any;\n    radio: IgxRadioComponent;\n}\n\nexport enum RadioLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nlet nextId = 0;\nconst noop = () => { };\n/**\n * **Ignite UI for Angular Radio Button** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)\n *\n * The Ignite UI Radio Button allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio>\n *   Simple radio button\n * </igx-radio>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioComponent, multi: true }],\n    selector: 'igx-radio',\n    templateUrl: 'radio.component.html'\n})\n\nexport class IgxRadioComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     * Returns reference to native radio element.\n     * ```typescript\n     * let radioElement =  this.radio.nativeRadio;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('radio', { static: true }) public nativeRadio: ElementRef;\n    /**\n     * Returns reference to native label element.\n     * ```typescript\n     * let labelElement =  this.radio.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('nativeLabel', { static: true }) public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.radio.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel', { static: true }) public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the radio component.\n     * If not set, the `id` of the first radio component will be `\"igx-radio-0\"`.\n     * ```html\n     * <igx-radio id = \"my-first-radio\"></igx-radio>\n     * ```\n     * ```typescript\n     * let radioId =  this.radio.id;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-radio-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the radio component.\n     * If not set, the id of the `label` in the first radio component will be `\"igx-radio-0-label\"`.\n     * ```html\n     * <igx-radio labelId = \"Label1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelId =  this.radio.labelId;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the position of the `label` in the radio component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio labelPosition = \"before\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radio.labelPosition;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio [value] = \"'radioButtonValue'\"></igx-radio>\n     * ```\n     * ```typescript\n     * let value =  this.radio.value;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the radio component.\n     * ```html\n     * <igx-radio name = \"Radio1\"></igx-radio>\n     *  ```\n     * ```typescript\n     * let name =  this.radio.name;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-radio [tabindex] = \"1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.radio.tabindex;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Enables/disables the ripple effect on the radio button..\n     * If not set, the `disableRipple` will have value `false`.\n     * ```html\n     * <igx-radio [disableRipple] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabledRipple =  this.radio.disableRipple;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the radio button is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio [required] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radio.required;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute of the radio component.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-radio aria-labelledby = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.radio.ariaLabelledBy;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the `aria-label` attribute of the radio component.\n     * ```html\n     * <igx-radio aria-label = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.radio.ariaLabel;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the radio `value` is changed.\n     * Provides references to the `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n    /**\n     * Returns the class of the radio component.\n     * ```typescript\n     * let radioClass = this.radio.cssClass;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio')\n    public cssClass = 'igx-radio';\n    /**\n     * Sets/gets  the `checked` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [checked] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isChecked =  this.radio.checked;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets  the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [disabled] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.radio.disabled;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the radio component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.radio.focus = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.radio.focused;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--focused')\n    public focused = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    protected _value: any = null;\n\n    constructor() { }\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     *@hidden\n     */\n    public _onRadioChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onRadioClick(event) {\n        event.stopPropagation();\n        this.select();\n\n        if (isIE()) {\n            this.nativeRadio.nativeElement.blur();\n        }\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick() {\n        this.select();\n    }\n    /**\n     * Selects the current radio button.\n     * ```typescript\n     * this.radio.select();\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    public select() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = true;\n        this.focused = false;\n        this.change.emit({ value: this.value, radio: this });\n        this._onChangeCallback(this.value);\n    }\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true`;\n     * ```typescript\n     * this.radio.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this._value = value;\n        this.checked = (this._value === this.value);\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeRadio.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case RadioLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case RadioLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public onFocus() {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur() {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    Output,\n    Pipe,\n    PipeTransform,\n    Renderer2,\n    SimpleChanges\n} from '@angular/core';\n\nexport class IgxFilterOptions {\n    // Input text value that will be used as a filtering pattern (matching condition is based on it)\n    public inputValue = '';\n\n    // Item property, which value should be used for filtering\n    public key: string;\n\n    // Represent items of the list. It should be used to handle decalaratevely defined widgets\n    public items: any[];\n\n    // Function - get value to be tested from the item\n    // item - single item of the list to be filtered\n    // key - property name of item, which value should be tested\n    // Default behavior - returns \"key\"- named property value of item if key si provided,\n    // otherwise textContent of the item's html element\n    public get_value(item: any, key: string): string {\n        let result = '';\n\n        if (key && item[key]) {\n            result = item[key].toString();\n        } else if (item.element) {\n            if (item.element.nativeElement) {\n                result = item.element.nativeElement.textContent.trim();\n            // Check if element doesn't return the DOM element directly\n            } else if (item.element.textContent) {\n                result = item.element.textContent.trim();\n            }\n        }\n\n        return result;\n    }\n\n    // Function - formats the original text before matching process\n    // Default behavior - returns text to lower case\n    public formatter(valueToTest: string): string {\n        return valueToTest.toLowerCase();\n    }\n\n    // Function - determines whether the item met the condition\n    // valueToTest - text value that should be tested\n    // inputValue - text value from input that condition is based on\n    // Default behavior - \"contains\"\n    public matchFn(valueToTest: string, inputValue: string): boolean {\n        return valueToTest.indexOf(inputValue && inputValue.toLowerCase() || '') > -1;\n    }\n\n    // Function - executed after matching test for every matched item\n    // Default behavior - shows the item\n    public metConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = false;\n        }\n    }\n\n    // Function - executed for every NOT matched item after matching test\n    // Default behavior - hides the item\n    public overdueConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = true;\n        }\n    }\n}\n\n\n@Directive({\n    selector: '[igxFilter]'\n})\nexport class IgxFilterDirective implements OnChanges {\n    @Output() public filtering = new EventEmitter(false); // synchronous event emitter\n    @Output() public filtered = new EventEmitter();\n\n    @Input('igxFilter') public filterOptions: IgxFilterOptions;\n\n    constructor(private element: ElementRef, renderer: Renderer2) {\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        // Detect only changes of input value\n        if (changes.filterOptions &&\n            changes.filterOptions.currentValue &&\n            changes.filterOptions.currentValue.inputValue !== undefined &&\n            changes.filterOptions.previousValue &&\n            changes.filterOptions.currentValue.inputValue !== changes.filterOptions.previousValue.inputValue) {\n            this.filter();\n        }\n    }\n\n    private filter() {\n        if (!this.filterOptions.items) {\n            return;\n        }\n\n        const args = { cancel: false, items: this.filterOptions.items };\n        this.filtering.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        const pipe = new IgxFilterPipe();\n\n        const filtered = pipe.transform(this.filterOptions.items, this.filterOptions);\n        this.filtered.emit({ filteredItems: filtered });\n    }\n}\n\n@Pipe({\n    name: 'igxFilter',\n    pure: false\n})\n\nexport class IgxFilterPipe implements PipeTransform {\n    public transform(items: any[],\n                     // options - initial settings of filter functionality\n                     options: IgxFilterOptions) {\n\n        let result = [];\n\n        if (!items || !items.length || !options) {\n            return;\n        }\n\n        if (options.items) {\n            items = options.items;\n        }\n\n        result = items.filter((item: any) => {\n            const match = options.matchFn(options.formatter(options.get_value(item, options.key)), options.inputValue);\n\n            if (match) {\n                if (options.metConditionFn) {\n                    options.metConditionFn(item);\n                }\n            } else {\n                if (options.overdueConditionFn) {\n                    options.overdueConditionFn(item);\n                }\n            }\n\n            return match;\n        });\n\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFilterDirective, IgxFilterPipe],\n    exports: [IgxFilterDirective, IgxFilterPipe],\n    imports: [CommonModule]\n})\nexport class IgxFilterModule {\n}\n","import { Directive, ElementRef, Input, NgModule, Optional, Inject, Self } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorProvider } from '../../core/edit-provider';\n\n@Directive({\n    exportAs: 'igxFocus',\n    selector: '[igxFocus]'\n})\nexport class IgxFocusDirective {\n\n    private focusState = true;\n    /**\n     * Returns the state of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let isFocusOn = this.igxFocus.focused;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    @Input('igxFocus')\n    get focused(): boolean {\n        return this.focusState;\n    }\n    /**\n     * Sets the state of the igxFocus.\n     * ```html\n     * <igx-input-group >\n     *  <input #focusContainer igxInput [igxFocus]=\"true\"/>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    set focused(val: boolean) {\n        this.focusState = val;\n        this.trigger();\n    }\n    /**\n     * Gets the native element of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let igxFocusNativeElement = this.igxFocus.nativeElement;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    get nativeElement() {\n        if (this.comp && this.comp[0] && this.comp[0].getEditElement) {\n            return (this.comp[0] as EditorProvider).getEditElement();\n        }\n        return this.element.nativeElement;\n    }\n\n    constructor(private element: ElementRef, @Inject(NG_VALUE_ACCESSOR) @Self() @Optional() private comp?: any[]) { }\n    /**\n     * Triggers the igxFocus state.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * this.igxFocus.trigger();\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    trigger() {\n        if (this.focusState) {\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFocusDirective],\n    exports: [IgxFocusDirective]\n})\nexport class IgxFocusModule { }\n","import { Directive, HostBinding, Input, NgModule } from '@angular/core';\n\n@Directive({\n    selector: '[igxLayout]'\n})\nexport class IgxLayoutDirective {\n    /**\n     * Sets the default flow direction of the container's children.\n     *\n     * Defaults to `rows`.\n     *\n     * ```html\n     *  <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     *  </div>\n     * ```\n     */\n    @Input('igxLayoutDir') public dir = 'row';\n\n    /**\n     * Defines the direction flex children are placed in the flex container.\n     *\n     * When set to `true`, the `rows` direction goes right to left and `columns` goes bottom to top.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutReverse=\"true\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutReverse') public reverse = false;\n\n    /**\n     * By default the immediate children will all try to fit onto one line.\n     *\n     * The default value `nowrap` sets this behavior.\n     *\n     * Other accepted values are `wrap` and `wrap-reverse`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\"\n     *   igxLayoutWrap=\"wrap\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutWrap') public wrap = 'nowrap';\n\n    /**\n     * Defines the alignment along the main axis.\n     *\n     * Defaults to `flex-start` which packs the children toward the start line.\n     *\n     * Other possible values are `flex-end`, `center`, `space-between`, `space-around`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutJustify=\"space-between\">\n     *    <div>1</div>\n     *    <div>2</div>\n     *    <div>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutJustify') public justify = 'flex-start';\n\n    /**\n     * Defines the default behavior for how children are laid out along the corss axis of the current line.\n     *\n     * Defaults to `flex-start`.\n     *\n     * Other possible values are `flex-end`, `center`, `baseline`, and `stretch`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutItemAlign=\"start\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutItemAlign') public itemAlign = 'stretch';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display') public display = 'flex';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-wrap') get flexwrap() { return this.wrap; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.justify-content') get justifycontent() { return this.justify; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.align-items') get align() { return this.itemAlign; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-direction')\n    get direction() {\n        if (this.reverse) {\n            return (this.dir === 'row') ? 'row-reverse' : 'column-reverse';\n        }\n        return (this.dir === 'row') ? 'row' : 'column';\n    }\n}\n\n@Directive({\n    selector: '[igxFlex]'\n})\nexport class IgxFlexDirective {\n\n    /**\n     * Applies the `grow` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content1</div>\n     *    <div igxFlex igxFlexGrow=\"1\">Content2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexGrow') public grow = 1;\n\n    /**\n     * Applies the `shrink` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content1</div>\n     *    <div igxFlex igxFlexShrink=\"0\">Content2</div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexShrink') public shrink = 1;\n\n    /**\n     * Applies the directive to an element.\n     *\n     * Possible values include `igxFlexGrow`, `igxFlexShrink`, `igxFlexOrder`, `igxFlexBasis`.\n     *\n     * ```html\n     * <div igxFlex>Content</div>\n     * ```\n     */\n    @Input('igxFlex') public flex = '';\n\n    /**\n     * Applies the `order` attribute to an element that uses the directive.\n     *\n     * Default value is `0`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexOrder=\"1\">Content1</div>\n     *    <div igxFlex igxFlexOrder=\"0\">Content2</div>\n     *    <div igxFlex igxFlexOrder=\"2\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexOrder') public order = 0;\n\n    /**\n     * Applies the `flex-basis` attribute to an element that uses the directive.\n     *\n     * Default value is `auto`.\n     *\n     * Other possible values include `content`, `max-content`, `min-content`, `fit-content`.\n     *\n     * ```html\n     * <div igxFlex igxFlexBasis=\"fit-content\">Content</div>\n     * ```\n     */\n    @Input('igxFlexBasis') public basis = 'auto';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex')\n    get style() {\n        if (this.flex) {\n            return `${this.flex}`;\n        }\n        return `${this.grow} ${this.shrink} ${this.basis}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.order')\n    get itemorder() {\n        return this.order || 0;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFlexDirective, IgxLayoutDirective],\n    exports: [IgxFlexDirective, IgxLayoutDirective]\n})\nexport class IgxLayoutModule { }\n","/**\n * @hidden\n */\nexport const MASK_FLAGS = [ 'C', '&', 'a', 'A', '?', 'L', '9', '0', '#' ];\n\n/**\n * @hidden\n */\nexport const KEYS = {\n    Ctrl : 17,\n    Z : 90,\n    Y : 89,\n    X : 88,\n    BACKSPACE : 8,\n    DELETE : 46\n  };\n\n\n/**\n * @hidden\n */\nexport class MaskHelper {\n    private _cursor;\n    public get cursor() {\n        return this._cursor;\n    }\n    public data: boolean;\n\n    public parseValueByMask(value, maskOptions, cursor): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (inputValue.length < mask.length) { // BACKSPACE, DELETE\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (nonLiteralIndeces.indexOf(cursor + 1) !== -1) {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, maskOptions.promptChar);\n                this._cursor = cursor + 1;\n            } else {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, mask[cursor + 1]);\n                this._cursor = cursor + 1;\n                for (let i = this._cursor; i < 0; i--) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor--;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        } else {\n            const char = inputValue[cursor];\n            let isCharValid = this.validateCharOnPostion(char, cursor, mask);\n            if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, cursor, char);\n                    this._cursor = cursor + 1;\n                } else {\n                    this._cursor = cursor;\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                this._cursor = ++cursor;\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor = ++cursor;\n                    } else {\n                        isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, cursor, char);\n                            this._cursor = ++cursor;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseMask(maskOptions): string {\n        let outputVal = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n\n        for (const maskSym of mask) {\n            outputVal += maskOptions.promptChar;\n        }\n\n        literals.forEach((val: string, key: number) => {\n            outputVal = this.replaceCharAt(outputVal, key, val);\n        });\n\n        return outputVal;\n    }\n\n    public parseValueByMaskOnInit(inputVal, maskOptions): string {\n        let outputVal = '';\n        let value = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n        const literalValues: string[] = Array.from(literals.values());\n\n        if (inputVal != null) {\n            value = inputVal.toString();\n        }\n\n        for (const maskSym of mask) {\n            outputVal += maskOptions.promptChar;\n        }\n\n        literals.forEach((val: string, key: number) => {\n            outputVal = this.replaceCharAt(outputVal, key, val);\n        });\n\n        if (!value) {\n            return outputVal;\n        }\n\n        const nonLiteralValues: string[] = this.getNonLiteralValues(value, literalValues);\n\n        for (let i = 0; i < nonLiteralValues.length; i++) {\n            const char = nonLiteralValues[i];\n            const isCharValid = this.validateCharOnPostion(char, nonLiteralIndeces[i], mask);\n\n            if (!isCharValid && char !== maskOptions.promptChar) {\n                nonLiteralValues[i] = maskOptions.promptChar;\n            }\n        }\n\n        if (nonLiteralValues.length > nonLiteralIndeces.length) {\n            nonLiteralValues.splice(nonLiteralIndeces.length);\n        }\n\n        let pos = 0;\n        for (const nonLiteralValue of nonLiteralValues) {\n            const char = nonLiteralValue;\n            outputVal = this.replaceCharAt(outputVal, nonLiteralIndeces[pos++], char);\n        }\n\n        return outputVal;\n    }\n\n    public restoreValueFromMask(value, maskOptions): string {\n        let outputVal = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalValues: string[] = Array.from(literals.values());\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                if (val !== maskOptions.promptChar) {\n                    outputVal += val;\n                }\n            }\n        }\n\n        return outputVal;\n    }\n\n    public parseValueByMaskUponSelection(value, maskOptions, cursor, selection): string {\n        let isCharValid: boolean;\n        let inputValue: string = value;\n        const char: string = inputValue[cursor];\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (!this.data) {\n            this._cursor = cursor < 0 ? ++cursor : cursor;\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                inputValue = isCharValid ? this.replaceCharAt(inputValue, this._cursor++, char) :\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                selection--;\n                if (selection > 0) {\n                    for (let i = 0; i < selection; i++) {\n                        cursor++;\n                        inputValue = nonLiteralIndeces.indexOf(cursor) !== -1 ?\n                            this.insertCharAt(inputValue, cursor, maskOptions.promptChar) :\n                            this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    }\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, this._cursor, mask[this._cursor]);\n                this._cursor++;\n                selection--;\n                let isMarked = false;\n                if (selection > 0) {\n                    cursor = this._cursor;\n                    for (let i = 0; i < selection; i++) {\n                        if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                            isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                            if (isCharValid && !isMarked) {\n                                inputValue = this.insertCharAt(inputValue, cursor, char);\n                                cursor++;\n                                this._cursor++;\n                                isMarked = true;\n                            } else {\n                                inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                                cursor++;\n                            }\n                        } else {\n                            inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                            if (cursor === this._cursor) {\n                                this._cursor++;\n                            }\n                            cursor++;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (this._cursor < 0) {\n                this._cursor++;\n                cursor++;\n            }\n            cursor++;\n            this._cursor = cursor;\n            for (let i = 0; i < selection; i++) {\n                if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                    inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                    cursor++;\n                } else {\n                    inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    cursor++;\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseValueByMaskUponCopyPaste(value, maskOptions, cursor, clipboardData, selection): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        const selectionEnd = cursor + selection;\n\n        this._cursor = cursor;\n        for (const clipboardSym of clipboardData) {\n            const char = clipboardSym;\n\n            if (this._cursor > mask.length) {\n                return inputValue;\n            }\n\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                }\n            } else {\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor++;\n                    } else {\n                        const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                        }\n                        break;\n                    }\n                }\n            }\n\n            selection--;\n        }\n\n        if (selection > 0) {\n            for (let i = this._cursor; i < selectionEnd; i++) {\n                if (literalKeys.indexOf(this._cursor) !== -1) {\n                    this._cursor++;\n                } else {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    private validateCharOnPostion(inputChar: string, position: number, mask: string): boolean {\n        let regex: RegExp;\n        let isValid: boolean;\n        const letterOrDigitRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letterDigitOrSpaceRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const letterRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letteSpaceRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const digitRegEx = '[\\\\d]';\n        const digitSpaceRegEx = '[\\\\d\\\\u0020]';\n        const digitSpecialRegEx = '[\\\\d-\\\\+]';\n\n        switch (mask.charAt(position)) {\n            case 'C':\n                isValid = inputChar !== '';\n                break;\n            case '&':\n                regex = new RegExp('[\\\\u0020]');\n                isValid = !regex.test(inputChar);\n                break;\n            case 'a':\n                regex = new RegExp(letterDigitOrSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'A':\n                regex = new RegExp(letterOrDigitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '?':\n                regex = new RegExp(letteSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'L':\n                regex = new RegExp(letterRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '0':\n                regex = new RegExp(digitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '9':\n                regex = new RegExp(digitSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '#':\n                regex = new RegExp(digitSpecialRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            default: {\n                isValid = null;\n            }\n        }\n\n        return isValid;\n    }\n    private replaceCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index + 1);\n        }\n    }\n    private insertCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index);\n        }\n    }\n    private getMaskLiterals(mask: string): Map<number, string> {\n        const literals = new Map<number, string>();\n\n        for (let i = 0; i < mask.length; i++) {\n            const char = mask.charAt(i);\n            if (MASK_FLAGS.indexOf(char) === -1) {\n                literals.set(i, char);\n            }\n        }\n\n        return literals;\n    }\n    private getNonLiteralIndeces(mask: string, literalKeys: number[]): number[] {\n        const nonLiteralsIndeces: number[] = new Array();\n\n        for (let i = 0; i < mask.length; i++) {\n            if (literalKeys.indexOf(i) === -1) {\n                nonLiteralsIndeces.push(i);\n            }\n        }\n\n        return nonLiteralsIndeces;\n    }\n    private getNonLiteralValues(value: string, literalValues: string[]): string[] {\n        const nonLiteralValues: string[] = new Array();\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                nonLiteralValues.push(val);\n            }\n        }\n\n        return nonLiteralValues;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    NgModule,\n    OnInit,\n    Output,\n    PipeTransform\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { KEYS, MaskHelper } from './mask-helper';\nimport { isIE, IBaseEventArgs } from '../../core/utils';\n\nconst noop = () => { };\n\n@Directive({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMaskDirective, multi: true }],\n    selector: '[igxMask]'\n})\nexport class IgxMaskDirective implements OnInit, ControlValueAccessor {\n    /**\n     * Sets the input mask.\n     * ```html\n     * <input [igxMask] = \"'00/00/0000'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input('igxMask')\n    public mask: string;\n\n    /**\n     * Sets the character representing a fillable spot in the input mask.\n     * Default value is \"'_'\".\n     * ```html\n     * <input [promptChar] = \"'/'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public promptChar: string;\n\n    /**\n     * Specifies if the bound value includes the formatting symbols.\n     * ```html\n     * <input [includeLiterals] = \"true\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public includeLiterals: boolean;\n\n    /**\n     * Specifies a placeholder.\n     * ```html\n     * <input placeholder = \"enter text...\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public set placeholder(val: string) {\n        this._placeholder = val;\n        this.nativeElement.setAttribute('placeholder', this._placeholder);\n    }\n\n    public get placeholder(): string {\n        return this._placeholder;\n    }\n\n    /**\n     * Specifies a pipe to be used on blur.\n     * ```html\n     * <input [displayValuePipe] = \"displayFormatPipe\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public displayValuePipe: PipeTransform;\n\n    /**\n     * Specifies a pipe to be used on focus.\n     * ```html\n     * <input [focusedValuePipe] = \"inputFormatPipe\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public focusedValuePipe: PipeTransform;\n\n    /**\n     *@hidden\n     */\n    @Input()\n    private dataValue: string;\n\n    /**\n     * Emits an event each time the value changes.\n     * Provides `rawValue: string` and `formattedValue: string` as event arguments.\n     * ```html\n     * <input (onValueChange) = \"onValueChange(rawValue: string, formattedValue: string)\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<IMaskEventArgs>();\n\n    /**\n     *@hidden\n     */\n    private get value() {\n        return this.nativeElement.value;\n    }\n\n    /**\n     *@hidden\n     */\n    private set value(val) {\n        this.nativeElement.value = val;\n    }\n\n    /**\n     *@hidden\n     */\n    private get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     *@hidden\n     */\n    private get selectionStart() {\n        return this.nativeElement.selectionStart;\n    }\n\n    /**\n     *@hidden\n     */\n    private get selectionEnd() {\n        return this.nativeElement.selectionEnd;\n    }\n\n    /**\n     *@hidden\n     */\n    private _ctrlDown: boolean;\n\n    /**\n     *@hidden\n     */\n    private _paste: boolean;\n\n    /**\n     *@hidden\n     */\n    private _selection: number;\n\n    /**\n     *@hidden\n     */\n    private _placeholder: string;\n\n    /**\n     *@hidden\n     */\n    private _maskOptions = {\n        format: '',\n        promptChar: ''\n    };\n\n    /**\n     *@hidden\n     */\n    private _key;\n\n    /**\n     *@hidden\n     */\n    private _cursorOnPaste;\n\n    /**\n     *@hidden\n     */\n    private _valOnPaste;\n\n    private _stopPropagation: boolean;\n\n    /**\n     *@hidden\n     */\n    private maskHelper: MaskHelper;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n\n    constructor(private elementRef: ElementRef) {\n        this.maskHelper = new MaskHelper();\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnInit(): void {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this._maskOptions.format = this.mask ? this.mask : 'CCCCCCCCCC';\n        this._maskOptions.promptChar = this.promptChar ? this.promptChar : '_';\n        this.nativeElement.setAttribute('placeholder', this.placeholder ? this.placeholder : this._maskOptions.format);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (isIE() && this._stopPropagation) {\n            this._stopPropagation = false;\n        }\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = true;\n        }\n\n        if ((this._ctrlDown && key === KEYS.Z) || (this._ctrlDown && key === KEYS.Y)) {\n            event.preventDefault();\n        }\n\n        this._key = key;\n        this._selection = Math.abs(this.selectionEnd - this.selectionStart);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('keyup', ['$event'])\n    public onKeyup(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = false;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('paste', ['$event'])\n    public onPaste(event): void {\n        this._paste = true;\n\n        this._valOnPaste = this.value;\n        this._cursorOnPaste = this.getCursorPosition();\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('input', ['$event'])\n    public onInputChanged(event): void {\n        if (isIE() && this._stopPropagation) {\n            this._stopPropagation = false;\n            return;\n        }\n\n        if (this._paste) {\n            this._paste = false;\n\n            const clipboardData = this.value.substring(this._cursorOnPaste, this.getCursorPosition());\n            this.value = this.maskHelper.parseValueByMaskUponCopyPaste(\n                this._valOnPaste, this._maskOptions, this._cursorOnPaste, clipboardData, this._selection);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        } else {\n            const currentCursorPos = this.getCursorPosition();\n\n            this.maskHelper.data = (this._key === KEYS.BACKSPACE) || (this._key === KEYS.DELETE);\n\n            this.value = this._selection && this._selection !== 0 ?\n                this.maskHelper.parseValueByMaskUponSelection(this.value, this._maskOptions, currentCursorPos - 1, this._selection) :\n                this.maskHelper.parseValueByMask(this.value, this._maskOptions, currentCursorPos - 1);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        }\n\n        const rawVal = this.maskHelper.restoreValueFromMask(this.value, this._maskOptions);\n\n        this.dataValue = this.includeLiterals ? this.value : rawVal;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: rawVal, formattedValue: this.value });\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event.target.value'])\n    public onFocus(value) {\n        if (this.focusedValuePipe) {\n            if (isIE()) {\n                this._stopPropagation = true;\n            }\n            this.value = this.focusedValuePipe.transform(value);\n        } else {\n            this.value = this.maskHelper.parseValueByMaskOnInit(this.value, this._maskOptions);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur', ['$event.target.value'])\n    public onBlur(value) {\n        if (this.displayValuePipe) {\n            this.value = this.displayValuePipe.transform(value);\n        } else if (value === this.maskHelper.parseMask(this._maskOptions)) {\n            this.value = '';\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private getCursorPosition(): number {\n        return this.nativeElement.selectionStart;\n    }\n\n    /**\n     *@hidden\n     */\n    private setCursorPosition(start: number, end: number = start): void {\n        this.nativeElement.setSelectionRange(start, end);\n    }\n\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this.value = value ? this.maskHelper.parseValueByMaskOnInit(value, this._maskOptions) : '';\n        if (this.displayValuePipe) {\n            this.value = this.displayValuePipe.transform(this.value);\n        }\n\n        this.dataValue = this.includeLiterals ? this.value : value;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: value, formattedValue: this.value });\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n\n/**\n * The IgxMaskModule provides the {@link IgxMaskDirective} inside your application.\n */\nexport interface IMaskEventArgs extends IBaseEventArgs {\n    rawValue: string;\n    formattedValue: string;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxMaskDirective],\n    exports: [IgxMaskDirective],\n    imports: [CommonModule]\n})\nexport class IgxMaskModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    NgModule,\n    OnInit,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum IgxAvatarSize {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large'\n}\n\nexport enum IgxAvatarType {\n    INITIALS = 'initials',\n    IMAGE = 'image',\n    ICON = 'icon',\n    CUSTOM = 'custom',\n}\n\n/**\n * **Ignite UI for Angular Avatar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/avatar.html)\n *\n * The Ignite UI Avatar provides an easy way to add an avatar icon to your application.  This icon can be an\n * image, someone's initials or a material icon from the google material icon set.\n *\n * Example:\n * ```html\n * <igx-avatar initials=\"MS\" roundShape=\"true\" size=\"large\">\n * </igx-avatar>\n * ```\n */\n@Component({\n    selector: 'igx-avatar',\n    templateUrl: 'avatar.component.html'\n})\nexport class IgxAvatarComponent implements OnInit, AfterViewInit {\n\n    /**\n     * This is a reference to the avatar `image` element in the DOM.\n     *\n     * ```typescript\n     *  let image =  this.avatar.image;\n     * ```\n     * @memberof IgxAvatarComponent\n     */\n    @ViewChild('image')\n    public image: ElementRef;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('defaultTemplate', { read: TemplateRef, static: true })\n    protected defaultTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('imageTemplate', { read: TemplateRef, static: true })\n    protected imageTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('initialsTemplate', { read: TemplateRef, static: true })\n    protected initialsTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('iconTemplate', { read: TemplateRef, static: true })\n    protected iconTemplate: TemplateRef<any>;\n\n    /**\n     * Returns the `aria-label` of the avatar.\n     *\n     * ```typescript\n     * let ariaLabel = this.avatar.ariaLabel;\n     * ```\n     *\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = 'avatar';\n\n    /**\n     * Returns the `role` attribute of the avatar.\n     *\n     * ```typescript\n     * let avatarRole = this.avatar.role;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'img';\n\n    /**\n     * Returns the class of the avatar.\n     *\n     * ```typescript\n     * let avatarCLass =  this.avatar.cssClass;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('class.igx-avatar')\n    public cssClass = 'igx-avatar';\n\n    /**\n     * Returns the type of the avatar.\n     * The avatar can be:\n     * - `\"initials type avatar\"`\n     * - `\"icon type avatar\"`\n     * - `\"image type avatar\"`.\n     * - `\"custom type avatar\"`.\n     *\n     * ```typescript\n     * let avatarDescription = this.avatar.roleDescription;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.aria-roledescription')\n    public roleDescription: string;\n\n    /**\n     * @hidden\n     */\n    private _size: string | IgxAvatarSize = IgxAvatarSize.SMALL;\n\n    /**\n     * Sets the `id` of the avatar. If not set, the first avatar component will have `id` = `\"igx-avatar-0\"`.\n     *\n     * ```html\n     * <igx-avatar id=\"my-first-avatar\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-avatar-${NEXT_ID++}`;\n\n    /**\n     * Sets a round shape to the avatar if `roundShape` is `\"true\"`.\n     * By default the shape of the avatar is a square.\n     *\n     * ```html\n     * <igx-avatar roundShape = \"true\" ></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('class.igx-avatar--rounded')\n    @Input()\n    public roundShape = false;\n\n    /**\n     * Sets the avatar's `initials`/`icon` color.\n     *\n     *```html\n     *<igx-avatar color=\"blue\"></igx-avatar>\n     *```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('style.color')\n    @Input()\n    public color: string;\n\n    /**\n     * Sets the background color of the avatar.\n     *\n     * ```html\n     * <igx-avatar bgColor=\"yellow\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('style.background')\n    @Input()\n    public bgColor: string;\n\n    /**\n     * Sets `initials` to the avatar.\n     *\n     * ```html\n     * <igx-avatar initials=\"MN\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public initials: string;\n\n    /**\n     * Sets an `icon` to the avatar. All icons from the material icon set are supported.\n     *\n     * ```html\n     * <igx-avatar icon=\"phone\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * Sets the `image` source of the avatar.\n     *\n     * ```html\n     * <igx-avatar src=\"images/picture.jpg\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public src: string;\n\n    /**\n     * Returns the `size` of the avatar.\n     *\n     * ```typescript\n     *let avatarSize =  this.avatar.size;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public get size(): string | IgxAvatarSize {\n        return this._size;\n    }\n\n    /**\n     * Sets the `size`  of the avatar.\n     * By default the `size` is `\"small\"`. It can be set to `\"medium\"` or `\"large\"`.\n     *\n     * ```\n     * <igx-avatar size=\"large\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public set size(value: string | IgxAvatarSize) {\n        switch (value) {\n            case 'small':\n            case 'medium':\n            case 'large':\n                this._size = value;\n                break;\n            default:\n                this._size = 'small';\n        }\n    }\n\n    /**\n     * Returns the type of the avatar.\n     *\n     * ```typescript\n     * let avatarType = this.avatar.type;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    get type(): IgxAvatarType {\n        if (this.src) {\n            return IgxAvatarType.IMAGE;\n        }\n\n        if (this.icon) {\n            return IgxAvatarType.ICON;\n        }\n\n        if (this.initials) {\n            return IgxAvatarType.INITIALS;\n        }\n\n        return IgxAvatarType.CUSTOM;\n    }\n\n    /**\n     * Returns the template of the avatar.\n     *\n     * ```typescript\n     * let template = this.avatar.template;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    get template(): TemplateRef<any> {\n        switch (this.type) {\n            case IgxAvatarType.IMAGE:\n                return this.imageTemplate;\n            case IgxAvatarType.INITIALS:\n                return this.initialsTemplate;\n            case IgxAvatarType.ICON:\n                return this.iconTemplate;\n            default:\n                return this.defaultTemplate;\n        }\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.roleDescription = this.getRole();\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        if (this.type !== IgxAvatarType.CUSTOM) {\n            this.elementRef.nativeElement.classList.add(`igx-avatar--${this.type}`);\n        }\n\n        this.elementRef.nativeElement.classList.add(`igx-avatar--${this._size}`);\n    }\n\n    /**\n     * @hidden\n     */\n    private getRole(): string {\n        switch (this.type) {\n            case IgxAvatarType.IMAGE:\n                return 'image avatar';\n            case IgxAvatarType.ICON:\n                return 'icon avatar';\n            case IgxAvatarType.INITIALS:\n                return 'initials avatar';\n            default:\n                return 'custom avatar';\n        }\n    }\n\n    /**\n     * Returns the url of the `image`.\n     *\n     * ```typescript\n     * let imageSourceUrl = this.avatar.getSrcUrl();\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public getSrcUrl() {\n        return `url(${this.src})`;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxAvatarComponent],\n    exports: [IgxAvatarComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxAvatarModule { }\n","import { Directive, ElementRef, HostListener, Input, NgModule, NgZone, Renderer2 } from '@angular/core';\nimport { AnimationBuilder, style, animate } from '@angular/animations';\n\n@Directive({\n    selector: '[igxRipple]'\n})\nexport class IgxRippleDirective {\n    /**\n     * Sets/gets the ripple target.\n     * ```html\n     * <div  #rippleContainer class=\"div-1\" igxRipple [igxRippleTarget] = \"'.div-1'\"></div>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleTarget = this.ripple.rippleTarget;\n     * ```\n     * Can set the ripple to activate on a child element inside the parent where igxRipple is defined.\n     * ```html\n     * <div #rippleContainer [igxRippleTarget] = \"'#child\"'>\n     *  <button id=\"child\">Click</button>\n     * </div>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleTarget')\n    public rippleTarget = '';\n    /**\n     * Sets/gets the ripple color.\n     * ```html\n     * <button #rippleContainer [igxRipple] = \"'red'\" ></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleColor = this.ripple.rippleColor;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRipple')\n    public rippleColor: string;\n    /**\n     * Sets/gets the ripple duration(in milliseconds).\n     * Default value is `600`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDuration] = \"800\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleDuration = this.ripple.rippleDuration;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDuration')\n    public rippleDuration = 600;\n    /**\n     * Enables/disables the ripple to be centered.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleCentered] = \"true\"></button>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleCentered') set centered(value: boolean) {\n        this._centered = value || this.centered;\n    }\n    /**\n     * Sets/gets whether the ripple is disabled.\n     * Default value is `false`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDisabled] = \"true\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let isRippleDisabled = this.ripple.rippleDisabled;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDisabled')\n    public rippleDisabled = false;\n\n    protected get nativeElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    private rippleElementClass = 'igx-ripple__inner';\n    private rippleHostClass = 'igx-ripple';\n    private _centered = false;\n    private animationQueue = [];\n\n    constructor(\n        protected builder: AnimationBuilder,\n        protected elementRef: ElementRef,\n        protected renderer: Renderer2,\n        private zone: NgZone) { }\n    /**\n     *@hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event) {\n        this.zone.runOutsideAngular(() => this._ripple(event));\n    }\n\n    private setStyles(rippleElement: HTMLElement, styleParams: any) {\n        this.renderer.addClass(rippleElement, this.rippleElementClass);\n        this.renderer.setStyle(rippleElement, 'width', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'height', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'top', `${styleParams.top}px`);\n        this.renderer.setStyle(rippleElement, 'left', `${styleParams.left}px`);\n        if (this.rippleColor) {\n            this.renderer.setStyle(rippleElement, 'background', this.rippleColor);\n        }\n    }\n\n    private _ripple(event) {\n        if (this.rippleDisabled) {\n            return;\n        }\n\n        const target = (this.rippleTarget ? this.nativeElement.querySelector(this.rippleTarget) || this.nativeElement : this.nativeElement);\n\n        const rectBounds = target.getBoundingClientRect();\n        const radius = Math.max(rectBounds.width, rectBounds.height);\n        let left = event.clientX - rectBounds.left - radius / 2;\n        let top = event.clientY - rectBounds.top - radius / 2;\n\n        if (this._centered) {\n            left = top = 0;\n        }\n\n        const dimensions = {\n            radius,\n            top,\n            left\n        };\n\n        const rippleElement = this.renderer.createElement('span');\n\n        this.setStyles(rippleElement, dimensions);\n        this.renderer.addClass(target, this.rippleHostClass);\n        this.renderer.appendChild(target, rippleElement);\n\n        const animation = this.builder.build([\n            style({ opacity: 0.5, transform: 'scale(.3)' }),\n            animate(this.rippleDuration, style({ opacity: 0, transform: 'scale(2)' }))\n        ]).create(rippleElement);\n\n        this.animationQueue.push(animation);\n\n        animation.onDone(() => {\n            this.animationQueue.splice(this.animationQueue.indexOf(animation), 1);\n            target.removeChild(rippleElement);\n            if (this.animationQueue.length < 1) {\n                this.renderer.removeClass(target, this.rippleHostClass);\n            }\n        });\n\n        animation.play();\n\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRippleDirective],\n    exports: [IgxRippleDirective]\n})\nexport class IgxRippleModule { }\n","import {\n    Directive,\n    NgModule,\n    Input,\n    QueryList,\n    Output,\n    EventEmitter,\n    AfterContentInit,\n    ContentChildren,\n    OnDestroy,\n    HostBinding\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRadioComponent, RadioLabelPosition, IChangeRadioEventArgs } from '../../radio/radio.component';\nimport { IgxRippleModule } from '../ripple/ripple.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nconst noop = () => { };\nlet nextId = 0;\n\n/**\n * Radio group directive renders set of radio buttons.\n *\n * @igxModule IgxRadioModule\n *\n * @igxTheme igx-radio-theme\n *\n * @igxKeywords radiogroup, radio, button, input\n *\n * @igxGroup Data Entry & Display\n *\n * @remarks\n * The Ignite UI Radio Group allows the user to select a single option from an available set of options that are listed side by side.\n *\n * @example:\n * ```html\n * <igx-radio-group name=\"radioGroup\">\n *   <igx-radio *ngFor=\"let item of ['Foo', 'Bar', 'Baz']\" value=\"{{item}}\">\n *      {{item}}\n *   </igx-radio>\n * </igx-radio-group>\n * ```\n */\n@Directive({\n    exportAs: 'igxRadioGroup',\n    selector: 'igx-radio-group, [igxRadioGroup]',\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioGroupDirective, multi: true }]\n})\nexport class IgxRadioGroupDirective implements AfterContentInit, ControlValueAccessor, OnDestroy {\n    /**\n     * Returns reference to the child radio buttons.\n     *\n     * @example\n     * ```typescript\n     * let radioButtons =  this.radioGroup.radioButtons;\n     * ```\n     */\n    @ContentChildren(IgxRadioComponent, { descendants: true }) public radioButtons: QueryList<IgxRadioComponent>;\n\n    /**\n     * Sets/gets the `value` attribute.\n     *\n     * @example\n     * ```html\n     * <igx-radio-group [value] = \"'radioButtonValue'\"></igx-radio-group>\n     * ```\n     */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            this._value = newValue;\n            this._selectRadioButton();\n        }\n    }\n\n    /**\n     * Sets/gets the `name` attribute of the radio group component. All child radio buttons inherits this name.\n     *\n     * @example\n     * ```html\n     * <igx-radio-group name = \"Radio1\"></igx-radio-group>\n     *  ```\n     */\n    @Input()\n    get name(): string { return this._name; }\n    set name(newValue: string) {\n        if (this._name !== newValue) {\n            this._name = newValue;\n            this._setRadioButtonNames();\n        }\n    }\n\n    /**\n     * Sets/gets whether the radio group is required.\n     *\n     * @remarks\n     * If not set, `required` will have value `false`.\n     *\n     * @example\n     * ```html\n     * <igx-radio-group [required] = \"true\"></igx-radio-group>\n     * ```\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(newValue: boolean) {\n        if (this._required !== newValue) {\n            this._required = newValue;\n            this._setRadioButtonsRequired();\n        }\n    }\n\n    /**\n     * An @Input property that allows you to disable the radio group. By default it's false.\n     *\n     * @example\n     *  ```html\n     * <igx-radio-group [disabled]=\"true\"></igx-radio-group>\n     * ```\n     */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(newValue: boolean) {\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this._disableRadioButtons();\n        }\n    }\n\n    /**\n     * Sets/gets the position of the `label` in the child radio buttons.\n     *\n     * @remarks\n     * If not set, `labelPosition` will have value `\"after\"`.\n     *\n     * @example\n     * ```html\n     * <igx-radio-group labelPosition = \"before\"></igx-radio-group>\n     * ```\n     */\n    @Input()\n    get labelPosition(): RadioLabelPosition | string { return this._labelPosition; }\n    set labelPosition(newValue: RadioLabelPosition | string) {\n        if (this._labelPosition !== newValue) {\n            this._labelPosition = newValue === RadioLabelPosition.BEFORE ? RadioLabelPosition.BEFORE : RadioLabelPosition.AFTER;\n            this._setRadioButtonLabelPosition();\n        }\n    }\n\n    /**\n     * Sets/gets the selected child radio button.\n     *\n     * @example\n     * ```typescript\n     * let selectedButton = this.radioGroup.selected;\n     * this.radioGroup.selected = selectedButton;\n     * ```\n     */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: IgxRadioComponent | null) {\n        if (this._selected !== selected) {\n            this._selected = selected;\n            this.value = selected ? selected.value : null;\n        }\n    }\n\n    /**\n     * An event that is emitted after the radio group `value` is changed.\n     *\n     * @remarks\n     * Provides references to the selected `IgxRadioComponent` and the `value` property as event arguments.\n     *\n     * @example\n     * ```html\n     * <igx-radio-group (change)=\"handler($event)\"></igx-radio-group>\n     * ```\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n\n    /**\n     * The css class applied to the component.\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-radio-group')\n    public cssClass = 'igx-radio-group';\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _name = `igx-radio-group-${nextId++}`;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _value: any = null;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _selected: IgxRadioComponent | null = null;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _isInitialized = false;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     * @hidden\n     * @internal\n     */\n    private _disabled = false;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _required = false;\n    /**\n     * @hidden\n     * @internal\n     */\n    private destroy$ = new Subject<boolean>();\n\n    ngAfterContentInit() {\n        // The initial value can possibly be set by NgModel and it is possible that\n        // the OnInit of the NgModel occurs after the OnInit of this class.\n        this._isInitialized = true;\n\n        setTimeout(() => { this._initRadioButtons(); });\n    }\n\n    /**\n     * Sets the \"checked\" property value on the radio input element.\n     *\n     * @remarks\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true` and selected property will contain the selected `IgxRadioComponent`.\n     *\n     * @example\n     * ```typescript\n     * this.radioGroup.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this.value = value;\n    }\n\n    /**\n     * Registers a function called when the control value changes.\n     *\n     * @hidden\n     * @internal\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n\n    /**\n     * Registers a function called when the control is touched.\n     *\n     * @hidden\n     * @internal\n     */\n    public registerOnTouched(fn: () => void) {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.registerOnTouched(fn);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _initRadioButtons() {\n        if (this.radioButtons) {\n            const props = { name: this._name, labelPosition: this._labelPosition, disabled: this._disabled, required: this._required };\n            this.radioButtons.forEach((button) => {\n                Object.assign(button, props);\n\n                if (button.value === this._value) {\n                    button.checked = true;\n                    this._selected = button;\n                }\n\n                button.change.pipe(takeUntil(this.destroy$)).subscribe((ev) => this._selectedRadioButtonChanged(ev));\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _selectedRadioButtonChanged(args: IChangeRadioEventArgs) {\n        if (this._selected !== args.radio) {\n            if (this._selected) {\n                this._selected.checked = false;\n            }\n            this._selected = args.radio;\n        }\n\n        this._value = args.value;\n\n        if (this._isInitialized) {\n            this.change.emit(args);\n            this._onChangeCallback(this.value);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _setRadioButtonNames() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.name = this._name;\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _selectRadioButton() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                if (!this._value) {\n                    // no value - uncheck all radio buttons\n                    if (button.checked) {\n                        button.checked = false;\n                    }\n                } else {\n                    if (this._value === button.value) {\n                        // selected button\n                        if (this._selected !== button) {\n                            this._selected = button;\n                        }\n\n                        if (!button.checked) {\n                            button.select();\n                        }\n                    } else {\n                        // non-selected button\n                        if (button.checked) {\n                            button.checked = false;\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _setRadioButtonLabelPosition() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.labelPosition = this._labelPosition;\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _disableRadioButtons() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.disabled = this._disabled;\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _setRadioButtonsRequired() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.required = this._required;\n            });\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRadioGroupDirective, IgxRadioComponent],\n    exports: [IgxRadioGroupDirective, IgxRadioComponent],\n    imports: [IgxRippleModule]\n})\nexport class IgxRadioModule { }\n","import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    OnDestroy,\n    Renderer2,\n    SimpleChanges,\n    AfterViewChecked,\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\n\ninterface ISearchInfo {\n    searchedText: string;\n    content: string;\n    matchCount: number;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n}\n\n/**\n * An interface describing information for the active highlight.\n */\nexport interface IActiveHighlightInfo {\n    /**\n     * The row index of the highlight. This property is deprecated, use `row` instead.\n     */\n    rowIndex?: number;\n    /**\n     * The column index of the highlight. This property is deprecated, use `column` instead.\n     */\n    columnIndex?: number;\n    /**\n     * The page index of the highlight. This property is deprecated.\n     */\n    page?: number;\n    /**\n     * The row of the highlight.\n     */\n    row?: any;\n    /**\n     * The column of the highlight.\n     */\n    column?: any;\n    /**\n     * The index of the highlight.\n     */\n    index: number;\n}\n\n@Directive({\n    selector: '[igxTextHighlight]'\n})\nexport class IgxTextHighlightDirective implements AfterViewInit, AfterViewChecked, OnDestroy, OnChanges {\n    private static onActiveElementChanged = new EventEmitter<string>();\n    public static highlightGroupsMap = new Map<string, IActiveHighlightInfo>();\n\n    private _lastSearchInfo: ISearchInfo;\n    private _div = null;\n    private _observer: MutationObserver = null;\n    private _nodeWasRemoved = false;\n    private _forceEvaluation = false;\n    private _activeElementIndex = -1;\n    private _valueChanged: boolean;\n    private _defaultCssClass = 'igx-highlight';\n    private _defaultActiveCssClass = 'igx-highlight--active';\n\n    /**\n     * Determines the `CSS` class of the highlight elements.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [cssClass]=\"myClass\">\n     * </div>\n     * ```\n     */\n    @Input('cssClass')\n    public cssClass: string;\n\n    /**\n     * Determines the `CSS` class of the active highlight element.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [activeCssClass]=\"activeHighlightClass\">\n     * </div>\n     * ```\n     */\n    @Input('activeCssClass')\n    public activeCssClass: string;\n\n    /**\n     * @hidden\n     */\n    @Input('containerClass')\n    public containerClass: string;\n\n    /**\n     * Identifies the highlight within a unique group.\n     * This allows it to have several different highlight groups,\n     * with each of them having their own active highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [groupName]=\"myGroupName\">\n     * </div>\n     * ```\n     */\n    @Input('groupName')\n    public groupName = '';\n\n    private _value = '';\n\n    /**\n     * The underlying value of the element that will be highlighted.\n     *\n     * ```typescript\n     * // get\n     * const elementValue = this.textHighlight.value;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <div\n     *   igxTextHighlight\n     *   [value]=\"newValue\">\n     * </div>\n     * ```\n     */\n    @Input('value')\n    public get value(): any {\n        return this._value;\n    }\n    public set value(value: any) {\n        if (value === undefined || value === null) {\n            this._value = '';\n        } else {\n            this._value = value;\n        }\n    }\n\n    /**\n     * The identifier of the row on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [row]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('row')\n    public row: any;\n\n    /**\n     * The identifier of the column on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [column]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('column')\n    public column: any;\n\n    @Input('page')\n    @DeprecateProperty(`IgxTextHighlightDirective 'page' input property is deprecated.`)\n    public page: number;\n\n    /**\n     * @hidden\n     */\n    public get lastSearchInfo(): ISearchInfo {\n        return this._lastSearchInfo;\n    }\n\n    /**\n     * @hidden\n     */\n    public parentElement: any;\n\n    private _container: any;\n\n    private destroy$ = new Subject<boolean>();\n\n    /**\n     * Activates the highlight at a given index.\n     * (if such index exists)\n     */\n    public static setActiveHighlight(groupName: string, highlight: IActiveHighlightInfo) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, highlight);\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public static clearActiveHighlight(groupName) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, {\n            index: -1\n        });\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    constructor(private element: ElementRef, public renderer: Renderer2) {\n        IgxTextHighlightDirective.onActiveElementChanged.pipe(takeUntil(this.destroy$)).subscribe((groupName) => {\n            if (this.groupName === groupName) {\n                if (this._activeElementIndex !== -1) {\n                    this.deactivate();\n                }\n                this.activateIfNecessary();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this.clearHighlight();\n\n        if (this._observer !== null) {\n            this._observer.disconnect();\n        }\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.value && !changes.value.firstChange) {\n            this._valueChanged = true;\n        } else if ((changes.row !== undefined && !changes.row.firstChange) ||\n            (changes.column !== undefined && !changes.column.firstChange) ||\n            (changes.page !== undefined && !changes.page.firstChange)) {\n            if (this._activeElementIndex !== -1) {\n                this.deactivate();\n            }\n            this.activateIfNecessary();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.parentElement = this.renderer.parentNode(this.element.nativeElement);\n\n        if (IgxTextHighlightDirective.highlightGroupsMap.has(this.groupName) === false) {\n            IgxTextHighlightDirective.highlightGroupsMap.set(this.groupName, {\n                index: -1\n            });\n        }\n\n        this._lastSearchInfo = {\n            searchedText: '',\n            content: this.value,\n            matchCount: 0,\n            caseSensitive: false,\n            exactMatch: false\n        };\n\n        this._container = this.parentElement.firstElementChild;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewChecked() {\n        if (this._valueChanged) {\n            this.highlight(this._lastSearchInfo.searchedText, this._lastSearchInfo.caseSensitive, this._lastSearchInfo.exactMatch);\n            this.activateIfNecessary();\n            this._valueChanged = false;\n        }\n    }\n\n    /**\n     * Clears the existing highlight and highlights the searched text.\n     * Returns how many times the element contains the searched text.\n     */\n    public highlight(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n\n        if (this.searchNeedsEvaluation(text, caseSensitiveResolved, exactMatchResolved)) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n            this._lastSearchInfo.content = this.value;\n\n            if (text === '' || text === undefined || text === null) {\n                this.clearHighlight();\n            } else {\n                this.clearChildElements(true);\n                this._lastSearchInfo.matchCount = this.getHighlightedText(text, caseSensitive, exactMatch);\n            }\n        } else if (this._nodeWasRemoved) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n        }\n\n        return this._lastSearchInfo.matchCount;\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public clearHighlight(): void {\n        this.clearChildElements(false);\n\n        this._lastSearchInfo.searchedText = '';\n        this._lastSearchInfo.matchCount = 0;\n    }\n\n    /**\n     * Activates the highlight if it is on the currently active row, column and page.\n     */\n    public activateIfNecessary(): void {\n        const group = IgxTextHighlightDirective.highlightGroupsMap.get(this.groupName);\n        const column = group.columnIndex === undefined ? group.column : group.columnIndex;\n        const row = group.rowIndex === undefined ? group.row : group.rowIndex;\n\n        if (column === this.column && row === this.row && group.page === this.page) {\n            this.activate(group.index);\n        }\n    }\n\n    /**\n     * Attaches a MutationObserver to the parentElement and watches for when the container element is removed/readded to the DOM.\n     * Should be used only when necessary as using many observers may lead to performance degradation.\n     */\n    public observe(): void {\n        if (this._observer === null) {\n            const callback = (mutationList) => {\n                mutationList.forEach((mutation) => {\n                    const removedNodes = Array.from(mutation.removedNodes);\n                    removedNodes.forEach((n) => {\n                        if (n === this._container) {\n                            this._nodeWasRemoved = true;\n                            this.clearChildElements(false);\n                        }\n                    });\n\n                    const addedNodes = Array.from(mutation.addedNodes);\n                    addedNodes.forEach((n) => {\n                        if (n === this.parentElement.firstElementChild && this._nodeWasRemoved) {\n                            this._container = this.parentElement.firstElementChild;\n                            this._nodeWasRemoved = false;\n\n                            this._forceEvaluation = true;\n                            this.highlight(this._lastSearchInfo.searchedText,\n                                this._lastSearchInfo.caseSensitive,\n                                this._lastSearchInfo.exactMatch);\n                            this._forceEvaluation = false;\n\n                            this.activateIfNecessary();\n                            this._observer.disconnect();\n                            this._observer = null;\n                        }\n                    });\n                });\n            };\n\n            this._observer = new MutationObserver(callback);\n            this._observer.observe(this.parentElement, {childList: true});\n        }\n    }\n\n    private activate(index: number) {\n        this.deactivate();\n\n        if (this._div !== null) {\n            const spans = this._div.querySelectorAll('span');\n            this._activeElementIndex = index;\n\n            if (spans.length <= index) {\n                return;\n            }\n\n            const elementToActivate = spans[index];\n            this.renderer.addClass(elementToActivate, this._defaultActiveCssClass);\n            this.renderer.addClass(elementToActivate, this.activeCssClass);\n        }\n    }\n\n    private deactivate() {\n        if (this._activeElementIndex === -1) {\n            return;\n        }\n\n        const spans = this._div.querySelectorAll('span');\n\n        if (spans.length <= this._activeElementIndex) {\n            this._activeElementIndex = -1;\n            return;\n        }\n\n        const elementToDeactivate = spans[this._activeElementIndex];\n        this.renderer.removeClass(elementToDeactivate, this._defaultActiveCssClass);\n        this.renderer.removeClass(elementToDeactivate, this.activeCssClass);\n        this._activeElementIndex = -1;\n    }\n\n    private clearChildElements(originalContentHidden: boolean): void {\n        this.renderer.setProperty(this.element.nativeElement, 'hidden', originalContentHidden);\n\n        if (this._div !== null) {\n            this.renderer.removeChild(this.parentElement, this._div);\n\n            this._div = null;\n            this._activeElementIndex = -1;\n        }\n    }\n\n    private getHighlightedText(searchText: string, caseSensitive: boolean, exactMatch: boolean) {\n        this.appendDiv();\n\n        const stringValue = String(this.value);\n        const contentStringResolved = !caseSensitive ? stringValue.toLowerCase() : stringValue;\n        const searchTextResolved = !caseSensitive ? searchText.toLowerCase() : searchText;\n\n        let matchCount = 0;\n\n        if (exactMatch) {\n            if (contentStringResolved === searchTextResolved) {\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this._defaultCssClass} ${this.cssClass ? this.cssClass : ''}\">${stringValue}</span>`);\n                matchCount++;\n            } else {\n                this.appendText(stringValue);\n            }\n        } else {\n            let foundIndex = contentStringResolved.indexOf(searchTextResolved, 0);\n            let previousMatchEnd = 0;\n\n            while (foundIndex !== -1) {\n                const start = foundIndex;\n                const end = foundIndex + searchTextResolved.length;\n\n                this.appendText(stringValue.substring(previousMatchEnd, start));\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this._defaultCssClass} ${this.cssClass ? this.cssClass : ''}\">${stringValue.substring(start, end)}</span>`);\n\n                previousMatchEnd = end;\n                matchCount++;\n\n                foundIndex = contentStringResolved.indexOf(searchTextResolved, end);\n            }\n\n            this.appendText(stringValue.substring(previousMatchEnd, stringValue.length));\n        }\n\n        return matchCount;\n    }\n\n    private appendText(text: string) {\n        const textElement = this.renderer.createText(text);\n        this.renderer.appendChild(this._div, textElement);\n    }\n\n    private appendSpan(outerHTML: string) {\n        const span = this.renderer.createElement('span');\n        this.renderer.appendChild(this._div, span);\n        this.renderer.setProperty(span, 'outerHTML', outerHTML);\n    }\n\n    private appendDiv() {\n        this._div = this.renderer.createElement('div');\n        if ( this.containerClass) {\n            this.renderer.addClass(this._div, this.containerClass);\n        }\n        this.renderer.appendChild(this.parentElement, this._div);\n    }\n\n    private searchNeedsEvaluation(text: string, caseSensitive: boolean, exactMatch: boolean): boolean {\n        const searchedText = this._lastSearchInfo.searchedText;\n\n        return !this._nodeWasRemoved &&\n            (searchedText === null ||\n                searchedText !== text ||\n                this._lastSearchInfo.content !== this.value ||\n                this._lastSearchInfo.caseSensitive !== caseSensitive ||\n                this._lastSearchInfo.exactMatch !== exactMatch ||\n                this._forceEvaluation);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTextHighlightDirective],\n    exports: [IgxTextHighlightDirective]\n})\nexport class IgxTextHighlightModule { }\n","import { Directive, ElementRef, HostListener, Input, NgModule } from '@angular/core';\n\n@Directive({\n    exportAs: 'igxTextSelection',\n    selector: '[igxTextSelection]'\n})\nexport class IgxTextSelectionDirective {\n\n    private selectionState = true;\n\n    /**\n     * Returns whether the input element is selectable through the directive.\n     *\n     * ```typescript\n     * // get\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public firstName: IgxTextSelectionDirective;\n     *\n     * public getFirstNameSelectionStatus() {\n     *  return this.firstName.selected;\n     * }\n     * ```\n     */\n    @Input('igxTextSelection')\n    get selected(): boolean {\n        return this.selectionState;\n    }\n\n    /**\n     *  Determines whether the input element could be selected through the directive.\n     *\n     *```html\n     * <!--set-->\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   [igxTextSelection]=\"true\">\n     * </input>\n     *\n     * <input\n     *   type=\"text\"\n     *   id=\"lastName\"\n     *   igxTextSelection\n     *   [selected]=\"true\">\n     * </input>\n     * ```\n     */\n    set selected(val: boolean) {\n        this.selectionState = val;\n    }\n\n    /**\n     * Returns the nativeElement of the element where the directive was applied.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n    *    id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public getNativeElement() {\n     *  return this.inputElement.nativeElement;\n     * }\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('focus')\n    onFocus() {\n        this.trigger();\n    }\n\n    constructor(private element: ElementRef) { }\n\n    /**\n     * Triggers the selection of the element if it is marked as selectable.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public triggerElementSelection() {\n     *  this.inputElement.trigger();\n     * }\n     * ```\n     */\n    trigger() {\n        if (this.selected && this.nativeElement.value.length) {\n            requestAnimationFrame(() => this.nativeElement.setSelectionRange(0, this.nativeElement.value.length));\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTextSelectionDirective],\n    exports: [IgxTextSelectionDirective]\n})\nexport class IgxTextSelectionModule { }\n","import {\n    Directive, ElementRef, HostListener, Input, NgModule, ChangeDetectorRef, OnInit,\n    Output, EventEmitter, Optional, HostBinding, Inject\n} from '@angular/core';\nimport { useAnimation } from '@angular/animations';\nimport { scaleInCenter } from '../../animations/scale/index';\nimport { fadeOut } from '../../animations/fade/index';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { HorizontalAlignment, AutoPositionStrategy, PositionSettings, OverlaySettings } from '../../services';\nimport { CommonModule } from '@angular/common';\nimport { IgxNavigationService } from '../../core/navigation';\nimport { IgxToggleDirective, IgxToggleActionDirective } from '../toggle/toggle.directive';\nimport { IBaseEventArgs } from '../../core/utils';\n\nexport interface ITooltipShowEventArgs extends IBaseEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\nexport interface ITooltipHideEventArgs extends IBaseEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\n\n/**\n * **Ignite UI for Angular Tooltip Target** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip Target directive is used to mark an HTML element in the markup as one that has a tooltip.\n * The tooltip target is used in combination with the Ignite UI for Angular Tooltip by assigning the exported tooltip reference to the\n * target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltipTarget',\n    selector: '[igxTooltipTarget]'\n})\nexport class IgxTooltipTargetDirective extends IgxToggleActionDirective implements OnInit {\n    /**\n     * Gets/sets the amount of milliseconds that should pass before showing the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipShowDelay = this.tooltipTarget.showDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" showDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('showDelay')\n    public showDelay = 500;\n\n    /**\n     * Gets/sets the amount of milliseconds that should pass before hiding the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipHideDelay = this.tooltipTarget.hideDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" hideDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('hideDelay')\n    public hideDelay = 500;\n\n    /**\n     * Specifies if the tooltip should not show when hovering its target with the mouse. (defaults to false)\n     * While setting this property to 'true' will disable the user interactions that shows/hides the tooltip,\n     * the developer will still be able to show/hide the tooltip through the API.\n     *\n     * ```typescript\n     * // get\n     * let tooltipDisabledValue = this.tooltipTarget.tooltipDisabled;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" [tooltipDisabled]=\"true\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('tooltipDisabled')\n    public tooltipDisabled = false;\n\n    /**\n     * @hidden\n     */\n    @Input('igxTooltipTarget')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this._navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    /**\n     * Gets the respective native element of the directive.\n     *\n     * ```typescript\n     * let tooltipTargetElement = this.tooltipTarget.nativeElement;\n     * ```\n     */\n    public get nativeElement() {\n        return this._element.nativeElement;\n    }\n\n    /**\n     * Indicates if the tooltip that is is associated with this target is currently hidden.\n     *\n     * ```typescript\n     * let tooltipHiddenValue = this.tooltipTarget.tooltipHidden;\n     * ```\n     */\n    public get tooltipHidden(): boolean {\n        return !this.target || this.target.collapsed;\n    }\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts showing.\n     * This event is fired before the start of the countdown to showing the tooltip.\n     *\n     * ```typescript\n     * tooltipShowing(args: ITooltipShowEventArgs) {\n     *    alert(\"Tooltip started showing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipShow)='tooltipShowing($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipShow = new EventEmitter<ITooltipShowEventArgs>();\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts hiding.\n     * This event is fired before the start of the countdown to hiding the tooltip.\n     *\n     * ```typescript\n     * tooltipHiding(args: ITooltipHideEventArgs) {\n     *    alert(\"Tooltip started hiding!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipHide)='tooltipHiding($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipHide = new EventEmitter<ITooltipHideEventArgs>();\n\n    constructor(private _element: ElementRef,\n        @Optional() private _navigationService: IgxNavigationService) {\n        super(_element, _navigationService);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n\n        const positionSettings: PositionSettings = {\n            target: this.nativeElement,\n            horizontalDirection: HorizontalAlignment.Center,\n            horizontalStartPoint: HorizontalAlignment.Center,\n            openAnimation: useAnimation(scaleInCenter, { params: { duration: '150ms' } }),\n            closeAnimation: useAnimation(fadeOut, { params: { duration: '75ms' } })\n        };\n\n        this._overlayDefaults.positionStrategy = new AutoPositionStrategy(positionSettings);\n        this._overlayDefaults.closeOnOutsideClick = false;\n    }\n\n    private checkOutletAndOutsideClick() {\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n    }\n\n    private get mergedOverlaySettings() {\n        return Object.assign({}, this._overlayDefaults, this.overlaySettings);\n    }\n\n    // Return true if the execution in onMouseEnter should be terminated after this method\n    private preMouseEnterCheck() {\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n            this.target.toBeShown = false;\n        }\n\n        // If Tooltip is opened or about to be hidden\n        if (!this.target.collapsed || this.target.toBeHidden) {\n            clearTimeout(this.target.timeoutId);\n\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return true;\n            }\n\n            //  if close animation has started finish it, or close the tooltip with no animation\n            this.target.forceClose(this.mergedOverlaySettings);\n            this.target.toBeHidden = false;\n        }\n\n        return false;\n    }\n\n    // Return true if the execution in onMouseLeave should be terminated after this method\n    private preMouseLeaveCheck(): boolean {\n        clearTimeout(this.target.timeoutId);\n\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            this.target.toBeShown = false;\n            this.target.toBeHidden = false;\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:keydown.escape', ['$event'])\n    public onKeydownEscape(event) {\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.close();\n        this.target.toBeHidden = false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (!this.target.collapsed) {\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return;\n            }\n\n            this.target.forceClose(this.mergedOverlaySettings);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseenter')\n    public onMouseEnter() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseEnterCheck();\n        if (shouldReturn) {\n            return;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseleave')\n    public onMouseLeave() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseLeaveCheck();\n        if (shouldReturn || this.target.collapsed) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('touchstart', ['$event'])\n    public onTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.showTooltip();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:touchstart', ['$event'])\n    public onDocumentTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        if (this.nativeElement !== event.target &&\n            !this.nativeElement.contains(event.target)\n        ) {\n            this.hideTooltip();\n        }\n    }\n\n    /**\n     * Shows the tooltip by respecting the 'showDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.showTooltip();\n     * ```\n     */\n    public showTooltip() {\n        clearTimeout(this.target.timeoutId);\n\n        if (!this.target.collapsed) {\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return;\n            }\n            //  if close animation has started finish it, or close the tooltip with no animation\n            this.target.forceClose(this.mergedOverlaySettings);\n            this.target.toBeHidden = false;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * Hides the tooltip by respecting the 'hideDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.hideTooltip();\n     * ```\n     */\n    public hideTooltip() {\n        if (this.target.collapsed && this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n        }\n\n        if (this.target.collapsed || this.target.toBeHidden) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n}\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Tooltip** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip directive is used to mark an HTML element in the markup as one that should behave as a tooltip.\n * The tooltip is used in combination with the Ignite UI for Angular Tooltip Target by assigning the exported tooltip reference to the\n * respective target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltip',\n    selector: '[igxTooltip]'\n})\nexport class IgxTooltipDirective extends IgxToggleDirective {\n\n    /**\n     * @hidden\n     */\n    public timeoutId;\n\n    /**\n     * @hidden\n     * Returns whether close time out has started\n     */\n    public toBeHidden = false;\n\n    /**\n     * @hidden\n     * Returns whether open time out has started\n     */\n    public toBeShown = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--desktop')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * Gets/sets any tooltip related data.\n     * The 'context' can be used for storing any information that is necessary\n     * to access when working with the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipContext = this.tooltip.context;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.tooltip.context = \"Tooltip's context\";\n     * ```\n     */\n    @Input('context')\n    public context;\n\n    /**\n     * Identifier for the tooltip.\n     * If this is property is not explicitly set, it will be automatically generated.\n     *\n     * ```typescript\n     * let tooltipId = this.tooltip.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-tooltip-${NEXT_ID++}`;\n\n    /**\n     * Get the role attribute of the tooltip.\n     *\n     * ```typescript\n     * let tooltipRole = this.tooltip.role;\n     * ```\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'tooltip';\n    }\n\n    /** @hidden */\n    constructor(\n        elementRef: ElementRef,\n        cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) overlayService: IgxOverlayService,\n        @Optional() navigationService: IgxNavigationService) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(elementRef, cdr, overlayService, navigationService);\n    }\n\n    /**\n     * If there is open animation in progress this method will finish is.\n     * If there is no open animation in progress this method will open the toggle with no animation.\n     * @param overlaySettings setting to use for opening the toggle\n     */\n    protected forceOpen(overlaySettings?: OverlaySettings) {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasOpenAnimation = info ? info.openAnimationPlayer : false;\n        if (hasOpenAnimation) {\n            info.openAnimationPlayer.finish();\n            info.openAnimationPlayer.reset();\n            info.openAnimationPlayer = null;\n        } else if (this.collapsed) {\n            const animation = overlaySettings.positionStrategy.settings.openAnimation;\n            overlaySettings.positionStrategy.settings.openAnimation = null;\n            this.open(overlaySettings);\n            overlaySettings.positionStrategy.settings.openAnimation = animation;\n        }\n    }\n\n    /**\n     * If there is close animation in progress this method will finish is.\n     * If there is no close animation in progress this method will close the toggle with no animation.\n     * @param overlaySettings settings to use for closing the toggle\n     */\n    protected forceClose(overlaySettings?: OverlaySettings) {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n\n        if (hasCloseAnimation) {\n            info.closeAnimationPlayer.finish();\n            info.closeAnimationPlayer.reset();\n            info.closeAnimationPlayer = null;\n        } else if (!this.collapsed) {\n            const animation = overlaySettings.positionStrategy.settings.closeAnimation;\n            overlaySettings.positionStrategy.settings.closeAnimation = null;\n            this.close();\n            overlaySettings.positionStrategy.settings.closeAnimation = animation;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    exports: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    imports: [CommonModule],\n    providers: [IgxOverlayService]\n})\nexport class IgxTooltipModule { }\n\n","/**\n * Provides base filtering operations\n * Implementations should be Singleton\n *\n * @export\n */\nexport class IgxFilteringOperand {\n    protected static _instance: IgxFilteringOperand = null;\n    public operations: IFilteringOperation[];\n\n    public constructor() {\n        this.operations = [{\n            name: 'null',\n            isUnary: true,\n            iconName: 'is_null',\n            logic: (target: any) => {\n                return target === null;\n            }\n        }, {\n            name: 'notNull',\n            isUnary: true,\n            iconName: 'is_not_null',\n            logic: (target: any) => {\n                return target !== null;\n            }\n        }, {\n            name: 'in',\n            isUnary: false,\n            iconName: 'is_in',\n            hidden: true,\n            logic: (target: any, searchVal: Set<any>) => {\n                return this.findValueInSet(target, searchVal);\n            }\n        }];\n    }\n\n    public static instance(): IgxFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n\n    /**\n     * @hidden\n     */\n    protected findValueInSet(target: any, searchVal: Set<any>) {\n        return searchVal.has(target);\n    }\n\n    /**\n     * Returns an array of names of the conditions which are visible in the UI\n     */\n    public conditionList(): string[] {\n        return this.operations.filter(f => !f.hidden).map((element) => element.name);\n    }\n\n    /**\n     * Returns an instance of the condition with the specified name.\n     * @param name The name of the condition.\n     */\n    public condition(name: string): IFilteringOperation {\n        return this.operations.find((element) => element.name === name);\n    }\n\n    /**\n     * Adds a new condition to the filtering operations.\n     * @param operation The filtering operation.\n     */\n    public append(operation: IFilteringOperation) {\n        this.operations.push(operation);\n    }\n}\n\n/**\n * Provides filtering operations for booleans\n *\n * @export\n */\nexport class IgxBooleanFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'all',\n            isUnary: true,\n            iconName: 'all',\n            logic: (target: boolean) => {\n                return true;\n            }\n        }, {\n            name: 'true',\n            isUnary: true,\n            iconName: 'is_true',\n            logic: (target: boolean) => {\n                return !!(target && target !== null && target !== undefined);\n            }\n        }, {\n            name: 'false',\n            isUnary: true,\n            iconName: 'is_false',\n            logic: (target: boolean) => {\n                return !target && target !== null && target !== undefined;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: boolean) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: boolean) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n}\n\n/**\n * Provides filtering operations for Dates\n *\n * @export\n */\nexport class IgxDateFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year === searchp.year &&\n                    targetp.month === searchp.month &&\n                    targetp.day === searchp.day;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return true;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year !== searchp.year ||\n                    targetp.month !== searchp.month ||\n                    targetp.day !== searchp.day;\n            }\n        }, {\n            name: 'before',\n            isUnary: false,\n            iconName: 'is_before',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target < searchVal;\n            }\n        }, {\n            name: 'after',\n            isUnary: false,\n            iconName: 'is_after',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target > searchVal;\n            }\n        }, {\n            name: 'today',\n            isUnary: true,\n            iconName: 'today',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yMd');\n                return d.year === now.year &&\n                    d.month === now.month &&\n                    d.day === now.day;\n            }\n        }, {\n            name: 'yesterday',\n            isUnary: true,\n            iconName: 'yesterday',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const td = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const y = ((d) => new Date(d.setDate(d.getDate() - 1)))(new Date());\n                const yesterday = IgxDateFilteringOperand.getDateParts(y, 'yMd');\n                return td.year === yesterday.year &&\n                    td.month === yesterday.month &&\n                    td.day === yesterday.day;\n            }\n        }, {\n            name: 'thisMonth',\n            isUnary: true,\n            iconName: 'this_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'lastMonth',\n            isUnary: true,\n            iconName: 'last_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (!now.month) {\n                    now.month = 11;\n                    now.year -= 1;\n                } else {\n                    now.month--;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'nextMonth',\n            isUnary: true,\n            iconName: 'next_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (now.month === 11) {\n                    now.month = 0;\n                    now.year += 1;\n                } else {\n                    now.month++;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'thisYear',\n            isUnary: true,\n            iconName: 'this_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year;\n            }\n        }, {\n            name: 'lastYear',\n            isUnary: true,\n            iconName: 'last_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year - 1;\n            }\n        }, {\n            name: 'nextYear',\n            isUnary: true,\n            iconName: 'next_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year + 1;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: Date) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: Date) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n\n    /**\n     * Splits a Date object into parts\n     *\n     * @memberof IgxDateFilteringOperand\n     */\n    public static getDateParts(date: Date, dateFormat?: string): IDateParts {\n        const res = {\n            day: null,\n            hours: null,\n            milliseconds: null,\n            minutes: null,\n            month: null,\n            seconds: null,\n            year: null\n        };\n        if (!date || !dateFormat) {\n            return res;\n        }\n        if (dateFormat.indexOf('y') >= 0) {\n            res.year = date.getFullYear();\n        }\n        if (dateFormat.indexOf('M') >= 0) {\n            res.month = date.getMonth();\n        }\n        if (dateFormat.indexOf('d') >= 0) {\n            res.day = date.getDate();\n        }\n        if (dateFormat.indexOf('h') >= 0) {\n            res.hours = date.getHours();\n        }\n        if (dateFormat.indexOf('m') >= 0) {\n            res.minutes = date.getMinutes();\n        }\n        if (dateFormat.indexOf('s') >= 0) {\n            res.seconds = date.getSeconds();\n        }\n        if (dateFormat.indexOf('f') >= 0) {\n            res.milliseconds = date.getMilliseconds();\n        }\n        return res;\n    }\n\n    private validateInputData(target: Date) {\n        if (!(target instanceof Date)) {\n            throw new Error('Could not perform filtering on \\'date\\' column because the datasource object type is not \\'Date\\'.');\n        }\n    }\n\n    protected findValueInSet(target: any, searchVal: Set<any>) {\n        if (!target) { return false; }\n        return searchVal.has(new Date(target.getFullYear(), target.getMonth(), target.getDate()).toISOString());\n    }\n}\n\n/**\n * Provides filtering operations for numbers\n *\n * @export\n */\nexport class IgxNumberFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: number, searchVal: number) => {\n                return target === searchVal;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: number, searchVal: number) => {\n                return target !== searchVal;\n            }\n        }, {\n            name: 'greaterThan',\n            isUnary: false,\n            iconName: 'greater_than',\n            logic: (target: number, searchVal: number) => {\n                return target > searchVal;\n            }\n        }, {\n            name: 'lessThan',\n            isUnary: false,\n            iconName: 'less_than',\n            logic: (target: number, searchVal: number) => {\n                return target < searchVal;\n            }\n        }, {\n            name: 'greaterThanOrEqualTo',\n            isUnary: false,\n            iconName: 'greater_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target >= searchVal;\n            }\n        }, {\n            name: 'lessThanOrEqualTo',\n            isUnary: false,\n            iconName: 'less_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target <= searchVal;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: number) => {\n                return target === null || target === undefined || isNaN(target);\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: number) => {\n                return target !== null && target !== undefined && !isNaN(target);\n            }\n        }].concat(this.operations);\n    }\n}\n\n/**\n * Provides filtering operations for strings\n *\n * @export\n */\nexport class IgxStringFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'contains',\n            isUnary: false,\n            iconName: 'contains',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) !== -1;\n            }\n        }, {\n            name: 'doesNotContain',\n            isUnary: false,\n            iconName: 'does_not_contain',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) === -1;\n            }\n        }, {\n            name: 'startsWith',\n            isUnary: false,\n            iconName: 'starts_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.startsWith(search);\n            }\n        }, {\n            name: 'endsWith',\n            isUnary: false,\n            iconName: 'ends_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.endsWith(search);\n            }\n        }, {\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target === search;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target !== search;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: string) => {\n                return target === null || target === undefined || target.length === 0;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: string) => {\n                return target !== null && target !== undefined && target.length > 0;\n            }\n        }].concat(this.operations);\n    }\n\n    /**\n     * Applies case sensitivity on strings if provided\n     *\n     * @memberof IgxStringFilteringOperand\n     */\n    public static applyIgnoreCase(a: string, ignoreCase: boolean): string {\n        a = a || '';\n        // bulletproof\n        return ignoreCase ? ('' + a).toLowerCase() : a;\n    }\n}\n\n/**\n * Interface describing filtering operations\n *\n * @export\n */\nexport interface IFilteringOperation {\n    name: string;\n    isUnary: boolean;\n    iconName: string;\n    hidden?: boolean;\n    logic: (value: any, searchVal?: any, ignoreCase?: boolean) => boolean;\n}\n\n/**\n * Interface describing Date object in parts\n *\n * @export\n */\nexport interface IDateParts {\n    year: number;\n    month: number;\n    day: number;\n    hours: number;\n    minutes: number;\n    seconds: number;\n    milliseconds: number;\n}\n","import { IFilteringExpressionsTree } from './filtering-expressions-tree';\nimport { FilteringStrategy, IFilteringStrategy } from './filtering-strategy';\n\nexport const filteringStateDefaults = {\n    strategy: new FilteringStrategy()\n};\n\nexport declare interface IFilteringState {\n    expressionsTree: IFilteringExpressionsTree;\n    advancedExpressionsTree?: IFilteringExpressionsTree;\n    strategy?: IFilteringStrategy;\n}\n","import { ISortingExpression } from './sorting-expression.interface';\n\n/**\n * @hidden\n */\nexport class GroupedRecords extends Array<any> {}\n\nexport interface IGroupByRecord {\n    expression: ISortingExpression;\n    level: number;\n    records: GroupedRecords;\n    value: any;\n    groupParent: IGroupByRecord;\n    groups?: IGroupByRecord[];\n    height: number;\n }\n","import { Injectable, SecurityContext, Inject } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * **Ignite UI for Angular Icon Service** -\n *\n * The Ignite UI Icon Service makes it easy for developers to include custom SVG images and use them with IgxIconComponent.\n * In addition it could be used to associate a custom class to be applied on IgxIconComponent according to given fontSet.\n *\n * Example:\n * ```typescript\n * this.iconService.registerFontSetAlias('material', 'material-icons');\n * this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n * ```\n */\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class IgxIconService {\n    private _fontSet = 'material-icons';\n    private _fontSetAliases = new Map<string, string>();\n    private _svgContainer: HTMLElement;\n    private _cachedSvgIcons: Set<string> = new Set<string>();\n\n    constructor(private _sanitizer: DomSanitizer, @Inject(DOCUMENT) private _document: any) { }\n\n    /**\n     *  Returns the default font set.\n     *```typescript\n     *   const defaultFontSet = this.iconService.defaultFontSet;\n     * ```\n     */\n    get defaultFontSet(): string {\n        return this._fontSet;\n    }\n\n    /**\n     *  Sets the default font set.\n     *```typescript\n     *   this.iconService.defaultFontSet = 'svg-flags';\n     * ```\n     */\n    set defaultFontSet(className: string) {\n        this._fontSet = className;\n    }\n\n    /**\n     *  Registers a custom class to be applied to IgxIconComponent for a given fontSet.\n     *```typescript\n     *   this.iconService.registerFontSetAlias('material', 'material-icons');\n     * ```\n     */\n    public registerFontSetAlias(alias: string, className: string = alias): this {\n        this._fontSetAliases.set(alias, className);\n        return this;\n    }\n\n    /**\n     *  Returns the custom class, if any, associated to a given fontSet.\n     *```typescript\n     *   const fontSetClass = this.iconService.fontSetClassName('material');\n     * ```\n     */\n    public fontSetClassName(alias: string): string {\n        return this._fontSetAliases.get(alias) || alias;\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is an url.\n     *```typescript\n     *   this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n     * ```\n     */\n    public addSvgIcon(iconName: string, url: string, fontSet: string = '') {\n        if (iconName && url) {\n            const safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(url);\n            if (!safeUrl) {\n                throw new Error(`The provided URL could not be processed as trusted resource URL by Angular's DomSanitizer: \"${url}\".`);\n            }\n\n            const sanitizedUrl = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n            if (!sanitizedUrl) {\n                throw new Error(`The URL provided was not trusted as a resource URL: \"${url}\".`);\n            }\n\n            this.fetchSvg(iconName, url, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `url` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is its text.\n     *```typescript\n     *   this.iconService.addSvgIcon('simple', '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 200 200\">\n     *   <path d=\"M74 74h54v54H74\" /></svg>', 'svg-flags');\n     * ```\n     */\n    public addSvgIconFromText(iconName: string, iconText: string, fontSet: string = '') {\n        if (iconName && iconText) {\n            this.cacheSvgIcon(iconName, iconText, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `iconText` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Returns whether a given SVG image is present in the cache.\n     *```typescript\n     *   const isSvgCached = this.iconService.isSvgIconCached('aruba', 'svg-flags');\n     * ```\n     */\n    public isSvgIconCached(iconName: string, fontSet: string = ''): boolean {\n        const iconKey = this.getSvgIconKey(iconName, fontSet);\n        return this._cachedSvgIcons.has(iconKey);\n    }\n\n    /**\n     *  Returns the key of a cached SVG image.\n     *```typescript\n     *   const svgIconKey = this.iconService.getSvgIconKey('aruba', 'svg-flags');\n     * ```\n     */\n    public getSvgIconKey(iconName: string, fontSet: string = '') {\n        return fontSet + '_' + iconName;\n    }\n\n    /**\n     * @hidden\n     */\n    private fetchSvg(iconName: string, url: string, fontSet: string = '') {\n        const instance = this;\n        const httpRequest = new XMLHttpRequest();\n        httpRequest.open('GET', url, true);\n        httpRequest.responseType = 'text';\n\n        // load â when the result is ready, that includes HTTP errors like 404.\n        httpRequest.onload = function (event: ProgressEvent) {\n            if (event) {\n                const request = event.target as XMLHttpRequest;\n                if (request.status === 200) {\n                    instance.cacheSvgIcon(iconName, request.responseText, fontSet);\n                } else {\n                    throw new Error(`Could not fetch SVG from url: ${url}; error: ${request.status} (${request.statusText})`);\n                }\n            } else {\n                throw new Error(`Could not fetch SVG from url: ${url};`);\n            }\n        };\n\n        // error â when the request couldnât be made, e.g.network down or invalid URL.\n        httpRequest.onerror = function (event: ProgressEvent) {\n            if (event) {\n                const request = event.target as XMLHttpRequest;\n                throw new Error(`Could not fetch SVG from url: ${url}; error status code: ${request.status} (${request.statusText})`);\n            }\n            throw new Error(`Could not fetch SVG from url: ${url};`);\n        };\n\n        httpRequest.send();\n    }\n\n    /**\n     * @hidden\n     */\n    private cacheSvgIcon(iconName: string, value: string, fontSet: string = '') {\n        if (iconName && value) {\n            this.ensureSvgContainerCreated();\n\n            const div = this._document.createElement('DIV');\n            div.innerHTML = value;\n            const svg = div.querySelector('svg') as SVGElement;\n\n            if (svg) {\n                const iconKey = this.getSvgIconKey(iconName, fontSet);\n\n                svg.setAttribute('id', iconKey);\n                svg.setAttribute('fit', '');\n                svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n                svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n                if (this._cachedSvgIcons.has(iconKey)) {\n                    const oldChild = this._svgContainer.querySelector(`svg[id='${iconKey}']`);\n                    this._svgContainer.removeChild(oldChild);\n                }\n\n                this._svgContainer.appendChild(svg);\n                this._cachedSvgIcons.add(iconKey);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private ensureSvgContainerCreated() {\n        if (!this._svgContainer) {\n            this._svgContainer = this._document.documentElement.querySelector('.igx-svg-container');\n            if (!this._svgContainer) {\n                this._svgContainer = this._document.createElement('DIV');\n                this._svgContainer.classList.add('igx-svg-container');\n                this._document.documentElement.appendChild(this._svgContainer);\n            }\n        }\n    }\n}\n","import { Component, ElementRef, HostBinding, Input, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { IgxIconService } from './icon.service';\n\n/**\n * Icon provides a way to include material icons to markup\n *\n * @igxModule IgxIconModule\n *\n * @igxTheme igx-icon-theme\n *\n * @igxKeywords icon, picture\n *\n * @igxGroup Display\n *\n * @remarks\n *\n * The Ignite UI Icon makes it easy for developers to include material design icons directly in their markup. The icons\n * support custom colors and can be marked as active or disabled using the `isActive` property. This will change the appearance\n * of the icon.\n *\n * @example\n * ```html\n * <igx-icon color=\"#00ff00\" isActive=\"true\">home</igx-icon>\n * ```\n */\nlet NEXT_ID = 0;\n\n@Component({\n    selector: 'igx-icon',\n    templateUrl: 'icon.component.html'\n})\n\nexport class IgxIconComponent implements OnInit {\n    @ViewChild('noLigature', { read: TemplateRef, static: true })\n    private noLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('explicitLigature', { read: TemplateRef, static: true })\n    private explicitLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('svgImage', { read: TemplateRef, static: true })\n    private svgImage: TemplateRef<HTMLElement>;\n\n    /**\n     *  This allows you to change the value of `class.igx-icon`. By default it's `igx-icon`.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-icon')\n    public cssClass = 'igx-icon';\n\n    /**\n     *  This allows you to disable the `aria-hidden` attribute. By default it's applied.\n     * @example\n     *```typescript\n     *@ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     *constructor(private cdRef:ChangeDetectorRef) {}\n     *ngAfterViewInit() {\n     *    this.icon.ariaHidden = false;\n     *    this.cdRef.detectChanges();\n     *}\n     * ```\n     */\n    @HostBinding('attr.aria-hidden')\n    public ariaHidden = true;\n\n    /**\n    *  An @Input property that sets the value of the `id` attribute.\n    * @example\n    *```html\n    *<igx-icon id=\"igx-icon-1\" fontSet=\"material\">settings</igx-icon>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-icon-${NEXT_ID++}`;\n\n    /**\n    *  An @Input property that sets the value of the `fontSet`. By default it's \"material\".\n    * @example\n    *```html\n    *<igx-icon fontSet=\"material\">settings</igx-icon>\n    *```\n    */\n    @Input('fontSet')\n    public font: string;\n\n    /**\n    *  An @Input property that allows you to disable the `active` property. By default it's applied.\n    * @example\n    *```html\n    *<igx-icon [isActive]=\"false\">settings</igx-icon>\n    *```\n    */\n    @Input('isActive')\n    public active = true;\n\n    /**\n    *  An @Input property that allows you to change the `iconColor` of the icon.\n    * @example\n    *```html\n    *<igx-icon color=\"blue\">settings</igx-icon>\n    *```\n    */\n    @Input('color')\n    public iconColor: string;\n\n    /**\n    *  An @Input property that allows you to set the `iconName` of the icon.\n    *  @example\n    *```html\n    *<igx-icon name=\"contains\" fontSet=\"filter-icons\"></igx-icon>\n    *```\n    */\n    @Input('name')\n    public iconName: string;\n\n    /**\n     * An ElementRef property of the `igx-icon` component.\n     */\n    public el: ElementRef;\n\n    constructor(private _el: ElementRef, private iconService: IgxIconService) {\n        this.el = _el;\n        this.font = this.iconService.defaultFontSet;\n        this.iconService.registerFontSetAlias('material', 'material-icons');\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnInit() {\n        this.updateIconClass();\n    }\n\n    /**\n     *  An accessor that returns the value of the font property.\n     * @example\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconFont = this.icon.getFontSet;\n     * }\n     * ```\n     */\n    get getFontSet(): string {\n        return this.font;\n    }\n\n    /**\n     *  An accessor that returns the value of the active property.\n     * @example\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getActive;\n     * }\n     * ```\n     */\n    get getActive(): boolean {\n        return this.active;\n    }\n\n    /**\n     *  An accessor that returns inactive property.\n     * @example\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getInactive;\n     * }\n     * ```\n     */\n    @HostBinding('class.igx-icon--inactive')\n    get getInactive(): boolean {\n        return !this.active;\n    }\n\n    /**\n     *  An accessor that returns the opposite value of the `iconColor` property.\n     * @example\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconColor = this.icon.getIconColor;\n     * }\n     * ```\n     */\n    @HostBinding('style.color')\n    get getIconColor(): string {\n        return this.iconColor;\n    }\n\n    /**\n     *  An accessor that returns the value of the iconName property.\n     * @example\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconName = this.icon.getIconName;\n     * }\n     * ```\n     */\n    get getIconName(): string {\n        return this.iconName;\n    }\n\n    /**\n     *  An accessor that returns the key of the SVG image.\n     *  The key consists of the fontSet and the iconName separated by underscore.\n     * @example\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let svgKey = this.icon.getSvgKey;\n     * }\n     * ```\n     */\n    get getSvgKey(): string {\n        if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            return '#' + this.iconService.getSvgIconKey(this.iconName, this.font);\n        }\n\n        return null;\n    }\n\n    /**\n     *   An accessor that returns a TemplateRef to explicit, svg or no ligature.\n     * @example\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconTemplate = this.icon.template;\n     * }\n     * ```\n     */\n    get template(): TemplateRef<HTMLElement> {\n        if (this.iconName) {\n            if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n                return this.svgImage;\n            }\n\n            return this.noLigature;\n        }\n\n        return this.explicitLigature;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private updateIconClass() {\n        const className = this.iconService.fontSetClassName(this.font);\n        this.el.nativeElement.classList.add(className);\n\n        if (this.iconName && !this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            this.el.nativeElement.classList.add(this.iconName);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { IgxIconComponent } from './icon.component';\nimport { DeprecateMethod } from '../core/deprecateDecorators';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxIconComponent],\n    exports: [IgxIconComponent],\n    imports: [CommonModule]\n})\nexport class IgxIconModule { }\n\nexport * from './icon.component';\nexport * from './icon.service';\n","import { CommonModule } from '@angular/common';\nimport { Component, HostBinding, Input, NgModule } from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\n/**\n * Determines the igxBadge type\n */\nexport enum IgxBadgeType {\n    PRIMARY = 'primary',\n    INFO = 'info',\n    SUCCESS = 'success',\n    WARNING = 'warning',\n    ERROR = 'error'\n}\n/**\n * Badge provides visual notifications used to decorate avatars, menus, etc.\n *\n * @igxModule IgxBadgeModule\n *\n * @igxTheme igx-badge-theme\n *\n * @igxKeywords badge, icon, notification\n *\n * @igxGroup Data Entry & Display\n *\n * @remarks\n * The Ignite UI Badge is used to decorate avatars, navigation menus, or other components in the\n * application when visual notification is needed. They are usually designed as icons with a predefined\n * style to communicate information, success, warnings, or errors.\n *\n * @example\n * ```html\n * <igx-avatar>\n *   <igx-badge icon=\"check\" type=\"success\"></igx-badge>\n * </igx-avatar>\n */\n@Component({\n    selector: 'igx-badge',\n    templateUrl: 'badge.component.html'\n})\nexport class IgxBadgeComponent {\n\n    /**\n    * Sets/gets the `id` of the badge.\n    *\n    * @remarks\n    * If not set, the `id` will have value `\"igx-badge-0\"`.\n    *\n    * @example\n    * ```html\n    * <igx-badge id=\"igx-badge-2\"></igx-badge>\n    * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-badge-${NEXT_ID++}`;\n\n    /**\n    * Sets/gets the type of the badge.\n    *\n    * @remarks\n    * Allowed values are `primary`, `info`, `success`, `warning`, `error`.\n    * Providing an invalid value won't display a badge.\n    *\n    * @example\n    * ```html\n    * <igx-badge type=\"success\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public type: string | IgxBadgeType = IgxBadgeType.PRIMARY;\n\n    /**\n    * Sets/gets the value to be displayed inside the badge.\n    *\n    * @remarks\n    * If an `icon` property is already set the `icon` will be displayed.\n    * If neither a `value` nor an `icon` is set the content of the badge will be empty.\n    *\n    * @example\n    * ```html\n    * <igx-badge value=\"11\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public value = '';\n\n    /**\n     * Sets/gets an icon for the badge from the material icons set.\n     *\n     * @remarks\n     * Has priority over the `value` property.\n     * If neither a `value` nor an `icon` is set the content of the badge will be empty.\n     * Providing an invalid value won't display anything.\n     *\n     * @example\n     * ```html\n     * <igx-badge icon=\"check\"></igx-badge>\n     * ```\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * Sets/gets the role attribute value.\n     *\n     * @example\n     * ```typescript\n     * @ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     * public badge: IgxBadgeComponent;\n     *\n     * badge.role = 'status';\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'status';\n\n    /**\n     * Sets/gets the the css class to use on the badge.\n     *\n     * @example\n     * ```typescript\n     * @ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     * public badge: IgxBadgeComponent;\n     *\n     * badge.cssClass = 'my-badge-class';\n     * ```\n     */\n    @HostBinding('class.igx-badge')\n    public cssClass = 'igx-badge';\n\n    /**\n     * Sets/gets the aria-label attribute value.\n     *\n     * @example\n     * ```typescript\n     * @ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     * public badge: IgxBadgeComponent;\n     *\n     * badge.label = 'badge';\n     * ```\n     */\n    @HostBinding('attr.aria-label')\n    public label = 'badge';\n\n    /**\n     * Defines a human-readable, accessor, author-localized description for\n     * the `type` and the `icon` or `value` of the element.\n     * @hidden\n     * @internal\n     */\n    get roleDescription() {\n        let message: string;\n\n        // tslint:disable-next-line:prefer-conditional-expression\n        if (this.icon) {\n            message = this.type + ' type badge with icon type ' + this.icon;\n        } else if (this.value) {\n            message = this.type + ' badge type with value ' + this.value;\n        } else {\n            message = this.type + ' badge type without value';\n        }\n\n        return message;\n    }\n\n    /**\n     * Method which makes the name of the class more descriptive.\n     * This helps the styling of the badges.\n     * @hidden\n     * @internal\n     */\n    public setClasses() {\n        let classes = {};\n\n        switch (IgxBadgeType[this.type.toUpperCase()]) {\n            case IgxBadgeType.INFO:\n                classes = {\n                    [`${this.cssClass}__circle--info`]: true\n                };\n                break;\n            case IgxBadgeType.SUCCESS:\n                classes = {\n                    [`${this.cssClass}__circle--success`]: true\n                };\n                break;\n            case IgxBadgeType.WARNING:\n                classes = {\n                    [`${this.cssClass}__circle--warning`]: true\n                };\n                break;\n            case IgxBadgeType.ERROR:\n                classes = {\n                    [`${this.cssClass}__circle--error`]: true\n                };\n                break;\n            default:\n                classes = {\n                    [`${this.cssClass}__circle--default`]: true\n                };\n        }\n\n        return classes;\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBadgeComponent],\n    exports: [IgxBadgeComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxBadgeModule { }\n","import {\n    Component,\n    ChangeDetectorRef,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Host,\n    EventEmitter,\n    Output,\n    ContentChild,\n    Inject\n} from '@angular/core';\nimport { IgxExpansionPanelIconDirective } from './expansion-panel.directives';\nimport { IExpansionPanelEventArgs, IGX_EXPANSION_PANEL_COMPONENT, IgxExpansionPanelBase } from './expansion-panel.common';\n\n/**\n * @hidden\n */\nexport enum ICON_POSITION {\n    LEFT = 'left',\n    NONE = 'none',\n    RIGHT = 'right'\n}\n\n\n@Component({\n    selector: 'igx-expansion-panel-header',\n    templateUrl: 'expansion-panel-header.component.html'\n})\nexport class IgxExpansionPanelHeaderComponent {\n     // properties section\n    private _iconTemplate = false;\n    /**\n     * Sets/gets the `id` of the expansion panel header.\n     * ```typescript\n     * let panelHeaderId =  this.panel.header.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    public id = '';\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxExpansionPanelIconDirective)\n    public set iconTemplate(val: any) {\n        this._iconTemplate = <boolean>val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get iconTemplate(): any {\n        return this._iconTemplate;\n    }\n\n    /**\n     * Gets/sets the `aria-level` attribute of the header\n     * Get\n     * ```typescript\n     *  const currentAriaLevel = this.panel.header.lv;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.lv = '5';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [lv]=\"myCustomLevel\"></igx-expansion-panel-header>\n     * ```\n     */\n    @HostBinding('attr.aria-level')\n    @Input()\n    public lv = '3';\n\n    /**\n     * Gets/sets the `role` attribute of the header\n     * Get\n     * ```typescript\n     *  const currentRole = this.panel.header.role;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.role = '5';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [role]=\"'custom'\"></igx-expansion-panel-header>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'heading';\n\n    /**\n     * @hidden\n     */\n    public get controls (): string {\n        return this.panel.id;\n    }\n\n    /**\n     * Gets/sets the position of the expansion-panel-header expand/collapse icon\n     * Accepts `left`, `right` or `none`\n     * ```typescript\n     *  const currentIconPosition = this.panel.header.iconPosition;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.iconPosition = 'left';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [iconPosition]=\"'right'\"></igx-expansion-panel-header>\n     * ```\n     */\n    @Input()\n    public iconPosition: ICON_POSITION = ICON_POSITION.LEFT;\n\n    /**\n     * Emitted whenever a user interacts with the header host\n     * ```typescript\n     *  handleInteraction(event: IExpansionPanelEventArgs) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header (onInteraction)=\"handleInteraction($event)\">\n     *      ...\n     *  </igx-expansion-panel-header>\n     * ```\n     */\n    @Output()\n    public onInteraction = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * @hidden\n     */\n     @HostBinding('class.igx-expansion-panel__header')\n     public cssClass = 'igx-expansion-panel__header';\n\n     /**\n     * @hidden\n     */\n     @HostBinding('class.igx-expansion-panel__header--expanded')\n     public get isExpanded () {\n            return !this.panel.collapsed;\n         }\n\n    /**\n     * Gets/sets the whether the header is disabled\n     * When disabled, the header will not handle user events and will stop their propagation\n     *\n     * ```typescript\n     *  const isDisabled = this.panel.header.disabled;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.disabled = true;\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [disabled]=\"true\">\n     *     ...\n     *  </igx-expansion-panel-header>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-expansion-panel--disabled')\n    public disabled = false;\n\n    constructor(@Host() @Inject(IGX_EXPANSION_PANEL_COMPONENT) public panel: IgxExpansionPanelBase, public cdr: ChangeDetectorRef,\n     public elementRef: ElementRef) {\n         this.id = `${this.panel.id}-header`;\n     }\n\n     /**\n     * @hidden\n     */\n     @HostListener('keydown.Enter', ['$event'])\n     @HostListener('keydown.Space', ['$event'])\n     @HostListener('keydown.Spacebar', ['$event'])\n     @HostListener('click', ['$event'])\n     public onAction(evt?: Event) {\n         if (this.disabled) {\n            evt.stopPropagation();\n            return;\n         }\n         this.onInteraction.emit({ event: evt, panel: this.panel });\n         this.panel.toggle(evt);\n         evt.preventDefault();\n     }\n\n    /** @hidden @internal */\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    public openPanel(event: KeyboardEvent) {\n        if (event.altKey) {\n            this.panel.expand(event);\n            this.onInteraction.emit({ event: event, panel: this.panel });\n        }\n     }\n\n     /** @hidden @internal */\n     @HostListener('keydown.Alt.ArrowUp', ['$event'])\n     public closePanel(event: KeyboardEvent) {\n        if (event.altKey) {\n            this.panel.collapse(event);\n            this.onInteraction.emit({ event: event, panel: this.panel });\n        }\n     }\n\n     /**\n     * @hidden\n     */\n     public get iconPositionClass(): string {\n        switch (this.iconPosition) {\n            case (ICON_POSITION.LEFT):\n                return `igx-expansion-panel__header-icon--start`;\n            case (ICON_POSITION.RIGHT):\n                return `igx-expansion-panel__header-icon--end`;\n            case (ICON_POSITION.NONE):\n                return `igx-expansion-panel__header-icon--none`;\n            default:\n                return '';\n        }\n     }\n}\n","import { EventEmitter, InjectionToken } from '@angular/core';\nimport { AnimationReferenceMetadata } from '@angular/animations';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport interface IgxExpansionPanelBase {\n    id: string;\n    cssClass: string;\n    /** @hidden @internal */\n    headerId: string;\n    collapsed: boolean;\n    animationSettings: { openAnimation: AnimationReferenceMetadata, closeAnimation: AnimationReferenceMetadata };\n    onCollapsed: EventEmitter<any>;\n    onExpanded: EventEmitter<any>;\n    collapse(evt?: Event);\n    expand(evt?: Event);\n    toggle(evt?: Event);\n}\n\n/** @hidden */\nexport const IGX_EXPANSION_PANEL_COMPONENT = new InjectionToken<IgxExpansionPanelBase>('IgxExpansionPanelToken');\n\nexport interface IExpansionPanelEventArgs extends IBaseEventArgs {\n    event: Event;\n    panel: IgxExpansionPanelBase;\n}\n","import { Component, HostBinding, ElementRef, Input, ChangeDetectorRef, Inject } from '@angular/core';\nimport { IgxExpansionPanelBase, IGX_EXPANSION_PANEL_COMPONENT } from './expansion-panel.common';\n\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-body',\n    template: `<ng-content></ng-content>`\n})\nexport class IgxExpansionPanelBodyComponent {\n    private _labelledBy = '';\n    private _label = '';\n    constructor(\n        @Inject(IGX_EXPANSION_PANEL_COMPONENT) public panel: IgxExpansionPanelBase,\n        public element: ElementRef, public cdr: ChangeDetectorRef) {\n    }\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-expansion-panel__body')\n    public cssClass = `igx-expansion-panel__body`;\n\n    /**\n     * Gets the `aria-label` attribute of the panel body\n     * Defaults to the panel id with '-region' in the end;\n     * Get\n     * ```typescript\n     *  const currentLabel = this.panel.body.label;\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-label')\n    public get label(): string {\n        return this._label || this.panel.id + '-region';\n    }\n    /**\n     * Sets the `aria-label` attribute of the panel body\n     * ```typescript\n     *  this.panel.body.label = 'my-custom-label';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [label]=\"'my-custom-label'\"></igx-expansion-panel-body>\n     * ```\n     */\n    public set label(val: string) {\n        this._label = val;\n    }\n\n    /**\n     * Gets the `aria-labelledby` attribute of the panel body\n     * Defaults to the panel header id;\n     * Get\n     * ```typescript\n     *  const currentLabel = this.panel.body.labelledBy;\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public get labelledBy(): string {\n        return this._labelledBy;\n    }\n    /**\n     * Sets the `aria-labelledby` attribute of the panel body\n     * ```typescript\n     *  this.panel.body.labelledBy = 'my-custom-id';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [labelledBy]=\"'my-custom-id'\"></igx-expansion-panel-body>\n     * ```\n     */\n    public set labelledBy(val: string) {\n        this._labelledBy = val;\n    }\n\n    /**\n     * Gets/sets the `role` attribute of the panel body\n     * Default is 'region';\n     * Get\n     * ```typescript\n     *  const currentRole = this.panel.body.role;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.body.role = 'content';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [role]=\"'custom'\"></igx-expansion-panel-body>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'region';\n}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-title'\n})\nexport class IgxExpansionPanelTitleDirective {\n    @HostBinding('class.igx-expansion-panel__header-title')\n    public cssClass = `igx-expansion-panel__header-title`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-description'\n})\nexport class IgxExpansionPanelDescriptionDirective {\n    @HostBinding('class.igx-expansion-panel__header-description')\n    public cssClass = `igx-expansion-panel__header-description`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-icon'\n})\nexport class IgxExpansionPanelIconDirective {\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    NgModule,\n    Output,\n    Optional,\n    QueryList,\n    Renderer2,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { IgxButtonDirective, IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { takeUntil } from 'rxjs/operators';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport enum ButtonGroupAlignment { horizontal, vertical }\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Button Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/buttongroup.html)\n *\n * The Ignite UI Button Group displays a group of buttons either vertically or horizontally.  The group supports\n * single, multiple and toggle selection.\n *\n * Example:\n * ```html\n * <igx-buttongroup multiSelection=\"true\" [values]=\"fontOptions\">\n * </igx-buttongroup>\n * ```\n * The `fontOptions` value shown above is defined as:\n * ```typescript\n * this.fontOptions = [\n *   { icon: 'format_bold', selected: false },\n *   { icon: 'format_italic', selected: false },\n *   { icon: 'format_underlined', selected: false }];\n * ```\n */\n@Component({\n    selector: 'igx-buttongroup',\n    templateUrl: 'buttongroup-content.component.html'\n})\n\nexport class IgxButtonGroupComponent extends DisplayDensityBase implements AfterContentInit, AfterViewInit, OnDestroy {\n\n    private _disabled = false;\n    protected buttonClickNotifier$ = new Subject<boolean>();\n    protected queryListNotifier$ = new Subject<boolean>();\n\n    @ViewChildren(IgxButtonDirective) private viewButtons: QueryList<IgxButtonDirective>;\n    @ContentChildren(IgxButtonDirective) private templateButtons: QueryList<IgxButtonDirective>;\n\n    /**\n     * A collection containing all buttons inside the button group.\n     */\n    public get buttons(): IgxButtonDirective[] {\n        return [...this.viewButtons.toArray(), ...this.templateButtons.toArray()];\n    }\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not set it will be automatically generated.\n     * ```html\n     *  <igx-buttongroup [id]=\"'igx-dialog-56'\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-buttongroup-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.zIndex')\n    public zIndex = 0;\n\n    /**\n     * Allows you to set a style using the `itemContentCssClass` input.\n     * The value should be the CSS class name that will be applied to the button group.\n     *```typescript\n     *public style1 = \"styleClass\";\n     * //..\n     *```\n     * ```html\n     *<igx-buttongroup [itemContentCssClass]=\"style1\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     *```\n     */\n    @Input() set itemContentCssClass(value: string) {\n        this._itemContentCssClass = value || this._itemContentCssClass;\n    }\n\n    /**\n     * Returns the CSS class of the item content of the `IgxButtonGroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *   let buttonSelect = this.buttonG.itemContentCssClass;\n     *}\n     *```\n     */\n    get itemContentCssClass(): string {\n        return this._itemContentCssClass;\n    }\n\n    /**\n     * An @Input property that enables selecting multiple buttons. By default, multi-selection is false.\n     * ```html\n     * <igx-buttongroup [multiSelection]=\"false\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public multiSelection = false;\n    /**\n     * An @Input property that allows setting the buttons in the button group.\n     * ```typescript\n     *  public ngOnInit() {\n     *      this.cities = [\n     *        new Button({\n     *          label: \"Sofia\"\n     *      }),\n     *        new Button({\n     *          label: \"London\"\n     *      }),\n     *        new Button({\n     *          label: \"New York\",\n     *          selected: true\n     *      }),\n     *        new Button({\n     *          label: \"Tokyo\"\n     *      })\n     *  ];\n     *  }\n     *  //..\n     * ```\n     * ```html\n     *  <igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public values: any;\n    /**\n     * An @Input property that allows you to disable the `igx-buttongroup` component. By default it's false.\n     * ```html\n     * <igx-buttongroup [disabled]=\"true\" [multiSelection]=\"multi\" [values]=\"fontOptions\"></igx-buttongroup>\n     * ```\n     */\n    @Input()\n    public get disabled(): boolean {\n        return this._disabled;\n    }\n    public set disabled(value: boolean) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this.viewButtons && this.templateButtons) {\n                this.buttons.forEach((b) => b.disabled = this._disabled);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectedIndexes: number[] = [];\n\n    /**\n     * Allows you to set the button group alignment.\n     * Available options are `ButtonGroupAlignment.horizontal` (default) and `ButtonGroupAlignment.vertical`.\n     * ```typescript\n     *public alignment = ButtonGroupAlignment.vertical;\n     * //..\n     * ```\n     * ```html\n     *<igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() set alignment(value: ButtonGroupAlignment) {\n        this._isVertical = value === ButtonGroupAlignment.vertical;\n    }\n    /**\n     * Returns the alignment of the `igx-buttongroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let buttonAlignment = this.buttonG.alignment;\n     *}\n     *```\n     */\n    get alignment(): ButtonGroupAlignment {\n        return this._isVertical ? ButtonGroupAlignment.vertical : ButtonGroupAlignment.horizontal;\n    }\n\n    /**\n     * An @Ouput property that emits an event when a button is selected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onSelect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * <igx-buttongroup #MyChild [multiSelection]=\"!multi\" (onSelect)=\"onSelect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have made a selection!\"></igx-toast>\n     *```\n     */\n    @Output() public onSelect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * An @Ouput property that emits an event when a button is deselected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onUnselect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * igx-buttongroup #MyChild [multiSelection]=\"multi\" (onUnselect)=\"onUnselect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have deselected a button!\"></igx-toast>\n     *```\n     */\n    @Output() public onUnselect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * Returns true if the `igx-buttongroup` alignment is vertical.\n     * Note that in order for the accessor to work correctly the property should be set explicitly.\n     * ```html\n     * <igx-buttongroup #MyChild [alignment]=\"alignment\" [values]=\"alignOptions\">\n     * ```\n     * ```typescript\n     * //...\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let orientation = this.buttonG.isVertical;\n     *}\n     *```\n     */\n    public get isVertical(): boolean {\n        return this._isVertical;\n    }\n    private _isVertical: boolean;\n    private _itemContentCssClass: string;\n\n    constructor(private _cdr: ChangeDetectorRef, private _renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Gets the selected button/buttons.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let selectedButton = this.buttonG.selectedButtons;\n     *}\n     *```\n     */\n    get selectedButtons(): IgxButtonDirective[] {\n        return this.buttons.filter((b, i) => {\n            return this.selectedIndexes.indexOf(i) !== -1;\n        });\n\n    }\n\n    /**\n     * Selects a button by its index.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.selectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     *```\n     * @memberOf {@link IgxButtonGroupComponent}\n     */\n    public selectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        this.selectedIndexes.push(index);\n        button.selected = true;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'true');\n        this._renderer.addClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onSelect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = true;\n        }\n\n        // deselect other buttons if multiSelection is not enabled\n        if (!this.multiSelection && this.selectedIndexes.length > 1) {\n            this.buttons.forEach((b, i) => {\n                if (i !== index && this.selectedIndexes.indexOf(i) !== -1) {\n                    this.deselectButton(i);\n                }\n            });\n        }\n    }\n\n    /**\n     * Deselects a button by its index.\n     * ```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.deselectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     * ```\n     * @memberOf {@link IgxButtonGroupComponent}\n     */\n    public deselectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        this.selectedIndexes.splice(this.selectedIndexes.indexOf(index), 1);\n        button.selected = false;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'false');\n        this._renderer.removeClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onUnselect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = false;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        this.templateButtons.forEach((button) => {\n            if (!button.initialDensity) {\n                button.displayDensity = this.displayDensity;\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        const initButtons = () => {\n            // Cancel any existing buttonClick subscriptions\n            this.buttonClickNotifier$.next();\n\n            this.selectedIndexes.splice(0, this.selectedIndexes.length);\n\n            // initial configuration\n            this.buttons.forEach((button, index) => {\n                const buttonElement = button.nativeElement;\n\n                if (this.disabled) {\n                    button.disabled = true;\n                }\n\n                if (button.selected) {\n                    this.selectButton(index);\n                }\n\n                button.buttonClick.pipe(takeUntil(this.buttonClickNotifier$)).subscribe((ev) => this._clickHandler(ev, index));\n                this._renderer.addClass(buttonElement, 'igx-button-group__item');\n            });\n        };\n\n        this.viewButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        this.templateButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        initButtons();\n\n        this._cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.buttonClickNotifier$.next();\n        this.buttonClickNotifier$.complete();\n\n        this.queryListNotifier$.next();\n        this.queryListNotifier$.complete();\n    }\n\n    /**\n     *@hidden\n     */\n    public _clickHandler(event, i) {\n        if (this.selectedIndexes.indexOf(i) !== -1) {\n            this.deselectButton(i);\n        } else {\n            this.selectButton(i);\n        }\n    }\n}\n\nexport interface IButtonGroupEventArgs extends IBaseEventArgs {\n    button: IgxButtonDirective;\n    index: number;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxButtonGroupComponent],\n    exports: [IgxButtonGroupComponent],\n    imports: [IgxButtonModule, CommonModule, IgxRippleModule, IgxIconModule]\n})\n\nexport class IgxButtonGroupModule {\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    ContentChild,\n    AfterContentInit\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, useAnimation } from '@angular/animations';\nimport { growVerOut, growVerIn } from '../animations/main';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IGX_EXPANSION_PANEL_COMPONENT, IgxExpansionPanelBase, IExpansionPanelEventArgs } from './expansion-panel.common';\n\nlet NEXT_ID = 0;\n\nexport interface AnimationSettings {\n    openAnimation: AnimationReferenceMetadata;\n    closeAnimation: AnimationReferenceMetadata;\n}\n@Component({\n    selector: 'igx-expansion-panel',\n    templateUrl: 'expansion-panel.component.html',\n    providers: [{ provide: IGX_EXPANSION_PANEL_COMPONENT, useExisting: IgxExpansionPanelComponent }]\n})\nexport class IgxExpansionPanelComponent implements IgxExpansionPanelBase, AfterContentInit {\n    private _collapsed = true;\n    /**\n     * Sets/gets the animation settings of the expansion panel component\n     * Open and Close animation should be passed\n     *\n     * Get\n     * ```typescript\n     *  const currentAnimations = this.panel.animationSettings;\n     * ```\n     * Set\n     * ```typescript\n     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     *  ...\n     *  this.panel.animationsSettings = {\n     *      openAnimation: slideInLeft,\n     *      closeAnimation: slideOutRight\n     * };\n     * ```\n     * or via template\n     * ```typescript\n     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     *  ...\n     *  myCustomAnimationObject = {\n     *      openAnimation: slideInLeft,\n     *      closeAnimation: slideOutRight\n     * };\n     * ```html\n     *  <igx-expansion-panel [animationSettings]='myCustomAnimationObject'>\n     *  ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Input()\n    public animationSettings: AnimationSettings = {\n        openAnimation: growVerIn,\n        closeAnimation: growVerOut\n    };\n\n    /**\n     * Sets/gets the `id` of the expansion panel component.\n     * If not set, `id` will have value `\"igx-expansion-panel-0\"`;\n     * ```html\n     * <igx-expansion-panel id = \"my-first-expansion-panel\"></igx-expansion-panel>\n     * ```\n     * ```typescript\n     * let panelId =  this.panel.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-expansion-panel-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-expansion-panel')\n    public cssClass = 'igx-expansion-panel';\n\n    /**\n     * Gets/sets whether the component is collapsed (its content is hidden)\n     * Get\n     * ```typescript\n     *  const myPanelState: boolean = this.panel.collapsed;\n     * ```\n     * Set\n     * ```html\n     *  this.panel.collapsed = true;\n     * ```\n     *\n     * Two-way data binding:\n     * ```html\n     * <igx-expansion-panel [(collapsed)]=\"model.isCollapsed\"></igx-expansion-panel>\n     * ```\n     */\n    @Input()\n    public get collapsed(): boolean {\n        return this._collapsed;\n    }\n    public set collapsed(value) {\n        this._collapsed = value;\n        this.collapsedChange.emit(this._collapsed);\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public collapsedChange = new EventEmitter<boolean>();\n\n    /**\n     * Emitted when the expansion panel finishes collapsing\n     * ```typescript\n     *  handleCollapsed(event: {\n     *  panel: IgxExpansionPanelComponent,\n     *  event: Event\n     * })\n     * ```\n     * ```html\n     *  <igx-expansion-panel (onCollapsed)=\"handleCollapsed($event)\">\n     *      ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Output()\n    public onCollapsed = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * Emitted when the expansion panel finishes expanding\n     * ```typescript\n     *  handleExpanded(event: {\n     *  panel: IgxExpansionPanelComponent,\n     *  event: Event\n     * })\n     * ```\n     * ```html\n     *  <igx-expansion-panel (onExpanded)=\"handleExpanded($event)\">\n     *      ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Output()\n    public onExpanded = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * @hidden\n     */\n    public get headerId() {\n        return this.header ? `${this.id}-header` : '';\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxExpansionPanelBodyComponent, { read: IgxExpansionPanelBodyComponent })\n    public body: IgxExpansionPanelBodyComponent;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxExpansionPanelHeaderComponent, { read: IgxExpansionPanelHeaderComponent })\n    public header: IgxExpansionPanelHeaderComponent;\n\n    constructor(private cdr: ChangeDetectorRef, private builder: AnimationBuilder) { }\n\n    /** @hidden */\n    ngAfterContentInit(): void {\n        if (this.body && this.header) {\n            // schedule at end of turn:\n            Promise.resolve().then(() => {\n                this.body.labelledBy = this.body.labelledBy || this.headerId;\n                this.body.label = this.body.label || this.id + '-region';\n            });\n        }\n    }\n\n    private playOpenAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.openAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const openAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n\n        openAnimationPlayer.onDone(() => {\n            cb();\n            openAnimationPlayer.reset();\n        });\n\n        openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.closeAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const closeAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n        closeAnimationPlayer.onDone(() => {\n            cb();\n            closeAnimationPlayer.reset();\n        });\n\n        closeAnimationPlayer.play();\n    }\n\n    /**\n     * Collapses the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.collapse($event)\">Collpase Panel</button>\n     * ```\n     */\n    collapse(evt?: Event) {\n        if (this.collapsed) { // If expansion panel is already collapsed, do nothing\n            return;\n        }\n        this.playCloseAnimation(\n            () => {\n                this.onCollapsed.emit({ event: evt, panel: this });\n                this.collapsed = true;\n            }\n        );\n    }\n\n    /**\n     * Expands the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.expand($event)\">Expand Panel</button>\n     * ```\n     */\n    expand(evt?: Event) {\n        if (!this.collapsed) { // If the panel is already opened, do nothing\n            return;\n        }\n        this.collapsed = false;\n        this.cdr.detectChanges();\n        this.playOpenAnimation(\n            () => {\n                this.onExpanded.emit({ event: evt, panel: this });\n            }\n        );\n    }\n\n    /**\n     * Toggles the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.toggle($event)\">Expand Panel</button>\n     * ```\n     */\n    toggle(evt?: Event) {\n        if (this.collapsed) {\n            this.open(evt);\n        } else {\n            this.close(evt);\n        }\n    }\n\n    open(evt?: Event) {\n        this.expand(evt);\n    }\n    close(evt?: Event) {\n        this.collapse(evt);\n    }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxExpansionPanelComponent } from './expansion-panel.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelDescriptionDirective, IgxExpansionPanelTitleDirective,\n  IgxExpansionPanelIconDirective } from './expansion-panel.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n    IgxExpansionPanelIconDirective\n  ],\n  entryComponents: [\n  ],\n  exports: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n      IgxExpansionPanelIconDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule\n  ]\n})\nexport class IgxExpansionPanelModule {\n}\n","import { Directive } from '@angular/core';\n\n// tslint:disable:directive-selector\n@Directive({\n    selector: 'igx-banner-actions'\n})\nexport class IgxBannerActionsDirective {\n}\n","import { Component, NgModule, EventEmitter, Output, Input, ViewChild, ElementRef,\n    ContentChild, HostBinding } from '@angular/core';\nimport { IgxExpansionPanelModule } from '../expansion-panel/expansion-panel.module';\nimport { AnimationSettings } from '../expansion-panel/expansion-panel.component';\nimport { IgxExpansionPanelComponent } from '../expansion-panel';\nimport { IgxIconModule, IgxIconComponent } from '../icon/index';\nimport { IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxBannerActionsDirective } from './banner.directives';\nimport { CommonModule } from '@angular/common';\nimport { CancelableEventArgs, IBaseEventArgs } from '../core/utils';\n\nexport interface BannerEventArgs extends IBaseEventArgs {\n    banner: IgxBannerComponent;\n    event?: Event;\n}\n\nexport interface BannerCancelEventArgs extends BannerEventArgs, CancelableEventArgs {\n}\n/**\n * **Ignite UI for Angular Banner** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/banner.html)\n *\n * The Ignite UI Banner provides a highly templateable and easy to use banner that can be shown in your application.\n *\n * Usage:\n *\n * ```html\n * <igx-banner #banner>\n *   Our privacy settings have changed.\n *  <igx-banner-actions>\n *      <button igxButton=\"raised\">Read More</button>\n *      <button igxButton=\"raised\">Accept and Continue</button>\n *  </igx-banner-actions>\n * </igx-banner>\n * ```\n */\n@Component({\n    selector: 'igx-banner',\n    templateUrl: 'banner.component.html'\n})\nexport class IgxBannerComponent implements IToggleView {\n    private _bannerEvent: BannerEventArgs;\n    private _animationSettings: AnimationSettings;\n\n    @ViewChild('expansionPanel', { static: true })\n    private _expansionPanel: IgxExpansionPanelComponent;\n\n    @ContentChild(IgxBannerActionsDirective)\n    private _bannerActionTemplate: IgxBannerActionsDirective;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxIconComponent)\n    public bannerIcon: IgxIconComponent;\n\n    /**\n     * Fires after the banner shows up\n     * ```typescript\n     * public handleOpened(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onOpened)=\"handleOpened($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<BannerEventArgs>();\n\n    /**\n     * Fires before the banner shows up\n     * ```typescript\n     * public handleOpening(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onOpening)=\"handleOpening($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<BannerCancelEventArgs>();\n\n    /**\n     * Fires after the banner hides\n     * ```typescript\n     * public handleClosed(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onClosed)=\"handleClosed($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<BannerEventArgs>();\n\n    /**\n     * Fires before the banner hides\n     * ```typescript\n     * public handleClosing(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onClosing)=\"handleClosing($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<BannerCancelEventArgs>();\n\n    /** @hidden */\n    public get useDefaultTemplate(): boolean {\n        return !this._bannerActionTemplate;\n    }\n\n    /**\n     * Get the animation settings used by the banner open/close methods\n     * ```typescript\n     * let currentAnimations: AnimationSettings = banner.animationSettings\n     * ```\n     */\n    @Input()\n    public get animationSettings(): AnimationSettings {\n        return this._animationSettings ? this._animationSettings : this._expansionPanel.animationSettings;\n    }\n\n    /**\n     * Set the animation settings used by the banner open/close methods\n     * ```typescript\n     * import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     * ...\n     * banner.animationSettings: AnimationSettings = { openAnimation: slideInLeft, closeAnimation: slideOutRight };\n     * ```\n     */\n    public set animationSettings(settings: AnimationSettings) {\n        this._animationSettings = settings;\n    }\n    /**\n     * Gets whether banner is collapsed\n     *\n     * ```typescript\n     * const isCollapsed: boolean = banner.collapsed;\n     * ```\n     */\n    public get collapsed() {\n        return this._expansionPanel.collapsed;\n    }\n\n    /**\n     * Returns the native element of the banner component\n     * ```typescript\n     *  const myBannerElement: HTMLElement = banner.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display')\n    public get displayStyle(): string {\n        return this.collapsed ? '' : 'block';\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /**\n     * Opens the banner\n     *\n     * ```typescript\n     *  myBanner.open();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.open()\">Open Banner</button>\n     * ```\n     */\n    public open(event?: Event) {\n        this._bannerEvent = { banner: this, event};\n        const openingArgs = {\n            banner: this,\n            event,\n            cancel: false\n        };\n        this.onOpening.emit(openingArgs);\n        if (openingArgs.cancel) {\n            return;\n        }\n        this._expansionPanel.open(event);\n    }\n\n    /**\n     * Closes the banner\n     *\n     * ```typescript\n     *  myBanner.close();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.close()\">Close Banner</button>\n     * ```\n     */\n    public close(event?: Event) {\n        this._bannerEvent = { banner: this, event};\n        const closingArgs = {\n            banner: this,\n            event,\n            cancel: false\n        };\n        this.onClosing.emit(closingArgs);\n        if (closingArgs.cancel) {\n            return;\n        }\n        this._expansionPanel.close(event);\n    }\n\n    /**\n     * Toggles the banner\n     *\n     * ```typescript\n     *  myBanner.toggle();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.toggle()\">Toggle Banner</button>\n     * ```\n     */\n    toggle(event?: Event) {\n        if (this.collapsed) {\n            this.open(event);\n        } else {\n            this.close(event);\n        }\n    }\n\n    /** @hidden */\n    public onExpansionPanelOpen() {\n        this.onOpened.emit(this._bannerEvent);\n    }\n\n    /** @hidden */\n    public onExpansionPanelClose() {\n        this.onClosed.emit(this._bannerEvent);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBannerComponent, IgxBannerActionsDirective],\n    exports: [IgxBannerComponent, IgxBannerActionsDirective],\n    imports: [CommonModule, IgxExpansionPanelModule, IgxIconModule, IgxButtonModule, IgxRippleModule]\n})\nexport class IgxBannerModule { }\n","export interface DateRangeDescriptor {\n    type: DateRangeType;\n    dateRange?: Date[];\n}\n\nexport enum DateRangeType {\n    After,\n    Before,\n    Between,\n    Specific,\n    Weekdays,\n    Weekends\n}\n","import { DateRangeDescriptor, DateRangeType } from '../core/dates';\n\n/**\n * @hidden\n */\nenum TimeDeltaInterval {\n    Month = 'month',\n    Year = 'year'\n}\n\nconst MDAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst FEBRUARY = 1;\n\nexport function range(start = 0, stop, step = 1) {\n    const res = [];\n    const cur = (stop === undefined) ? 0 : start;\n    const max = (stop === undefined) ? start : stop;\n    for (let i = cur; step < 0 ? i > max : i < max; i += step) {\n        res.push(i);\n    }\n    return res;\n}\n\n/**\n * Returns true for leap years, false for non-leap years.\n *\n * @export\n * @param year\n * @returns\n */\nexport function isLeap(year: number): boolean {\n    return (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0));\n}\n\nexport function weekDay(year: number, month: number, day: number): number {\n    return new Date(year, month, day).getDay();\n}\n\n/**\n * Return weekday and number of days for year, month.\n *\n * @export\n * @param year\n * @param month\n * @returns\n */\nexport function monthRange(year: number, month: number): number[] {\n    if ((month < 0) || (month > 11)) {\n        throw new Error('Invalid month specified');\n    }\n    const day = weekDay(year, month, 1);\n    let nDays = MDAYS[month];\n    if ((month === FEBRUARY) && (isLeap(year))) {\n        nDays++;\n    }\n    return [day, nDays];\n}\n\nexport function isDateInRanges(date: Date, ranges: DateRangeDescriptor[]): boolean {\n    date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    const dateInMs = date.getTime();\n\n    if (!ranges) {\n        return false;\n    }\n\n    for (const descriptor of ranges) {\n        const dRanges = descriptor.dateRange ? descriptor.dateRange.map(\n            r => new Date(r.getFullYear(), r.getMonth(), r.getDate())) : undefined;\n        switch (descriptor.type) {\n            case (DateRangeType.After):\n                if (dateInMs > dRanges[0].getTime()) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Before):\n                if (dateInMs < dRanges[0].getTime()) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Between):\n                const dRange = dRanges.map(d => d.getTime());\n                const min = Math.min(dRange[0], dRange[1]);\n                const max = Math.max(dRange[0], dRange[1]);\n                if (dateInMs >= min && dateInMs <= max) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Specific):\n                const datesInMs = dRanges.map(d => d.getTime());\n                for (const specificDateInMs of datesInMs) {\n                    if (dateInMs === specificDateInMs) {\n                        return true;\n                    }\n                }\n\n                break;\n            case (DateRangeType.Weekdays):\n                const day = date.getDay();\n                if (day % 6 !== 0) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Weekends):\n                const weekday = date.getDay();\n                if (weekday % 6 === 0) {\n                    return true;\n                }\n\n                break;\n            default:\n                return false;\n        }\n    }\n\n    return false;\n}\n\nexport interface ICalendarDate {\n    date: Date;\n    isCurrentMonth: boolean;\n    isPrevMonth: boolean;\n    isNextMonth: boolean;\n}\n\nexport interface IFormattedParts {\n    value: string;\n    literal?: string;\n    combined: string;\n}\n\nexport interface IFormattingOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n\n\nexport interface IFormattingViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\nexport enum WEEKDAYS {\n    SUNDAY = 0,\n    MONDAY = 1,\n    TUESDAY = 2,\n    WEDNESDAY = 3,\n    THURSDAY = 4,\n    FRIDAY = 5,\n    SATURDAY = 6\n}\n\nexport class Calendar {\n\n    private _firstWeekDay: number | WEEKDAYS;\n\n    constructor(firstWeekDay: number | WEEKDAYS = WEEKDAYS.SUNDAY) {\n        this._firstWeekDay = firstWeekDay;\n    }\n\n    public get firstWeekDay(): number {\n        return this._firstWeekDay % 7;\n    }\n\n    public set firstWeekDay(value: number) {\n        this._firstWeekDay = value;\n    }\n\n    /**\n     * Returns an array of weekdays for one week starting\n     * with the currently set `firstWeekDay`\n     *\n     * this.firstWeekDay = 0 (Sunday) --> [0, 1, 2, 3, 4, 5, 6]\n     * this.firstWeekDay = 1 (Monday) --> [1, 2, 3, 4, 5, 6, 0]\n     *\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public weekdays(): number[] {\n        const res = [];\n        for (const i of range(this.firstWeekDay, this.firstWeekDay + 7)) {\n            res.push(i % 7);\n        }\n        return res;\n    }\n\n    /**\n     * Returns the date values for one month. It will always iterate throught\n     * complete weeks, so it will contain dates outside the specified month.\n     *\n     * @param year\n     * @param month\n     * @param boolean\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdates(year: number, month: number, extraWeek: boolean = false): ICalendarDate[] {\n        let date = new Date(year, month, 1);\n        let days = (date.getDay() - this.firstWeekDay) % 7;\n        if (days < 0) {\n            days = 7 - Math.abs(days);\n        }\n        date = this.timedelta(date, 'day', -days);\n        const res = [];\n        let value: ICalendarDate;\n\n        while (true) {\n\n            value = this.generateICalendarDate(date, year, month);\n            res.push(value);\n\n            date = this.timedelta(date, 'day', 1);\n\n            if ((date.getMonth() !== month) && (date.getDay() === this.firstWeekDay)) {\n                if (extraWeek && res.length <= 35) {\n                    for (const _ of range(0, 7)) {\n                        value = this.generateICalendarDate(date, year, month);\n                        res.push(value);\n                        date = this.timedelta(date, 'day', 1);\n                    }\n                }\n                break;\n            }\n        }\n        return res;\n    }\n\n    /**\n     * Returns a matrix (array of arrays) representing a month's calendar.\n     * Each row represents a full week; week entries are ICalendarDate objects.\n     *\n     * @param year\n     * @param month\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdatescalendar(year: number, month: number, extraWeek: boolean = false): ICalendarDate[][] {\n        const dates = this.monthdates(year, month, extraWeek);\n        const res = [];\n        for (const i of range(0, dates.length, 7)) {\n            res.push(dates.slice(i, i + 7));\n        }\n        return res;\n    }\n\n    public timedelta(date: Date, interval: string, units: number): Date {\n        const ret = new Date(date);\n\n        const checkRollover = () => {\n            if (ret.getDate() !== date.getDate()) {\n                ret.setDate(0);\n            }\n        };\n\n        switch (interval.toLowerCase()) {\n            case 'year':\n                ret.setFullYear(ret.getFullYear() + units);\n                checkRollover();\n                break;\n            case 'quarter':\n                ret.setMonth(ret.getMonth() + 3 * units);\n                checkRollover();\n                break;\n            case 'month':\n                ret.setMonth(ret.getMonth() + units);\n                checkRollover();\n                break;\n            case 'week':\n                ret.setDate(ret.getDate() + 7 * units);\n                break;\n            case 'day':\n                ret.setDate(ret.getDate() + units);\n                break;\n            case 'hour':\n                ret.setTime(ret.getTime() + units * 3600000);\n                break;\n            case 'minute':\n                ret.setTime(ret.getTime() + units * 60000);\n                break;\n            case 'second':\n                ret.setTime(ret.getTime() + units * 1000);\n                break;\n            default:\n                throw new Error('Invalid interval specifier');\n        }\n        return ret;\n    }\n\n    public formatToParts(date: Date, locale: string, options: any, parts: string[]) {\n        const formatter = new Intl.DateTimeFormat(locale, options);\n        const result = {\n            date,\n            full: formatter.format(date)\n        };\n\n        if ((formatter as any).formatToParts) {\n            const formattedParts = (formatter as any).formatToParts(date);\n\n            const toType = (partType: string) => {\n                const index = formattedParts.findIndex(({ type }) => type === partType);\n                const o: IFormattedParts = { value: '', literal: '', combined: '' };\n\n                if (partType === 'era' && index > -1) {\n                    o.value = formattedParts[index].value;\n                    return o;\n                } else if (partType === 'era' && index === -1) {\n                    return o;\n                }\n\n                o.value = formattedParts[index].value;\n                o.literal = formattedParts[index + 1] ? formattedParts[index + 1].value : '';\n                o.combined = [o.value, o.literal].join('');\n                return o;\n            };\n\n            for (const each of parts) {\n                result[each] = toType(each);\n            }\n        } else {\n            for (const each of parts) {\n                result[each] = { value: '', literal: '', combined: '' };\n            }\n        }\n        return result;\n    }\n\n    public getFirstViewDate(date: Date, interval: string, activeViewIdx: number) {\n        return this.timedelta(date, interval, -activeViewIdx);\n    }\n\n    public getNextMonth(date: Date) {\n        return this.timedelta(date, TimeDeltaInterval.Month, 1);\n    }\n\n    public getPrevMonth(date: Date) {\n        return this.timedelta(date, TimeDeltaInterval.Month, -1);\n    }\n\n    public getNextYear(date: Date) {\n        return this.timedelta(date, TimeDeltaInterval.Year, 1);\n    }\n\n    public getPrevYear(date: Date) {\n        return this.timedelta(date, TimeDeltaInterval.Year, -1);\n    }\n\n    private generateICalendarDate(date: Date, year: number, month: number): ICalendarDate {\n        return {\n            date,\n            isCurrentMonth: date.getFullYear() === year && date.getMonth() === month,\n            isNextMonth: this.isNextMonth(date, year, month),\n            isPrevMonth: this.isPreviousMonth(date, year, month)\n        };\n    }\n\n    private isPreviousMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() < month;\n        }\n        return date.getFullYear() < year;\n    }\n\n    private isNextMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() > month;\n        }\n\n        return date.getFullYear() > year;\n    }\n}\n","import { Input, Output, EventEmitter, Directive } from '@angular/core';\nimport { WEEKDAYS, Calendar, isDateInRanges, IFormattingOptions, IFormattingViews } from './calendar';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { DateRangeDescriptor } from '../core/dates';\nimport { Subject } from 'rxjs';\nimport { isDate } from '../core/utils';\n\n/**\n * Sets the selction type - single, multi or range.\n */\nexport enum CalendarSelection {\n    SINGLE = 'single',\n    MULTI = 'multi',\n    RANGE = 'range'\n}\n\nexport enum ScrollMonth {\n    PREV = 'prev',\n    NEXT = 'next',\n    NONE = 'none'\n}\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxCalendarBase]'\n})\nexport class IgxCalendarBaseDirective implements ControlValueAccessor {\n    /**\n     * Gets the start day of the week.\n     * Can return a numeric or an enum representation of the week day.\n     * Defaults to `Sunday` / `0`.\n     */\n    @Input()\n    public get weekStart(): WEEKDAYS | number {\n        return this.calendarModel.firstWeekDay;\n    }\n\n    /**\n     * Sets the start day of the week.\n     * Can be assigned to a numeric value or to `WEEKDAYS` enum value.\n     */\n    public set weekStart(value: WEEKDAYS | number) {\n        this.calendarModel.firstWeekDay = value;\n    }\n\n    /**\n     * Gets the `locale` of the calendar.\n     * Default value is `\"en\"`.\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the calendar.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initFormatters();\n    }\n\n    /**\n     * Gets the date format options of the days view.\n     */\n    @Input()\n    public get formatOptions(): IFormattingOptions {\n        return this._formatOptions;\n    }\n\n    /**\n     * Sets the date format options of the days view.\n     * Default is { day: 'numeric', month: 'short', weekday: 'short', year: 'numeric' }\n     */\n    public set formatOptions(formatOptions: IFormattingOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n        this.initFormatters();\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     */\n    @Input()\n    public get formatViews(): IFormattingViews {\n        return this._formatViews;\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     */\n    public set formatViews(formatViews: IFormattingViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     *\n     * Gets the selection type.\n     * Default value is `\"single\"`.\n     * Changing the type of selection resets the currently\n     * selected values if any.\n     */\n    @Input()\n    public get selection(): string {\n        return this._selection;\n    }\n\n    /**\n     * Sets the selection.\n     */\n    public set selection(value: string) {\n        switch (value) {\n            case CalendarSelection.SINGLE:\n                this.selectedDates = null;\n                break;\n            case CalendarSelection.MULTI:\n            case CalendarSelection.RANGE:\n                this.selectedDates = [];\n                break;\n            default:\n                throw new Error('Invalid selection value');\n        }\n        this._onChangeCallback(this.selectedDates);\n        this.rangeStarted = false;\n        this._selection = value;\n    }\n\n    /**\n     * Gets the selected date(s).\n     *\n     * When selection is set to `single`, it returns\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     */\n    @Input()\n    public get value(): Date | Date[] {\n        return this.selectedDates;\n    }\n\n    /**\n     * Sets the selected date(s).\n     *\n     * When selection is set to `single`, it accepts\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     */\n    public set value(value: Date | Date[]) {\n        if (!value || !!value && (value as Date[]).length === 0) {\n            return;\n        }\n\n        this.selectDate(value);\n    }\n\n    /**\n     * Gets the date that is presented.\n     * By default it is the current date.\n     */\n    @Input()\n    public get viewDate(): Date {\n        return this._viewDate;\n    }\n\n    /**\n     * Sets the date that will be presented in the default view when the component renders.\n     */\n    public set viewDate(value: Date) {\n        this._viewDate = this.getDateOnly(value);\n    }\n\n    /**\n     * Gets the disabled dates descriptors.\n     */\n    @Input()\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgxCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.disabledDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     */\n    @Input()\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgxCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.specialDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    /**\n     * Sets/gets whether the outside dates (dates that are out of the current month) will be hidden.\n     * Default value is `false`.\n     * ```html\n     * <igx-calendar [hideOutsideDays] = \"true\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let hideOutsideDays = this.calendar.hideOutsideDays;\n     * ```\n     */\n\n    @Input()\n    public hideOutsideDays = false;\n\n    /**\n     * Emits an event when a date is selected.\n     * Provides reference the `selectedDates` property.\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date | Date[]>();\n\n    /**\n     *@hidden\n     */\n    private _selection: CalendarSelection | string = CalendarSelection.SINGLE;\n\n    /**\n     *@hidden\n     */\n    public rangeStarted = false;\n\n    /**\n    *@hidden\n    */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _viewDate: Date;\n\n    /**\n     *@hidden\n     */\n    private _disabledDates: DateRangeDescriptor[] = null;\n\n    /**\n     *@hidden\n     */\n    private _specialDates: DateRangeDescriptor[] = null;\n\n    /**\n     *@hidden\n     */\n    private _formatOptions: IFormattingOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n\n    /**\n     *@hidden\n     */\n    private _formatViews: IFormattingViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n\n    /**\n     *@hidden\n     */\n    protected formatterWeekday;\n\n    /**\n     *@hidden\n     */\n    protected formatterDay;\n\n    /**\n     *@hidden\n     */\n    protected formatterMonth;\n\n    /**\n     *@hidden\n     */\n    protected formatterYear;\n\n    /**\n     *@hidden\n     */\n    protected formatterMonthday;\n\n    /**\n     *@hidden\n     */\n    protected calendarModel: Calendar;\n\n    /**\n     * @hidden\n     */\n    public monthScrollDirection = ScrollMonth.NONE;\n\n    /**\n     *@hidden\n     */\n    public scrollMonth$ = new Subject();\n\n    /**\n     *@hidden\n     */\n    public stopMonthScroll$ = new Subject<boolean>();\n\n    /**\n     *@hidden\n     */\n    public startMonthScroll$ = new Subject();\n\n    /**\n     *@hidden\n     */\n    public selectedDates;\n\n    /**\n     *@hidden\n     */\n    protected _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    protected _onChangeCallback: (_: Date) => void = () => { };\n\n    /**\n     * @hidden\n     */\n    constructor() {\n        this.calendarModel = new Calendar();\n\n        this.viewDate = this.viewDate ? this.viewDate : new Date();\n\n        this.calendarModel.firstWeekDay = this.weekStart;\n        this.initFormatters();\n    }\n\n    /**\n     *@hidden\n     */\n    private getDateOnlyInMs(date: Date) {\n        return this.getDateOnly(date).getTime();\n    }\n\n    /**\n     *@hidden\n     */\n    private generateDateRange(start: Date, end: Date): Date[] {\n        const result = [];\n        start = this.getDateOnly(start);\n        end = this.getDateOnly(end);\n        while (start.getTime() !== end.getTime()) {\n            start = this.calendarModel.timedelta(start, 'day', 1);\n            result.push(start);\n        }\n\n        return result;\n    }\n\n    /**\n     * Performs a single selection.\n     * @hidden\n     */\n    private selectSingle(value: Date) {\n        this.selectedDates = this.getDateOnly(value);\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a multiple selection\n     * @hidden\n     */\n    private selectMultiple(value: Date | Date[]) {\n        if (Array.isArray(value)) {\n            const newDates = value.map(v => this.getDateOnly(v).getTime());\n            const selDates = this.selectedDates.map(v => this.getDateOnly(v).getTime());\n\n            if (JSON.stringify(newDates) === JSON.stringify(selDates)) {\n                return;\n            }\n\n            this.selectedDates = Array.from(new Set([...newDates, ...selDates])).map(v => new Date(v));\n        } else {\n            const valueDateOnly = this.getDateOnly(value);\n            const newSelection = [];\n            if (this.selectedDates.every((date: Date) => date.getTime() !== valueDateOnly.getTime())) {\n                newSelection.push(valueDateOnly);\n            } else {\n                this.selectedDates = this.selectedDates.filter(\n                    (date: Date) => date.getTime() !== valueDateOnly.getTime()\n                );\n            }\n\n            if (newSelection.length > 0) {\n                this.selectedDates = this.selectedDates.concat(newSelection);\n            }\n        }\n        this.selectedDates = this.selectedDates.filter(d => !this.isDateDisabled(d));\n        this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     *@hidden\n     */\n    private selectRange(value: Date | Date[], excludeDisabledDates: boolean = false) {\n        let start: Date;\n        let end: Date;\n\n        if (Array.isArray(value)) {\n            // this.rangeStarted = false;\n            value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n            start = this.getDateOnly(value[0]);\n            end = this.getDateOnly(value[value.length - 1]);\n            this.selectedDates = [start, ...this.generateDateRange(start, end)];\n        } else {\n            if (!this.rangeStarted) {\n                this.rangeStarted = true;\n                this.selectedDates = [value];\n            } else {\n                this.rangeStarted = false;\n\n                if (this.selectedDates[0].getTime() === value.getTime()) {\n                    this.selectedDates = [];\n                    this._onChangeCallback(this.selectedDates);\n                    return;\n                }\n\n                this.selectedDates.push(value);\n                this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n\n                start = this.selectedDates.shift();\n                end = this.selectedDates.pop();\n                this.selectedDates = [start, ...this.generateDateRange(start, end)];\n            }\n        }\n\n        if (excludeDisabledDates) {\n            this.selectedDates = this.selectedDates.filter(d => !this.isDateDisabled(d));\n        }\n\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a single deselection.\n     * @hidden\n     */\n    private deselectSingle(value: Date) {\n        if (this.selectedDates !== null &&\n            this.getDateOnlyInMs(value as Date) === this.getDateOnlyInMs(this.selectedDates)) {\n            this.selectedDates = null;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs a multiple deselection.\n     * @hidden\n     */\n    private deselectMultiple(value: Date[]) {\n        value = value.filter(v => v !== null);\n        const selectedDatesCount = this.selectedDates.length;\n        const datesInMsToDeselect: Set<number> = new Set<number>(\n            value.map(v => this.getDateOnlyInMs(v)));\n\n        for (let i = this.selectedDates.length - 1; i >= 0; i--) {\n            if (datesInMsToDeselect.has(this.getDateOnlyInMs(this.selectedDates[i]))) {\n                this.selectedDates.splice(i, 1);\n            }\n        }\n\n        if (this.selectedDates.length !== selectedDatesCount) {\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs deselection of a single value, when selection is multi\n     * Usually performed by the selectMultiple method, but leads to bug when multiple months are in view\n     * @hidden\n     */\n    public deselectMultipleInMonth(value: Date) {\n        const valueDateOnly = this.getDateOnly(value);\n        this.selectedDates = this.selectedDates.filter(\n            (date: Date) => date.getTime() !== valueDateOnly.getTime()\n        );\n    }\n\n    /**\n     * Performs a range deselection.\n     * @hidden\n     */\n    private deselectRange(value: Date[]) {\n        value = value.filter(v => v !== null);\n        if (value.length < 1) {\n            return;\n        }\n\n        value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const valueStart = this.getDateOnlyInMs(value[0]);\n        const valueEnd = this.getDateOnlyInMs(value[value.length - 1]);\n\n        this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const selectedDatesStart = this.getDateOnlyInMs(this.selectedDates[0]);\n        const selectedDatesEnd = this.getDateOnlyInMs(this.selectedDates[this.selectedDates.length - 1]);\n\n        if (!(valueEnd < selectedDatesStart) && !(valueStart > selectedDatesEnd)) {\n            this.selectedDates = [];\n            this.rangeStarted = false;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected initFormatters() {\n        this.formatterDay = new Intl.DateTimeFormat(this._locale, { day: this._formatOptions.day });\n        this.formatterWeekday = new Intl.DateTimeFormat(this._locale, { weekday: this._formatOptions.weekday });\n        this.formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month });\n        this.formatterYear = new Intl.DateTimeFormat(this._locale, { year: this._formatOptions.year });\n        this.formatterMonthday = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month, day: this._formatOptions.day });\n    }\n\n    /**\n     *@hidden\n     */\n    protected getDateOnly(date: Date) {\n        return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date | Date[]) {\n        this.selectDate(value as Date);\n    }\n\n    /**\n     * Checks whether a date is disabled.\n     * @hidden\n     */\n    public isDateDisabled(date: Date) {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(date, this.disabledDates);\n    }\n\n    /**\n     * Selects date(s) (based on the selection type).\n     */\n    public selectDate(value: Date | Date[]) {\n        if (value === null || value === undefined || (Array.isArray(value) && value.length === 0)) {\n            return;\n        }\n\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n                if (isDate(value) && !this.isDateDisabled(value as Date)) {\n                    this.selectSingle(value as Date);\n                }\n                break;\n            case CalendarSelection.MULTI:\n                this.selectMultiple(value);\n                break;\n            case CalendarSelection.RANGE:\n                this.selectRange(value, true);\n                break;\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     */\n    public deselectDate(value?: Date | Date[]) {\n        if (!this.selectedDates || this.selectedDates.length === 0) {\n            return;\n        }\n\n        if (value === null || value === undefined) {\n            this.selectedDates = this.selection === CalendarSelection.SINGLE ? null : [];\n            this.rangeStarted = false;\n            this._onChangeCallback(this.selectedDates);\n            return;\n        }\n\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n                this.deselectSingle(value as Date);\n                break;\n            case CalendarSelection.MULTI:\n                this.deselectMultiple(value as Date[]);\n                break;\n            case CalendarSelection.RANGE:\n                this.deselectRange(value as Date[]);\n                break;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectDateFromClient(value: Date) {\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n            case CalendarSelection.MULTI:\n                this.selectDate(value);\n                break;\n            case CalendarSelection.RANGE:\n                this.selectRange(value, true);\n                break;\n        }\n    }\n}\n","/**\n * This file contains all the directives used by the @link IgxCalendarComponent.\n * Except for the directives which are used for templating the calendar itself\n * you should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    Output,\n    TemplateRef,\n    ElementRef,\n    AfterViewInit,\n    OnDestroy,\n    NgZone\n} from '@angular/core';\nimport { fromEvent, Subject, interval } from 'rxjs';\nimport { takeUntil, debounce, tap } from 'rxjs/operators';\nimport { KEYS } from '../core/utils';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarYear]'\n})\nexport class IgxCalendarYearDirective {\n\n    @Input('igxCalendarYear')\n    public value: Date;\n\n    @Input()\n    public date: Date;\n\n    @Output()\n    public onYearSelection = new EventEmitter<Date>();\n\n    @HostBinding('class.igx-calendar__year')\n    public get defaultCSS(): boolean {\n        return !this.isCurrentYear;\n    }\n\n    @HostBinding('class.igx-calendar__year--current')\n    public get currentCSS(): boolean {\n        return this.isCurrentYear;\n    }\n\n    public get isCurrentYear(): boolean {\n        return this.date.getFullYear() === this.value.getFullYear();\n    }\n\n    @HostListener('click')\n    public onClick() {\n        this.onYearSelection.emit(this.value);\n    }\n}\n\n@Directive({\n    selector: '[igxCalendarMonth]'\n})\nexport class IgxCalendarMonthDirective {\n\n    @Input('igxCalendarMonth')\n    public value: Date;\n\n    @Input()\n    public date: Date;\n\n    @Input()\n    public index;\n\n    @Output()\n    public onMonthSelection = new EventEmitter<Date>();\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-calendar__month')\n    public get defaultCSS(): boolean {\n        return !this.isCurrentMonth;\n    }\n\n    @HostBinding('class.igx-calendar__month--current')\n    public get currentCSS(): boolean {\n        return this.isCurrentMonth;\n    }\n\n    public get isCurrentMonth(): boolean {\n        return this.date.getMonth() === this.value.getMonth();\n    }\n\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    constructor(public elementRef: ElementRef) {}\n\n    @HostListener('click')\n    public onClick() {\n        const date = new Date(this.value.getFullYear(), this.value.getMonth(), this.date.getDate());\n        this.onMonthSelection.emit(date);\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarHeader]'\n})\nexport class IgxCalendarHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarSubheader]'\n})\nexport class IgxCalendarSubheaderTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarScrollMonth]'\n})\nexport class IgxCalendarScrollMonthDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * A callback function to be invoked when month increment/decrement starts.\n     * @hidden\n     */\n    @Input()\n    public startScroll: (keydown?: boolean) => {};\n\n    /**\n     * A callback function to be invoked when month increment/decrement stops.\n     * @hidden\n     */\n    @Input()\n    public stopScroll: (event: any) => {};\n\n    /**\n     * @hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    constructor(private element: ElementRef, private zone: NgZone) { }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n\n        fromEvent(this.element.nativeElement, 'keyup').pipe(\n            debounce(() => interval(100)),\n            takeUntil(this.destroy$)\n        ).subscribe((event: KeyboardEvent) => {\n            this.stopScroll(event);\n        });\n\n        this.zone.runOutsideAngular(() => {\n            fromEvent(this.element.nativeElement, 'keydown').pipe(\n                tap((event: KeyboardEvent) => {\n                    if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n                        event.preventDefault();\n                        event.stopPropagation();\n                    }\n                }),\n                debounce(() => interval(100)),\n                takeUntil(this.destroy$)\n            ).subscribe((event: KeyboardEvent) => {\n                if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n                    this.zone.run(() => this.startScroll(true));\n                }\n            });\n        });\n\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mousedown')\n    public onMouseDown() {\n        this.startScroll();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseup', ['$event'])\n    public onMouseUp(event: MouseEvent) {\n        this.stopScroll(event);\n    }\n}\n","import { IgxCalendarBaseDirective } from './calendar-base';\nimport { HostBinding, Directive, ViewChildren, ElementRef, QueryList } from '@angular/core';\nimport { KEYS } from '../core/utils';\n\n/**\n * Sets the calender view - days, months or years.\n */\nexport enum CalendarView {\n    DEFAULT,\n    YEAR,\n    DECADE\n}\n@Directive({\n    selector: '[igxMonthPickerBase]'\n})\nexport class IgxMonthPickerBaseDirective extends IgxCalendarBaseDirective {\n\n    /**\n     * Holds month view index we are operating on.\n     */\n    protected activeViewIdx = 0;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren('yearsBtn')\n    public yearsBtns: QueryList<ElementRef>;\n\n\n    /**\n     * Gets the current active view.\n     */\n    public get activeView(): CalendarView {\n        return this._activeView;\n    }\n\n    /**\n     * Sets the current active view.\n     */\n    public set activeView(val: CalendarView) {\n        this._activeView = val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isDefaultView(): boolean {\n        return this._activeView === CalendarView.DEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isDecadeView(): boolean {\n        return this._activeView === CalendarView.DECADE;\n    }\n\n    /**\n     *@hidden\n     */\n    private _activeView = CalendarView.DEFAULT;\n\n    /**\n     * @hidden\n     */\n    public changeYear(event: Date) {\n        this.viewDate = this.calendarModel.getFirstViewDate(event, 'month', this.activeViewIdx);\n        this.activeView = CalendarView.DEFAULT;\n\n        requestAnimationFrame(() => {\n            if (this.yearsBtns && this.yearsBtns.length) {\n                this.yearsBtns.find((e: ElementRef, idx: number) => idx === this.activeViewIdx).nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade(activeViewIdx = 0): void {\n        this._activeView = CalendarView.DECADE;\n        this.activeViewIdx = activeViewIdx;\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event, activeViewIdx = 0) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            this.activeViewDecade(activeViewIdx);\n        }\n    }\n\n    /**\n     * Returns the locale representation of the year in the year view if enabled,\n     * otherwise returns the default `Date.getFullYear()` value.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this.formatViews.year) {\n            return this.formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { IgxDayItemComponent } from './day-item.component';\nimport { IgxDaysViewComponent } from './days-view.component';\nimport { ScrollMonth } from '../calendar-base';\n\nenum Direction {\n    Up = 'ArrowUp',\n    Down = 'ArrowDown',\n    Left = 'ArrowLeft',\n    Right = 'ArrowRight',\n}\n\nconst ARROW = 'Arrow';\n\n/** @hidden */\n@Injectable()\nexport class IgxDaysViewNavigationService {\n    public monthView: IgxDaysViewComponent;\n    /**\n     * Implements kb navigation in all MoveDirections. nextDate and nextMonthView naming convention is used for both previous/next\n     * @hidden\n     */\n    public focusNextDate(target: HTMLElement, key: string, nextView = false) {\n        if (target.childElementCount === 0) { target = target.parentElement; }\n        if (key.indexOf('Arrow') === -1) { key = ARROW.concat(key); }\n        const monthView = this.monthView;\n        const node = monthView.dates.find((date) => date.nativeElement === target);\n        let dates = monthView.dates.toArray(),\n            day: IgxDayItemComponent, step, i, nextDate: Date;\n        const index = dates.indexOf(node);\n\n        if (!node) { return; }\n\n        // focus item in current month\n        switch (key) {\n            case Direction.Left: {\n                step = -1;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i > 0; i--) {\n                    day = nextView ? dates[i] : dates[i - 1];\n                    nextDate = day.date.date;\n                    if (day.date.isPrevMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n            case Direction.Right: {\n                step = 1;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i < dates.length - 1; i++) {\n                    day = nextView ? dates[i] : dates[i + 1];\n                    nextDate = day.date.date;\n                    if (day.date.isNextMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n            case Direction.Up: {\n                step = -7;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i - 7 > -1; i -= 7) {\n                    day = nextView ? dates[i] : dates[i - 7];\n                    nextDate = day.date.date;\n                    if (day.date.isPrevMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n            case Direction.Down: {\n                step = 7;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i + 7 < 42; i += 7) {\n                    day = nextView ? dates[i] : dates[i + 7];\n                    nextDate = day.date.date;\n                    if (day.date.isNextMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n        }\n\n        // focus item in prev/next visible month\n        const nextMonthView = step > 0 ? monthView.nextMonthView : monthView.prevMonthView;\n        if (nextMonthView) {\n            dates = nextMonthView.dates.toArray();\n            day = dates.find((item) => item.date.date.getTime() === nextDate.getTime());\n\n            if (day && day.isFocusable) {\n                day.nativeElement.focus();\n                return;\n            }\n            nextMonthView.daysNavService.focusNextDate(day.nativeElement, key);\n        }\n\n        // if iterating in the visible prev/next moths above found a day that is not focusable, ie is disabled, hidden, etc\n        // then it is needed to recalculate the next day, which is going to be part of the prev/next months\n        if (day && !day.isFocusable) {\n            day = dates[i + step];\n            if (!day) {\n                nextDate = this.timedelta(node.date.date, step + i - index);\n            }\n        }\n\n        // focus item in prev/next month, which is currently out of view\n        let dayIsNextMonth: boolean; // determine what we need to check for next date - if it belongs to prev or next month\n        if (day) { dayIsNextMonth = step > 0 ? day.date.isNextMonth : day.date.isPrevMonth; }\n        if (monthView.changeDaysView && !nextMonthView && ((day && dayIsNextMonth) || !day)) {\n            const monthAction = step > 0 ? ScrollMonth.NEXT : ScrollMonth.PREV;\n            monthView.onViewChanging.emit({monthAction: monthAction, key: key, nextDate: nextDate});\n        }\n    }\n\n    /**\n     * Focuses first focusable day in the month. Will go to next visible month, if no day in the first month is focusable\n     * @hidden\n     */\n    public focusHomeDate() {\n        let monthView = this.monthView;\n        while (!this.focusFirstDay(monthView) && monthView.nextMonthView) {\n            monthView = monthView.nextMonthView;\n        }\n    }\n\n    /**\n     * Focuses last focusable day in the month. Will go to previous visible month, if no day in the first month is focusable\n     * @hidden\n     */\n    public focusEndDate() {\n        let monthView = this.monthView;\n        while (!this.focusLastDay(monthView) && monthView.prevMonthView) {\n            monthView = monthView.prevMonthView;\n        }\n    }\n\n    private timedelta(date: Date, units: number): Date {\n        const ret = new Date(date);\n        ret.setDate(ret.getDate() + units);\n        return ret;\n    }\n\n    private focusFirstDay(monthView: IgxDaysViewComponent): boolean {\n        const dates = monthView.dates.filter(d => d.isCurrentMonth);\n        for (let i = 0; i < dates.length; i++) {\n            if (dates[i].isFocusable) {\n                dates[i].nativeElement.focus();\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private focusLastDay(monthView: IgxDaysViewComponent): boolean {\n        const dates = monthView.dates.filter(d => d.isCurrentMonth);\n        for (let i = dates.length - 1; i >= 0; i--) {\n            if (dates[i].isFocusable) {\n                dates[i].nativeElement.focus();\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","import {\n    Component,\n    Output,\n    EventEmitter,\n    Input,\n    HostBinding,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from '@angular/core';\nimport { Calendar } from '../calendar';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxCalendarMonthDirective } from '../calendar.directives';\n\nlet NEXT_ID = 0;\n\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMonthsViewComponent, multi: true }],\n    selector: 'igx-months-view',\n    templateUrl: 'months-view.component.html'\n})\nexport class IgxMonthsViewComponent implements ControlValueAccessor {\n\n    /**\n     * Sets/gets the `id` of the months view.\n     * If not set, the `id` will have value `\"igx-months-view-0\"`.\n     * ```html\n     * <igx-months-view id=\"my-months-view\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let monthsViewId =  this.monthsView.id;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-months-view-${NEXT_ID++}`;\n\n    /**\n     * Gets/sets the selected date of the months view.\n     * By default it is the current date.\n     * ```html\n     * <igx-months-view [date]=\"myDate\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let date =  this.monthsView.date;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Input()\n    public date = new Date();\n\n    /**\n     * Gets the month format option of the months view.\n     * ```typescript\n     * let monthFormat = this.monthsView.monthFormat.\n     * ```\n     */\n    @Input()\n    public get monthFormat(): string {\n        return this._monthFormat;\n    }\n\n    /**\n     * Sets the month format option of the months view.\n     * ```html\n     * <igx-months-view> [monthFormat] = \"short'\"</igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    public set monthFormat(value: string) {\n        this._monthFormat = value;\n        this.initMonthFormatter();\n    }\n\n    /**\n     * Gets the `locale` of the months view.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.monthsView.locale;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the months view.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-months-view [locale]=\"de\"></igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initMonthFormatter();\n    }\n\n    /**\n     * Gets/sets whether the view should be rendered\n     * according to the locale and monthFormat, if any.\n     */\n    @Input()\n    public formatView = true;\n\n    /**\n     * Emits an event when a selection is made in the months view.\n     * Provides reference the `date` property in the `IgxMonthsViewComponent`.\n     * ```html\n     * <igx-months-view (onSelection)=\"onSelection($event)\"></igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxCalendarMonthDirective, { read: IgxCalendarMonthDirective })\n    public monthsRef: QueryList<IgxCalendarMonthDirective>;\n\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Returns an array of date objects which are then used to\n     * properly render the month names.\n     *\n     * Used in the template of the component\n     *\n     * @hidden\n     */\n    get months(): Date[] {\n        let start = new Date(this.date.getFullYear(), 0, 1);\n        const result = [];\n\n        for (let i = 0; i < 12; i++) {\n            result.push(start);\n            start = this._calendarModel.timedelta(start, 'month', 1);\n        }\n\n        return result;\n    }\n\n    /**\n     *@hidden\n     */\n    private _formatterMonth: any;\n\n    /**\n     *@hidden\n     */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _monthFormat = 'short';\n\n    /**\n     *@hidden\n     */\n    private _calendarModel: Calendar;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    constructor(public el: ElementRef) {\n        this.initMonthFormatter();\n        this._calendarModel = new Calendar();\n    }\n\n    /**\n     * Returns the locale representation of the month in the months view.\n     *\n     * @hidden\n     */\n    public formattedMonth(value: Date): string {\n        if (this.formatView) {\n            return this._formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     *@hidden\n     */\n    public selectMonth(event) {\n        this.onSelection.emit(event);\n\n        this.date = event;\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        if (value) {\n            this.date = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public monthTracker(index, item): string {\n        return `${item.getMonth()}}`;\n    }\n\n    /**\n     *@hidden\n     */\n    private initMonthFormatter() {\n        this._formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this.monthFormat });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.monthsRef.find((date) => date.nativeElement === event.target);\n        if (!node) {\n            return;\n        }\n\n        const months = this.monthsRef.toArray();\n        const nodeRect = node.nativeElement.getBoundingClientRect();\n\n        for (let index = months.indexOf(node) - 1; index >= 0; index--) {\n            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();\n            const tolerance = 6;\n            if (nodeRect.top !== nextNodeRect.top && (nextNodeRect.left - nodeRect.left) < tolerance) {\n                months[index].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.monthsRef.find((date) => date.nativeElement === event.target);\n        if (!node) {\n            return;\n        }\n\n        const months = this.monthsRef.toArray();\n        const nodeRect = node.nativeElement.getBoundingClientRect();\n\n        for (let index = months.indexOf(node) + 1; index < months.length; index++) {\n            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();\n            const tolerance = 6;\n            if (nextNodeRect.top !== nodeRect.top && (nodeRect.left - nextNodeRect.left) < tolerance ) {\n                months[index].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.monthsRef.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n\n        const months = this.monthsRef.toArray();\n        if (months.indexOf(node) + 1 < months.length) {\n            const month = months[months.indexOf(node) + 1];\n\n            month.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.monthsRef.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n\n        const months = this.monthsRef.toArray();\n        if (months.indexOf(node) - 1 >= 0) {\n            const month = months[months.indexOf(node) - 1];\n\n            month.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const month = this.monthsRef.toArray()[0];\n\n        month.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const months = this.monthsRef.toArray();\n        const month = months[months.length - 1];\n\n        month.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event) {\n        const value = this.monthsRef.find((date) => date.nativeElement === event.target).value;\n        this.date = new Date(value.getFullYear(), value.getMonth(), this.date.getDate());\n\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n}\n","import { Component, Output, EventEmitter, Input, HostBinding, HostListener, ElementRef, Injectable} from '@angular/core';\nimport { range, Calendar } from '../calendar';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { HammerGestureConfig, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\nlet NEXT_ID = 0;\n\n@Injectable()\nexport class CalendarHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxYearsViewComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: CalendarHammerConfig\n        }\n    ],\n    selector: 'igx-years-view',\n    templateUrl: 'years-view.component.html'\n})\nexport class IgxYearsViewComponent implements ControlValueAccessor {\n\n    /**\n     * Sets/gets the `id` of the years view.\n     * If not set, the `id` will have value `\"igx-years-view-0\"`.\n     * ```html\n     * <igx-years-view id = \"my-years-view\"></igx-years-view>\n     * ```\n     * ```typescript\n     * let yearsViewId =  this.yearsView.id;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-years-view-${NEXT_ID++}`;\n\n    /**\n     * Gets/sets the selected date of the years view.\n     * By default it is the current date.\n     * ```html\n     * <igx-years-view [date]=\"myDate\"></igx-years-view>\n     * ```\n     * ```typescript\n     * let date =  this.yearsView.date;\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Input()\n    public date = new Date();\n\n    /**\n     * Gets the year format option of the years view.\n     * ```typescript\n     * let yearFormat = this.yearsView.yearFormat.\n     * ```\n     */\n    @Input()\n    public get yearFormat(): string {\n        return this._yearFormat;\n    }\n\n    /**\n     * Sets the year format option of the years view.\n     * ```html\n     * <igx-years-view [yearFormat]=\"numeric\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    public set yearFormat(value: string) {\n        this._yearFormat = value;\n        this.initYearFormatter();\n    }\n\n    /**\n     * Gets the `locale` of the years view.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.yearsView.locale;\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the years view.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-years-view [locale]=\"de\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initYearFormatter();\n    }\n\n    /**\n     * Gets/sets whether the view should be rendered\n     * according to the locale and yearFormat, if any.\n     */\n    @Input()\n    public formatView: boolean;\n\n    /**\n     * Emits an event when a selection is made in the years view.\n     * Provides reference the `date` property in the `IgxYearsViewComponent`.\n     * ```html\n     * <igx-years-view (onSelection)=\"onSelection($event)\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Returns an array of date objects which are then used to properly\n     * render the years.\n     *\n     * Used in the template of the component.\n     *\n     * @hidden\n     */\n    get decade(): number[] {\n        const result = [];\n        const start = this.date.getFullYear() - 3;\n        const end = this.date.getFullYear() + 4;\n\n        for (const year of range(start, end)) {\n            result.push(new Date(year, this.date.getMonth(), this.date.getDate()));\n        }\n\n        return result;\n    }\n\n    /**\n     *@hidden\n     */\n    private _formatterYear: any;\n\n    /**\n     *@hidden\n     */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _yearFormat = 'numeric';\n\n    /**\n     *@hidden\n     */\n    private _calendarModel: Calendar;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    constructor(public el: ElementRef) {\n        this.initYearFormatter();\n        this._calendarModel = new Calendar();\n    }\n\n    /**\n     * Returns the locale representation of the year in the years view.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this.formatView) {\n            return this._formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n\n    /**\n     *@hidden\n     */\n    public selectYear(event) {\n        this.date = event;\n\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     *@hidden\n     */\n    public scroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const delta = event.deltaY < 0 ? -1 : 1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     *@hidden\n     */\n    public pan(event) {\n        const delta = event.deltaY < 0 ? 1 : -1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public yearTracker(index, item): string {\n        return `${item.getFullYear()}}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        if (value) {\n            this.date = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.generateYearRange(1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.generateYearRange(-1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter')\n    public onKeydownEnter() {\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     *@hidden\n     */\n    private initYearFormatter() {\n        this._formatterYear = new Intl.DateTimeFormat(this._locale, { year: this.yearFormat });\n    }\n\n    /**\n     *@hidden\n     */\n    private generateYearRange(delta: number) {\n        const currentYear = new Date().getFullYear();\n\n        if ((delta > 0 && this.date.getFullYear() - currentYear >= 95) ||\n            (delta < 0 && currentYear - this.date.getFullYear() >= 95)) {\n            return;\n        }\n        this.date = this._calendarModel.timedelta(this.date, 'year', delta);\n    }\n}\n","import { Component, Input, Output, EventEmitter, HostBinding, ElementRef, HostListener } from '@angular/core';\nimport { ICalendarDate, isDateInRanges } from '../calendar';\nimport { DateRangeDescriptor } from '../../core/dates';\nimport { CalendarSelection } from '../calendar-base';\n\n/**\n *@hidden\n*/\n@Component({\n    selector: 'igx-day-item',\n    templateUrl: 'day-item.component.html'\n})\nexport class IgxDayItemComponent {\n    @Input()\n    public date: ICalendarDate;\n\n    @Input()\n    public selection: string;\n\n    /**\n     * Returns boolean indicating if the day is selected\n     *\n     */\n    @Input()\n    public get selected(): any {\n        return this._selected;\n    }\n\n    /**\n     * Selects the day\n     */\n    public set selected(value: any) {\n        this._selected = value;\n    }\n\n    @Input()\n    public disabledDates: DateRangeDescriptor[];\n\n    @Input()\n    public outOfRangeDates: DateRangeDescriptor[];\n\n    @Input()\n    public specialDates: DateRangeDescriptor[];\n\n    @Input()\n    public hideOutsideDays = false;\n\n    @Input()\n    @HostBinding('class.igx-calendar__date--last')\n    public isLastInRange = false;\n\n    @Input()\n    @HostBinding('class.igx-calendar__date--first')\n    public isFirstInRange = false;\n\n    @Input()\n    public isWithinRange = false;\n\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    public get isCurrentMonth(): boolean {\n        return this.date.isCurrentMonth;\n    }\n\n    public get isPreviousMonth(): boolean {\n        return this.date.isPrevMonth;\n    }\n\n    public get isNextMonth(): boolean {\n        return this.date.isNextMonth;\n    }\n\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    @HostBinding('class.igx-calendar__date--selected')\n    public get isSelectedCSS(): boolean {\n        return (!this.isDisabled && this.selected);\n    }\n\n    @HostBinding('class.igx-calendar__date--inactive')\n    public get isInactive(): boolean {\n        return this.date.isNextMonth || this.date.isPrevMonth;\n    }\n\n    @HostBinding('class.igx-calendar__date--hidden')\n    public get isHidden(): boolean {\n        return this.hideOutsideDays && this.isInactive;\n    }\n\n    @HostBinding('class.igx-calendar__date--current')\n    public get isToday(): boolean {\n        const today = new Date(Date.now());\n        const date = this.date.date;\n        return (date.getFullYear() === today.getFullYear() &&\n            date.getMonth() === today.getMonth() &&\n            date.getDate() === today.getDate()\n        );\n    }\n\n    @HostBinding('class.igx-calendar__date--weekend')\n    public get isWeekend(): boolean {\n        const day = this.date.date.getDay();\n        return day === 0 || day === 6;\n    }\n\n    public get isDisabled(): boolean {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.disabledDates);\n    }\n\n    public get isOutOfRange(): boolean {\n        if (!this.outOfRangeDates) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.outOfRangeDates);\n    }\n\n    public get isFocusable(): boolean {\n        return this.isCurrentMonth && !this.isHidden && !this.isDisabled && !this.isOutOfRange;\n    }\n\n    @HostBinding('class.igx-calendar__date--range')\n    public get isWithinRangeCSS(): boolean {\n        return !this.isSingleSelection && this.isWithinRange;\n    }\n\n    @HostBinding('class.igx-calendar__date--special')\n    public get isSpecial(): boolean {\n        if (this.specialDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.specialDates);\n    }\n\n    @HostBinding('class.igx-calendar__date')\n    public get defaultCSS(): boolean {\n        return this.date.isCurrentMonth && !(this.isWeekend && this.selected);\n    }\n\n    @HostBinding('class.igx-calendar__date--disabled')\n    public get isDisabledCSS(): boolean {\n        return this.isHidden || this.isDisabled || this.isOutOfRange;\n    }\n\n    @HostBinding('class.igx-calendar__date--single')\n    public get isSingleSelection(): boolean {\n        return this.selection !== CalendarSelection.RANGE;\n    }\n\n    @HostBinding('attr.tabindex')\n    public get tabindex(): number {\n        return this.isDisabled || this.isHidden ? -1 : 0;\n    }\n\n    private _selected = false;\n\n    constructor(private elementRef: ElementRef) { }\n\n    @HostListener('click')\n    @HostListener('keydown.enter')\n    public onSelect() {\n        this.onDateSelection.emit(this.date);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    Directive,\n    HostBinding,\n    Optional,\n    Inject,\n    Input,\n    NgModule,\n    OnInit,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\n\nlet NEXT_ID = 0;\n\n/**\n * IgxCardMedia is container for the card media section.\n * Use it to wrap images and videos.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-media'\n})\nexport class IgxCardMediaDirective {\n    /** @hidden @internal */\n    @HostBinding('class.igx-card__media')\n    public cssClass = 'igx-card__media';\n\n    /**\n     * An @Input property that sets the `width` and `min-width` style property\n     * of the media container. If not provided it will be set to `auto`.\n     *\n     * @example\n     * ```html\n     * <igx-card-media width=\"300px\"></igx-card-media>\n     * ```\n     */\n    @HostBinding('style.width')\n    @HostBinding('style.min-width')\n    @Input()\n    public width = 'auto';\n\n    /**\n     * An @Input property that sets the `height` style property of the media container.\n     * If not provided it will be set to `auto`.\n     *\n     * @example\n     * ```html\n     * <igx-card-media height=\"50%\"></igx-card-media>\n     * ```\n     */\n    @HostBinding('style.height')\n    @Input()\n    public height = 'auto';\n\n    /**\n     * An @Input property that sets the `role` attribute of the media container.\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'img';\n}\n\n/**\n * IgxCardHeader is container for the card header\n */\n@Component({\n    selector: 'igx-card-header',\n    templateUrl: 'card-header.component.html'\n})\nexport class IgxCardHeaderComponent {\n    /** @hidden @internal */\n    @HostBinding('class.igx-card-header')\n    public cssClass = 'igx-card-header';\n\n    /**\n     * An @Input property that sets the layout style of the header.\n     * By default the header elements(thumbnail and title/subtitle) are aligned horizontally.\n     *\n     * @example\n     * ```html\n     * <igx-card-header [vertical]=\"true\"></igx-card-header>\n     * ```\n     */\n    @HostBinding('class.igx-card-header--vertical')\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card header.\n     * By default the value is set to `header`.\n     *\n     * @example\n     * ```html\n     * <igx-card-header role=\"header\"></igx-card-header>\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'header';\n}\n\n/**\n * IgxCardThumbnail is container for the card thumbnail section.\n * Use it to wrap anything you want to be used as a thumbnail.\n */\n@Directive({\n    selector: '[igxCardThumbnail]'\n})\nexport class IgxCardThumbnailDirective { }\n\n/**\n * igxCardHeaderTitle is used to denote the header title in a card.\n * Use it to tag text nodes.\n */\n@Directive({\n    selector: '[igxCardHeaderTitle]'\n})\nexport class IgxCardHeaderTitleDirective {\n    /** @hidden @internal */\n    @HostBinding('class.igx-card-header__title')\n    public cssClass = 'igx-card__header__title';\n}\n\n/**\n * igxCardHeaderSubtitle is used to denote the header subtitle in a card.\n * Use it to tag text nodes.\n */\n@Directive({\n    selector: '[igxCardHeaderSubtitle]'\n})\nexport class IgxCardHeaderSubtitleDirective {\n    /** @hidden @internal */\n    @HostBinding('class.igx-card-header__subtitle')\n    public cssClass = 'igx-card-header__subtitle';\n}\n/**\n * IgxCardContent is container for the card content.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-content'\n})\nexport class IgxCardContentDirective {\n    /** @hidden @internal */\n    @HostBinding('class.igx-card-content')\n    public cssClass = 'igx-card-content';\n}\n\n/**\n * IgxCardFooter is container for the card footer\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-footer'\n})\nexport class IgxCardFooterDirective {\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card footer.\n     * By default the value is set to `footer`.\n     *\n     * @example\n     * ```html\n     * <igx-card-footer role=\"footer\"></igx-card-footer>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'footer';\n}\n\n/**\n * Card provides a way to display organized content in appealing way.\n *\n * @igxModule IgxCardModule\n *\n * @igxTheme igx-card-theme, igx-icon-theme, igx-button-theme\n *\n * @igxKeywords card, button, avatar, icon\n *\n * @igxGroup Layouts\n *\n * @remarks\n * The Ignite UI Card serves as a container that allows custom content to be organized in an appealing way. There are\n * five sections in a card that you can use to organize your content. These are header, media, content, actions, and footer.\n *\n * @example\n * ```html\n * <igx-card>\n *   <igx-card-header>\n *     <h3 igxCardHeaderTitle>{{title}}</h3>\n *     <h5 igxCardHeaderSubtitle>{{subtitle}}</h5>\n *   </igx-card-header>\n *   <igx-card-actions>\n *       <button igxButton igxRipple>Share</button>\n *       <button igxButton igxRipple>Play Album</button>\n *   </igx-card-actions>\n * </igx-card>\n * ```\n */\n\nexport enum IgxCardType {\n    ELEVATED = 'elevated',\n    OUTLINED = 'outlined'\n}\n\n@Component({\n    selector: 'igx-card',\n    templateUrl: 'card.component.html'\n})\nexport class IgxCardComponent {\n    /**\n     * Sets/gets the `id` of the card.\n     * If not set, `id` will have value `\"igx-card-0\"`;\n     *\n     * @example\n     * ```html\n     * <igx-card id = \"my-first-card\"></igx-card>\n     * ```\n     * ```typescript\n     * let cardId =  this.card.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-card-${NEXT_ID++}`;\n\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card.\n     * By default the value is set to `group`.\n     *\n     * @example\n     * ```html\n     * <igx-card role=\"group\"></igx-card>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'group';\n\n    /**\n     * An @Input property that sets the value of the `type` attribute of the card.\n     * By default the value is set to `default`. You can make the card use the\n     * outlined style by setting the value to `outlined`.\n     *\n     * @example\n     * ```html\n     * <igx-card type=\"outlined\"></igx-card>\n     * ```\n     */\n    @HostBinding('class.igx-card')\n    @Input()\n    public type: IgxCardType | string = IgxCardType.ELEVATED;\n\n    /**\n     * A getter which will return true if the card type is `outlined`.\n     */\n    @HostBinding('class.igx-card--outlined')\n    get isOutlinedCard() {\n        return this.type === IgxCardType.OUTLINED;\n    }\n\n    /**\n     * An @Input property that sets the value of the `horizontal` attribute of the card.\n     * Setting this to `true` will make the different card sections align horizontally,\n     * essentially flipping the card to the side.\n     *\n     * @example\n     * ```html\n     * <igx-card [horizontal]=\"true\"></igx-card>\n     * ```\n     */\n    @HostBinding('class.igx-card--horizontal')\n    @Input()\n    public horizontal = false;\n}\n\nexport enum IgxCardActionsLayout {\n    START = 'start',\n    JUSTIFY = 'justify',\n}\n\n/**\n * IgxCardActions is container for the card actions.\n */\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-actions',\n    templateUrl: 'card-actions.component.html'\n})\nexport class IgxCardActionsComponent implements OnInit, OnChanges {\n    private isVerticalSet = false;\n\n    constructor(@Optional() @Inject(IgxCardComponent) public card: IgxCardComponent) { }\n\n    /**\n     * An @Input property that sets the layout style of the actions.\n     * By default icons and icon buttons, as well as regular buttons\n     * are split into two containers, which are then positioned on both ends\n     * of the card-actions area.\n     * You can justify the elements in those groups so they are positioned equally\n     * from one another taking up all the space available along the card actions axis.\n     *\n     * @example\n     * ```html\n     * <igx-card-actions layout=\"justify\"></igx-card-actions>\n     * ```\n     */\n    @HostBinding('class.igx-card-actions')\n    @Input()\n    public layout: IgxCardActionsLayout | string = IgxCardActionsLayout.START;\n\n    /**\n     * An @Input property that sets the vertical attribute of the actions.\n     * When set to `true` the actions will be layed out vertically.\n     */\n    @HostBinding('class.igx-card-actions--vertical')\n    @Input()\n    public vertical: boolean;\n\n    /**\n     * A getter that returns `true` when the layout has been\n     * set to `justify`.\n     */\n    @HostBinding('class.igx-card-actions--justify')\n    get isJustifyLayout() {\n        return this.layout === IgxCardActionsLayout.JUSTIFY;\n    }\n\n    /**\n     * An @Input property that sets order of the buttons the actions area.\n     * By default all icons/icon buttons are placed at the end of the action\n     * area. Any regular buttons(flat, raised) will appear before the icons/icon buttons\n     * placed in the actions area.\n     * If you want to reverse their positions so that icons appear first, use the `reverse`\n     * attribute.\n     *\n     * @example\n     * ```html\n     * <igx-card-actions [reverse]=\"true\"></igx-card-actions>\n     * ```\n     */\n    @HostBinding('class.igx-card-actions--reverse')\n    @Input()\n    public reverse = false;\n\n    ngOnChanges(changes: SimpleChanges) {\n        for (const prop in changes) {\n            if (prop === 'vertical') {\n                this.isVerticalSet = true;\n            }\n        }\n    }\n\n    ngOnInit() {\n        this.vertical = !this.isVerticalSet && this.card.horizontal;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxCardComponent,\n        IgxCardHeaderComponent,\n        IgxCardMediaDirective,\n        IgxCardContentDirective,\n        IgxCardActionsComponent,\n        IgxCardFooterDirective,\n        IgxCardHeaderTitleDirective,\n        IgxCardHeaderSubtitleDirective,\n        IgxCardThumbnailDirective,\n    ],\n    exports: [\n        IgxCardComponent,\n        IgxCardHeaderComponent,\n        IgxCardMediaDirective,\n        IgxCardContentDirective,\n        IgxCardActionsComponent,\n        IgxCardFooterDirective,\n        IgxCardHeaderTitleDirective,\n        IgxCardHeaderSubtitleDirective,\n        IgxCardThumbnailDirective,\n    ],\n    imports: [CommonModule, IgxButtonModule]\n})\nexport class IgxCardModule { }\n","import {\n    Component,\n    Output,\n    EventEmitter,\n    Input,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    HostBinding,\n    DoCheck,\n    OnInit\n} from '@angular/core';\nimport { ICalendarDate, isDateInRanges } from '../../calendar/calendar';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxDayItemComponent } from './day-item.component';\nimport { DateRangeDescriptor, DateRangeType } from '../../core/dates';\nimport { IgxCalendarBaseDirective, CalendarSelection } from '../calendar-base';\nimport { isEqual } from '../../core/utils';\nimport { IViewChangingEventArgs } from './days-view.interface';\nimport { IgxDaysViewNavigationService } from './daysview-navigation.service';\n\nlet NEXT_ID = 0;\n\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxDaysViewComponent\n        },\n        { provide: IgxDaysViewNavigationService, useClass: IgxDaysViewNavigationService }\n    ],\n    selector: 'igx-days-view',\n    templateUrl: 'days-view.component.html'\n})\nexport class IgxDaysViewComponent extends IgxCalendarBaseDirective implements DoCheck, OnInit {\n    /**\n     * Sets/gets the `id` of the days view.\n     * If not set, the `id` will have value `\"igx-days-view-0\"`.\n     * ```html\n     * <igx-days-view id=\"my-days-view\"></igx-days-view>\n     * ```\n     * ```typescript\n     * let daysViewId =  this.daysView.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-days-view-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public changeDaysView = false;\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onViewChanging = new EventEmitter<IViewChangingEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxDayItemComponent, { read: IgxDayItemComponent })\n    public dates: QueryList<IgxDayItemComponent>;\n\n    /**\n     * @hidden\n     */\n    public outOfRangeDates: DateRangeDescriptor[];\n\n    /**\n     * @hidden\n     */\n    public nextMonthView: IgxDaysViewComponent;\n\n    /**\n     * @hidden\n     */\n    public prevMonthView: IgxDaysViewComponent;\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    constructor(public daysNavService: IgxDaysViewNavigationService) {\n        super();\n    }\n\n    /**\n     * @hidden\n     */\n    public get getCalendarMonth(): ICalendarDate[][] {\n        return this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth(), true);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.daysNavService.monthView = this;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        if (!this.changeDaysView && this.dates) {\n            this.disableOutOfRangeDates();\n        }\n    }\n\n    /**\n     * Returns the locale representation of the date in the days view.\n     *\n     * @hidden\n     */\n    public formattedDate(value: Date): string {\n        if (this.formatViews.day) {\n            return this.formatterDay.format(value);\n        }\n        return `${value.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public generateWeekHeader(): string[] {\n        const dayNames = [];\n        const rv = this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth())[0];\n        for (const day of rv) {\n            dayNames.push(this.formatterWeekday.format(day.date));\n        }\n\n        return dayNames;\n    }\n\n    /**\n     * @hidden\n     */\n    public rowTracker(index, item): string {\n        return `${item[index].date.getMonth()}${item[index].date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public dateTracker(index, item): string {\n        return `${item.date.getMonth()}--${item.date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentMonth(value: Date): boolean {\n        return this.viewDate.getMonth() === value.getMonth();\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentYear(value: Date): boolean {\n        return this.viewDate.getFullYear() === value.getFullYear();\n    }\n\n    /**\n     * @hidden\n     */\n    public isSelected(date: ICalendarDate): boolean {\n        let selectedDates: Date | Date[];\n        if (this.isDateDisabled(date.date) || !this.value ||\n            (Array.isArray(this.value) && this.value.length === 0)\n            )  {\n            return false;\n        }\n\n        if (this.selection === CalendarSelection.SINGLE) {\n            selectedDates = (this.value as Date);\n            return this.getDateOnly(selectedDates).getTime() === date.date.getTime();\n        }\n\n        selectedDates = (this.value as Date[]);\n        if (this.selection === CalendarSelection.RANGE && selectedDates.length === 1) {\n            return this.getDateOnly(selectedDates[0]).getTime() === date.date.getTime();\n        }\n\n        if (this.selection === CalendarSelection.MULTI) {\n            const start = this.getDateOnly(selectedDates[0]);\n            const end = this.getDateOnly(selectedDates[selectedDates.length - 1]);\n\n            if (this.isWithinRange(date.date, false, start, end)) {\n                const currentDate = selectedDates.find(element => element.getTime() === date.date.getTime());\n                return !!currentDate;\n            } else {\n                return false;\n            }\n\n        } else {\n            return this.isWithinRange(date.date, true);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public isLastInRange(date: ICalendarDate): boolean {\n        if (this.isSingleSelection || !this.value) {\n            return false;\n        }\n\n        const dates = this.value as Date[];\n        const lastDate = dates[dates.length - 1];\n        return isEqual(lastDate, date.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public isFirstInRange(date: ICalendarDate): boolean {\n        if (this.isSingleSelection || !this.value) {\n            return false;\n        }\n\n        return isEqual((this.value as Date[])[0], date.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public isWithinRange(date: Date, checkForRange: boolean, min?: Date, max?: Date): boolean {\n        if (checkForRange && !(Array.isArray(this.value) && this.value.length > 1)) {\n            return false;\n        }\n\n        min = min ? min : this.value[0];\n        max = max ? max : this.value[(this.value as Date[]).length - 1];\n\n        return isDateInRanges(date,\n            [\n                {\n                    type: DateRangeType.Between,\n                    dateRange: [min, max]\n                }\n            ]\n        );\n    }\n\n    /**\n     *@hidden\n     */\n    public focusActiveDate() {\n        let date = this.dates.find((d) => d.selected);\n\n        if (!date) {\n            date = this.dates.find((d) => d.isToday);\n        }\n\n        if (date.isFocusable) {\n            date.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectDay(event) {\n        this.selectDateFromClient(event.date);\n        this.onDateSelection.emit(event);\n\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    private disableOutOfRangeDates() {\n        const dateRange = [];\n        this.dates.toArray().forEach((date) => {\n            if (!date.isCurrentMonth) {\n                dateRange.push(date.date.date);\n            }\n        });\n\n        this.outOfRangeDates = [{\n            type: DateRangeType.Specific,\n            dateRange: dateRange\n        }];\n    }\n\n    /**\n     * @hidden\n     */\n    public getFirstMonthView(): IgxDaysViewComponent {\n        let monthView = this as IgxDaysViewComponent;\n        while (monthView.prevMonthView) {\n            monthView = monthView.prevMonthView;\n        }\n        return monthView;\n    }\n\n    /**\n     * @hidden\n     */\n    private getLastMonthView(): IgxDaysViewComponent {\n        let monthView = this as IgxDaysViewComponent;\n        while (monthView.nextMonthView) {\n            monthView = monthView.nextMonthView;\n        }\n        return monthView;\n    }\n\n    /**\n     * @hidden\n     */\n    private get isSingleSelection(): boolean {\n        return this.selection !== CalendarSelection.RANGE;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    @HostListener('keydown.arrowright', ['$event'])\n    @HostListener('keydown.arrowup', ['$event'])\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrow(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.daysNavService.focusNextDate(event.target as HTMLElement, event.key);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.getFirstMonthView().daysNavService.focusHomeDate();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.getLastMonthView().daysNavService.focusEndDate();\n    }\n}\n","import { transition, trigger, useAnimation } from '@angular/animations';\nimport {\n    Component,\n    ContentChild,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n    ElementRef,\n    AfterViewInit,\n    ViewChildren,\n    QueryList,\n    OnDestroy\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../animations/main';\nimport {\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarSubheaderTemplateDirective\n} from './calendar.directives';\nimport { KEYS } from '../core/utils';\nimport { ICalendarDate, monthRange } from './calendar';\nimport { CalendarView, IgxMonthPickerBaseDirective } from './month-picker-base';\nimport { IgxMonthsViewComponent } from './months-view/months-view.component';\nimport { IgxYearsViewComponent } from './years-view/years-view.component';\nimport { IgxDaysViewComponent } from './days-view/days-view.component';\nimport { interval, Subscription } from 'rxjs';\nimport { takeUntil, debounce, skipLast, switchMap } from 'rxjs/operators';\nimport { ScrollMonth } from './calendar-base';\nimport { IViewChangingEventArgs } from './days-view/days-view.interface';\n\nlet NEXT_ID = 0;\n\n/**\n * Calendar provides a way to display date information.\n *\n * @igxModule IgxCalendarModule\n *\n * @igxTheme igx-calendar-theme, igx-icon-theme\n *\n * @igxKeywords calendar, datepicker, schedule, date\n *\n * @igxGroup Scheduling\n *\n * @remarks\n * The Ignite UI Calendar provides an easy way to display a calendar and allow users to select dates using single, multiple\n * or range selection.\n *\n * @example:\n * ```html\n * <igx-calendar selection=\"range\"></igx-calendar>\n * ```\n */\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxCalendarComponent\n        }\n    ],\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ]),\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-calendar',\n    templateUrl: 'calendar.component.html'\n})\nexport class IgxCalendarComponent extends IgxMonthPickerBaseDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * Sets/gets the `id` of the calendar.\n     *\n     * @remarks\n     * If not set, the `id` will have value `\"igx-calendar-0\"`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar id=\"my-first-calendar\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-calendar-${NEXT_ID++}`;\n\n    /**\n     * Sets/gets whether the calendar has header.\n     * Default value is `true`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar [hasHeader]=\"false\"></igx-calendar>\n     * ```\n     */\n    @Input()\n    public hasHeader = true;\n\n    /**\n     * Sets/gets whether the calendar header will be in vertical position.\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar [vertical] = \"true\"></igx-calendar>\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * Sets/gets the number of month views displayed.\n     * Default value is `1`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar [monthsViewNumber]=\"2\"></igx-calendar>\n     * ```\n     */\n    @Input()\n    get monthsViewNumber() {\n        return this._monthsViewNumber;\n    }\n\n    set monthsViewNumber(val: number) {\n        if (val < 1 ) {\n            return;\n        }\n\n        this._monthsViewNumber = val;\n    }\n\n    /**\n     * Apply the different states for the transitions of animateChange\n     * @hidden\n     * @internal\n     */\n    @Input()\n    public animationAction: any = '';\n\n    /**\n     * Used to apply the active date when the calendar view is changed\n     *\n     * @hidden\n     * @internal\n     */\n    public nextDate: Date;\n\n    /**\n     * Denote if the calendar view was changed with the keyboard\n     *\n     * @hidden\n     * @internal\n     */\n    public isKeydownTrigger = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public callback: (next) => void;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * The default aria role attribute for the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('attr.role')\n    public role = 'grid';\n\n    /**\n     * The default aria lebelled by attribute for the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy = 'calendar';\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-calendar--vertical')\n    get styleVerticalClass(): boolean {\n        return this.vertical;\n    }\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * ViewChild that represents the months view.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('months', { read: IgxMonthsViewComponent })\n    public monthsView: IgxMonthsViewComponent;\n\n    /**\n     * Month button, that displays the months view.\n     * @hidden\n     * @internal\n     */\n    @ViewChildren('monthsBtn')\n    public monthsBtns: QueryList<ElementRef>;\n\n    /**\n     * ViewChild that represents the decade view.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('decade', { read: IgxYearsViewComponent })\n    public dacadeView: IgxYearsViewComponent;\n\n    /**\n     * ViewChild that represents the days view.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('days', { read: IgxDaysViewComponent })\n    public daysView: IgxDaysViewComponent;\n\n    /**\n     * ViewChildrenden representing all of the rendered days views.\n     * @hidden\n     * @internal\n     */\n    @ViewChildren('days', { read: IgxDaysViewComponent })\n    public monthViews: QueryList<IgxDaysViewComponent>;\n\n    /**\n     * Button for previous month.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('prevMonthBtn')\n    public prevMonthBtn: ElementRef;\n\n    /**\n     * Button for next month.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('nextMonthBtn')\n    public nextMonthBtn: ElementRef;\n\n    /**\n     * Denote if the year view is active.\n     * @hidden\n     * @internal\n     */\n    get isYearView(): boolean {\n        return this.activeView === CalendarView.YEAR;\n    }\n\n    /**\n     * Gets the header template.\n     *\n     * @example\n     * ```typescript\n     * let headerTemplate =  this.calendar.headerTeamplate;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    get headerTemplate(): any {\n        if (this.headerTemplateDirective) {\n            return this.headerTemplateDirective.template;\n        }\n        return null;\n    }\n\n    /**\n     * Sets the header template.\n     *\n     * @example\n     * ```html\n     * <igx-calendar headerTemplateDirective = \"igxCalendarHeader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set headerTemplate(directive: any) {\n        this.headerTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the subheader template.\n     *\n     * @example\n     * ```typescript\n     * let subheaderTemplate = this.calendar.subheaderTemplate;\n     * ```\n     */\n    get subheaderTemplate(): any {\n        if (this.subheaderTemplateDirective) {\n            return this.subheaderTemplateDirective.template;\n        }\n        return null;\n    }\n\n    /**\n     * Sets the subheader template.\n     *\n     * @example\n     * ```html\n     * <igx-calendar subheaderTemplate = \"igxCalendarSubheader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set subheaderTemplate(directive: any) {\n        this.subheaderTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the context for the template marked with the `igxCalendarHeader` directive.\n     *\n     * @example\n     * ```typescript\n     * let headerContext =  this.calendar.headerContext;\n     * ```\n     */\n    get headerContext() {\n        const date: Date = this.headerDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * Gets the context for the template marked with either `igxCalendarSubHeaderMonth`\n     * or `igxCalendarSubHeaderYear` directive.\n     *\n     * @example\n     * ```typescript\n     * let context =  this.calendar.context;\n     * ```\n     */\n    get context() {\n        const date: Date = this.viewDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * Date displayed in header\n     *\n     * @hidden\n     * @internal\n     */\n    get headerDate(): Date {\n        return this.selectedDates ? this.selectedDates : new Date();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChild(forwardRef(() => IgxCalendarHeaderTemplateDirective), { read: IgxCalendarHeaderTemplateDirective, static: true  })\n    private headerTemplateDirective: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    // tslint:disable-next-line:max-line-length\n    @ContentChild(forwardRef(() => IgxCalendarSubheaderTemplateDirective), { read: IgxCalendarSubheaderTemplateDirective, static: true  })\n    private subheaderTemplateDirective: IgxCalendarSubheaderTemplateDirective;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _monthsViewNumber = 1;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _monthViewsChanges$: Subscription;\n\n    public ngAfterViewInit() {\n        this.setSiblingMonths(this.monthViews);\n        this._monthViewsChanges$ = this.monthViews.changes.subscribe(c => {\n            this.setSiblingMonths(c);\n        });\n\n        this.startMonthScroll$.pipe(\n            takeUntil(this.stopMonthScroll$),\n            switchMap(() => this.scrollMonth$.pipe(\n                skipLast(1),\n                debounce(() => interval(300)),\n                takeUntil(this.stopMonthScroll$)\n            ))).subscribe(() => {\n                switch (this.monthScrollDirection) {\n                    case ScrollMonth.PREV:\n                        this.previousMonth();\n                        break;\n                    case ScrollMonth.NEXT:\n                        this.nextMonth();\n                        break;\n                    case ScrollMonth.NONE:\n                    default:\n                        break;\n                }\n        });\n    }\n\n    /**\n     * Returns the locale representation of the month in the month view if enabled,\n     * otherwise returns the default `Date.getMonth()` value.\n     *\n     * @hidden\n     * @internal\n     */\n    public formattedMonth(value: Date): string {\n        if (this.formatViews.month) {\n            return this.formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     * Change to previous month\n     *\n     * @hidden\n     * @internal\n     */\n    public previousMonth(isKeydownTrigger = false) {\n        this.viewDate = this.calendarModel.getPrevMonth(this.viewDate);\n        this.animationAction = ScrollMonth.PREV;\n        this.isKeydownTrigger = isKeydownTrigger;\n    }\n\n    /**\n     * Change to next month\n     *\n     * @hidden\n     * @internal\n     */\n    public nextMonth(isKeydownTrigger = false) {\n        this.viewDate = this.calendarModel.getNextMonth(this.viewDate);\n        this.animationAction = ScrollMonth.NEXT;\n        this.isKeydownTrigger = isKeydownTrigger;\n    }\n\n    /**\n     * Continious navigation through the previous months\n     * @hidden\n     * @internal\n     */\n    public startPrevMonthScroll = (isKeydownTrigger = false) => {\n        this.startMonthScroll$.next();\n        this.monthScrollDirection = ScrollMonth.PREV;\n\n        this.previousMonth(isKeydownTrigger);\n    }\n\n    /**\n     * Continious navigation through the next months\n     * @hidden\n     * @internal\n     */\n    public startNextMonthScroll = (isKeydownTrigger = false) => {\n        this.startMonthScroll$.next();\n        this.monthScrollDirection = ScrollMonth.NEXT;\n\n        this.nextMonth(isKeydownTrigger);\n    }\n\n    /**\n     * Stop continuous navigation\n     * @hidden\n     * @internal\n     */\n    public stopMonthScroll = (event) => {\n        event.stopPropagation();\n\n        // generally the scrolling is built on the calendar component\n        // and all start/stop scrolling methods are called on the calendar\n        // if we change below lines to call stopMonthScroll$ on the calendar instead of on the views,\n        // strange bug is introduced --> after changing number of months, continuous scrolling on mouse click does not happen\n        this.daysView.stopMonthScroll$.next(true);\n        this.daysView.stopMonthScroll$.complete();\n\n\n        if (this.monthScrollDirection === ScrollMonth.PREV) {\n            this.prevMonthBtn.nativeElement.focus();\n        } else if (this.monthScrollDirection === ScrollMonth.NEXT) {\n            this.nextMonthBtn.nativeElement.focus();\n        }\n\n        this.monthScrollDirection = ScrollMonth.NONE;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onActiveViewDecade(args: Date, activeViewIdx: number) {\n        super.activeViewDecade(activeViewIdx);\n        requestAnimationFrame(() => {\n            if (this.dacadeView) {\n                this.dacadeView.date = args;\n                this.dacadeView.el.nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onActiveViewDecadeKB(event, args: Date, activeViewIdx: number) {\n        super.activeViewDecadeKB(event, activeViewIdx);\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) {\n                this.dacadeView.date = args;\n                this.dacadeView.el.nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getFormattedDate(): { weekday: string, monthday: string } {\n\n        const date = this.headerDate;\n\n        return {\n            monthday: this.formatterMonthday.format(date),\n            weekday: this.formatterWeekday.format(date),\n        };\n    }\n\n    /**\n     * Handles invoked on date selection\n     * @hidden\n     * @internal\n     */\n    public childClicked(instance: ICalendarDate) {\n        if (instance.isPrevMonth) {\n            this.previousMonth();\n        }\n\n        if (instance.isNextMonth) {\n            this.nextMonth();\n        }\n\n        this.selectDateFromClient(instance.date);\n        if (this.selection === 'multi') {\n            this.deselectDateInMonthViews(instance.date);\n        }\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public viewChanging(args: IViewChangingEventArgs) {\n        this.animationAction = args.monthAction;\n        this.isKeydownTrigger = true;\n        this.nextDate = args.nextDate;\n        this.callback = (next) => {\n            const day = this.daysView.dates.find((item) => item.date.date.getTime() === next.getTime());\n            if (day) {\n                this.daysView.daysNavService.focusNextDate(day.nativeElement, args.key, true);\n            }\n        };\n        this.viewDate = this.nextDate;\n    }\n\n    /**\n     * @hidden\n     * @intenal\n     */\n    public changeMonth(event: Date) {\n        this.viewDate = this.calendarModel.getFirstViewDate(event, 'month', this.activeViewIdx);\n        this.activeView = CalendarView.DEFAULT;\n\n        requestAnimationFrame(() => {\n            const elem = this.monthsBtns.find((e: ElementRef, idx: number) => idx === this.activeViewIdx);\n            if (elem) { elem.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onActiveViewYear(args: Date, activeViewIdx: number, event?): void {\n        this.activeView = CalendarView.YEAR;\n        this.activeViewIdx = activeViewIdx;\n        requestAnimationFrame(() => {\n            this.monthsView.date = args;\n            this.focusMonth(event.target);\n        });\n    }\n\n    private focusMonth(target: HTMLElement) {\n        const month = this.monthsView.monthsRef.find((e) =>\n            e.index === parseInt(target.parentElement.attributes['data-month'].value, 10));\n        if (month) { month.nativeElement.focus(); }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onActiveViewYearKB(args: Date, event, activeViewIdx: number): void {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            this.onActiveViewYear(args, activeViewIdx, event);\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     *\n     * @example\n     *```typescript\n     * this.calendar.deselectDate(new Date(`2018-06-12`));\n     *````\n     */\n    public deselectDate(value?: Date | Date[]) {\n        super.deselectDate(value);\n\n        this.monthViews.forEach((view) => {\n            view.selectedDates = this.selectedDates;\n            view.rangeStarted = false;\n        });\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Helper method that does deselection for all month views when selection is \"multi\"\n     * If not called, selection in other month views stays\n     * @hidden\n     * @internal\n     */\n    private deselectDateInMonthViews(value: Date) {\n        this.monthViews.forEach(m => {\n            m.deselectMultipleInMonth(value);\n         });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getViewDate(i: number): Date {\n        const date = this.calendarModel.timedelta(this.viewDate, 'month', i);\n        return date;\n    }\n\n    /**\n     * Getter for the context object inside the calendar templates.\n     * @hidden\n     * @internal\n     */\n    public getContext(i: number) {\n        const date = this.getViewDate(i);\n        return this.generateContext(date, i);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public animationDone(event) {\n        if (this.monthScrollDirection !== ScrollMonth.NONE) {\n            this.scrollMonth$.next();\n        }\n\n        if (this.activeView !== CalendarView.DEFAULT) {\n            return;\n        }\n\n        let monthView = this.daysView as IgxDaysViewComponent;\n        let date = monthView.dates.find((d) => d.selected);\n\n        while (!date && monthView.nextMonthView) {\n            monthView = monthView.nextMonthView;\n            date = monthView.dates.find((d) => d.selected);\n        }\n        if (date && date.isFocusable && !this.isKeydownTrigger) {\n            setTimeout(() => {\n                date.nativeElement.focus();\n            }, parseInt(slideInRight.options.params.duration, 10));\n        } else if (this.callback && (event.toState === ScrollMonth.NEXT || event.toState === ScrollMonth.PREV)) {\n            this.callback(this.nextDate);\n        }\n        this.animationAction = ScrollMonth.NONE;\n    }\n\n    /**\n     * Keyboard navigation of the calendar\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    @HostListener('keydown.pageup', ['$event'])\n    public onKeydownPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.activeView !== CalendarView.DEFAULT) {\n            return;\n        }\n\n        const isPageDown = event.key === 'PageDown';\n        const step = isPageDown ? 1 : -1;\n        let monthView = this.daysView as IgxDaysViewComponent;\n        let activeDate;\n\n        while (!activeDate && monthView) {\n            activeDate = monthView.dates.find((date) => date.nativeElement === document.activeElement);\n            monthView = monthView.nextMonthView;\n        }\n\n        if (activeDate) {\n            this.nextDate = new Date(activeDate.date.date);\n\n            let year = this.nextDate.getFullYear();\n\n            let month = this.nextDate.getMonth() + step;\n            if (isPageDown) {\n                if (month > 11) { month = 0; year += step; }\n            } else {\n                if (month < 0) { month = 11; year += step; }\n            }\n\n            const range = monthRange(this.nextDate.getFullYear(), month);\n\n            let day = this.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.nextDate.setDate(day);\n            this.nextDate.setMonth(month);\n            this.nextDate.setFullYear(year);\n\n            this.callback = (next) => {\n                monthView = this.daysView as IgxDaysViewComponent;\n                let dayItem;\n                while ((!dayItem && monthView) || (dayItem && !dayItem.isCurrentMonth)) {\n                    dayItem = monthView.dates.find((d) => d.date.date.getTime() === next.getTime());\n                    monthView = monthView.nextMonthView;\n                }\n                if (dayItem && dayItem.isFocusable) { dayItem.nativeElement.focus(); }\n            };\n        }\n\n        if (isPageDown) { this.nextMonth(true); } else {\n            this.previousMonth(true);\n        }\n    }\n\n    /**\n     * Keyboard navigation of the calendar\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown.shift.pageup', ['$event'])\n    @HostListener('keydown.shift.pagedown', ['$event'])\n    public onKeydownShiftPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.activeView !== CalendarView.DEFAULT) {\n            return;\n        }\n\n        const isPageDown = event.key === 'PageDown';\n        const step = isPageDown ? 1 : -1;\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', step);\n\n        this.animationAction = isPageDown ? ScrollMonth.NEXT : ScrollMonth.PREV;\n        this.isKeydownTrigger = true;\n\n        let monthView = this.daysView as IgxDaysViewComponent;\n        let activeDate;\n\n        while (!activeDate && monthView) {\n            activeDate = monthView.dates.find((date) => date.nativeElement === document.activeElement);\n            monthView = monthView.nextMonthView;\n        }\n\n        if (activeDate) {\n            this.nextDate = new Date(activeDate.date.date);\n\n            const year = this.nextDate.getFullYear() + step;\n\n            const range = monthRange(year, this.nextDate.getMonth());\n\n            let day = this.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.nextDate.setDate(day);\n            this.nextDate.setFullYear(year);\n\n            this.callback = (next) => {\n                monthView = this.daysView as IgxDaysViewComponent;\n                let dayItem;\n                while ((!dayItem && monthView) || (dayItem && !dayItem.isCurrentMonth)) {\n                    dayItem = monthView.dates.find((d) => d.date.date.getTime() === next.getTime());\n                    monthView = monthView.nextMonthView;\n                }\n                if (dayItem && dayItem.isFocusable) { dayItem.nativeElement.focus(); }\n            };\n        }\n    }\n\n    /**\n     * Keyboard navigation of the calendar\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        if (this.daysView) {\n            this.daysView.onKeydownHome(event);\n        }\n    }\n\n    /**\n     * Keyboard navigation of the calendar\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        if (this.daysView) {\n            this.daysView.onKeydownEnd(event);\n        }\n    }\n\n    /**\n     * Stop continuous navigation on mouseup event\n     * @hidden\n     * @internal\n     */\n    @HostListener('document:mouseup', ['$event'])\n    public onMouseUp(event: KeyboardEvent) {\n        if (this.monthScrollDirection !== ScrollMonth.NONE) {\n            this.stopMonthScroll(event);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngOnDestroy(): void {\n        if (this._monthViewsChanges$) {\n            this._monthViewsChanges$.unsubscribe();\n        }\n    }\n\n    /**\n     * Helper method building and returning the context object inside\n     * the calendar templates.\n     * @hidden\n     * @internal\n     */\n    private generateContext(value: Date, i?: number) {\n        const formatObject = {\n            index: i,\n            monthView: () => this.onActiveViewYear(value, i),\n            yearView: () => this.onActiveViewDecade(value, i),\n            ...this.calendarModel.formatToParts(value, this.locale, this.formatOptions,\n                ['era', 'year', 'month', 'day', 'weekday'])\n        };\n        return { $implicit: formatObject };\n    }\n\n    /**\n     * Helper method that sets references for prev/next months for each month in the view\n     * @hidden\n     * @internal\n     */\n    private setSiblingMonths(monthViews: QueryList<IgxDaysViewComponent>) {\n        monthViews.forEach((item, index) => {\n            const prevMonthView = this.getMonthView(index - 1);\n            const nextMonthView = this.getMonthView(index + 1);\n            item.nextMonthView = nextMonthView;\n            item.prevMonthView = prevMonthView;\n        });\n    }\n\n    /**\n     * Helper method returning previous/next day views\n     * @hidden\n     * @internal\n     */\n    private getMonthView(index: number): IgxDaysViewComponent {\n        if (index === -1 || index === this.monthViews.length ) {\n            return null;\n        } else {\n            return this.monthViews.toArray()[index];\n        }\n    }\n}\n","import {\n    Component,\n    HostListener,\n    ViewChild,\n    HostBinding,\n    Input,\n    ElementRef\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { trigger, transition, useAnimation } from '@angular/animations';\nimport { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../../animations/main';\nimport { KEYS } from '../../core/utils';\nimport { IgxMonthsViewComponent } from '../months-view/months-view.component';\nimport { IgxMonthPickerBaseDirective, CalendarView } from '../month-picker-base';\nimport { IgxYearsViewComponent } from '../years-view/years-view.component';\nimport { IgxDaysViewComponent } from '../days-view/days-view.component';\n\nlet NEXT_ID = 0;\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxMonthPickerComponent\n        }\n    ],\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ]),\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-month-picker',\n    templateUrl: 'month-picker.component.html'\n})\nexport class IgxMonthPickerComponent extends IgxMonthPickerBaseDirective {\n    /**\n     * Sets/gets the `id` of the month picker.\n     * If not set, the `id` will have value `\"igx-month-picker-0\"`.\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-month-picker-${NEXT_ID++}`;\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('months', { read: IgxMonthsViewComponent })\n    public monthsView: IgxMonthsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('decade', { read: IgxYearsViewComponent })\n    public dacadeView: IgxYearsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('days', { read: IgxDaysViewComponent })\n    public daysView: IgxDaysViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('yearsBtn')\n    public yearsBtn: ElementRef;\n\n    /**\n     * @hidden\n     */\n    public yearAction = '';\n\n    /**\n     * @hidden\n     */\n    public animationDone() {\n        this.yearAction = '';\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event) {\n        super.activeViewDecadeKB(event);\n\n        if (event.key === KEYS.RIGHT_ARROW || event.key === KEYS.RIGHT_ARROW_IE) {\n            event.preventDefault();\n            this.nextYear();\n        }\n\n        if (event.key === KEYS.LEFT_ARROW || event.key === KEYS.LEFT_ARROW_IE) {\n            event.preventDefault();\n            this.previousYear();\n        }\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) { this.dacadeView.el.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade() {\n        super.activeViewDecade();\n\n        requestAnimationFrame(() => {\n            this.dacadeView.el.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public nextYear() {\n        this.yearAction = 'next';\n        this.viewDate = this.calendarModel.getNextYear(this.viewDate);\n\n        this.selectDate(this.viewDate);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public nextYearKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            this.nextYear();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public previousYear() {\n        this.yearAction = 'prev';\n        this.viewDate = this.calendarModel.getPrevYear(this.viewDate);\n\n        this.selectDate(this.viewDate);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public previousYearKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            this.previousYear();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectYear(event: Date) {\n        this.viewDate = new Date(event.getFullYear(), event.getMonth(), event.getDate());\n        this.activeView = CalendarView.DEFAULT;\n\n        this.selectDate(event);\n        this.onSelection.emit(this.selectedDates);\n\n        requestAnimationFrame(() => {\n            if (this.yearsBtn) { this.yearsBtn.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public selectMonth(event: Date) {\n        this.selectDate(event);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * Selects a date.\n     *```typescript\n     * this.monPicker.selectDate(new Date(`2018-06-12`));\n     *```\n     */\n    public selectDate(value: Date) {\n        if (!value) {\n            return new Date();\n        }\n\n        // TO DO: to be refactored after discussion on the desired behavior\n        super.selectDate(value);\n        this.viewDate = value;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n\n        // TO DO: to be refactored after discussion on the desired behavior\n        if (value) {\n            this.viewDate = this.selectedDates = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pageup', ['$event'])\n    public onKeydownPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n        this.yearAction = 'prev';\n        this.viewDate = this.calendarModel.getPrevYear(this.viewDate);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    public onKeydownPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n        this.yearAction = 'next';\n        this.viewDate = this.calendarModel.getNextYear(this.viewDate);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        if (this.monthsView) {\n            this.monthsView.el.nativeElement.focus();\n            this.monthsView.onKeydownHome(event);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        if (this.monthsView) {\n            this.monthsView.el.nativeElement.focus();\n            this.monthsView.onKeydownEnd(event);\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Calendar } from './calendar';\n\n@Pipe({\n    name: 'IgxMonthViewSlots'\n})\nexport class IgxMonthViewSlotsCalendar implements PipeTransform {\n    public transform(monthViews: number) {\n        return new Array(monthViews);\n    }\n}\n\n@Pipe({\n    name: 'IgxGetViewDate'\n})\nexport class IgxGetViewDateCalendar implements PipeTransform {\n    private calendar: Calendar;\n    constructor() {\n        this.calendar = new Calendar();\n    }\n    public transform(index: number, viewDate: Date, wholeDate = true) {\n        const date = this.calendar.timedelta(viewDate, 'month', index);\n        return wholeDate ? date : date.getMonth();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxCalendarComponent } from './calendar.component';\nimport {\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarMonthDirective,\n    IgxCalendarSubheaderTemplateDirective,\n    IgxCalendarYearDirective,\n    IgxCalendarScrollMonthDirective\n} from './calendar.directives';\nimport { IgxMonthsViewComponent } from './months-view/months-view.component';\nimport { IgxYearsViewComponent } from './years-view/years-view.component';\nimport { IgxDaysViewComponent } from './days-view/days-view.component';\nimport { IgxDayItemComponent } from './days-view/day-item.component';\nimport { IgxMonthPickerComponent } from './month-picker/month-picker.component';\nimport { IgxCalendarBaseDirective } from './calendar-base';\nimport { IgxMonthPickerBaseDirective } from './month-picker-base';\nimport { IgxMonthViewSlotsCalendar, IgxGetViewDateCalendar } from './months-view.pipe';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxCalendarBaseDirective,\n        IgxMonthPickerBaseDirective,\n        IgxDayItemComponent,\n        IgxDaysViewComponent,\n        IgxCalendarComponent,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective,\n        IgxCalendarScrollMonthDirective,\n        IgxMonthsViewComponent,\n        IgxYearsViewComponent,\n        IgxMonthPickerComponent,\n        IgxMonthViewSlotsCalendar,\n        IgxGetViewDateCalendar\n    ],\n    exports: [\n        IgxCalendarComponent,\n        IgxDaysViewComponent,\n        IgxMonthsViewComponent,\n        IgxYearsViewComponent,\n        IgxMonthPickerComponent,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective\n    ],\n    imports: [CommonModule, FormsModule, IgxIconModule]\n})\nexport class IgxCalendarModule { }\n","import { Component, OnDestroy, Input, HostBinding, Output, EventEmitter, ElementRef, ChangeDetectorRef } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nexport enum Direction { NONE, NEXT, PREV }\n\n/**\n * A slide component that usually holds an image and/or a caption text.\n * IgxSlideComponent is usually a child component of an IgxCarouselComponent.\n *\n * ```\n * <igx-slide [input bindings] >\n *    <ng-content></ng-content>\n * </igx-slide>\n * ```\n *\n * @export\n */\n@Component({\n    selector: 'igx-slide',\n    templateUrl: 'slide.component.html'\n})\n\nexport class IgxSlideComponent implements OnDestroy {\n    private _active = false;\n    private _destroy$ = new Subject<boolean>();\n    /**\n     * Gets/sets the `index` of the slide inside the carousel.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide index = \"1\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public index: number;\n\n    /**\n     * Gets/sets the target `direction` for the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide direction=\"NEXT\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public direction: Direction;\n\n    /**\n     * Returns the `tabIndex` of the slide component.\n     * ```typescript\n     * let tabIndex =  this.carousel.tabIndex;\n     * ```\n     * @memberof IgxSlideComponent\n     */\n    @HostBinding('attr.tabindex')\n    get tabIndex() {\n        return this.active ? 0 : null;\n    }\n\n    /**\n     * Returns the `aria-selected` of the slide.\n     *\n     * ```typescript\n     * let slide = this.slide.ariaSelected;\n     * ```\n     *\n     */\n    @HostBinding('attr.aria-selected')\n    public get ariaSelected(): boolean {\n        return this.active;\n    }\n\n    /**\n     * Returns the `aria-live` of the slide.\n     *\n     * ```typescript\n     * let slide = this.slide.ariaLive;\n     * ```\n     *\n     */\n    @HostBinding('attr.aria-selected')\n    public get ariaLive() {\n        return this.active ? 'polite' : null;\n    }\n\n    /**\n     * Returns the class of the slide component.\n     * ```typescript\n     * let class =  this.slide.cssClass;\n     * ```\n     * @memberof IgxSlideComponent\n     */\n    @HostBinding('class.igx-slide')\n    public cssClass = 'igx-slide';\n\n    /**\n     * Gets/sets the `active` state of the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide [active] =\"false\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide [(active)] =\"model.isActive\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberof IgxSlideComponent\n     */\n    @HostBinding('class.igx-slide--current')\n    @Input()\n    public get active(): boolean {\n        return this._active;\n    }\n\n    public set active(value) {\n        this._active = !!value;\n        this.activeChange.emit(this._active);\n    }\n\n    @HostBinding('class.igx-slide--previous')\n    @Input() public previous = false;\n\n    /**\n     *@hidden\n     */\n    @Output() public activeChange = new EventEmitter<boolean>();\n\n    constructor(private elementRef: ElementRef) { }\n\n    /**\n    * Returns a reference to the carousel element in the DOM.\n    * ```typescript\n    * let nativeElement =  this.slide.nativeElement;\n    * ```\n    * @memberof IgxSlideComponent\n    */\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n    * @hidden\n    */\n    public get isDestroyed(): Subject<boolean> {\n    return this._destroy$;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxCarouselIndicator]'\n})\nexport class IgxCarouselIndicatorDirective {\n}\n\n@Directive({\n    selector: '[igxCarouselNextButton]'\n})\nexport class IgxCarouselNextButtonDirective {\n}\n\n@Directive({\n    selector: '[igxCarouselPrevButton]'\n})\nexport class IgxCarouselPrevButtonDirective {\n}\n","import { IGridResourceStrings, GridResourceStringsEN } from './grid-resources';\nimport { ITimePickerResourceStrings, TimePickerResourceStringsEN } from './time-picker-resources';\nimport { PaginatorResourceStringsEN } from './paginator-resources';\nimport { cloneValue } from '../utils';\nimport { ICarouselResourceStrings, CarouselResourceStringsEN } from './carousel-resources';\n\nexport interface IResourceStrings extends IGridResourceStrings, ITimePickerResourceStrings, ICarouselResourceStrings  {}\n\n/**\n * @hidden\n */\nexport const CurrentResourceStrings = {\n    GridResStrings: cloneValue(GridResourceStringsEN),\n    TimePickerResStrings: cloneValue(TimePickerResourceStringsEN),\n    PaginatorResStrings: cloneValue(PaginatorResourceStringsEN),\n    CarouselResStrings: cloneValue(CarouselResourceStringsEN),\n};\n\nfunction updateResourceStrings(currentStrings: IResourceStrings, newStrings: IResourceStrings ) {\n    for (const key of Object.keys(newStrings)) {\n        if (key in currentStrings) {\n            currentStrings[key] = newStrings[key];\n        }\n    }\n}\n\n/**\n * Changes the resource strings for all components in the application\n * ```\n * @param resourceStrings to be applied\n */\nexport function changei18n(resourceStrings: IResourceStrings) {\n    for (const key of Object.keys(CurrentResourceStrings)) {\n        updateResourceStrings(CurrentResourceStrings[key], resourceStrings);\n    }\n}\n\n/**\n * Returns current resource strings for all components\n */\nexport function getCurrentResourceStrings(): IResourceStrings {\n    return {\n            ...CurrentResourceStrings.GridResStrings,\n            ...CurrentResourceStrings.TimePickerResStrings\n    };\n}\n","export interface IGridResourceStrings {\n    igx_grid_groupByArea_message?: string;\n    igx_grid_emptyFilteredGrid_message?: string;\n    igx_grid_emptyGrid_message?: string;\n    igx_grid_filter?: string;\n    igx_grid_filter_row_close?: string;\n    igx_grid_filter_row_reset?: string;\n    igx_grid_filter_row_placeholder?: string;\n    igx_grid_filter_row_boolean_placeholder?: string;\n    igx_grid_filter_row_date_placeholder?: string;\n    igx_grid_filter_operator_and?: string;\n    igx_grid_complex_filter?: string;\n    igx_grid_filter_operator_or?: string;\n    igx_grid_filter_contains?: string;\n    igx_grid_filter_doesNotContain?: string;\n    igx_grid_filter_startsWith?: string;\n    igx_grid_filter_endsWith?: string;\n    igx_grid_filter_equals?: string;\n    igx_grid_filter_doesNotEqual?: string;\n    igx_grid_filter_empty?: string;\n    igx_grid_filter_notEmpty?: string;\n    igx_grid_filter_null?: string;\n    igx_grid_filter_notNull?: string;\n    igx_grid_filter_before?: string;\n    igx_grid_filter_after?: string;\n    igx_grid_filter_today?: string;\n    igx_grid_filter_yesterday?: string;\n    igx_grid_filter_thisMonth?: string;\n    igx_grid_filter_lastMonth?: string;\n    igx_grid_filter_nextMonth?: string;\n    igx_grid_filter_thisYear?: string;\n    igx_grid_filter_lastYear?: string;\n    igx_grid_filter_nextYear?: string;\n    igx_grid_filter_greaterThan?: string;\n    igx_grid_filter_lessThan?: string;\n    igx_grid_filter_greaterThanOrEqualTo?: string;\n    igx_grid_filter_lessThanOrEqualTo?: string;\n    igx_grid_filter_true?: string;\n    igx_grid_filter_false?: string;\n    igx_grid_filter_all?: string;\n    igx_grid_filter_condition_placeholder?: string;\n    igx_grid_summary_count?: string;\n    igx_grid_summary_min?: string;\n    igx_grid_summary_max?: string;\n    igx_grid_summary_sum?: string;\n    igx_grid_summary_average?: string;\n    igx_grid_summary_earliest?: string;\n    igx_grid_summary_latest?: string;\n    igx_grid_excel_filter_moving_left?: string;\n    igx_grid_excel_filter_moving_left_short?: string;\n    igx_grid_excel_filter_moving_right?: string;\n    igx_grid_excel_filter_moving_right_short?: string;\n    igx_grid_excel_filter_moving_header?: string;\n    igx_grid_excel_filter_sorting_asc?: string;\n    igx_grid_excel_filter_sorting_asc_short?: string;\n    igx_grid_excel_filter_sorting_desc?: string;\n    igx_grid_excel_filter_sorting_desc_short?: string;\n    igx_grid_excel_filter_sorting_header?: string;\n    igx_grid_excel_filter_clear?: string;\n    igx_grid_excel_custom_dialog_add?: string;\n    igx_grid_excel_custom_dialog_clear?: string;\n    igx_grid_excel_custom_dialog_header?: string;\n    igx_grid_excel_cancel?: string;\n    igx_grid_excel_apply?: string;\n    igx_grid_excel_search_placeholder?: string;\n    igx_grid_excel_select_all?: string;\n    igx_grid_excel_blanks?: string;\n    igx_grid_excel_hide?: string;\n    igx_grid_excel_show?: string;\n    igx_grid_excel_pin?: string;\n    igx_grid_excel_unpin?: string;\n    igx_grid_excel_text_filter?: string;\n    igx_grid_excel_number_filter?: string;\n    igx_grid_excel_date_filter?: string;\n    igx_grid_excel_boolean_filter?: string;\n    igx_grid_excel_custom_filter?: string;\n    igx_grid_advanced_filter_title?: string;\n    igx_grid_advanced_filter_and_group?: string;\n    igx_grid_advanced_filter_or_group?: string;\n    igx_grid_advanced_filter_end_group?: string;\n    igx_grid_advanced_filter_create_and_group?: string;\n    igx_grid_advanced_filter_create_or_group?: string;\n    igx_grid_advanced_filter_and_label?: string;\n    igx_grid_advanced_filter_or_label?: string;\n    igx_grid_advanced_filter_add_condition?: string;\n    igx_grid_advanced_filter_ungroup?: string;\n    igx_grid_advanced_filter_delete?: string;\n    igx_grid_advanced_filter_delete_filters?: string;\n    igx_grid_advanced_filter_initial_text?: string;\n    igx_grid_advanced_filter_column_placeholder?: string;\n    igx_grid_advanced_filter_value_placeholder?: string;\n}\n\nexport const GridResourceStringsEN: IGridResourceStrings = {\n    igx_grid_groupByArea_message: 'Drag a column header and drop it here to group by that column.',\n    igx_grid_emptyFilteredGrid_message: 'No records found.',\n    igx_grid_emptyGrid_message: 'Grid has no data.',\n    igx_grid_filter: 'Filter',\n    igx_grid_filter_row_close: 'Close',\n    igx_grid_filter_row_reset: 'Reset',\n    igx_grid_filter_row_placeholder: 'Add filter value',\n    igx_grid_filter_row_boolean_placeholder: 'All',\n    igx_grid_filter_row_date_placeholder: 'Pick up date',\n    igx_grid_filter_operator_and: 'And',\n    igx_grid_filter_operator_or: 'Or',\n    igx_grid_complex_filter: 'Complex Filter',\n    igx_grid_filter_contains: 'Contains',\n    igx_grid_filter_doesNotContain: 'Does Not Contain',\n    igx_grid_filter_startsWith: 'Starts With',\n    igx_grid_filter_endsWith: 'Ends With',\n    igx_grid_filter_equals: 'Equals',\n    igx_grid_filter_doesNotEqual: 'Does Not Equal',\n    igx_grid_filter_empty: 'Empty',\n    igx_grid_filter_notEmpty: 'Not Empty',\n    igx_grid_filter_null: 'Null',\n    igx_grid_filter_notNull: 'Not Null',\n    igx_grid_filter_before: 'Before',\n    igx_grid_filter_after: 'After',\n    igx_grid_filter_today: 'Today',\n    igx_grid_filter_yesterday: 'Yesterday',\n    igx_grid_filter_thisMonth: 'This Month',\n    igx_grid_filter_lastMonth: 'Last Month',\n    igx_grid_filter_nextMonth: 'Next Month',\n    igx_grid_filter_thisYear: 'This Year',\n    igx_grid_filter_lastYear: 'Last Year',\n    igx_grid_filter_nextYear: 'Next Year',\n    igx_grid_filter_greaterThan: 'Greater Than',\n    igx_grid_filter_lessThan: 'Less Than',\n    igx_grid_filter_greaterThanOrEqualTo: 'Greater Than Or Equal To',\n    igx_grid_filter_lessThanOrEqualTo: 'Less Than Or Equal To',\n    igx_grid_filter_true: 'True',\n    igx_grid_filter_false: 'False',\n    igx_grid_filter_all: 'All',\n    igx_grid_filter_condition_placeholder: 'Select filter',\n    igx_grid_summary_count: 'Count',\n    igx_grid_summary_min: 'Min',\n    igx_grid_summary_max: 'Max',\n    igx_grid_summary_sum: 'Sum',\n    igx_grid_summary_average: 'Avg',\n    igx_grid_summary_earliest: 'Earliest',\n    igx_grid_summary_latest: 'Latest',\n    igx_grid_excel_filter_moving_left: 'move left',\n    igx_grid_excel_filter_moving_left_short: 'left',\n    igx_grid_excel_filter_moving_right: 'move right',\n    igx_grid_excel_filter_moving_right_short: 'right',\n    igx_grid_excel_filter_moving_header: 'move',\n    igx_grid_excel_filter_sorting_asc: 'ascending',\n    igx_grid_excel_filter_sorting_asc_short: 'asc',\n    igx_grid_excel_filter_sorting_desc: 'descending',\n    igx_grid_excel_filter_sorting_desc_short: 'desc',\n    igx_grid_excel_filter_sorting_header: 'sort',\n    igx_grid_excel_filter_clear: 'Clear column filters',\n    igx_grid_excel_custom_dialog_add: 'add filter',\n    igx_grid_excel_custom_dialog_clear: 'Clear filter',\n    igx_grid_excel_custom_dialog_header: 'Custom auto-filter on column: ',\n    igx_grid_excel_cancel: 'cancel',\n    igx_grid_excel_apply: 'apply',\n    igx_grid_excel_search_placeholder: 'Search',\n    igx_grid_excel_select_all: 'Select All',\n    igx_grid_excel_blanks: '(Blanks)',\n    igx_grid_excel_hide: 'Hide column',\n    igx_grid_excel_show: 'Show column',\n    igx_grid_excel_pin: 'Pin column',\n    igx_grid_excel_unpin: 'Unpin column',\n    igx_grid_excel_text_filter: 'Text filter',\n    igx_grid_excel_number_filter: 'Number filter',\n    igx_grid_excel_date_filter: 'Date filter',\n    igx_grid_excel_boolean_filter: 'Boolean filter',\n    igx_grid_excel_custom_filter: 'Custom filter...',\n    igx_grid_advanced_filter_title: 'Advanced Filtering',\n    igx_grid_advanced_filter_and_group: '\"And\" Group',\n    igx_grid_advanced_filter_or_group: '\"Or\" Group',\n    igx_grid_advanced_filter_end_group: 'End Group',\n    igx_grid_advanced_filter_create_and_group: 'Create \"And\" Group',\n    igx_grid_advanced_filter_create_or_group: 'Create \"Or\" Group',\n    igx_grid_advanced_filter_and_label: 'and',\n    igx_grid_advanced_filter_or_label: 'or',\n    igx_grid_advanced_filter_add_condition: 'Condition',\n    igx_grid_advanced_filter_ungroup: 'Ungroup',\n    igx_grid_advanced_filter_delete: 'Delete',\n    igx_grid_advanced_filter_delete_filters: 'Delete filters',\n    igx_grid_advanced_filter_initial_text: 'Start with creating a group of conditions linked with \"And\" or \"Or\"',\n    igx_grid_advanced_filter_column_placeholder: 'Select column',\n    igx_grid_advanced_filter_value_placeholder: 'Value'\n};\n","export interface ITimePickerResourceStrings {\n    igx_time_picker_ok?: string;\n    igx_time_picker_cancel?: string;\n}\n\nexport const TimePickerResourceStringsEN: ITimePickerResourceStrings = {\n    igx_time_picker_ok: 'OK',\n    igx_time_picker_cancel: 'Cancel'\n};\n","export interface IPaginatorResourceStrings {\n    igx_paginator_label?: string;\n}\n\nexport const PaginatorResourceStringsEN: IPaginatorResourceStrings = {\n    igx_paginator_label: 'Items per page'\n};\n","export interface ICarouselResourceStrings {\n    igx_carousel_of?: string;\n}\n\nexport const CarouselResourceStringsEN: ICarouselResourceStrings = {\n    igx_carousel_of: 'of'\n};\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    Output,\n    ContentChildren,\n    QueryList,\n    IterableDiffer,\n    IterableDiffers,\n    AfterContentInit,\n    IterableChangeRecord,\n    TemplateRef,\n    ViewChild,\n    ContentChild,\n    Injectable\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\nimport { IBaseEventArgs, PlatformUtil } from '../core/utils';\nimport { Subject, merge } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxCarouselIndicatorDirective, IgxCarouselNextButtonDirective, IgxCarouselPrevButtonDirective } from './carousel.directives';\nimport { useAnimation, AnimationBuilder, AnimationPlayer, AnimationReferenceMetadata } from '@angular/animations';\nimport { slideInLeft, fadeIn } from '../animations/main';\nimport { IgxSlideComponent, Direction } from './slide.component';\nimport { ICarouselResourceStrings } from '../core/i18n/carousel-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { HammerGestureConfig, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\nlet NEXT_ID = 0;\n\nexport enum CarouselIndicatorsOrientation {\n    bottom = 'bottom',\n    top = 'top'\n}\n\nexport enum CarouselAnimationType {\n    none = 'none',\n    slide = 'slide',\n    fade = 'fade'\n}\n\nexport interface CarouselAnimationSettings {\n    enterAnimation: AnimationReferenceMetadata;\n    leaveAnimation: AnimationReferenceMetadata;\n}\n\n@Injectable()\nexport class CarouselHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_HORIZONTAL }\n    };\n}\n/**\n * **Ignite UI for Angular Carousel** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/carousel.html)\n *\n * The Ignite UI Carousel is used to browse or navigate through a collection of slides. Slides can contain custom\n * content such as images or cards and be used for things such as on-boarding tutorials or page-based interfaces.\n * It can be used as a separate fullscreen element or inside another component.\n *\n * Example:\n * ```html\n * <igx-carousel>\n *   <igx-slide>\n *     <h3>First Slide Header</h3>\n *     <p>First slide Content</p>\n *   <igx-slide>\n *   <igx-slide>\n *     <h3>Second Slide Header</h3>\n *     <p>Second Slide Content</p>\n * </igx-carousel>\n * ```\n */\n@Component({\n    providers: [\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: CarouselHammerConfig\n        }\n    ],\n    selector: 'igx-carousel',\n    templateUrl: 'carousel.component.html',\n    styles: [`\n    :host {\n        display: block;\n        outline-style: none;\n    }`]\n})\n\nexport class IgxCarouselComponent implements OnDestroy, AfterContentInit {\n    /**\n     * Returns the `role` attribute of the carousel.\n     * ```typescript\n     * let carouselRole =  this.carousel.role;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.role') public role = 'region';\n\n    /**\n     * Sets the `id` of the carousel.\n     * If not set, the `id` of the first carousel component will be `\"igx-carousel-0\"`.\n     * ```html\n     * <igx-carousel id=\"my-first-carousel\"></igx-carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-carousel-${NEXT_ID++}`;\n\n    /**\n     * Returns the `aria-label` of the carousel.\n     *\n     * ```typescript\n     * let carousel = this.carousel.ariaLabel;\n     * ```\n     *\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = 'carousel';\n\n    /**\n     * Returns the `tabIndex` of the carousel component.\n     * ```typescript\n     * let tabIndex =  this.carousel.tabIndex;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.tabindex')\n    get tabIndex() {\n        return 0;\n    }\n\n    /**\n     * Returns the class of the carousel component.\n     * ```typescript\n     * let class =  this.carousel.cssClass;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('class.igx-carousel')\n    public cssClass = 'igx-carousel';\n\n    /**\n    * Gets the `touch-action` style of the `list item`.\n    * ```typescript\n    * let touchAction = this.listItem.touchAction;\n    * ```\n    */\n    @HostBinding('style.touch-action')\n    get touchAction() {\n        return this.gesturesSupport ? 'pan-y' : 'auto';\n    }\n\n    /**\n     * Sets whether the carousel should `loop` back to the first slide after reaching the last slide.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [loop]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public loop = true;\n\n    /**\n     * Sets whether the carousel will `pause` the slide transitions on user interactions.\n     * Default value is `true`.\n     * ```html\n     *  <igx-carousel [pause]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public pause = true;\n\n    /**\n     * Returns the time `interval` in milliseconds before the slide changes.\n     * ```typescript\n     * let timeInterval = this.carousel.interval;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @Input()\n    get interval(): number {\n        return this._interval;\n    }\n\n    /**\n     * Sets the time `interval` in milliseconds before the slide changes.\n     * If not set, the carousel will not change `slides` automatically.\n     * ```html\n     * <igx-carousel [interval] = \"1000\"></igx-carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    set interval(value: number) {\n        this._interval = +value;\n        this.restartInterval();\n    }\n\n    /**\n     * Controls whether the carousel should render the left/right `navigation` buttons.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [navigation] = \"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public navigation = true;\n\n    /**\n    * Controls whether the carousel should support keyboard navigation.\n    * Default value is `true`.\n    * ```html\n    * <igx-carousel [keyboardSupport] = \"false\"></igx-carousel>\n    * ```\n    * @memberOf IgxCarouselComponent\n    */\n    @Input() public keyboardSupport = true;\n\n    /**\n  * Controls whether the carousel should support gestures.\n  * Default value is `true`.\n  * ```html\n  * <igx-carousel [gesturesSupport] = \"false\"></igx-carousel>\n  * ```\n  * @memberOf IgxCarouselComponent\n  */\n    @Input() public gesturesSupport = true;\n\n    /**\n     * Controls the maximum indexes that can be shown.\n     * Default value is `5`.\n     * ```html\n     * <igx-carousel [maximumIndicatorsCount] = \"10\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public maximumIndicatorsCount = 5;\n\n    /**\n    * Gets/sets the display mode of carousel indicators. It can be top or bottom.\n    * Default value is `bottom`.\n    * ```html\n    * <igx-carousel indicatorsOrientation='top'>\n    * <igx-carousel>\n    * ```\n    * @memberOf IgxSlideComponent\n    */\n    @Input() public indicatorsOrientation: CarouselIndicatorsOrientation = CarouselIndicatorsOrientation.bottom;\n\n    /**\n   * Gets/sets the animation type of carousel.\n   * Default value is `slide`.\n   * ```html\n   * <igx-carousel animationType='none'>\n   * <igx-carousel>\n   * ```\n   * @memberOf IgxSlideComponent\n   */\n    @Input() public animationType = CarouselAnimationType.slide;\n\n    /**\n    * An accessor that sets the resource strings.\n    * By default it uses EN resources.\n    */\n    @Input()\n    set resourceStrings(value: ICarouselResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n    */\n    get resourceStrings(): ICarouselResourceStrings {\n        return this._resourceStrings;\n    }\n\n    @ViewChild('defaultIndicator', { read: TemplateRef, static: true })\n    private defaultIndicator: TemplateRef<any>;\n\n    @ViewChild('defaultNextButton', { read: TemplateRef, static: true })\n    private defaultNextButton: TemplateRef<any>;\n\n    @ViewChild('defaultPrevButton', { read: TemplateRef, static: true })\n    private defaultPrevButton: TemplateRef<any>;\n\n    /**\n     * The custom template, if any, that should be used when rendering carousel indicators\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.carousel.indicatorTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-carousel #carousel>\n     *      ...\n     *      <ng-template igxCarouselIndicator let-slide>\n     *         <igx-icon *ngIf=\"slide.active\"  fontSet=\"material\">brightness_7</igx-icon>\n     *         <igx-icon *ngIf=\"!slide.active\"  fontSet=\"material\">brightness_5</igx-icon>\n     *      </ng-template>\n     *  </igx-carousel>\n     * ```\n     */\n    @ContentChild(IgxCarouselIndicatorDirective, { read: TemplateRef, static: false })\n    public indicatorTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering carousel next button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.carousel.nextButtonTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-carousel #carousel>\n     *      ...\n     *      <ng-template igxCarouselNextButton let-disabled>\n     *            <button igxButton=\"fab\" igxRipple=\"white\" [disabled]=\"disabled\">\n     *                <igx-icon fontSet=\"material\">add</igx-icon>\n     *           </button>\n     *      </ng-template>\n     *  </igx-carousel>\n     * ```\n     */\n    @ContentChild(IgxCarouselNextButtonDirective, { read: TemplateRef, static: false })\n    public nextButtonTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering carousel previous button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.carousel.nextButtonTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-carousel #carousel>\n     *      ...\n     *      <ng-template igxCarouselPrevButton let-disabled>\n     *            <button igxButton=\"fab\" igxRipple=\"white\" [disabled]=\"disabled\">\n     *                <igx-icon fontSet=\"material\">remove</igx-icon>\n     *           </button>\n     *      </ng-template>\n     *  </igx-carousel>\n     * ```\n     */\n    @ContentChild(IgxCarouselPrevButtonDirective, { read: TemplateRef, static: false })\n    public prevButtonTemplate: TemplateRef<any> = null;\n\n    /**\n    * The collection of `slides` currently in the carousel.\n    * ```typescript\n    * let slides: QueryList<IgxSlideComponent> = this.carousel.slides;\n    * ```\n    * @memberOf IgxCarouselComponent\n    */\n    @ContentChildren(IgxSlideComponent)\n    public slides: QueryList<IgxSlideComponent>;\n\n    /**\n     * An event that is emitted after a slide transition has happened.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideChanged)=\"onSlideChanged($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideChanged = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been added to the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideAdded)=\"onSlideAdded($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideAdded = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been removed from the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideRemoved)=\"onSlideRemoved($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideRemoved = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after the carousel has been paused.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPaused)=\"onCarouselPaused($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPaused = new EventEmitter<IgxCarouselComponent>();\n\n    /**\n     * An event that is emitted after the carousel has resumed transitioning between `slides`.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPlaying)=\"onCarouselPlaying($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPlaying = new EventEmitter<IgxCarouselComponent>();\n\n    private _interval: number;\n    private _resourceStrings = CurrentResourceStrings.CarouselResStrings;\n    private lastInterval: any;\n    private playing: boolean;\n    private stoppedByInteraction: boolean;\n    private destroyed: boolean;\n    private destroy$ = new Subject<any>();\n    private differ: IterableDiffer<IgxSlideComponent> | null = null;\n    private enterAnimationPlayer?: AnimationPlayer;\n    private leaveAnimationPlayer?: AnimationPlayer;\n    private currentSlide: IgxSlideComponent;\n    private previousSlide: IgxSlideComponent;\n    private animationDuration = 320;\n    private incomingSlide: IgxSlideComponent;\n    private animationPosition = 0;\n    private newDuration = 0;\n\n    constructor(private element: ElementRef, private iterableDiffers: IterableDiffers,\n            private builder: AnimationBuilder, private platformUtil: PlatformUtil) {\n        this.differ = this.iterableDiffers.find([]).create(null);\n    }\n\n    /** @hidden */\n    public ngAfterContentInit() {\n        this.slides.changes\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((change: QueryList<IgxSlideComponent>) => { this.initSlides(change); });\n\n        this.initSlides(this.slides);\n    }\n\n    /** @hidden */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this.destroyed = true;\n        if (this.lastInterval) {\n            clearInterval(this.lastInterval);\n        }\n    }\n\n    private unsubscriber(slide: IgxSlideComponent) {\n        return merge(this.destroy$, slide.isDestroyed);\n    }\n\n    private onSlideActivated(slide: IgxSlideComponent) {\n        if (slide.active && slide !== this.currentSlide) {\n            if (slide.direction === Direction.NONE) {\n                const newIndex = slide.index;\n                slide.direction = newIndex > this.current ? Direction.NEXT : Direction.PREV;\n            }\n\n            if (this.currentSlide) {\n                const animationWasStarted = this.finishAnimations();\n                this.currentSlide.direction = slide.direction;\n                this.currentSlide.active = false;\n\n                this.previousSlide = this.currentSlide;\n                this.currentSlide = slide;\n                if (this.animationType !== CarouselAnimationType.none) {\n                    if (animationWasStarted) {\n                        requestAnimationFrame(() => {\n                            this.playAnimations();\n                        });\n                    } else {\n                        this.playAnimations();\n                    }\n                }\n            } else {\n                this.currentSlide = slide;\n            }\n            this.onSlideChanged.emit({ carousel: this, slide });\n            this.restartInterval();\n        }\n    }\n\n    private playAnimations() {\n        this.playLeaveAnimation();\n        this.playEnterAnimation();\n    }\n\n    private finishAnimations(): boolean {\n        let animationWasStarted = false;\n        if (this.previousSlide && this.previousSlide.previous) {\n            this.previousSlide.previous = false;\n        }\n        if (this.leaveAnimationPlayer) {\n            animationWasStarted = true;\n            this.leaveAnimationPlayer.finish();\n        }\n        if (this.enterAnimationPlayer) {\n            animationWasStarted = true;\n            this.enterAnimationPlayer.finish();\n        }\n        return animationWasStarted;\n    }\n\n    private getAnimation(): CarouselAnimationSettings {\n        let duration;\n        if (this.newDuration) {\n            duration = this.animationPosition ? this.animationPosition * this.newDuration : this.newDuration;\n        } else {\n            duration = this.animationPosition ? this.animationPosition * this.animationDuration : this.animationDuration;\n        }\n\n        switch (this.animationType) {\n            case CarouselAnimationType.slide:\n                const trans = this.animationPosition ? this.animationPosition * 100 : 100;\n                return {\n                    enterAnimation: useAnimation(slideInLeft,\n                        {\n                            params: {\n                                delay: '0s',\n                                duration: `${duration}ms`,\n                                endOpacity: 1,\n                                startOpacity: 1,\n                                fromPosition: `translateX(${this.currentSlide.direction === 1 ? trans : -trans}%)`,\n                                toPosition: 'translateX(0%)'\n                            }\n                        }),\n                    leaveAnimation: useAnimation(slideInLeft,\n                        {\n                            params: {\n                                delay: '0s',\n                                duration: `${duration}ms`,\n                                endOpacity: 1,\n                                startOpacity: 1,\n                                fromPosition: `translateX(0%)`,\n                                toPosition: `translateX(${this.currentSlide.direction === 1 ? -trans : trans}%)`,\n                            }\n                        })\n                };\n            case CarouselAnimationType.fade:\n                return {\n                    enterAnimation: useAnimation(fadeIn,\n                        { params: { duration: `${duration}ms`, startOpacity: `${this.animationPosition}` } }),\n                    leaveAnimation: null\n                };\n        }\n        return {\n            enterAnimation: null,\n            leaveAnimation: null\n        };\n    }\n\n    private playEnterAnimation() {\n        if (!this.getAnimation().enterAnimation) {\n            return;\n        }\n        const animationBuilder = this.builder.build(this.getAnimation().enterAnimation);\n\n        this.enterAnimationPlayer = animationBuilder.create(this.currentSlide.nativeElement);\n\n        this.enterAnimationPlayer.onDone(() => {\n            if (this.enterAnimationPlayer) {\n                this.enterAnimationPlayer.reset();\n                this.enterAnimationPlayer = null;\n            }\n            this.animationPosition = 0;\n            this.newDuration = 0;\n            this.previousSlide.previous = false;\n        });\n        this.previousSlide.previous = true;\n        this.enterAnimationPlayer.play();\n    }\n\n    private playLeaveAnimation() {\n        if (!this.getAnimation().leaveAnimation) {\n            return;\n        }\n\n        const animationBuilder = this.builder.build(this.getAnimation().leaveAnimation);\n        this.leaveAnimationPlayer = animationBuilder.create(this.previousSlide.nativeElement);\n\n        this.leaveAnimationPlayer.onDone(() => {\n            if (this.leaveAnimationPlayer) {\n                this.leaveAnimationPlayer.reset();\n                this.leaveAnimationPlayer = null;\n            }\n            this.animationPosition = 0;\n            this.newDuration = 0;\n        });\n        this.leaveAnimationPlayer.play();\n    }\n\n    private initSlides(change: QueryList<IgxSlideComponent>) {\n        const diff = this.differ.diff(change.toArray());\n        if (diff) {\n            this.slides.reduce((any, c, ind) => c.index = ind, 0); // reset slides indexes\n            diff.forEachAddedItem((record: IterableChangeRecord<IgxSlideComponent>) => {\n                const slide = record.item;\n                this.onSlideAdded.emit({ carousel: this, slide });\n                if (slide.active) {\n                    this.currentSlide = slide;\n                }\n                slide.activeChange.pipe(takeUntil(this.unsubscriber(slide))).subscribe(() => this.onSlideActivated(slide));\n            });\n\n            diff.forEachRemovedItem((record: IterableChangeRecord<IgxSlideComponent>) => {\n                const slide = record.item;\n                this.onSlideRemoved.emit({ carousel: this, slide });\n                if (slide.active) {\n                    slide.active = false;\n                    this.currentSlide = this.get(slide.index < this.total ? slide.index : this.total - 1);\n                }\n            });\n\n            this.updateSlidesSelection();\n        }\n    }\n\n    private updateSlidesSelection() {\n        requestAnimationFrame(() => {\n            if (this.currentSlide) {\n                this.currentSlide.active = true;\n                const activeSlides = this.slides.filter(slide => slide.active && slide.index !== this.currentSlide.index);\n                activeSlides.forEach(slide => { slide.active = false; });\n            } else if (this.total) {\n                this.slides.first.active = true;\n            }\n            this.play();\n        });\n    }\n\n    /** @hidden */\n    public get getIndicatorTemplate(): TemplateRef<any> {\n        if (this.indicatorTemplate) {\n            return this.indicatorTemplate;\n        }\n        return this.defaultIndicator;\n    }\n\n    /** @hidden */\n    public get getNextButtonTemplate(): TemplateRef<any> {\n        if (this.nextButtonTemplate) {\n            return this.nextButtonTemplate;\n        }\n        return this.defaultNextButton;\n    }\n\n    /** @hidden */\n    public get getPrevButtonTemplate(): TemplateRef<any> {\n        if (this.prevButtonTemplate) {\n            return this.prevButtonTemplate;\n        }\n        return this.defaultPrevButton;\n    }\n\n    /** @hidden */\n    public setAriaLabel(slide) {\n        return `Item ${slide.index + 1} of ${this.total}`;\n    }\n\n    /** @hidden */\n    public get indicatorsOrientationClass() {\n        return `igx-carousel-indicators--${this.indicatorsOrientation}`;\n    }\n\n    /** @hidden */\n    public get showIndicators(): boolean {\n        return this.total <= this.maximumIndicatorsCount && this.total > 0;\n    }\n\n    /** @hidden */\n    public get showIndicatorsLabel(): boolean {\n        return this.total > this.maximumIndicatorsCount;\n    }\n\n    /** @hidden */\n    public get getCarouselLabel() {\n        return `${this.current + 1} ${this.resourceStrings.igx_carousel_of} ${this.total}`;\n    }\n\n    /**\n     * Returns the total number of `slides` in the carousel.\n     * ```typescript\n     * let slideCount =  this.carousel.total;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get total(): number {\n        return this.slides.length;\n    }\n\n    /**\n     * The index of the slide being currently shown.\n     * ```typescript\n     * let currentSlideNumber =  this.carousel.current;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get current(): number {\n        return !this.currentSlide ? 0 : this.currentSlide.index;\n    }\n\n    private getNextIndex(): number {\n        return (this.current + 1) % this.total;\n    }\n\n    private getPrevIndex(): number {\n        return this.current - 1 < 0 ? this.total - 1 : this.current - 1;\n    }\n\n    /**\n     * Returns a boolean indicating if the carousel is playing.\n     * ```typescript\n     * let isPlaying =  this.carousel.isPlaying;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isPlaying(): boolean {\n        return this.playing;\n    }\n\n    /**\n     * Returns Ð° boolean indicating if the carousel is destroyed.\n     * ```typescript\n     * let isDestroyed =  this.carousel.isDestroyed;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isDestroyed(): boolean {\n        return this.destroyed;\n    }\n    /**\n     * Returns a reference to the carousel element in the DOM.\n     * ```typescript\n     * let nativeElement =  this.carousel.nativeElement;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the slide corresponding to the provided `index` or null.\n     * ```typescript\n     * let slide1 =  this.carousel.get(1);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get(index: number): IgxSlideComponent {\n        return this.slides.find((slide) => slide.index === index);\n    }\n\n    /**\n     * Adds a new slide to the carousel.\n     * ```typescript\n     * this.carousel.add(newSlide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public add(slide: IgxSlideComponent) {\n        const newSlides = this.slides.toArray();\n        newSlides.push(slide);\n        this.slides.reset(newSlides);\n        this.slides.notifyOnChanges();\n    }\n\n    /**\n     * Removes a slide from the carousel.\n     * ```typescript\n     * this.carousel.remove(slide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public remove(slide: IgxSlideComponent) {\n        if (slide && slide === this.get(slide.index)) { // check if the requested slide for delete is present in the carousel\n            const newSlides = this.slides.toArray();\n            newSlides.splice(slide.index, 1);\n            this.slides.reset(newSlides);\n            this.slides.notifyOnChanges();\n        }\n    }\n\n    /**\n     * Kicks in a transition for a given slide with a given `direction`.\n     * ```typescript\n     * this.carousel.select(this.carousel.get(2), Direction.NEXT);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public select(slide: IgxSlideComponent, direction: Direction = Direction.NONE) {\n        if (slide && slide !== this.currentSlide) {\n            slide.direction = direction;\n            slide.active = true;\n        }\n    }\n\n    /**\n     * Transitions to the next slide in the carousel.\n     * ```typescript\n     * this.carousel.next();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public next() {\n        const index = this.getNextIndex();\n\n        if (index === 0 && !this.loop) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.NEXT);\n    }\n\n    /**\n     * Transitions to the previous slide in the carousel.\n     * ```typescript\n     * this.carousel.prev();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public prev() {\n        const index = this.getPrevIndex();\n\n        if (!this.loop && index === this.total - 1) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.PREV);\n    }\n\n    /**\n     * Resumes playing of the carousel if in paused state.\n     * No operation otherwise.\n     * ```typescript\n     * this.carousel.play();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public play() {\n        if (!this.playing) {\n            this.playing = true;\n            this.onCarouselPlaying.emit(this);\n            this.restartInterval();\n            this.stoppedByInteraction = false;\n        }\n    }\n\n    /**\n     * Stops slide transitions if the `pause` option is set to `true`.\n     * No operation otherwise.\n     * ```typescript\n     *  this.carousel.stop();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public stop() {\n        if (this.pause) {\n            this.playing = false;\n            this.onCarouselPaused.emit(this);\n            this.resetInterval();\n        }\n    }\n\n    private resetInterval() {\n        if (this.lastInterval) {\n            clearInterval(this.lastInterval);\n            this.lastInterval = null;\n        }\n    }\n\n    private restartInterval() {\n        this.resetInterval();\n\n        if (!isNaN(this.interval) && this.interval > 0 && this.platformUtil.isBrowser) {\n            this.lastInterval = setInterval(() => {\n                const tick = +this.interval;\n                if (this.playing && this.total && !isNaN(tick) && tick > 0) {\n                    this.next();\n                } else {\n                    this.stop();\n                }\n            }, this.interval);\n        }\n    }\n\n    /** @hidden */\n    public get nextButtonDisabled() {\n        return !this.loop && this.current === (this.total - 1);\n    }\n\n    /** @hidden */\n    public get prevButtonDisabled() {\n        return !this.loop && this.current === 0;\n    }\n\n    /** @hidden */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event) {\n        if (this.keyboardSupport) {\n            event.preventDefault();\n            this.next();\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n\n    /** @hidden */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event) {\n        if (this.keyboardSupport) {\n            event.preventDefault();\n            this.prev();\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n\n    /** @hidden */\n    @HostListener('tap', ['$event'])\n    public onTap(event) {\n        // play pause only when tap on slide\n        if (event.target && event.target.classList.contains('igx-slide')) {\n            if (this.isPlaying) {\n                if (this.pause) {\n                    this.stoppedByInteraction = true;\n                }\n                this.stop();\n            } else if (this.stoppedByInteraction) {\n                this.play();\n            }\n        }\n    }\n\n    /** @hidden */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event) {\n        if (this.keyboardSupport && this.slides.length > 0) {\n            event.preventDefault();\n            this.slides.first.active = true;\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n\n    /** @hidden */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event) {\n        if (this.keyboardSupport && this.slides.length > 0) {\n            event.preventDefault();\n            this.slides.last.active = true;\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n\n    /** @hidden */\n    @HostListener('mouseenter')\n    public onMouseEnter() {\n        if (this.pause && this.isPlaying) {\n            this.stoppedByInteraction = true;\n        }\n        this.stop();\n    }\n\n    /** @hidden */\n    @HostListener('mouseleave')\n    public onMouseLeave() {\n        if (this.stoppedByInteraction) {\n            this.play();\n        }\n    }\n\n    /** @hidden */\n    @HostListener('panleft', ['$event'])\n    public onPanLeft(event) {\n        this.pan(event);\n    }\n\n    /** @hidden */\n    @HostListener('panright', ['$event'])\n    public onPanRight(event) {\n        this.pan(event);\n    }\n\n    private resetSlideStyles(slide: IgxSlideComponent) {\n        slide.nativeElement.style.transform = '';\n        slide.nativeElement.style.opacity = '';\n    }\n\n    private pan(event) {\n        const slideWidth = this.currentSlide.nativeElement.offsetWidth;\n        const panOffset = (slideWidth / 1000);\n        const deltaX = event.deltaX;\n        const index = deltaX < 0 ? this.getNextIndex() : this.getPrevIndex();\n        const offset = deltaX < 0 ? slideWidth + deltaX : -slideWidth + deltaX;\n\n        if (!this.gesturesSupport || event.isFinal || Math.abs(deltaX) + panOffset >= slideWidth) {\n            return;\n        }\n\n        if (!this.loop && ((this.current === 0 && deltaX > 0) || (this.current === this.total - 1 && deltaX < 0))) {\n            this.incomingSlide = null;\n            return;\n        }\n\n        event.preventDefault();\n        if (this.isPlaying) {\n            this.stoppedByInteraction = true;\n            this.stop();\n        }\n        this.finishAnimations();\n\n        if (this.incomingSlide) {\n            if (index !== this.incomingSlide.index) {\n                this.resetSlideStyles(this.incomingSlide);\n                this.incomingSlide.previous = false;\n                this.incomingSlide = this.get(index);\n            }\n        } else {\n            this.incomingSlide = this.get(index);\n        }\n        this.incomingSlide.previous = true;\n\n        if (this.animationType === CarouselAnimationType.fade) {\n            this.currentSlide.nativeElement.style.opacity = `${Math.abs(offset) / slideWidth}`;\n        } else {\n            this.currentSlide.nativeElement.style.transform = `translateX(${deltaX}px)`;\n            this.incomingSlide.nativeElement.style.transform = `translateX(${offset}px)`;\n        }\n    }\n\n    /**\n    * @hidden\n    */\n    @HostListener('panend', ['$event'])\n    public onPanEnd(event) {\n        if (!this.gesturesSupport) {\n            return;\n        }\n        event.preventDefault();\n\n        const slideWidth = this.currentSlide.nativeElement.offsetWidth;\n        const panOffset = (slideWidth / 1000);\n        const deltaX = Math.abs(event.deltaX) + panOffset < slideWidth ? Math.abs(event.deltaX) : slideWidth - panOffset;\n        const velocity = Math.abs(event.velocity);\n        this.resetSlideStyles(this.currentSlide);\n        if (this.incomingSlide) {\n            this.resetSlideStyles(this.incomingSlide);\n            if (slideWidth / 2 < deltaX || velocity > 1) {\n                this.incomingSlide.direction = event.deltaX < 0 ? Direction.NEXT : Direction.PREV;\n                this.incomingSlide.previous = false;\n\n                this.animationPosition = this.animationType === CarouselAnimationType.fade ?\n                    deltaX / slideWidth : (slideWidth - deltaX) / slideWidth;\n\n                if (velocity > 1) {\n                    this.newDuration = this.animationDuration / velocity;\n                }\n                this.incomingSlide.active = true;\n            } else {\n                this.currentSlide.direction = event.deltaX > 0 ? Direction.NEXT : Direction.PREV;\n                this.previousSlide = this.incomingSlide;\n                this.previousSlide.previous = true;\n                this.animationPosition = this.animationType === CarouselAnimationType.fade ?\n                    Math.abs((slideWidth - deltaX) / slideWidth) : deltaX / slideWidth;\n                this.playAnimations();\n            }\n        }\n\n        if (this.stoppedByInteraction) {\n            this.play();\n        }\n    }\n}\n\nexport interface ISlideEventArgs extends IBaseEventArgs {\n    carousel: IgxCarouselComponent;\n    slide: IgxSlideComponent;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxCarouselComponent,\n        IgxSlideComponent,\n        IgxCarouselIndicatorDirective,\n        IgxCarouselNextButtonDirective,\n        IgxCarouselPrevButtonDirective\n    ],\n    exports: [\n        IgxCarouselComponent,\n        IgxSlideComponent,\n        IgxCarouselIndicatorDirective,\n        IgxCarouselNextButtonDirective,\n        IgxCarouselPrevButtonDirective\n    ],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxCarouselModule {\n}\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE, IBaseEventArgs } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum LabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeCheckboxEventArgs extends IBaseEventArgs {\n    checked: boolean;\n    checkbox: IgxCheckboxComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * Allows users to make a binary choice for a certain condition.\n *\n * @igxModule IgxCheckboxModule\n *\n * @igxTheme igx-checkbox-theme\n *\n * @igxKeywords checkbox, label\n *\n * @igxGroup Data entry and display\n *\n * @remarks\n * The Ignite UI Checkbox is a selection control that allows users to make a binary choice for a certain condition.It behaves similarly\n * to the native browser checkbox.\n *\n * @example\n * ```html\n * <igx-checkbox checked=\"true\">\n *   simple checkbox\n * </igx-checkbox>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxCheckboxComponent, multi: true }],\n    selector: 'igx-checkbox',\n    preserveWhitespaces: false,\n    templateUrl: 'checkbox.component.html'\n})\nexport class IgxCheckboxComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     *@hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     *\n     * @example\n     * ```typescript\n     * let checkboxElement =  this.checkbox.checkboxElement;\n     * ```\n     */\n    @ViewChild('checkbox', { static: true }) public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     *\n     * @example\n     * let labelElement =  this.checkbox.nativeLabel;\n     * ```\n     */\n    @ViewChild('label', { static: true }) public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     *\n     * @example\n     * let labelPlaceholder =  this.checkbox.placeholderLabel;\n     * ```\n     */\n    @ViewChild('placeholderLabel', { static: true }) public placeholderLabel;\n    /**\n     * Sets/gets the `id` of the checkbox component.\n     * If not set, the `id` of the first checkbox component will be `\"igx-checkbox-0\"`.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox id=\"my-first-checkbox\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let checkboxId =  this.checkbox.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-checkbox-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element.\n     * If not set, the id of the `label` in the first checkbox component will be `\"igx-checkbox-0-label\"`.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox labelId = \"Label1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelId =  this.checkbox.labelId;\n     * ```\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox [value] = \"'CheckboxValue'\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let value =  this.checkbox.value;\n     * ```\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox name = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let name =  this.checkbox.name;\n     * ```\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox [tabindex] = \"1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.checkbox.tabindex;\n     * ```\n     */\n    @Input() public tabindex: number = null;\n    /**\n     *  Sets/gets the position of the `label`.\n     *  If not set, the `labelPosition` will have value `\"after\"`.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox labelPosition = \"before\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.checkbox.labelPosition;\n     * ```\n     */\n    @Input() public labelPosition: LabelPosition | string = LabelPosition.AFTER;\n    /**\n     * Enables/Disables the ripple effect.\n     * If not set, `disableRipple` will have value `false`.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox [disableRipple] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.checkbox.desableRipple;\n     * ```\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the checkbox is required.\n     * If not set, `required` will have value `false`.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox [required] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRequired =  this.checkbox.required;\n     * ```\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox aria-labelledby = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy =  this.checkbox.ariaLabelledBy;\n     * ```\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox aria-label = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabel = this.checkbox.ariaLabel;\n     * ```\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the checkbox state is changed.\n     * Provides references to the `IgxCheckboxComponent` and the `checked` property as event arguments.\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeCheckboxEventArgs> = new EventEmitter<IChangeCheckboxEventArgs>();\n    /**\n     * Returns the class of the checkbox component.\n     *\n     * @example\n     * ```typescript\n     * let class =  this.checkbox.cssClass;\n     * ```\n     */\n    @HostBinding('class.igx-checkbox')\n    public cssClass = 'igx-checkbox';\n    /**\n     * Sets/gets whether the checkbox component is on focus.\n     * Default value is `false`.\n     *\n     * @example\n     * ```typescript\n     * this.checkbox.focused =  true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.checkbox.focused;\n     * ```\n     */\n    @HostBinding('class.igx-checkbox--focused')\n    public focused = false;\n    /**\n     * Sets/gets the checkbox indeterminate visual state.\n     * Default value is `false`;\n     *\n     * @example\n     * ```html\n     * <igx-checkbox [indeterminate] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isIndeterminate = this.checkbox.indeterminate;\n     * ```\n     */\n    @HostBinding('class.igx-checkbox--indeterminate')\n    @Input() public indeterminate = false;\n    /**\n     * Sets/gets whether the checkbox is checked.\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox [checked] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isChecked =  this.checkbox.checked;\n     * ```\n     */\n    @HostBinding('class.igx-checkbox--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets whether the checkbox is disabled.\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox [disabled] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isDisabled = this.checkbox.disabled;\n     * ```\n     */\n    @HostBinding('class.igx-checkbox--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the checkbox is readonly.\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox [readonly]=\"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let readonly = this.checkbox.readonly;\n     * ```\n     */\n    @Input() public readonly = false;\n    /**\n     * Sets/gets whether the checkbox should disable all css transitions.\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     * <igx-checkbox [disableTransitions]=\"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let disableTransitions = this.checkbox.disableTransitions;\n     * ```\n     */\n    @HostBinding('class.igx-checkbox--plain')\n    @Input() public disableTransitions = false;\n    /** @hidden @internal */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     * @hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * If `disabled` is `false`, switches the `checked` state.\n     *\n     * @example\n     * ```typescript\n     * this.checkbox.toggle();\n     * ```\n     */\n    public toggle() {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n\n        this.indeterminate = false;\n        this.focused = false;\n        this.checked = !this.checked;\n\n        this.change.emit({ checked: this.checked, checkbox: this });\n        this._onChangeCallback(this.checked);\n    }\n    /** @hidden @internal */\n    public _onCheckboxChange(event) {\n        // We have to stop the original checkbox change event\n        // from bubbling up since we emit our own change event\n        event.stopPropagation();\n    }\n    /** @hidden @internal */\n    public _onCheckboxClick(event) {\n        // Since the original checkbox is hidden and the label\n        // is used for styling and to change the checked state of the checkbox,\n        // we need to prevent the checkbox click event from bubbling up\n        // as it gets triggered on label click\n        event.stopPropagation();\n\n        if (this.readonly) {\n            // readonly prevents the component from changing state (see toggle() method).\n            // However, the native checkbox can still be activated through user interaction (focus + space, label click)\n            // Prevent the native change so the input remains in sync\n            event.preventDefault();\n        }\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n\n        this.toggle();\n    }\n    /** @hidden @internal */\n    public _onLabelClick(event) {\n        // We use a span element as a placeholder label\n        // in place of the native label, we need to emit\n        // the change event separately here alongside\n        // the click event emitted on click\n        this.toggle();\n    }\n    /** @hidden @internal */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /** @hidden @internal */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /** @hidden @internal */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /** @hidden @internal */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case LabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case LabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /** @hidden @internal */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /** @hidden @internal */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden @internal */\n    public getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n}\n\nexport const IGX_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxCheckboxRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-checkbox[required][formControlName],\n    igx-checkbox[required][formControl],\n    igx-checkbox[required][ngModel]`,\n    providers: [IGX_CHECKBOX_REQUIRED_VALIDATOR]\n})\nexport class IgxCheckboxRequiredDirective extends CheckboxRequiredValidator { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    exports: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxCheckboxModule { }\n","import { ConnectedPositioningStrategy } from './../services/overlay/position/connected-positioning-strategy';\nimport { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectorRef, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener,\n    Input, NgModule, OnInit, OnDestroy, Output, TemplateRef, ViewChild, Optional, Inject, Injector, Type\n} from '@angular/core';\nimport {\n    IgxComboItemDirective,\n    IgxComboEmptyDirective,\n    IgxComboHeaderItemDirective,\n    IgxComboHeaderDirective,\n    IgxComboFooterDirective,\n    IgxComboAddItemDirective,\n    IgxComboToggleIconDirective,\n    IgxComboClearIconDirective\n} from './combo.directives';\nimport { FormsModule, ReactiveFormsModule, ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl, AbstractControl } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { cloneArray, CancelableEventArgs, CancelableBrowserEventArgs, IBaseEventArgs } from '../core/utils';\nimport { IgxStringFilteringOperand, IgxBooleanFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringLogic } from '../data-operations/filtering-expression.interface';\nimport { IgxForOfModule, IForOfState, IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxDropDownModule } from '../drop-down/index';\nimport { IgxInputGroupModule, IgxInputGroupComponent } from '../input-group/input-group.component';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { IgxComboDropDownComponent } from './combo-dropdown.component';\nimport { IgxComboFilteringPipe, IgxComboGroupingPipe } from './combo.pipes';\nimport { OverlaySettings, AbsoluteScrollStrategy } from '../services';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\nimport { IGX_COMBO_COMPONENT, IgxComboBase } from './combo.common';\nimport { IgxComboAddItemComponent } from './combo-add-item.component';\nimport { IgxComboAPIService } from './combo.api';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxInputState, IgxInputDirective } from '../directives/input/input.directive';\n\n/**\n * @hidden\n */\nenum DataTypes {\n    EMPTY = 'empty',\n    PRIMITIVE = 'primitive',\n    COMPLEX = 'complex',\n    PRIMARYKEY = 'valueKey'\n}\n\n/**\n * @hidden\n */\nconst ItemHeights = {\n    'comfortable': 40,\n    'cosy': 32,\n    'compact': 28,\n};\n\n/**\n * @hidden\n * The default number of items that should be in the combo's\n * drop-down list if no `[itemsMaxHeight]` is specified\n */\nconst itemsInContainer = 10;\n\nexport enum IgxComboState {\n    /**\n     * Combo with initial state.\n     */\n    INITIAL = IgxInputState.INITIAL,\n    /**\n     * Combo with valid state.\n     */\n    VALID = IgxInputState.VALID,\n    /**\n     * Combo with invalid state.\n     */\n    INVALID = IgxInputState.INVALID\n}\n\n/** Event emitted when an igx-combo's selection is changing */\nexport interface IComboSelectionChangeEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    /** An array containing the values that are currently selected */\n    oldSelection: any[];\n    /** An array containing the values that will be selected after this event */\n    newSelection: any[];\n    /** An array containing the values that will be added to the selection (if any) */\n    added: any[];\n    /** An array containing the values that will be removed from the selection (if any) */\n    removed: any[];\n    /** The text that will be displayed in the combo text box */\n    displayText: string;\n    /** The user interaction that triggered the selection change */\n    event?: Event;\n}\n\nexport interface IComboItemAdditionEvent extends IBaseEventArgs {\n    oldCollection: any[];\n    addedItem: any;\n    newCollection: any[];\n}\n\n/**\n * When called with sets A & B, returns A - B (as array);\n * @hidden\n */\nfunction diffInSets(set1: Set<any>, set2: Set<any>): any[] {\n    const results = [];\n    set1.forEach(entry => {\n        if (!set2.has(entry)) {\n            results.push(entry);\n        }\n    });\n    return results;\n}\n\nlet NEXT_ID = 0;\nconst noop = () => { };\n\n@Component({\n    selector: 'igx-combo',\n    templateUrl: 'combo.component.html',\n    providers: [\n        IgxComboAPIService,\n        { provide: IGX_COMBO_COMPONENT, useExisting: IgxComboComponent },\n        { provide: NG_VALUE_ACCESSOR, useExisting: IgxComboComponent, multi: true }\n    ]\n})\nexport class IgxComboComponent extends DisplayDensityBase implements IgxComboBase, AfterViewInit, ControlValueAccessor, OnInit,\n    OnDestroy, EditorProvider {\n    /**\n     * @hidden @internal\n     */\n    public customValueFlag = true;\n    /**\n     * @hidden @internal\n     */\n    public defaultFallbackGroup = 'Other';\n    protected stringFilters = IgxStringFilteringOperand;\n    protected booleanFilters = IgxBooleanFilteringOperand;\n    protected _groupKey = '';\n    protected _displayKey: string;\n    protected _prevInputValue = '';\n    private _dataType = '';\n    private ngControl: NgControl = null;\n    private destroy$ = new Subject<any>();\n    private _data = [];\n    private _filteredData = [];\n    private _itemHeight = null;\n    private _itemsMaxHeight = null;\n    private _remoteSelection = {};\n    private _onChangeCallback: (_: any) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n    private _overlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(),\n        modal: false,\n        closeOnOutsideClick: true,\n        excludePositionTarget: true\n    };\n    private _value = '';\n    private _valid = IgxComboState.INITIAL;\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        protected comboAPI: IgxComboAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        @Optional() private _injector: Injector) {\n        super(_displayDensityOptions);\n        this.comboAPI.register(this);\n    }\n\n    @ViewChild(IgxForOfDirective, { read: IgxForOfDirective, static: true })\n    protected virtDir: IgxForOfDirective<any>;\n\n    /**\n     * Set custom overlay settings that control how the combo's list of items is displayed.\n     * Set:\n     * ```html\n     * <igx-combo [overlaySettings] = \"customOverlaySettings\"></igx-combo>\n     * ```\n     *\n     * ```typescript\n     *  const customSettings = { positionStrategy: { settings: { target: myTarget } } };\n     *  combo.overlaySettings = customSettings;\n     * ```\n     * Get any custom overlay settings used by the combo:\n     * ```typescript\n     *  const comboOverlaySettings: OverlaySettings = myCombo.overlaySettings;\n     * ```\n     */\n\n    @Input()\n    public overlaySettings: OverlaySettings = null;\n\n    /** @hidden @internal */\n    @ViewChild('inputGroup', { read: IgxInputGroupComponent, static: true }) public inputGroup: IgxInputGroupComponent;\n\n    /** @hidden @internal */\n    @ViewChild('comboInput', { read: IgxInputDirective, static: true }) public comboInput: IgxInputDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxComboDropDownComponent, { read: IgxComboDropDownComponent, static: true })\n    public dropdown: IgxComboDropDownComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('searchInput')\n    public searchInput: ElementRef<HTMLInputElement> = null;\n\n    /**\n     * @hidden @internal\n     */\n    get displaySearchInput(): boolean {\n        return this.filterable || this.allowCustomValues;\n    }\n\n    /**\n     * The custom template, if any, that should be used when rendering ITEMS in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.itemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboItem>\n     *          <div class=\"custom-item\" let-item let-key=\"valueKey\">\n     *              <div class=\"custom-item__name\">{{ item[key] }}</div>\n     *              <div class=\"custom-item__cost\">{{ item.cost }}</div>\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboItemDirective, { read: TemplateRef })\n    public itemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the HEADER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeader>\n     *          <div class=\"combo__header\">\n     *              This is a custom header\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboHeaderDirective, { read: TemplateRef })\n    public headerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the FOOTER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.footerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboFooter>\n     *          <div class=\"combo__footer\">\n     *              This is a custom footer\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboFooterDirective, { read: TemplateRef })\n    public footerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering HEADER ITEMS for groups in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeaderItem let-item let-key=\"groupKey\">\n     *          <div class=\"custom-item--group\">Group header for {{ item[key] }}</div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboHeaderItemDirective, { read: TemplateRef })\n    public headerItemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.addItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboAddItem>\n     *          <button class=\"combo__add-button\">\n     *              Click to add item\n     *          </button>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboAddItemDirective, { read: TemplateRef })\n    public addItemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.emptyTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboEmpty>\n     *          <div class=\"combo--empty\">\n     *              There are no items to display\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboEmptyDirective, { read: TemplateRef })\n    public emptyTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the combo TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboToggleIconDirective, { read: TemplateRef })\n    public toggleIconTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the combo CLEAR button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.clearIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboClearIcon>\n     *          <igx-icon>clear</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboClearIconDirective, { read: TemplateRef })\n    public clearIconTemplate: TemplateRef<any> = null;\n\n    @ViewChild('primitive', { read: TemplateRef, static: true })\n    protected primitiveTemplate: TemplateRef<any>;\n\n    @ViewChild('complex', { read: TemplateRef, static: true })\n    protected complexTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxForOfDirective, { static: true })\n    public virtualScrollContainer: IgxForOfDirective<any>;\n\n    @ViewChild('dropdownItemContainer', { static: true })\n    protected dropdownContainer: ElementRef = null;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-combo (onSelectionChange)='handleSelection()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSelectionChange = new EventEmitter<IComboSelectionChangeEventArgs>();\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-combo onOpening='handleOpening($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-combo (onOpened)='handleOpened()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<void>();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosing)='handleClosing($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosed)='handleClosed()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<void>();\n\n    /**\n     * Emitted when an item is being added to the data collection\n     *\n     * ```html\n     * <igx-combo (onAddition)='handleAdditionEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onAddition = new EventEmitter<IComboItemAdditionEvent>();\n\n    /**\n     * Emitted when the value of the search input changes (e.g. typing, pasting, clear, etc.)\n     *\n     * ```html\n     * <igx-combo (onSearchInput)='handleSearchInputEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSearchInput = new EventEmitter();\n\n    /**\n     * Emitted when new chunk of data is loaded from the virtualization\n     *\n     * ```html\n     * <igx-combo (onDataPreLoad)='handleDataPreloadEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<any>();\n\n    /**\n     * Gets/gets combo id.\n     *\n     * ```typescript\n     * // get\n     * let id = this.combo.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [id]='combo1'></igx-combo>\n     * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-combo-${NEXT_ID++}`;\n\n    /**\n     * Sets the style width of the element\n     *\n     * ```typescript\n     * // get\n     * let myComboWidth = this.combo.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [width]='250px'></igx-combo>\n     * ```\n     */\n    @HostBinding('style.width')\n    @Input()\n    public width: string;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-combo')\n    public cssClass = 'igx-combo'; // Independent of display density, at the time being\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding(`attr.role`)\n    public role = 'combobox';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-expanded')\n    public get ariaExpanded(): boolean {\n        return !this.dropdown.collapsed;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-haspopup')\n    public get hasPopUp() {\n        return 'listbox';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-owns')\n    public get ariaOwns() {\n        return this.dropdown.id;\n    }\n\n    /**\n     * Controls whether custom values can be added to the collection\n     *\n     * ```typescript\n     * // get\n     * let comboAllowsCustomValues = this.combo.allowCustomValues;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [allowCustomValues]='true'></igx-combo>\n     * ```\n     */\n    @Input()\n    public allowCustomValues = false;\n\n    /**\n     * Configures the drop down list height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsMaxHeight = this.combo.itemsMaxHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsMaxHeight]='320'></igx-combo>\n     * ```\n    */\n    @Input()\n    public get itemsMaxHeight(): number {\n        if (this._itemsMaxHeight === null || this._itemsMaxHeight === undefined) {\n            return this.itemHeight * itemsInContainer;\n        }\n        return this._itemsMaxHeight;\n    }\n\n    public set itemsMaxHeight(val: number) {\n        this._itemsMaxHeight = val;\n    }\n\n    /**\n     * Configures the drop down list width\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsWidth = this.combo.itemsWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsWidth] = '\"180px\"'></igx-combo>\n     * ```\n     */\n    @Input()\n    public itemsWidth: string;\n\n    /**\n     * Configures the drop down list item height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemHeight = this.combo.itemHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemHeight]='32'></igx-combo>\n     * ```\n     */\n    @Input()\n    public get itemHeight(): number {\n        if (this._itemHeight === null || this._itemHeight === undefined) {\n            return ItemHeights[this.displayDensity];\n        }\n        return this._itemHeight;\n    }\n\n    public set itemHeight(val: number) {\n        this._itemHeight = val;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public filteringLogic = FilteringLogic.Or;\n\n    /**\n     * Defines the placeholder value for the combo value field\n     *\n     * ```typescript\n     * // get\n     * let myComboPlaceholder = this.combo.placeholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [placeholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public placeholder;\n\n    /**\n     * @hidden @internal\n     */\n    public get inputEmpty(): boolean {\n        return !this.value && !this.placeholder;\n    }\n\n    /**\n     * Defines the placeholder value for the combo dropdown search field\n     *\n     * ```typescript\n     * // get\n     * let myComboSearchPlaceholder = this.combo.searchPlaceholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [searchPlaceholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public searchPlaceholder = 'Enter a Search Term';\n\n    /**\n     * Combo data source.\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [data]='items'></igx-combo>\n     * ```\n     */\n    @Input()\n    get data(): any[] {\n        return this._data;\n    }\n    set data(val: any[]) {\n        this._data = (val) ? val : [];\n    }\n\n    /**\n     * Combo value data source property.\n     *\n     * ```typescript\n     * // get\n     * let myComboValueKey = this.combo.valueKey;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [valueKey]='myKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public valueKey: string = null;\n\n    @Input()\n    set displayKey(val: string) {\n        this._displayKey = val;\n    }\n\n    /**\n     * Combo text data source property.\n     *\n     * ```typescript\n     * // get\n     * let myComboDisplayKey = this.combo.displayKey;\n     *\n     * // set\n     * this.combo.displayKey = 'val';\n     *\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [displayKey]='myDisplayKey'></igx-combo>\n     * ```\n     */\n    get displayKey() {\n        return this._displayKey ? this._displayKey : this.valueKey;\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [groupKey]='newGroupKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public set groupKey(val: string) {\n        this._groupKey = val;\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```typescript\n     * // get\n     * let currentGroupKey = this.combo.groupKey;\n     * ```\n     */\n    public get groupKey(): string {\n        return this._groupKey;\n    }\n\n    /**\n     * An @Input property that enabled/disables filtering in the list. The default is `true`.\n     * ```html\n     *<igx-combo [filterable]=\"false\">\n     * ```\n     */\n    @Input()\n    public filterable = true;\n\n    /**\n     * An @Input property that set aria-labelledby attribute\n     * ```html\n     *<igx-combo [ariaLabelledBy]=\"'label1'\">\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy: string;\n\n    /**\n     * An @Input property that enabled/disables combo. The default is `false`.\n     * ```html\n     *<igx-combo [disabled]=\"'true'\">\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An @Input property that sets how the combo will be styled.\n     * The allowed values are `line`, `box`, `border` and `search`. The default is `box`.\n     * ```html\n     *<igx-combo [type]=\"'line'\">\n     * ```\n     */\n    @Input()\n    public type = 'box';\n\n    /**\n     * Gets if control is valid, when used in a form\n     *\n     * ```typescript\n     * // get\n     * let valid = this.combo.valid;\n     * ```\n     * */\n    public get valid(): IgxComboState {\n        return this._valid;\n    }\n\n    /**\n    * Sets if control is valid, when used in a form\n    *\n    * ```typescript\n    * // set\n    * this.combo.valid = IgxComboState.INVALID;\n    * ```\n   */\n    public set valid(valid: IgxComboState) {\n        this._valid = valid;\n        this.comboInput.valid = IgxInputState[IgxComboState[valid]];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public searchValue = '';\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    onArrowDown(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.open();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    onInputClick(event: Event) {\n        event.stopPropagation();\n        event.preventDefault();\n        this.toggle();\n    }\n\n    /**\n     * Defines the current state of the virtualized data. It contains `startIndex` and `chunkSize`\n     *\n     * ```typescript\n     * // get\n     * let state = this.combo.virtualizationState;\n     * ```\n    */\n    get virtualizationState(): IForOfState {\n        return this.virtDir.state;\n    }\n    /**\n     * Sets the current state of the virtualized data.\n     *\n     * ```typescript\n     * // set\n     * this.combo.virtualizationState(state);\n     * ```\n     */\n    set virtualizationState(state: IForOfState) {\n        this.virtDir.state = state;\n    }\n\n    /**\n     * Gets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // get\n     * let count = this.combo.totalItemCount;\n     * ```\n    */\n    get totalItemCount(): number {\n        return this.virtDir.totalItemCount;\n    }\n    /**\n     * Sets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // set\n     * this.combo.totalItemCount(remoteService.count);\n     * ```\n     */\n    set totalItemCount(count: number) {\n        this.virtDir.totalItemCount = count;\n    }\n\n    /**\n     * The text displayed in the combo input\n     *\n     * ```typescript\n     * // get\n     * let comboValue = this.combo.value;\n     * ```\n     */\n    get value(): string {\n        return this._value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get filteredData(): any[] {\n        return this.filterable ? this._filteredData : this.data;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set filteredData(val: any[]) {\n        this._filteredData = this.groupKey ? (val || []).filter((e) => e.isHeader !== true) : val;\n        this.checkMatch();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleKeyUp(event: KeyboardEvent): void {\n        if (event.key === 'ArrowDown' || event.key === 'Down') {\n            this.dropdown.focusedItem = this.dropdown.items[0];\n            this.dropdownContainer.nativeElement.focus();\n        } else if (event.key === 'Escape' || event.key === 'Esc') {\n            this.toggle();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleKeyDown(event: KeyboardEvent) {\n        if (event.key === 'ArrowUp' || event.key === 'Up') {\n            event.preventDefault();\n            event.stopPropagation();\n            this.close();\n        }\n    }\n\n    private checkMatch(): void {\n        const displayKey = this.displayKey;\n        const matchFn = (e) => {\n            const value = displayKey ? e[displayKey] : e;\n            return value.toString().toLowerCase() === this.searchValue.trim().toLowerCase();\n        };\n        const itemMatch = this.filteredData.some(matchFn);\n        this.customValueFlag = this.allowCustomValues && !itemMatch;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleInputChange(event?: string) {\n        if (event !== undefined) {\n            this.onSearchInput.emit(event);\n        }\n        this.checkMatch();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get dataType(): string {\n        if (this.displayKey) {\n            return DataTypes.COMPLEX;\n        }\n        return DataTypes.PRIMITIVE;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isRemote() {\n        return this.totalItemCount > 0 &&\n            this.valueKey &&\n            this.dataType === DataTypes.COMPLEX;\n    }\n\n    /** Contains key-value pairs of the selected valueKeys and their resp. displayKeys */\n    private registerRemoteEntries(ids: any[], add = true) {\n        if (add) {\n            const selection = this.getValueDisplayPairs(ids);\n            for (const entry of selection) {\n                this._remoteSelection[entry[this.valueKey]] = entry[this.displayKey];\n            }\n        } else {\n            for (const entry of ids) {\n                delete this._remoteSelection[entry];\n            }\n        }\n    }\n\n    /** For `id: any[]` returns a mapped `{ [combo.valueKey]: any, [combo.displayKey]: any }[]`*/\n    private getValueDisplayPairs(ids: any[]) {\n        return this.data.filter(entry => ids.indexOf(entry[this.valueKey]) > -1).map(e => {\n            return {\n                [this.valueKey]: e[this.valueKey],\n                [this.displayKey]: e[this.displayKey]\n            };\n        });\n    }\n\n    /**\n     * Returns if the specified itemID is selected\n     * @hidden\n     * @internal\n     */\n    public isItemSelected(item: any): boolean {\n        return this.selection.is_item_selected(this.id, item);\n    }\n\n    /**\n     * Triggers change detection on the combo view\n     */\n    public triggerCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isAddButtonVisible(): boolean {\n        // This should always return a boolean value. If this.searchValue was '', it returns '' instead of false;\n        return this.searchValue !== '' && this.customValueFlag;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleSelectAll(evt) {\n        if (evt.checked) {\n            this.selectAllItems();\n        } else {\n            this.deselectAllItems();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public addItemToCollection() {\n        if (!this.searchValue) {\n            return;\n        }\n        const newValue = this.searchValue.trim();\n        const addedItem = this.displayKey ? {\n            [this.valueKey]: newValue,\n            [this.displayKey]: newValue\n        } : newValue;\n        if (this.groupKey) {\n            Object.assign(addedItem, { [this.groupKey]: this.defaultFallbackGroup });\n        }\n        const oldCollection = this.data;\n        const newCollection = [...this.data];\n        newCollection.push(addedItem);\n        const args: IComboItemAdditionEvent = {\n            oldCollection, addedItem, newCollection\n        };\n        this.onAddition.emit(args);\n        this.data.push(addedItem);\n        // If you mutate the array, no pipe is invoked and the display isn't updated;\n        // if you replace the array, the pipe executes and the display is updated.\n        this.data = cloneArray(this.data);\n        this.selectItems(this.comboAPI.valueKey !== null ? [addedItem[this.valueKey]] : [addedItem], false);\n        this.customValueFlag = false;\n        this.searchInput.nativeElement.focus();\n        this.dropdown.focusedItem = null;\n        this.virtDir.scrollTo(0);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public focusSearchInput(opening?: boolean): void {\n        if (this.displaySearchInput && this.searchInput) {\n            this.searchInput.nativeElement.focus();\n        } else {\n            if (opening) {\n                this.dropdownContainer.nativeElement.focus();\n            } else {\n                this.comboInput.nativeElement.focus();\n                this.toggle();\n            }\n        }\n    }\n\n    protected onStatusChanged = () => {\n        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&\n            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {\n            this.valid = this.ngControl.valid ? IgxComboState.VALID : IgxComboState.INVALID;\n        }\n        this.manageRequiredAsterisk();\n    }\n\n    protected manageRequiredAsterisk(): void {\n        if (this.ngControl && this.ngControl.control.validator) {\n            // Run the validation with empty object to check if required is enabled.\n            const error = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = error && error.required;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onBlur() {\n        if (this.collapsed) {\n            this._onTouchedCallback();\n            if (this.ngControl && !this.ngControl.valid) {\n                this.valid = IgxComboState.INVALID;\n            } else {\n                this.valid = IgxComboState.INITIAL;\n            }\n        }\n    }\n\n    /** @hidden @internal */\n    public onFocus() {\n        if (this.collapsed) {\n            this._onTouchedCallback();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnInit() {\n        this.ngControl = this._injector.get<NgControl>(NgControl, null);\n        this._overlaySettings.positionStrategy.settings.target = this.elementRef.nativeElement;\n        this.selection.set(this.id, new Set());\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterViewInit() {\n        this.filteredData = [...this.data];\n\n        if (this.ngControl) {\n            this.ngControl.statusChanges.pipe(takeUntil(this.destroy$)).subscribe(this.onStatusChanged);\n            this.manageRequiredAsterisk();\n            this.cdr.detectChanges();\n        }\n        this.virtDir.onChunkPreload.pipe(takeUntil(this.destroy$)).subscribe((e) => {\n            this.onDataPreLoad.emit(e);\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n        this.comboAPI.clear();\n        this.selection.clear(this.id);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public writeValue(value: any[]): void {\n        this.selectItems(value, true);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public getEditElement(): HTMLElement {\n        return this.comboInput.nativeElement;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get template(): TemplateRef<any> {\n        this._dataType = this.dataType;\n        if (this.itemTemplate) {\n            return this.itemTemplate;\n        }\n        if (this._dataType === DataTypes.COMPLEX) {\n            return this.complexTemplate;\n        }\n        return this.primitiveTemplate;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClearItems(event: Event): void {\n        this.deselectAllItems(true, event);\n        if (this.collapsed) {\n            this.getEditElement().focus();\n        } else {\n            this.focusSearchInput(true);\n        }\n        event.stopPropagation();\n    }\n\n    /**\n     * A method that opens/closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.toggle()\">Toggle Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public toggle(): void {\n        const overlaySettings = Object.assign({}, this._overlaySettings, this.overlaySettings);\n        this.dropdown.toggle(overlaySettings);\n    }\n\n    /**\n     * A method that opens the combo.\n     *\n     *```html\n     *<button (click)=\"combo.open()\">Open Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public open(): void {\n        const overlaySettings = Object.assign({}, this._overlaySettings, this.overlaySettings);\n        this.dropdown.open(overlaySettings);\n    }\n\n    /**\n     * A method that closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.close()\">Close Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public close(): void {\n        this.dropdown.close();\n    }\n\n    /**\n     * Gets drop down state.\n     *\n     * ```typescript\n     * let state = this.combo.collapsed;\n     * ```\n    */\n    public get collapsed(): boolean {\n        return this.dropdown.collapsed;\n    }\n\n    /**\n     * Get current selection state\n     * @returns Array of selected items\n     * ```typescript\n     * let selectedItems = this.combo.selectedItems();\n     * ```\n     */\n    public selectedItems() {\n        const items = Array.from(this.selection.get(this.id));\n        return items;\n    }\n\n    /**\n     * Select defined items\n     * @param newItems new items to be selected\n     * @param clearCurrentSelection if true clear previous selected items\n     * ```typescript\n     * this.combo.selectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public selectItems(newItems: Array<any>, clearCurrentSelection?: boolean, event?: Event) {\n        if (newItems) {\n            const newSelection = this.selection.add_items(this.id, newItems, clearCurrentSelection);\n            this.setSelection(newSelection, event);\n        }\n    }\n\n    /**\n     * Deselect defined items\n     * @param items items to deselected\n     * ```typescript\n     * this.combo.deselectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public deselectItems(items: Array<any>, event?: Event) {\n        if (items) {\n            const newSelection = this.selection.delete_items(this.id, items);\n            this.setSelection(newSelection, event);\n        }\n    }\n\n    /**\n     * Select all (filtered) items\n     * @param ignoreFilter if set to true, selects all items, otherwise selects only the filtered ones.\n     * ```typescript\n     * this.combo.selectAllItems();\n     * ```\n     */\n    public selectAllItems(ignoreFilter?: boolean, event?: Event) {\n        const allVisible = this.selection.get_all_ids(ignoreFilter ? this.data : this.filteredData, this.valueKey);\n        const newSelection = this.selection.add_items(this.id, allVisible);\n        this.setSelection(newSelection, event);\n    }\n\n    /**\n     * Deselect all (filtered) items\n     * @param ignoreFilter if set to true, deselects all items, otherwise deselects only the filtered ones.\n     * ```typescript\n     * this.combo.deselectAllItems();\n     * ```\n     */\n    public deselectAllItems(ignoreFilter?: boolean, event?: Event): void {\n        let newSelection = this.selection.get_empty();\n        if (this.filteredData.length !== this.data.length && !ignoreFilter) {\n            newSelection = this.selection.delete_items(this.id, this.selection.get_all_ids(this.filteredData, this.valueKey));\n        }\n        this.setSelection(newSelection, event);\n    }\n\n    /**\n     * Selects/Deselects a single item\n     * @param itemID the itemID of the specific item\n     * @param select If the item should be selected (true) or deselected (false)\n     *\n     * Without specified valueKey;\n     * ```typescript\n     * this.combo.valueKey = null;\n     * const items: { field: string, region: string}[] = data;\n     * this.combo.setSelectedItem(items[0], true);\n     * ```\n     * With specified valueKey;\n     * ```typescript\n     * this.combo.valueKey = 'field';\n     * const items: { field: string, region: string}[] = data;\n     * this.combo.setSelectedItem('Connecticut', true);\n     * ```\n     */\n    public setSelectedItem(itemID: any, select = true, event?: Event): void {\n        if (itemID === null || itemID === undefined) {\n            return;\n        }\n        if (select) {\n            this.selectItems([itemID], false, event);\n        } else {\n            this.deselectItems([itemID], event);\n        }\n    }\n\n    protected setSelection(newSelection: Set<any>, event?: Event): void {\n        const removed = diffInSets(this.selection.get(this.id), newSelection);\n        const added = diffInSets(newSelection, this.selection.get(this.id));\n        const newSelectionAsArray = Array.from(newSelection);\n        const oldSelectionAsArray = Array.from(this.selection.get(this.id) || []);\n        const displayText = this.createDisplayText(newSelectionAsArray, oldSelectionAsArray);\n        const args: IComboSelectionChangeEventArgs = {\n            newSelection: newSelectionAsArray,\n            oldSelection: oldSelectionAsArray,\n            added,\n            removed,\n            event,\n            displayText,\n            cancel: false\n        };\n        this.onSelectionChange.emit(args);\n        if (!args.cancel) {\n            this.selection.select_items(this.id, args.newSelection, true);\n            if (displayText !== args.displayText) {\n                this._value = args.displayText;\n            } else {\n                this._value = this.createDisplayText(args.newSelection, args.oldSelection);\n            }\n            this._onChangeCallback(args.newSelection);\n        }\n    }\n\n    /** Returns a string that should be populated in the combo's text box */\n    private concatDisplayText(selection: any[]): string {\n        const value = this.displayKey !== null && this.displayKey !== undefined ?\n        this.convertKeysToItems(selection).map(entry => entry[this.displayKey]).join(', ') :\n        selection.join(', ');\n        return value;\n    }\n\n    /** Constructs the combo display value\n     * If remote, caches the key displayText\n     * If not, just combine the object.displayKeys\n     */\n    private createDisplayText(newSelection: any[], oldSelection: any[]) {\n        let value = '';\n        if (this.isRemote) {\n            if (newSelection.length) {\n                const removedItems = oldSelection.filter(e => newSelection.indexOf(e) < 0);\n                const addedItems = newSelection.filter(e => oldSelection.indexOf(e) < 0);\n                this.registerRemoteEntries(addedItems);\n                this.registerRemoteEntries(removedItems, false);\n                value = Object.keys(this._remoteSelection).map(e => this._remoteSelection[e]).join(', ');\n            } else {\n                // If new selection is empty, clear all items\n                this.registerRemoteEntries(oldSelection, false);\n            }\n        } else {\n            value = this.concatDisplayText(newSelection);\n        }\n        return value;\n    }\n\n    /** if there is a valueKey - map the keys to data items, else - just return the keys */\n    private convertKeysToItems(keys: any[]) {\n        if (this.comboAPI.valueKey === null) {\n            return keys;\n        }\n        // map keys vs. filter data to retain the order of the selected items\n        return keys.map(key => this.data.find(entry => entry[this.valueKey] === key)).filter(e => e !== undefined);\n    }\n    /**\n     * Event handlers\n     * @hidden\n     * @internal\n     */\n    public handleOpening(event: CancelableEventArgs) {\n        this.onOpening.emit(event);\n        if (event.cancel) {\n            return;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleOpened() {\n        this.triggerCheck();\n        this.focusSearchInput(true);\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClosing(event) {\n        this.onClosing.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.searchValue = '';\n        this.comboInput.nativeElement.focus();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClosed() {\n        this.onClosed.emit();\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxComboComponent, IgxComboItemComponent, IgxComboGroupingPipe,\n        IgxComboFilteringPipe, IgxComboDropDownComponent, IgxComboAddItemComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective,\n        IgxComboToggleIconDirective,\n        IgxComboClearIconDirective],\n    exports: [IgxComboComponent, IgxComboItemComponent, IgxComboDropDownComponent, IgxComboAddItemComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective,\n        IgxComboToggleIconDirective,\n        IgxComboClearIconDirective],\n    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,\n        IgxForOfModule, IgxToggleModule, IgxCheckboxModule, IgxDropDownModule, IgxButtonModule, IgxIconModule]\n})\nexport class IgxComboModule { }\n","ï»¿import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    Renderer2,\n    TemplateRef,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport {\n    IgxDragDirective,\n    IDragBaseEventArgs,\n    IDragStartEventArgs,\n    IDropBaseEventArgs,\n    IDropDroppedEventArgs\n} from '../directives/drag-drop/drag-drop.directive';\nimport { IBaseEventArgs } from '../core/utils';\nimport { fromEvent } from 'rxjs';\nimport { take, filter } from 'rxjs/operators';\n\n\nexport interface IBaseChipEventArgs extends IBaseEventArgs {\n    originalEvent: IDragBaseEventArgs | IDropBaseEventArgs | KeyboardEvent | MouseEvent | TouchEvent;\n    owner: IgxChipComponent;\n}\n\nexport interface IChipClickEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n}\n\nexport interface IChipKeyDownEventArgs extends IBaseChipEventArgs {\n    originalEvent: KeyboardEvent;\n    cancel: boolean;\n}\n\nexport interface IChipEnterDragAreaEventArgs extends IBaseChipEventArgs {\n    dragChip: IgxChipComponent;\n}\n\nexport interface IChipSelectEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n    selected: boolean;\n}\n\nlet CHIP_ID = 0;\n\n/**\n * Chip is compact visual component that displays information in an obround.\n *\n * @igxModule IgxChipsModule\n *\n * @igxTheme igx-chip-theme\n *\n * @igxKeywords chip\n *\n * @igxGroup display\n *\n * @remarks\n * The Ignite UI Chip can be templated, deleted, and selected.\n * Multiple chips can be reordered and visually connected to each other.\n * Chips reside in a container called chips area which is responsible for managing the interactions between the chips.\n *\n * @example\n * ```html\n * <igx-chip class=\"chipStyle\" [id]=\"901\" [draggable]=\"true\" [removable]=\"true\" (onRemove)=\"chipRemoved($event)\">\n *    <igx-avatar class=\"chip-avatar-resized\" igxPrefix fontSet=\"material\" roundShape=\"true\"></igx-avatar>\n * </igx-chip>\n * ```\n */\n@Component({\n    selector: 'igx-chip',\n    templateUrl: 'chip.component.html'\n})\nexport class IgxChipComponent extends DisplayDensityBase {\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * @example\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\"></igx-chip>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-chip-${CHIP_ID++}`;\n\n    /**\n     * An @Input property that stores data related to the chip.\n     * @example\n     * ```html\n     * <igx-chip [data]=\"{ value: 'Country' }\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public data: any;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be dragged in order to change it's position.\n     * By default it is set to false.\n     * @example\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public draggable = false;\n\n        /**\n     * An @Input property that enables/disables the draggable element animation when the element is released.\n     * By default it's set to true.\n     * @example\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [animateOnRelease]=\"false\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public animateOnRelease = true;\n\n    /**\n     * An @Input property that enables/disables the hiding of the base element that has been dragged.\n     * By default it's set to true.\n     * @example\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [hideBaseOnDrag]=\"false\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public hideBaseOnDrag = true;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` should render remove button and throw remove events.\n     * By default it is set to false.\n     * @example\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [removable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public removable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies to the remove button.\n     * @example\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [removable]=\"true\" [removeIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>delete</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public removeIcon: TemplateRef<any>;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be selected on click or through navigation,\n     * By default it is set to false.\n     * @example\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [draggable]=\"true\" [removable]=\"true\" [selectable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public selectable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies when it is selected.\n     * @example\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [selectable]=\"true\" [selectIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>done_outline</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public selectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` is disabled. When disabled it restricts user interactions\n     * like focusing on click or tab, selection on click or Space, dragging.\n     * By default it is set to false.\n     * @example\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [disabled]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * Sets the `IgxChipComponent` selected state.\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" [selected]=\"true\">\n     * ```\n     *\n     * Two-way data binding:\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" [(selected)]=\"model.isSelected\">\n     * ```\n     */\n    @Input()\n    public set selected(newValue: boolean) {\n        this.changeSelection(newValue);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Output()\n    public selectedChange = new EventEmitter<boolean>();\n\n    /**\n     * Returns if the `IgxChipComponent` is selected.\n     * @example\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * selectedChip(){\n     *     let selectedChip = this.chip.selected;\n     * }\n     * ```\n     */\n    public get selected() {\n        return this._selected;\n    }\n\n    /**\n     * An @Input property that sets the `IgxChipComponent` background color.\n     * The `color` property supports string, rgb, hex.\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [color]=\"'#ff0000'\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public set color(newColor) {\n        this.chipArea.nativeElement.style.backgroundColor = newColor;\n    }\n\n    /**\n     * Returns the background color of the `IgxChipComponent`.\n     * @example\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * ngAfterViewInit(){\n     *     let chipColor = this.chip.color;\n     * }\n     * ```\n     */\n    public get color() {\n        return this.chipArea.nativeElement.style.backgroundColor;\n    }\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving starts.\n     * Returns the moving `IgxChipComponent`.\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveStart)=\"moveStarted($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving ends.\n     * Returns the moved `IgxChipComponent`.\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveEnd)=\"moveEnded($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is removed.\n     * Returns the removed `IgxChipComponent`.\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onRemove)=\"remove($event)\">\n     * ```\n     */\n    @Output()\n    public onRemove = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is clicked.\n     * Returns the clicked `IgxChipComponent`, whether the event should be canceled.\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onClick)=\"chipClick($event)\">\n     * ```\n     */\n    @Output()\n    public onClick = new EventEmitter<IChipClickEventArgs>();\n\n    /**\n     * Emits event when the `IgxChipComponent` is selected/deselected.\n     * Returns the selected chip reference, whether the event should be canceled, what is the next selection state and\n     * when the event is triggered by interaction `originalEvent` is provided, otherwise `originalEvent` is `null`.\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" (onSelection)=\"chipSelect($event)\">\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipSelectEventArgs>();\n\n    /**\n     * Emits event when the `IgxChipComponent` is selected/deselected and any related animations and transitions also end.\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" (onSelectionDone)=\"chipSelectEnd($event)\">\n     * ```\n     */\n    @Output()\n    public onSelectionDone = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` keyboard navigation is being used.\n     * Returns the focused/selected `IgxChipComponent`, whether the event should be canceled,\n     * if the `alt`, `shift` or `control` key is pressed and the pressed key name.\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onKeyDown)=\"chipKeyDown($event)\">\n     * ```\n     */\n    @Output()\n    public onKeyDown = new EventEmitter<IChipKeyDownEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` has entered the `IgxChipsAreaComponent`.\n     * Returns the target `IgxChipComponent`, the drag `IgxChipComponent`, as  well as\n     * the original drop event arguments.\n     * @example\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onDragEnter)=\"chipEnter($event)\">\n     * ```\n     */\n    @Output()\n    public onDragEnter = new EventEmitter<IChipEnterDragAreaEventArgs>();\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        const classes = [this.getComponentDensityClass('igx-chip')];\n        classes.push(this.disabled ? 'igx-chip--disabled' : '');\n        // The custom classes should be at the end.\n        classes.push(this.class);\n        return classes.join(' ');\n    }\n\n    /**\n     * Property that contains a reference to the `IgxDragDirective` the `IgxChipComponent` uses for dragging behavior.\n     * @example\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [draggable]=\"true\"></igx-chip>\n     * ```\n     * ```typescript\n     * onMoveStart(event: IBaseChipEventArgs){\n     *     let dragDirective = event.owner.dragDirective;\n     * }\n     * ```\n     */\n    @ViewChild('chipArea', { read: IgxDragDirective, static: true })\n    public dragDirective: IgxDragDirective;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('chipArea', { read: ElementRef, static: true })\n    public chipArea: ElementRef;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('selectContainer', { read: ElementRef, static: true })\n    public selectContainer: ElementRef;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('defaultRemoveIcon', { read: TemplateRef, static: true })\n    public defaultRemoveIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('defaultSelectIcon', { read: TemplateRef, static: true })\n    public defaultSelectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get removeButtonTemplate() {\n        return this.removeIcon || this.defaultRemoveIcon;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get selectIconTemplate() {\n        return this.selectIcon || this.defaultSelectIcon;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get ghostClass(): string {\n        return this.getComponentDensityClass('igx-chip__ghost');\n    }\n\n    public get chipTabindex() {\n        return !this.disabled ? 0 : '';\n    }\n\n    protected _selected = false;\n    protected _selectedItemClass = 'igx-chip__item--selected';\n    protected _movedWhileRemoving = false;\n\n    constructor(public cdr: ChangeDetectorRef, public elementRef: ElementRef, private renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public selectClass(condition: boolean): object {\n        const SELECT_CLASS = 'igx-chip__select';\n\n        return {\n            [SELECT_CLASS]: condition,\n            [`${SELECT_CLASS}--hidden`]: !condition\n        };\n    }\n\n    protected changeSelection(newValue: boolean, srcEvent = null) {\n        const onSelectArgs: IChipSelectEventArgs = {\n            originalEvent: srcEvent,\n            owner: this,\n            selected: false,\n            cancel: false\n        };\n\n        fromEvent(this.selectContainer.nativeElement, 'transitionend')\n            .pipe(filter<TransitionEvent>(event => event.propertyName === 'width'), take(1))\n            .subscribe(event => this.onSelectTransitionDone(event));\n\n        if (newValue && !this._selected) {\n            onSelectArgs.selected = true;\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.addClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n                this.selectedChange.emit(this._selected);\n            }\n        } else if (!newValue && this._selected) {\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.removeClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n                this.selectedChange.emit(this._selected);\n            }\n        }\n    }\n\n    public onSelectTransitionDone(event) {\n        if (!!event.target.tagName) {\n            // Trigger onSelectionDone on when `width` property is changed and the target is valid element(not comment).\n            this.onSelectionDone.emit({\n                owner: this,\n                originalEvent: event\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onChipKeyDown(event: KeyboardEvent) {\n        const keyDownArgs: IChipKeyDownEventArgs = {\n            originalEvent: event,\n            owner: this,\n            cancel: false\n        };\n\n        this.onKeyDown.emit(keyDownArgs);\n        if (keyDownArgs.cancel) {\n            return;\n        }\n\n        if ((event.key === 'Delete' || event.key === 'Del') && this.removable) {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n        }\n\n        if ((event.key === ' ' || event.key === 'Spacebar') && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event);\n        }\n\n        if (event.key !== 'Tab') {\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onRemoveBtnKeyDown(event: KeyboardEvent) {\n        if (event.key === ' ' || event.key === 'Spacebar' || event.key === 'Enter') {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    public onRemoveMouseDown(event: PointerEvent | MouseEvent) {\n        event.stopPropagation();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onRemoveClick(event: MouseEvent | TouchEvent) {\n        this.onRemove.emit({\n            originalEvent: event,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onRemoveTouchMove() {\n        // We don't remove chip if user starting touch interacting on the remove button moves the chip\n        this._movedWhileRemoving = true;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onRemoveTouchEnd(event: TouchEvent) {\n        if (!this._movedWhileRemoving) {\n            this.onRemoveClick(event);\n        }\n        this._movedWhileRemoving = false;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    // -----------------------------\n    // Start chip igxDrag behavior\n    public onChipDragStart(event: IDragStartEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event,\n            owner: this\n        });\n        event.cancel = !this.draggable || this.disabled;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onChipDragEnd() {\n        if (this.animateOnRelease) {\n            this.dragDirective.transitionToOrigin();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onChipMoveEnd(event: IDragBaseEventArgs) {\n        // moveEnd is triggered after return animation has finished. This happen when we drag and release the chip.\n        this.onMoveEnd.emit({\n            originalEvent: event,\n            owner: this\n        });\n\n        if (this.selected) {\n            this.chipArea.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onChipDragClicked(event: IDragBaseEventArgs) {\n        const clickEventArgs: IChipClickEventArgs = {\n            originalEvent: event,\n            owner: this,\n            cancel: false\n        };\n        this.onClick.emit(clickEventArgs);\n\n        if (!clickEventArgs.cancel && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event);\n        }\n    }\n    // End chip igxDrag behavior\n\n    /**\n     * @hidden\n     * @internal\n     */\n    // -----------------------------\n    // Start chip igxDrop behavior\n    public onChipDragEnterHandler(event: IDropBaseEventArgs) {\n        if (this.dragDirective === event.drag || !event.drag.data || !event.drag.data.chip) {\n            return;\n        }\n\n        const eventArgs: IChipEnterDragAreaEventArgs = {\n            owner: this,\n            dragChip: event.drag.data.chip,\n            originalEvent: event\n        };\n        this.onDragEnter.emit(eventArgs);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onChipDrop(event: IDropDroppedEventArgs) {\n        // Cancel the default drop logic\n        event.cancel = true;\n    }\n    // End chip igxDrop behavior\n}\n","ï»¿import {\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    Output,\n    QueryList,\n    DoCheck,\n    AfterViewInit,\n    OnDestroy,\n    ElementRef\n} from '@angular/core';\nimport {\n    IgxChipComponent,\n    IChipSelectEventArgs,\n    IChipKeyDownEventArgs,\n    IChipEnterDragAreaEventArgs,\n    IBaseChipEventArgs\n} from './chip.component';\nimport { IDropBaseEventArgs, IDragBaseEventArgs } from '../directives/drag-drop/drag-drop.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nexport interface IBaseChipsAreaEventArgs {\n    originalEvent: IDragBaseEventArgs | IDropBaseEventArgs | KeyboardEvent | MouseEvent | TouchEvent;\n    owner: IgxChipsAreaComponent;\n}\n\nexport interface IChipsAreaReorderEventArgs extends IBaseChipsAreaEventArgs {\n    chipsArray: IgxChipComponent[];\n}\n\nexport interface IChipsAreaSelectEventArgs extends IBaseChipsAreaEventArgs {\n    newSelection: IgxChipComponent[];\n}\n\n/**\n * The chip area allows you to perform more complex scenarios with chips that require interaction,\n * like dragging, selection, navigation, etc.\n *\n * @igxModule IgxChipsModule\n *\n * @igxTheme igx-chip-theme\n *\n * @igxKeywords chip area, chip\n *\n * @igxGroup display\n *\n * @example\n * ```html\n * <igx-chips-area>\n *    <igx-chip *ngFor=\"let chip of chipList\" [id]=\"chip.id\">\n *        <span>{{chip.text}}</span>\n *    </igx-chip>\n * </igx-chips-area>\n * ```\n */\n@Component({\n    selector: 'igx-chips-area',\n    templateUrl: 'chips-area.component.html',\n})\nexport class IgxChipsAreaComponent implements DoCheck, AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('attr.class')\n    get hostClass() {\n        const classes = ['igx-chip-area'];\n        classes.push(this.class);\n\n        return classes.join(' ');\n    }\n\n    /**\n     * An @Input property that sets the width of the `IgxChipsAreaComponent`.\n     * @example\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.width.px')\n    @Input()\n    public width: number;\n\n    /**\n     * An @Input property that sets the height of the `IgxChipsAreaComponent`.\n     * @example\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.height.px')\n    @Input()\n    public height: number;\n\n    /**\n     * Emits an event when `IgxChipComponent`s in the `IgxChipsAreaComponent` should be reordered.\n     * Returns an array of `IgxChipComponent`s.\n     * @example\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"changedOrder($event)\"></igx-chips-area>\n     * ```\n     */\n    @Output()\n    public onReorder = new EventEmitter<IChipsAreaReorderEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is selected/deselected.\n     * Fired after the chips area is initialized if there are initially selected chips as well.\n     * Returns an array of selected `IgxChipComponent`s and the `IgxChipAreaComponent`.\n     * @example\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onSelection)=\"selection($event)\"></igx-chips-area>\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipsAreaSelectEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * @example\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveStart)=\"moveStart($event)\"></igx-chips-area>\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Emits an event after an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * @example\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveEnd)=\"moveEnd($event)\"></igx-chips-area>\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Holds the `IgxChipComponent` in the `IgxChipsAreaComponent`.\n     * @example\n     * ```typescript\n     * ngAfterViewInit(){\n     *    let chips = this.chipsArea.chipsList;\n     * }\n     * ```\n     */\n    @ContentChildren(IgxChipComponent, { descendants: true })\n    public chipsList: QueryList<IgxChipComponent>;\n\n    private modifiedChipsArray: IgxChipComponent[];\n    private _differ: IterableDiffer<IgxChipComponent> | null = null;\n    protected destroy$ = new Subject<boolean>();\n\n    constructor(public cdr: ChangeDetectorRef, public element: ElementRef,\n        private _iterableDiffers: IterableDiffers) {\n        this._differ = this._iterableDiffers.find([]).create(null);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngAfterViewInit() {\n        // If we have initially selected chips through their inputs, we need to get them, because we cannot listen to their events yet.\n        if (this.chipsList.length) {\n            const selectedChips = this.chipsList.filter((item: IgxChipComponent) => item.selected);\n            if (selectedChips.length) {\n                this.onSelection.emit({\n                    originalEvent: null,\n                    newSelection: selectedChips,\n                    owner: this\n                });\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngDoCheck(): void {\n        if (this.chipsList) {\n            const changes = this._differ.diff(this.chipsList.toArray());\n            if (changes) {\n                changes.forEachAddedItem((addedChip) => {\n                    addedChip.item.onMoveStart.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveStart(args);\n                    });\n                    addedChip.item.onMoveEnd.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveEnd(args);\n                    });\n                    addedChip.item.onDragEnter.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipDragEnter(args);\n                    });\n                    addedChip.item.onKeyDown.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipKeyDown(args);\n                    });\n                    if (addedChip.item.selectable) {\n                        addedChip.item.onSelection.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                            this.onChipSelectionChange(args);\n                        });\n                    }\n                });\n                this.modifiedChipsArray = this.chipsList.toArray();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected onChipKeyDown(event: IChipKeyDownEventArgs) {\n        let orderChanged = false;\n        const chipsArray = this.chipsList.toArray();\n        const dragChipIndex = chipsArray.findIndex((el) => el === event.owner);\n        if (event.originalEvent.shiftKey === true) {\n            if (event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex - 1, false, event.originalEvent);\n                if (orderChanged) {\n                    setTimeout(() => {\n                        this.chipsList.toArray()[dragChipIndex - 1].chipArea.nativeElement.focus();\n                    });\n                }\n            } else if (event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex + 1, true, event.originalEvent);\n            }\n        } else {\n            if ((event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') && dragChipIndex > 0) {\n                chipsArray[dragChipIndex - 1].chipArea.nativeElement.focus();\n            } else if ((event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') &&\n                dragChipIndex < chipsArray.length - 1) {\n                chipsArray[dragChipIndex + 1].chipArea.nativeElement.focus();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected onChipMoveStart(event: IBaseChipEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected onChipMoveEnd(event: IBaseChipEventArgs) {\n        this.onMoveEnd.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected onChipDragEnter(event: IChipEnterDragAreaEventArgs) {\n        const dropChipIndex = this.chipsList.toArray().findIndex((el) => el === event.owner);\n        const dragChipIndex = this.chipsList.toArray().findIndex((el) => el === event.dragChip);\n        if (dragChipIndex < dropChipIndex) {\n            // from the left to right\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, true, event.originalEvent);\n        } else {\n            // from the right to left\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, false, event.originalEvent);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected positionChipAtIndex(chipIndex, targetIndex, shiftRestLeft, originalEvent) {\n        if (chipIndex < 0 || this.chipsList.length <= chipIndex ||\n            targetIndex < 0 || this.chipsList.length <= targetIndex) {\n            return false;\n        }\n\n        const chipsArray = this.chipsList.toArray();\n        const result: IgxChipComponent[] = [];\n        for (let i = 0; i < chipsArray.length; i++) {\n            if (shiftRestLeft) {\n                if (chipIndex <= i && i < targetIndex) {\n                    result.push(chipsArray[i + 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            } else {\n                if (targetIndex < i && i <= chipIndex) {\n                    result.push(chipsArray[i - 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            }\n        }\n        this.modifiedChipsArray = result;\n\n        const eventData: IChipsAreaReorderEventArgs = {\n            chipsArray: this.modifiedChipsArray,\n            originalEvent: originalEvent,\n            owner: this\n        };\n        this.onReorder.emit(eventData);\n        return true;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected onChipSelectionChange(event: IChipSelectEventArgs) {\n        let selectedChips = this.chipsList.filter((chip) => chip.selected);\n        if (event.selected && !selectedChips.includes(event.owner)) {\n            selectedChips.push(event.owner);\n        } else if (!event.selected && selectedChips.includes(event.owner)) {\n            selectedChips = selectedChips.filter((chip) => {\n                return chip.id !== event.owner.id;\n            });\n        }\n        this.onSelection.emit({\n            originalEvent: event.originalEvent,\n            newSelection: selectedChips,\n            owner: this\n        });\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxChipComponent } from './chip.component';\nimport { IgxChipsAreaComponent } from './chips-area.component';\nimport { IgxDragDropModule } from '../directives/drag-drop/drag-drop.directive';\nimport { IgxPrefixModule, IgxPrefixDirective} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixModule, IgxSuffixDirective } from '../directives/suffix/suffix.directive';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxChipsAreaComponent,\n    IgxChipComponent\n  ],\n  exports: [\n    IgxChipsAreaComponent,\n    IgxChipComponent,\n    IgxPrefixDirective,\n    IgxSuffixDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule,\n    IgxDragDropModule,\n    IgxPrefixModule,\n    IgxSuffixModule\n  ]\n})\nexport class IgxChipsModule { }\n","import { Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeader]'\n})\nexport class IgxComboHeaderDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboFooter]'\n})\nexport class IgxComboFooterDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboItem]'\n})\nexport class IgxComboItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboEmpty]'\n})\nexport class IgxComboEmptyDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeaderItem]'\n})\n\nexport class IgxComboHeaderItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboAddItem]'\n})\nexport class IgxComboAddItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboToggleIcon]'\n})\nexport class IgxComboToggleIconDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboClearIcon]'\n})\nexport class IgxComboClearIconDirective {\n}\n\n","import { IgxComboBase } from './combo.common';\nimport { Injectable } from '@angular/core';\n\n/**\n * @hidden\n */\n@Injectable()\nexport class IgxComboAPIService {\n    protected combo: IgxComboBase;\n\n    public disableTransitions = false;\n\n    public register(combo: IgxComboBase) {\n        this.combo = combo;\n    }\n\n\n    public clear(): void {\n        this.combo = null;\n    }\n\n    public get valueKey() {\n        return this.combo.valueKey !== null && this.combo.valueKey !== undefined ? this.combo.valueKey : null;\n    }\n\n    public get item_focusable(): boolean {\n        return false;\n    }\n    public get isRemote(): boolean {\n        return this.combo.isRemote;\n    }\n\n    public add_custom_item(): void {\n        if (!this.combo) {\n            return;\n        }\n        this.combo.addItemToCollection();\n    }\n\n    public get comboID(): string {\n        return this.combo.id;\n    }\n\n    public set_selected_item(itemID: any, event?: Event): void {\n        const selected = this.combo.isItemSelected(itemID);\n        if (itemID === null || itemID === undefined) {\n            return;\n        }\n        if (!selected) {\n            this.combo.selectItems([itemID], false, event);\n        } else {\n            this.combo.deselectItems([itemID], event);\n        }\n    }\n\n    public is_item_selected(itemID: any): boolean {\n        return this.combo.isItemSelected(itemID);\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    HostBinding,\n    Inject,\n    Input,\n    DoCheck\n} from '@angular/core';\nimport { IgxDropDownItemComponent } from '../drop-down/drop-down-item.component';\nimport { IGX_DROPDOWN_BASE, IDropDownBase, Navigate } from '../drop-down/drop-down.common';\nimport { IgxComboAPIService } from './combo.api';\nimport { IgxSelectionAPIService } from '../core/selection';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-item',\n    templateUrl: 'combo-item.component.html'\n})\nexport class IgxComboItemComponent extends IgxDropDownItemComponent implements DoCheck {\n\n    /**\n     * Gets the height of a list item\n     * @hidden\n     */\n    @Input()\n    @HostBinding('style.height.px')\n    public itemHeight = '';\n\n    /**\n     * @hidden\n     */\n    public get itemID() {\n        const valueKey = this.comboAPI.valueKey;\n        return valueKey !== null ? this.value[valueKey] : this.value;\n    }\n\n    /**\n     * @hidden\n     */\n    public get comboID() {\n        return this.comboAPI.comboID;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get disableTransitions() {\n        return this.comboAPI.disableTransitions;\n    }\n\n    constructor(\n        protected comboAPI: IgxComboAPIService,\n        @Inject(IGX_DROPDOWN_BASE) protected dropDown: IDropDownBase,\n        protected elementRef: ElementRef,\n        @Inject(IgxSelectionAPIService) protected selection: IgxSelectionAPIService\n    ) {\n        super(dropDown, elementRef, null, selection);\n    }\n\n    /**\n     * @hidden\n     */\n    get selected(): boolean {\n        return this.comboAPI.is_item_selected(this.itemID);\n    }\n\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n    }\n\n    /**\n     * @hidden\n     */\n    isVisible(direction: Navigate): boolean {\n        const rect = this.element.nativeElement.getBoundingClientRect();\n        const parentDiv = this.element.nativeElement.parentElement.parentElement.getBoundingClientRect();\n        if (direction === Navigate.Down) {\n            return rect.y + rect.height <= parentDiv.y + parentDiv.height;\n        }\n        return rect.y >= parentDiv.y;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clicked(event): void {\n        this.comboAPI.disableTransitions = false;\n        if (!this.isSelectable) { return; }\n        this.dropDown.navigateItem(this.index);\n        this.comboAPI.set_selected_item(this.itemID, event);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     * The event that is prevented is the click on the checkbox label element.\n     * That is the only visible element that a user can interact with.\n     * The click propagates to the host and the preventDefault is to stop it from\n     * switching focus to the input it's base on.\n     * The toggle happens in an internal handler in the drop-down on the next task queue cycle.\n     */\n    disableCheck(event: MouseEvent) {\n        event.preventDefault();\n    }\n\n    ngDoCheck() {\n    }\n}\n","import { ElementRef, EventEmitter, InjectionToken } from '@angular/core';\nimport { CancelableEventArgs, CancelableBrowserEventArgs } from '../core/utils';\n\nexport const IGX_COMBO_COMPONENT = new InjectionToken<IgxComboBase>('IgxComboComponentToken');\n\n/** @hidden @internal TODO: Evaluate */\nexport interface IgxComboBase {\n    id: string;\n    data: any[];\n    valueKey: string;\n    groupKey: string;\n    isRemote: boolean;\n    filteredData: any[];\n    totalItemCount: number;\n    itemsMaxHeight: number;\n    itemHeight: number;\n    searchValue: string;\n    searchInput: ElementRef<HTMLInputElement>;\n    comboInput: ElementRef<HTMLInputElement>;\n    onOpened: EventEmitter<void>;\n    onOpening: EventEmitter<CancelableEventArgs>;\n    onClosing: EventEmitter<CancelableBrowserEventArgs>;\n    onClosed: EventEmitter<void>;\n    focusSearchInput(opening?: boolean): void;\n    triggerCheck(): void;\n    addItemToCollection(): void;\n    isAddButtonVisible(): boolean;\n    handleInputChange(event?: string): void;\n    isItemSelected(itemID: any): boolean;\n    selectItems(itemIDs: any[], clearSelection?: boolean, event?: Event): void;\n    deselectItems(itemIDs: any[], event?: Event): void;\n}\n","import { IgxComboItemComponent } from './combo-item.component';\nimport { Component } from '@angular/core';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-combo-add-item',\n    template: '<ng-content></ng-content>',\n    providers: [{ provide: IgxComboItemComponent, useExisting: IgxComboAddItemComponent}]\n})\nexport class IgxComboAddItemComponent extends IgxComboItemComponent {\n    get selected(): boolean {\n        return false;\n    }\n    set selected(value: boolean) {\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clicked(event?) {\n        this.comboAPI.disableTransitions = false;\n        this.comboAPI.add_custom_item();\n    }\n}\n","import {\n    ChangeDetectorRef, Component, ElementRef, Inject, QueryList, OnDestroy, AfterViewInit, ContentChildren, Optional\n} from '@angular/core';\nimport { IgxComboBase, IGX_COMBO_COMPONENT } from './combo.common';\nimport { IDropDownBase, IGX_DROPDOWN_BASE } from '../drop-down/drop-down.common';\nimport { IgxDropDownComponent } from '../drop-down/drop-down.component';\nimport { DropDownActionKey } from '../drop-down/drop-down.common';\nimport { IgxComboAddItemComponent } from './combo-add-item.component';\nimport { IgxComboAPIService } from './combo.api';\nimport { IgxDropDownItemBaseDirective } from '../drop-down/drop-down-item.base';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-drop-down',\n    templateUrl: '../drop-down/drop-down.component.html',\n    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxComboDropDownComponent }]\n})\nexport class IgxComboDropDownComponent extends IgxDropDownComponent implements IDropDownBase, OnDestroy, AfterViewInit {\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase,\n        protected comboAPI: IgxComboAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(elementRef, cdr, selection, _displayDensityOptions);\n    }\n\n    /** @hidden @internal */\n   public get scrollContainer(): HTMLElement {\n        return this.virtDir.dc.location.nativeElement;\n    }\n\n    protected get isScrolledToLast(): boolean {\n        const scrollTop = this.virtDir.scrollPosition;\n        const scrollHeight = this.virtDir.getScroll().scrollHeight;\n        return Math.floor(scrollTop + this.virtDir.igxForContainerSize) === scrollHeight;\n    }\n\n    protected get lastVisibleIndex(): number {\n        return this.combo.totalItemCount ?\n            Math.floor(this.combo.itemsMaxHeight / this.combo.itemHeight) :\n            this.items.length - 1;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxComboItemComponent, { descendants: true })\n    public children: QueryList<IgxDropDownItemBaseDirective> = null;\n\n    /**\n     * @hidden @internal\n     */\n    public onFocus() {\n        this.focusedItem = this._focusedItem || this.items[0];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onBlur(evt?) {\n        this.focusedItem = null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpened() {\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden\n     */\n    public navigateFirst() {\n        this.navigateItem(this.virtDir.igxForOf.findIndex(e => !e.isHeader));\n    }\n\n    /**\n     * @hidden\n     */\n    public navigatePrev() {\n        if (this._focusedItem && this._focusedItem.index === 0 && this.virtDir.state.startIndex === 0) {\n            this.combo.focusSearchInput(false);\n        } else {\n            super.navigatePrev();\n        }\n    }\n\n\n    /**\n     * @hidden\n     */\n    public navigateNext() {\n        const lastIndex = this.combo.totalItemCount ? this.combo.totalItemCount - 1 : this.virtDir.igxForOf.length - 1;\n        if (this._focusedItem && this._focusedItem.index === lastIndex) {\n            this.focusAddItemButton();\n        } else {\n            super.navigateNext();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public selectItem(item: IgxDropDownItemBaseDirective) {\n        if (item === null || item === undefined) {\n            return;\n        }\n        this.comboAPI.set_selected_item(item.itemID);\n        this._focusedItem = item;\n    }\n\n    private focusAddItemButton() {\n        if (this.combo.isAddButtonVisible()) {\n            this.focusedItem = this.items[this.items.length - 1];\n        }\n    }\n\n    protected scrollToHiddenItem(newItem: any): void { }\n\n    protected scrollHandler = () => {\n        this.comboAPI.disableTransitions = true;\n    }\n\n    protected get sortedChildren(): IgxDropDownItemBaseDirective[] {\n        if (this.children !== undefined) {\n            return this.children.toArray()\n                .sort((a: IgxDropDownItemBaseDirective, b: IgxDropDownItemBaseDirective) => {\n                    return a.index - b.index;\n                });\n        }\n        return null;\n    }\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxComboItemComponent[] {\n        const items: IgxComboItemComponent[] = [];\n        if (this.children !== undefined) {\n            const sortedChildren = this.sortedChildren as IgxComboItemComponent[];\n            for (const child of sortedChildren) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public updateScrollPosition() {\n        this.virtDir.getScroll().scrollTop = this._scrollPosition;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onItemActionKey(key: DropDownActionKey) {\n        switch (key) {\n            case DropDownActionKey.ENTER:\n                this.handleEnter();\n                break;\n            case DropDownActionKey.SPACE:\n                this.handleSpace();\n                break;\n            case DropDownActionKey.ESCAPE:\n                this.close();\n        }\n    }\n\n    private handleEnter() {\n        if (this.isAddItemFocused()) {\n            this.combo.addItemToCollection();\n        } else {\n            this.close();\n        }\n    }\n\n    private handleSpace() {\n        if (this.isAddItemFocused()) {\n            return;\n        } else {\n            this.selectItem(this.focusedItem);\n        }\n    }\n\n    private isAddItemFocused(): boolean {\n        return this.focusedItem instanceof IgxComboAddItemComponent;\n    }\n\n    public ngAfterViewInit() {\n        this.virtDir.getScroll().addEventListener('scroll', this.scrollHandler);\n    }\n\n    /**\n     *@hidden @internal\n     */\n    public ngOnDestroy(): void {\n        this.virtDir.getScroll().removeEventListener('scroll', this.scrollHandler);\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { Inject, Pipe, PipeTransform} from '@angular/core';\nimport { cloneArray } from '../core/utils';\nimport { DataUtil } from '../data-operations/data-util';\nimport { SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { IGX_COMBO_COMPONENT, IgxComboBase } from './combo.common';\nimport { DefaultSortingStrategy } from '../data-operations/sorting-strategy';\n\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboFiltering'\n})\nexport class IgxComboFilteringPipe implements PipeTransform {\n    public transform(collection: any[], searchValue: any, displayKey: any, shouldFilter: boolean) {\n        if (!collection) {\n            return [];\n        }\n        if (!searchValue || !shouldFilter) {\n            return collection;\n        } else {\n            const searchTerm = searchValue.toLowerCase().trim();\n            if (displayKey != null) {\n                return collection.filter(e => e[displayKey].toLowerCase().includes(searchTerm));\n            } else {\n                return collection.filter(e => e.toLowerCase().includes(searchTerm));\n            }\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboGrouping'\n})\nexport class IgxComboGroupingPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase) { }\n\n    public transform(collection: any[], groupKey: any, valueKey: any) {\n        this.combo.filteredData = collection;\n        if ((!groupKey && groupKey !== 0) || !collection.length) {\n            return collection;\n        }\n        const sorted = DataUtil.sort(cloneArray(collection), [{\n            fieldName: groupKey,\n            dir: SortingDirection.Asc,\n            ignoreCase: true,\n            strategy: DefaultSortingStrategy.instance()\n        }]);\n        const data = cloneArray(sorted);\n        let inserts = 0;\n        let currentHeader = null;\n        for (let i = 0; i < sorted.length; i++) {\n            let insertFlag = 0;\n            if (currentHeader !== sorted[i][groupKey]) {\n                currentHeader = sorted[i][groupKey];\n                insertFlag = 1;\n            }\n            if (insertFlag) {\n                data.splice(i + inserts, 0, {\n                    [valueKey]: currentHeader,\n                    [groupKey]: currentHeader,\n                    isHeader: true\n                });\n                inserts++;\n            }\n        }\n        return data;\n    }\n}\n","/**\n * This enumeration is used to configure whether the date/time picker has an editable input with drop down\n * or is readonly - the date/time is selected only through a dialog.\n */\nexport enum InteractionMode {\n    DropDown = 'dropdown',\n    Dialog = 'dialog'\n}\n","import { isIE } from '../core/utils';\n\n/**\n * This enum is used to keep the date validation result.\n *\n *@hidden\n */\nexport const enum DateState {\n    Valid = 'valid',\n    Invalid = 'invalid',\n}\n\n/**\n *@hidden\n */\nconst enum FormatDesc {\n    Numeric = 'numeric',\n    TwoDigits = '2-digit'\n}\n\n/**\n *@hidden\n */\nconst enum DateChars {\n    YearChar = 'y',\n    MonthChar = 'M',\n    DayChar = 'd'\n}\n\n/**\n *@hidden\n */\nconst enum DateParts {\n    Day = 'day',\n    Month = 'month',\n    Year = 'year'\n}\n\n/**\n *@hidden\n */\nexport abstract class DatePickerUtil {\n    private static readonly SHORT_DATE_MASK = 'MM/dd/yy';\n    private static readonly SEPARATOR = 'literal';\n    private static readonly NUMBER_OF_MONTHS = 12;\n    private static readonly PROMPT_CHAR = '_';\n    private static readonly DEFAULT_LOCALE = 'en';\n\n    /**\n     * This method generates date parts structure based on editor mask and locale.\n     * @param maskValue: string\n     * @param locale: string\n     * @returns array containing information about date parts - type, position, format\n     */\n    public static parseDateFormat(maskValue: string, locale: string = DatePickerUtil.DEFAULT_LOCALE): any[] {\n        let dateStruct = [];\n        if (maskValue === undefined && !isIE()) {\n            dateStruct = DatePickerUtil.getDefaultLocaleMask(locale);\n        } else {\n            const mask = (maskValue) ? maskValue : DatePickerUtil.SHORT_DATE_MASK;\n            const maskArray = Array.from(mask);\n            const monthInitPosition = mask.indexOf(DateChars.MonthChar);\n            const dayInitPosition = mask.indexOf(DateChars.DayChar);\n            const yearInitPosition = mask.indexOf(DateChars.YearChar);\n\n            if (yearInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Year,\n                    initialPosition: yearInitPosition,\n                    formatType: DatePickerUtil.getYearFormatType(mask)\n                });\n            }\n\n            if (monthInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Month,\n                    initialPosition: monthInitPosition,\n                    formatType: DatePickerUtil.getMonthFormatType(mask)\n                });\n            }\n\n            if (dayInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Day,\n                    initialPosition: dayInitPosition,\n                    formatType: DatePickerUtil.getDayFormatType(mask)\n                });\n            }\n\n            for (let i = 0; i < maskArray.length; i++) {\n                if (!DatePickerUtil.isDateChar(maskArray[i])) {\n                    dateStruct.push({\n                        type: DatePickerUtil.SEPARATOR,\n                        initialPosition: i,\n                        value: maskArray[i]\n                    });\n                }\n            }\n\n            dateStruct.sort((a, b) => a.initialPosition - b.initialPosition);\n            DatePickerUtil.fillDatePartsPositions(dateStruct);\n        }\n        return dateStruct;\n    }\n\n    /**\n     * This method generates input mask based on date parts.\n     * @param dateStruct array\n     * @returns input mask\n     */\n    public static getInputMask(dateStruct: any[]): string {\n        const inputMask = [];\n        for (let i = 0; i < dateStruct.length; i++) {\n            if (dateStruct[i].type === DatePickerUtil.SEPARATOR) {\n                inputMask.push(dateStruct[i].value);\n            } else if (dateStruct[i].type === DateParts.Day || dateStruct[i].type === DateParts.Month) {\n                inputMask.push('00');\n            } else if (dateStruct[i].type === DateParts.Year) {\n                switch (dateStruct[i].formatType) {\n                    case FormatDesc.Numeric: {\n                        inputMask.push('0000');\n                        break;\n                    }\n                    case FormatDesc.TwoDigits: {\n                        inputMask.push('00');\n                        break;\n                    }\n                }\n            }\n        }\n        return inputMask.join('');\n    }\n\n    /**\n     * This method generates editor mask.\n     * @param dateStruct\n     * @returns editor mask\n     */\n    public static getMask(dateStruct: any[]): string {\n        const mask = [];\n        for (let i = 0; i < dateStruct.length; i++) {\n            switch (dateStruct[i].formatType) {\n                case FormatDesc.Numeric: {\n                    if (dateStruct[i].type === DateParts.Day) {\n                        mask.push('d');\n                    } else if (dateStruct[i].type === DateParts.Month) {\n                        mask.push('M');\n                    } else {\n                        mask.push('yyyy');\n                    }\n                    break;\n                }\n                case FormatDesc.TwoDigits: {\n                    if (dateStruct[i].type === DateParts.Day) {\n                        mask.push('dd');\n                    } else if (dateStruct[i].type === DateParts.Month) {\n                        mask.push('MM');\n                    } else {\n                        mask.push('yy');\n                    }\n                }\n            }\n\n            if (dateStruct[i].type === DatePickerUtil.SEPARATOR) {\n                mask.push(dateStruct[i].value);\n            }\n        }\n\n        return mask.join('');\n    }\n    /**\n     * This method parses an input string base on date parts and returns a date and its validation state.\n     * @param dateFormatParts\n     * @param prevDateValue\n     * @param inputValue\n     * @returns object containing a date and its validation state\n     */\n    public static parseDateArray(dateFormatParts: any[], prevDateValue: Date, inputValue: string): any {\n        const dayStr = DatePickerUtil.getDayValueFromInput(dateFormatParts, inputValue);\n        const monthStr = DatePickerUtil.getMonthValueFromInput(dateFormatParts, inputValue);\n        const yearStr = DatePickerUtil.getYearValueFromInput(dateFormatParts, inputValue);\n        const yearFormat = DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year).formatType;\n        const day = (dayStr !== '') ? parseInt(dayStr, 10) : 1;\n        const month = (monthStr !== '') ? parseInt(monthStr, 10) - 1 : 0;\n\n        let year;\n        if (yearStr === '') {\n            year = (yearFormat === FormatDesc.TwoDigits) ? '00' : '2000';\n        } else {\n            year = yearStr;\n        }\n        let yearPrefix;\n        if (prevDateValue) {\n            const originalYear = prevDateValue.getFullYear().toString();\n            if (originalYear.length === 4) {\n                yearPrefix = originalYear.substring(0, 2);\n            }\n        } else {\n            yearPrefix = '20';\n        }\n        const fullYear = (yearFormat === FormatDesc.TwoDigits) ? yearPrefix.concat(year) : year;\n\n        if ((month < 0) || (month > 11) || (month === NaN)) {\n            return { state: DateState.Invalid, value: inputValue };\n        }\n\n        if ((day < 1) || (day > DatePickerUtil.daysInMonth(fullYear, month + 1)) || (day === NaN)) {\n            return { state: DateState.Invalid, value: inputValue };\n        }\n\n        return { state: DateState.Valid, date: new Date(fullYear, month, day) };\n    }\n\n    public static maskToPromptChars(mask: string): string {\n        const result = mask.replace(/0|L/g, DatePickerUtil.PROMPT_CHAR);\n        return result;\n    }\n\n    /**\n     * This method replaces prompt chars with empty string.\n     * @param value\n     */\n    public static trimUnderlines(value: string): string {\n        const result = value.replace(/_/g, '');\n        return result;\n    }\n\n    /**\n     * This method is used for spinning date parts.\n     * @param dateFormatParts\n     * @param inputValue\n     * @param position\n     * @param delta\n     * @param isSpinLoop\n     * @return modified text input\n     */\n    public static getModifiedDateInput(dateFormatParts: any[],\n        inputValue: string,\n        position: number,\n        delta: number,\n        isSpinLoop: boolean): string {\n        const datePart = DatePickerUtil.getDatePartOnPosition(dateFormatParts, position);\n        const datePartType = datePart.type;\n        const datePartFormatType = datePart.formatType;\n        let newValue;\n\n        const datePartValue = DatePickerUtil.getDateValueFromInput(dateFormatParts, datePartType, inputValue);\n        newValue = parseInt(datePartValue, 10);\n\n        let maxValue, minValue;\n        const minMax = DatePickerUtil.getMinMaxValue(dateFormatParts, datePart, inputValue);\n        minValue = minMax.min;\n        maxValue = minMax.max;\n\n        if (isNaN(newValue)) {\n            if (minValue === 'infinite') {\n                newValue = 2000;\n            } else {\n                newValue = minValue;\n            }\n        }\n        let tempValue = newValue;\n        tempValue += delta;\n\n        // Infinite loop for full years\n        if (maxValue === 'infinite' && minValue === 'infinite') {\n            newValue = tempValue;\n        }\n\n        if (isSpinLoop) {\n            if (tempValue > maxValue) {\n                tempValue = minValue;\n            }\n            if (tempValue < minValue) {\n                tempValue = maxValue;\n            }\n            newValue = tempValue;\n        } else {\n            if (tempValue <= maxValue && tempValue >= minValue) {\n                newValue = tempValue;\n            }\n        }\n\n        const startIdx = datePart.position[0];\n        const endIdx = datePart.position[1];\n        const start = inputValue.slice(0, startIdx);\n        const end = inputValue.slice(endIdx, inputValue.length);\n        let changedPart: string;\n\n        const prefix = DatePickerUtil.getNumericFormatPrefix(datePartFormatType);\n        changedPart = (newValue < 10) ? `${prefix}${newValue}` : `${newValue}`;\n\n        return `${start}${changedPart}${end}`;\n    }\n\n    /**\n     * This method returns date input with prompt chars.\n     * @param dateFormatParts\n     * @param date\n     * @param inputValue\n     * @returns date input including prompt chars\n     */\n    public static addPromptCharsEditMode(dateFormatParts: any[], date: Date, inputValue: string): string {\n        const dateArray = Array.from(inputValue);\n        for (let i = 0; i < dateFormatParts.length; i++) {\n            if (dateFormatParts[i].formatType === FormatDesc.Numeric) {\n                if ((dateFormatParts[i].type === DateParts.Day && date.getDate() < 10)\n                    || (dateFormatParts[i].type === DateParts.Month && date.getMonth() + 1 < 10)) {\n                    dateArray.splice(dateFormatParts[i].position[0], 0, DatePickerUtil.PROMPT_CHAR);\n                    dateArray.join('');\n                }\n            }\n        }\n        return dateArray.join('');\n    }\n\n    /**\n     * This method checks if date input is done.\n     * @param dateFormatParts\n     * @param input\n     * @returns input completeness\n     */\n    public static checkForCompleteDateInput(dateFormatParts: any[], input: string): string {\n        const dayValue = DatePickerUtil.getDayValueFromInput(dateFormatParts, input);\n        const monthValue = DatePickerUtil.getMonthValueFromInput(dateFormatParts, input);\n        const yearValue = DatePickerUtil.getYearValueFromInput(dateFormatParts, input);\n        const dayStr = DatePickerUtil.getDayValueFromInput(dateFormatParts, input, false);\n        const monthStr = DatePickerUtil.getMonthValueFromInput(dateFormatParts, input, false);\n\n        if (DatePickerUtil.isFullInput(dayValue, dayStr)\n            && DatePickerUtil.isFullInput(monthValue, monthStr)\n            && DatePickerUtil.isFullYearInput(dateFormatParts, yearValue)) {\n            return 'complete';\n        } else if (dayValue === '' && monthValue === '' && yearValue === '') {\n            return 'empty';\n        } else if (dayValue === '' || monthValue === '' || yearValue === '') {\n            return 'partial';\n        }\n        return '';\n    }\n\n    private static getYearFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.YearChar, 'g')).length) {\n            case 1: {\n                // y (2020)\n                return FormatDesc.Numeric;\n            }\n            case 4: {\n                // yyyy (2020)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // yy (20)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getMonthFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.MonthChar, 'g')).length) {\n            case 1: {\n                // M (8)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // MM (08)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getDayFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.DayChar, 'g')).length) {\n            case 1: {\n                // d (6)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // dd (06)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getDefaultLocaleMask(locale: string) {\n        const dateStruct = [];\n        const formatter = new Intl.DateTimeFormat(locale);\n        const formatToParts = formatter.formatToParts(new Date());\n        for (let i = 0; i < formatToParts.length; i++) {\n            if (formatToParts[i].type === DatePickerUtil.SEPARATOR) {\n                dateStruct.push({\n                    type: DatePickerUtil.SEPARATOR,\n                    value: formatToParts[i].value\n                });\n            } else {\n                dateStruct.push({\n                    type: formatToParts[i].type,\n                });\n            }\n        }\n        const formatterOptions = formatter.resolvedOptions();\n        for (let i = 0; i < dateStruct.length; i++) {\n            switch (dateStruct[i].type) {\n                case DateParts.Day: {\n                    dateStruct[i].formatType = formatterOptions.day;\n                    break;\n                }\n                case DateParts.Month: {\n                    dateStruct[i].formatType = formatterOptions.month;\n                    break;\n                }\n                case DateParts.Year: {\n                    dateStruct[i].formatType = formatterOptions.month;\n                    break;\n                }\n            }\n        }\n        DatePickerUtil.fillDatePartsPositions(dateStruct);\n        return dateStruct;\n    }\n\n    private static isDateChar(char: string): boolean {\n        return (char === DateChars.YearChar || char === DateChars.MonthChar || char === DateChars.DayChar);\n    }\n\n    private static getNumericFormatPrefix(formatType: string): string {\n        switch (formatType) {\n            case FormatDesc.TwoDigits: {\n                return '0';\n            }\n            case FormatDesc.Numeric: {\n                return DatePickerUtil.PROMPT_CHAR;\n            }\n        }\n    }\n\n    private static getMinMaxValue(dateFormatParts: any[], datePart, inputValue: string): any {\n        let maxValue, minValue;\n        switch (datePart.type) {\n            case DateParts.Month: {\n                minValue = 1;\n                maxValue = DatePickerUtil.NUMBER_OF_MONTHS;\n                break;\n            }\n            case DateParts.Day: {\n                minValue = 1;\n                maxValue = DatePickerUtil.daysInMonth(\n                    DatePickerUtil.getFullYearFromString(DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year), inputValue),\n                    parseInt(DatePickerUtil.getMonthValueFromInput(dateFormatParts, inputValue), 10));\n                break;\n            }\n            case DateParts.Year: {\n                if (datePart.formatType === FormatDesc.TwoDigits) {\n                    minValue = 0;\n                    maxValue = 99;\n                } else {\n                    // Infinite loop\n                    minValue = 'infinite';\n                    maxValue = 'infinite';\n                }\n                break;\n            }\n        }\n        return { min: minValue, max: maxValue };\n    }\n\n    private static daysInMonth(fullYear: number, month: number): number {\n        return new Date(fullYear, month, 0).getDate();\n    }\n\n    private static getDateValueFromInput(dateFormatParts: any[], type: DateParts, inputValue: string, trim: boolean = true): string {\n        const partPosition = DatePickerUtil.getDateFormatPart(dateFormatParts, type).position;\n        const result = inputValue.substring(partPosition[0], partPosition[1]);\n        return (trim) ? DatePickerUtil.trimUnderlines(result) : result;\n    }\n\n    private static getDayValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Day, inputValue, trim);\n    }\n\n    private static getMonthValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Month, inputValue, trim);\n    }\n\n    private static getYearValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Year, inputValue, trim);\n    }\n\n    private static getDateFormatPart(dateFormatParts: any[], type: DateParts): any {\n        const result = dateFormatParts.filter((datePart) => (datePart.type === type))[0];\n        return result;\n    }\n\n    private static isFullInput(value: any, input: string): boolean {\n        return (value !== '' && input.length === 2 && input.charAt(1) !== DatePickerUtil.PROMPT_CHAR);\n    }\n\n    private static isFullYearInput(dateFormatParts: any[], value: any): boolean {\n        switch (DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year).formatType) {\n            case FormatDesc.Numeric: {\n                return (value !== '' && value.length === 4);\n            }\n            case FormatDesc.TwoDigits: {\n                return (value !== '' && value.length === 2);\n            }\n            default: {\n                return false;\n            }\n        }\n    }\n\n    private static getDatePartOnPosition(dateFormatParts: any[], position: number) {\n        const result = dateFormatParts.filter((element) =>\n            element.position[0] <= position && position <= element.position[1] && element.type !== DatePickerUtil.SEPARATOR)[0];\n        return result;\n    }\n\n    private static getFullYearFromString(yearPart, inputValue): number {\n        return parseInt(inputValue.substring(yearPart.position[0], yearPart.position[1]), 10);\n    }\n\n    private static fillDatePartsPositions(dateArray: any[]): void {\n        let currentPos = 0;\n\n        for (let i = 0; i < dateArray.length; i++) {\n            // Day|Month part positions\n            if (dateArray[i].type === DateParts.Day || dateArray[i].type === DateParts.Month) {\n                // Offset 2 positions for number\n                dateArray[i].position = [currentPos, currentPos + 2];\n                currentPos += 2;\n            } else if (dateArray[i].type === DateParts.Year) {\n                // Year part positions\n                switch (dateArray[i].formatType) {\n                    case FormatDesc.Numeric: {\n                        // Offset 4 positions for full year\n                        dateArray[i].position = [currentPos, currentPos + 4];\n                        currentPos += 4;\n                        break;\n                    }\n                    case FormatDesc.TwoDigits: {\n                        // Offset 2 positions for short year\n                        dateArray[i].position = [currentPos, currentPos + 2];\n                        currentPos += 2;\n                        break;\n                    }\n                }\n            } else if (dateArray[i].type === DatePickerUtil.SEPARATOR) {\n                // Separator positions\n                dateArray[i].position = [currentPos, currentPos + 1];\n                currentPos++;\n            }\n        }\n    }\n}\n\n\n","import { PipeTransform, Pipe, Inject } from '@angular/core';\nimport { IGX_DATE_PICKER_COMPONENT, IDatePicker } from './date-picker.common';\nimport { DatePickerUtil } from './date-picker.utils';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'displayValue'\n})\nexport class DatePickerDisplayValuePipe implements PipeTransform {\n    constructor(@Inject(IGX_DATE_PICKER_COMPONENT) private _datePicker: IDatePicker) { }\n    transform(value: any, args?: any): any {\n        if (value !== '') {\n            if (value === DatePickerUtil.maskToPromptChars(this._datePicker.inputMask)) {\n                return '';\n            }\n            this._datePicker.rawDateString = value;\n            return DatePickerUtil.trimUnderlines(value);\n        }\n        return '';\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'inputValue'\n})\nexport class DatePickerInputValuePipe implements PipeTransform {\n    constructor(@Inject(IGX_DATE_PICKER_COMPONENT) private _datePicker: IDatePicker) { }\n    transform(value: any, args?: any): any {\n        if (this._datePicker.invalidDate !== '') {\n            return this._datePicker.invalidDate;\n        } else {\n            if (this._datePicker.value === null || this._datePicker.value === undefined) {\n                return DatePickerUtil.maskToPromptChars(this._datePicker.inputMask);\n            } else {\n                return DatePickerUtil.addPromptCharsEditMode(this._datePicker.dateFormatParts, this._datePicker.value, value);\n            }\n        }\n    }\n}\n","/** @hidden */\nexport const IGX_DATE_PICKER_COMPONENT = 'IgxDatePickerComponentToken';\n\n/** @hidden */\nexport interface IDatePicker {\n    value: Date;\n    mask: string;\n    inputMask: string;\n    rawDateString: string;\n    dateFormatParts: any[];\n    invalidDate: string;\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDatePickerTemplate]'\n})\n\n/**\n * IgxDatePickerTemplateDirective can be used to re-template the date-picker input-group.\n *\n * @hidden\n */\nexport class IgxDatePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * IgxDatePickerActionsDirective can be used to re-template the dropdown/dialog action buttons.\n */\n@Directive({\n    selector: '[igxDatePickerActions]'\n})\nexport class IgxDatePickerActionsDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Component, ViewChild, Input, Output, EventEmitter, HostListener, HostBinding } from '@angular/core';\nimport { IgxCalendarComponent } from '../calendar';\nimport { InteractionMode } from '../core/enums';\nimport { IgxDatePickerActionsDirective } from './date-picker.directives';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-calendar-container',\n    styles: [':host {display: block;}'],\n    templateUrl: 'calendar-container.component.html'\n})\nexport class IgxCalendarContainerComponent {\n    @ViewChild('calendar', { static: true })\n    public calendar: IgxCalendarComponent;\n\n    @Input()\n    public mode: InteractionMode = InteractionMode.Dialog;\n\n    @Input()\n    public vertical = false;\n\n    @Input()\n    public cancelButtonLabel: string;\n\n    @Input()\n    public todayButtonLabel: string;\n\n    @Input()\n    public datePickerActions: IgxDatePickerActionsDirective;\n\n    @Output()\n    public onClose = new EventEmitter();\n\n    @Output()\n    public onTodaySelection = new EventEmitter();\n\n    @HostBinding('class.igx-date-picker')\n    public styleClass = 'igx-date-picker';\n\n    @HostBinding('class.igx-date-picker--dropdown')\n    get dropdownCSS(): boolean {\n        return this.mode === InteractionMode.DropDown;\n    }\n\n    @HostBinding('class.igx-date-picker--vertical')\n    get verticalCSS(): boolean {\n        return this.vertical && this.mode === InteractionMode.Dialog;\n    }\n\n    @HostListener('keydown.esc', ['$event'])\n    @HostListener('keydown.alt.arrowup', ['$event'])\n    public onEscape(event) {\n        event.preventDefault();\n        this.onClose.emit();\n    }\n\n    /**\n     * Returns whether the date-picker is in readonly dialog mode.\n     *\n     * @hidden\n    */\n    public get isReadonly() {\n        return this.mode === InteractionMode.Dialog;\n    }\n\n    /**\n     * Emits close event for the calendar.\n     */\n    public closeCalendar() {\n        this.onClose.emit();\n    }\n\n    /**\n    * Emits today selection event for the calendar.\n    */\n    public triggerTodaySelection() {\n        this.onTodaySelection.emit();\n    }\n}\n","import { CommonModule, formatDate } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    Output,\n    ViewChild,\n    ElementRef,\n    TemplateRef,\n    Inject,\n    ChangeDetectorRef,\n    HostListener,\n    NgModuleRef,\n    OnInit,\n    AfterViewInit,\n    Injector,\n    AfterViewChecked\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl, AbstractControl } from '@angular/forms';\nimport {\n    IgxCalendarComponent,\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarModule,\n    IgxCalendarSubheaderTemplateDirective,\n    WEEKDAYS,\n    isDateInRanges\n} from '../calendar/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule, IgxInputDirective, IgxInputGroupComponent, IgxInputState } from '../input-group/index';\nimport { Subject, fromEvent, animationFrameScheduler, interval, Subscription } from 'rxjs';\nimport { filter, takeUntil, throttle } from 'rxjs/operators';\nimport { IgxOverlayOutletDirective } from '../directives/toggle/toggle.directive';\nimport { IgxTextSelectionModule} from '../directives/text-selection/text-selection.directive';\nimport {\n    OverlaySettings,\n    IgxOverlayService,\n    PositionSettings,\n    AbsoluteScrollStrategy,\n    AutoPositionStrategy,\n    OverlayCancelableEventArgs\n} from '../services/index';\nimport { DateRangeDescriptor } from '../core/dates/dateRange';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxMaskModule } from '../directives/mask/mask.directive';\nimport {\n    DatePickerUtil,\n    DateState\n} from './date-picker.utils';\nimport { DatePickerDisplayValuePipe, DatePickerInputValuePipe } from './date-picker.pipes';\nimport { IDatePicker } from './date-picker.common';\nimport { KEYS, CancelableBrowserEventArgs, isIE, isEqual, IBaseEventArgs } from '../core/utils';\nimport { IgxDatePickerTemplateDirective, IgxDatePickerActionsDirective } from './date-picker.directives';\nimport { IgxCalendarContainerComponent } from './calendar-container.component';\nimport { InteractionMode } from '../core/enums';\nimport { fadeIn, fadeOut } from '../animations/fade';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\nlet NEXT_ID = 0;\n\n/**\n * This interface is used to provide information about date picker reference and its current value\n * when onDisabledDate event is fired.\n */\nexport interface IDatePickerDisabledDateEventArgs extends IBaseEventArgs {\n    datePicker: IgxDatePickerComponent;\n    currentValue: Date;\n}\n\n/**\n * This interface is used to provide information about date picker reference and its previously valid value\n * when onValidationFailed event is fired.\n */\nexport interface IDatePickerValidationFailedEventArgs extends IBaseEventArgs {\n    datePicker: IgxDatePickerComponent;\n    prevValue: Date;\n}\n\n/**\n * This interface is used to configure calendar format view options.\n */\nexport interface IFormatViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\n/**\n * This interface is used to configure calendar format options.\n */\nexport interface IFormatOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n\n/**\n * This enumeration is used to configure the date picker to operate with pre-defined format option used in Angular DatePipe.\n * 'https://angular.io/api/common/DatePipe'\n * 'shortDate': equivalent to 'M/d/yy' (6/15/15).\n * 'mediumDate': equivalent to 'MMM d, y' (Jun 15, 2015).\n * 'longDate': equivalent to 'MMMM d, y' (June 15, 2015).\n * 'fullDate': equivalent to 'EEEE, MMMM d, y' (Monday, June 15, 2015).\n */\nexport enum PredefinedFormatOptions {\n    ShortDate = 'shortDate',\n    MediumDate = 'mediumDate',\n    LongDate = 'longDate',\n    FullDate = 'fullDate'\n}\n\nconst noop = () => { };\n\n/**\n * Date Picker displays a popup calendar that lets users select a single date.\n *@igxModule IgxDatePickerModule\n *@igxTheme igx-calendar-theme, igx-icon-theme\n *@igxGroup Scheduling\n *@igxKeywords  datepicker, calendar, schedule, date\n *@example\n * ```html\n * <igx-date-picker [(ngModel)]=\"selectedDate\"></igx-date-picker>\n * ```\n */\n@Component({\n    providers:\n        [{\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxDatePickerComponent,\n            multi: true\n        }],\n    // tslint:disable-next-line:component-selector\n    selector: 'igx-date-picker',\n    templateUrl: 'date-picker.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxDatePickerComponent implements IDatePicker, ControlValueAccessor,\n          EditorProvider, OnInit, AfterViewInit, OnDestroy, AfterViewChecked {\n    /**\n     * Gets/Sets the `IgxDatePickerComponent` label.\n     * @remarks\n     * The default label is 'Date'.\n     * @example\n     * ```html\n     * <igx-date-picker [label]=\"Calendar\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public label = 'Date';\n\n    /**\n     * Gets/Sets the `IgxDatePickerComponent` label visibility.\n     * @remarks\n     * By default the visibility is set to true.\n     * @example\n     * <igx-date-picker [labelVisibility]=\"false\"></igx-date-picker>\n     */\n    @Input()\n    public labelVisibility = true;\n\n    /**\n     *Gets/Sets the locales.\n     * @remarks Default locale is en.\n     * @example\n     *```html\n     *<igx-date-picker locale=\"ja-JP\" [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input() public locale: 'en';\n\n    /**\n     *Gets/Sets on which day the week starts.\n     @example\n     *```html\n     *<igx-date-picker [weekStart]=\"WEEKDAYS.FRIDAY\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input() public weekStart: WEEKDAYS | number = WEEKDAYS.SUNDAY;\n\n    /**\n     *Gets the format options of the `IgxDatePickerComponent`.\n     @example\n     *```typescript\n        let formatOptions = this.datePicker.formatOptions;\n     *```\n     */\n    @Input()\n    public get formatOptions(): IFormatOptions {\n        return this._formatOptions;\n    }\n\n    /**\n     * Gets/Sets whether the inactive dates will be hidden.\n     * @remarks\n     * Apllies to dates that are out of the current month.\n     * Default value is `false`.\n     * @example\n     * ```html\n     * <igx-date-picker [hideOutsideDays]=\"true\"></igx-date-picker>\n     * ```\n     * @example\n     * ```typescript\n     * let hideOutsideDays = this.datePicker.hideOutsideDays;\n     * ```\n     */\n    @Input()\n    public hideOutsideDays: boolean;\n\n    /**\n     * Gets/Sets the number of month views displayed.\n     * @remarks\n     * Default value is `1`.\n     * @example\n     * ```html\n     * <igx-date-picker [monthsViewNumber]=\"2\"></igx-date-picker>\n     * ```\n     * @example\n     * ```typescript\n     * let monthViewsDisplayed = this.datePicker.monthsViewNumber;\n     * ```\n     */\n    @Input()\n    public monthsViewNumber = 1;\n\n    /**\n     *Sets the format options of the `IgxDatePickerComponent`.\n     *@example\n     *```typescript\n     * this.datePicker.formatOptions = {  day: \"numeric\",  month: \"long\", weekday: \"long\", year: \"numeric\"};\n     *```\n     */\n    public set formatOptions(formatOptions: IFormatOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n    }\n\n    /**\n     *Gets/Sets the date display format of the `IgxDatePickerComponent` in dropdown mode.\n     @example\n     *```typescript\n     * let format = this.datePicker.format;\n     * this.datePicker.format = 'yyyy-M-d';\n     *```\n     */\n    @Input()\n    public get format(): string {\n        return (this._format === undefined) ? PredefinedFormatOptions.ShortDate : this._format;\n    }\n    public set format(format: string) {\n        this._format = format;\n    }\n\n    /**\n     *Gets/Sets the date mask of the `IgxDatePickerComponent` when in editable dropdown mode.\n     *@example\n     *```typescript\n     *let mask = this.datePicker.mask;\n     *```\n     */\n    @Input()\n    public mask: string;\n\n    /**\n     *Gets/Sets the format views of the `IgxDatePickerComponent`.\n     *@example\n     *```typescript\n     * let formatViews = this.datePicker.formatViews;\n     *  this.datePicker.formatViews = {day:false, month: false, year:false};\n     *```\n     */\n    @Input()\n    public get formatViews(): IFormatViews {\n        return this._formatViews;\n    }\n\n    public set formatViews(formatViews: IFormatViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     * Gets/Sets the disabled dates descriptors.\n     * @example\n     * ```typescript\n     * let disabledDates = this.datepicker.disabledDates;\n     * this.datePicker.disabledDates = [ {type: DateRangeType.Weekends}, ...];\n     * ```\n     */\n    @Input()\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets/Sets the special dates descriptors.\n     * @example\n     * ```typescript\n     * let specialDates = this.datepicker.specialDates;\n     * this.datePicker.specialDates = [ {type: DateRangeType.Weekends}, ... ];\n     * ```\n     */\n    @Input()\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    /**\n    * Gets/Sets the modal overlay settings.\n    */\n    @Input()\n    public get modalOverlaySettings(): OverlaySettings {\n        return this._modalOverlay;\n    }\n\n    public set modalOverlaySettings(value: OverlaySettings) {\n        this._modalOverlay = value;\n    }\n\n    /**\n    * Gets/Sets the drop-down overlay settings.\n    */\n    @Input()\n    public get dropDownOverlaySettings(): OverlaySettings {\n        return this._dropDownOverlaySettings || this._defaultDropDownOverlaySettings;\n    }\n\n    public set dropDownOverlaySettings(value: OverlaySettings) {\n        this._dropDownOverlaySettings = value;\n    }\n\n    /**\n     *Gets the formatted date when `IgxDatePickerComponent` is in dialog mode.\n     *@example\n     *```typescript\n     *let selectedDate = this.datePicker.displayData;\n     *```\n     */\n    public get displayData(): string {\n        if (this.value) {\n            return this._customFormatChecker(this.formatter, this.value);\n        }\n        return '';\n    }\n\n    /**\n     @hidden @internal\n     */\n    public get transformedDate(): string {\n        if (this._value) {\n            this._transformedDate = (this._isInEditMode) ? this._getEditorDate(this._value) : this._getDisplayDate(this._value);\n            this.isEmpty = false;\n        } else {\n            this._transformedDate = (this._isInEditMode) ? DatePickerUtil.maskToPromptChars(this.inputMask) : '';\n        }\n        return this._transformedDate;\n    }\n\n    /**\n     @hidden @internal\n     */\n    public set transformedDate(value) {\n        this._transformedDate = value;\n    }\n\n    constructor(@Inject(\n        IgxOverlayService) private _overlayService: IgxOverlayService,\n        public element: ElementRef,\n        private _cdr: ChangeDetectorRef,\n        private _moduleRef: NgModuleRef<any>,\n        private _injector: Injector) { }\n\n    /**\n     * Gets the input group template.\n     * @example\n     * ```typescript\n     * let template = this.template();\n     * ```\n     */\n    get template(): TemplateRef<any> {\n        if (this.datePickerTemplateDirective) {\n            return this.datePickerTemplateDirective.template;\n        }\n        return (this.mode === InteractionMode.Dialog) ? this.readOnlyDatePickerTemplate : this.editableDatePickerTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     */\n    get context() {\n        return {\n            disabled: this.disabled,\n            disabledDates: this.disabledDates,\n            displayData: this.displayData,\n            format: this.format,\n            isSpinLoop: this.isSpinLoop,\n            label: this.label,\n            labelVisibility: this.labelVisibility,\n            locale: this.locale,\n            mask: this.mask,\n            mode: this.mode,\n            specialDates: this.specialDates,\n            value: this.value,\n            openDialog: (target?: HTMLElement) => this.openDialog(target)\n        };\n    }\n\n    private get required(): boolean {\n        if (this._ngControl && this._ngControl.control && this._ngControl.control.validator) {\n            // Run the validation with empty object to check if required is enabled.\n            const error = this._ngControl.control.validator({} as AbstractControl);\n            return error && error.required;\n        }\n\n        return false;\n    }\n\n\n    /**\n     *Gets/Sets the selected date.\n     *@example\n     *```html\n     *<igx-date-picker [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public get value(): Date {\n        return this._value;\n    }\n\n    public set value(date: Date) {\n        this._value = date;\n        this._onChangeCallback(date);\n    }\n\n    /**\n     *Gets/Sets the value of `id` attribute.\n     *@remarks If not provided it will be automatically generated.\n     *@example\n     *```html\n     *<igx-date-picker [id]=\"'igx-date-picker-3'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-date-picker-${NEXT_ID++}`;\n\n    /**\n     * Gets/Sets a custom formatter function on the selected or passed date.\n     * @example\n     *```html\n     *<igx-date-picker [value]=\"date\" [formatter]=\"formatter\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public formatter: (val: Date) => string;\n\n    /**\n     *Enables/Disables the `IgxDatePickerComponent`.\n     *@example\n     *```html\n     *<igx-date-picker [disabled]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public disabled: boolean;\n\n    /**\n     *Gets/Sets the orientation of the `IgxDatePickerComponent` header.\n     *@example\n     *```html\n     *<igx-date-picker [vertical]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     *Gets/Sets the today button's label.\n     *@example\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"cancel\" todayButtonLabel=\"Tomorrow\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public todayButtonLabel: string;\n\n    /**\n     * *Gets/Sets the cancel button's label.\n     * @example\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"Close\" todayButtonLabel=\"Today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public cancelButtonLabel: string;\n\n    /**\n     *Gets/Sets the interaction mode - dialog or drop down.\n     *@example\n     *```html\n     *<igx-date-picker mode=\"dropdown\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public mode = InteractionMode.Dialog;\n\n    /**\n     *Gets/Sets whether date should spin continuously or stop when min/max is reached.\n     *@example\n     *```html\n     *<igx-date-picker [isSpinLoop]=\"false\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n     * Gets/Sets the container used for the popup element.\n     * @remarks\n     *  `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.\n     *@example\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * //..\n     * <igx-date-picker [outlet]=\"outlet\"></igx-date-picker>\n     * //..\n     * ```\n     */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     * @deprecated Use 'onOpened' instead.\n     *An event that is emitted when the `IgxDatePickerComponent` calendar is opened.\n     *@example\n     *```typescript\n     *public open(event){\n     *    alert(\"The date-picker calendar has been opened!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onOpen)=\"open($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @DeprecateProperty(`'onOpen' @Output property is deprecated. Use 'onOpened' instead.`)\n    @Output()\n    public get onOpen(): EventEmitter<IgxDatePickerComponent> {\n        return this._onOpen;\n    }\n\n    public set onOpen(val: EventEmitter<IgxDatePickerComponent>) {\n        this._onOpen = val;\n    }\n\n    /**\n     *Emitted when the `IgxDatePickerComponent` calendar is opened.\n    */\n    @Output()\n    public onOpened = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n     * @deprecated Use 'onClosed' instead.\n     *\"An event that is emitted when the `IgxDatePickerComponent` is closed.\n     *@example\n     *```typescript\n     *public close(event){\n     *    alert(\"The date-picker has been closed!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onClose)=\"close($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @DeprecateProperty(`'onClose' @Output property is deprecated. Use 'onClosed' instead.`)\n    @Output()\n    public get onClose(): EventEmitter<IgxDatePickerComponent> {\n        return this._onClose;\n    }\n\n    public set onClose(val: EventEmitter<IgxDatePickerComponent>) {\n        this._onClose = val;\n    }\n\n    /**\n     *Emitted after the `IgxDatePickerComponent` is closed.\n    */\n    @Output()\n    public onClosed = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n     *Emitted when the `IgxDatePickerComponent` is being closed.\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    /**\n     *Emitted when selection is made in the calendar.\n     *@example\n     *```html\n     *<igx-date-picker (onSelection)=\"selection($event)\"></igx-date-picker>\n     *```\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     *Emitted when date picker value is changed.\n     *@example\n    *```html\n    *<igx-date-picker (valueChange)=\"valueChanged($event)\" mode=\"dropdown\"></igx-date-picker>\n    *```\n    */\n    @Output()\n    public valueChange = new EventEmitter<Date>();\n\n    /**\n    *Emitted when the user types/spins to a disabled date in the date-picker editor.\n    *@example\n    *```html\n    *<igx-date-picker (onDisabledDate)=\"onDisabledDate($event)\"></igx-date-picker>\n    *```\n    */\n    @Output()\n    public onDisabledDate = new EventEmitter<IDatePickerDisabledDateEventArgs>();\n\n    /**\n    *Emitted when the user types/spins invalid date in the date-picker editor.\n    *@example\n    *```html\n    *<igx-date-picker (onValidationFailed)=\"onValidationFailed($event)\"></igx-date-picker>\n    *```\n    */\n    @Output()\n    public onValidationFailed = new EventEmitter<IDatePickerValidationFailedEventArgs>();\n\n    /*\n     * @hidden\n     */\n    @ViewChild('readOnlyDatePickerTemplate', { read: TemplateRef, static: true })\n    protected readOnlyDatePickerTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('editableDatePickerTemplate', { read: TemplateRef, static: true })\n    protected editableDatePickerTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ViewChild(IgxInputGroupComponent)\n    protected inputGroup: IgxInputGroupComponent;\n\n    @ViewChild(IgxInputDirective, { read: ElementRef })\n    private _inputElementRef: ElementRef;\n\n    @ContentChild(IgxInputDirective, { read: ElementRef })\n    protected _inputUserTemplateElementRef: ElementRef;\n\n    @ViewChild(IgxInputDirective)\n    private _inputDirective: IgxInputDirective;\n\n    @ContentChild(IgxInputDirective)\n    private _inputDirectiveUserTemplate: IgxInputDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxDatePickerTemplateDirective, { read: IgxDatePickerTemplateDirective })\n    protected datePickerTemplateDirective: IgxDatePickerTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarHeaderTemplateDirective, { read: IgxCalendarHeaderTemplateDirective })\n    public headerTemplate: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarSubheaderTemplateDirective, { read: IgxCalendarSubheaderTemplateDirective })\n    public subheaderTemplate: IgxCalendarSubheaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxDatePickerActionsDirective, { read: IgxDatePickerActionsDirective })\n    public datePickerActionsDirective: IgxDatePickerActionsDirective;\n\n    /**@hidden @internal*/\n    public calendar: IgxCalendarComponent;\n    /**@hidden @internal*/\n    public hasHeader = true;\n    /**@hidden @internal*/\n    public collapsed = true;\n    /**@hidden @internal*/\n    public displayValuePipe = new DatePickerDisplayValuePipe(this);\n    /**@hidden @internal*/\n    public inputValuePipe = new DatePickerInputValuePipe(this);\n    /**@hidden @internal*/\n    public dateFormatParts = [];\n    /**@hidden @internal*/\n    public rawDateString: string;\n    /**@hidden @internal*/\n    public inputMask: string;\n    /**@hidden @internal*/\n    public isEmpty = true;\n    /**@hidden @internal*/\n    public invalidDate = '';\n\n    private readonly spinDelta = 1;\n    private readonly defaultLocale = 'en';\n\n    private _formatOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n    private _formatViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n    private _destroy$ = new Subject<boolean>();\n    private _statusChanges$: Subscription;\n    private _componentID: string;\n    private _format: string;\n    private _value: Date;\n    private _isInEditMode: boolean;\n    private _disabledDates: DateRangeDescriptor[] = null;\n    private _specialDates: DateRangeDescriptor[] = null;\n    private _modalOverlay: OverlaySettings;\n    private _dropDownOverlaySettings: OverlaySettings;\n    private _positionSettings: PositionSettings;\n    private _defaultDropDownOverlaySettings: OverlaySettings;\n    private _modalOverlaySettings: OverlaySettings;\n    private _transformedDate;\n    private _onOpen = new EventEmitter<IgxDatePickerComponent>();\n    private _onClose = new EventEmitter<IgxDatePickerComponent>();\n    private _ngControl: NgControl = null;\n\n    //#region ControlValueAccessor\n\n    private _onChangeCallback: (_: Date) => void = noop;\n\n    private _onTouchedCallback: () => void = noop;\n\n    /** @hidden @internal */\n    public writeValue(value: Date) {\n        this._value = value;\n        // TODO: do we need next call\n        this._cdr.markForCheck();\n    }\n\n    /** @hidden @internal */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /** @hidden @internal */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden @internal */\n    public setDisabledState(isDisabled: boolean): void { this.disabled = isDisabled; }\n\n    //#endregion\n\n    /**\n    * @hidden\n    */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onSpaceClick(event: KeyboardEvent) {\n        this.openDialog(this.getInputGroupElement());\n        event.preventDefault();\n    }\n\n\n    /** @hidden */\n    public getEditElement() {\n        const inputDirectiveElementRef = this._inputElementRef || this._inputUserTemplateElementRef;\n        return (inputDirectiveElementRef) ? inputDirectiveElementRef.nativeElement : null;\n    }\n\n    /**\n     *@hidden @internal\n     */\n    public getInputGroupElement() {\n        return this.inputGroup ? this.inputGroup.element.nativeElement : null;\n    }\n\n    /**\n     *@hidden @internal\n     */\n    public ngOnInit(): void {\n        this._positionSettings = {\n            openAnimation: fadeIn,\n            closeAnimation: fadeOut\n        };\n\n        this._defaultDropDownOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: false,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy(this._positionSettings),\n            outlet: this.outlet\n        };\n\n        this._modalOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: true,\n            outlet: this.outlet\n        };\n\n        this._overlayService.onOpening.pipe(\n            filter((overlay) => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this._onOpening(eventArgs);\n            });\n\n        this._overlayService.onOpened.pipe(\n            filter((overlay) => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this._onOpened();\n            });\n\n        this._overlayService.onClosed.pipe(\n            filter(overlay => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this._onClosed();\n            });\n\n        this._overlayService.onClosing.pipe(\n            filter(overlay => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe((event) => {\n                this.onClosing.emit(event);\n                // If canceled in a user onClosing handler\n                if (event.cancel) {\n                    return;\n                }\n                // Do not focus the input if clicking outside in dropdown mode\n                const input = this.getEditElement();\n                if (input && !(event.event && this.mode === InteractionMode.DropDown)) {\n                    input.focus();\n                } else {\n                    // outside click\n                    this._updateValidityOnBlur();\n                }\n            });\n\n        if (this.mode === InteractionMode.DropDown) {\n            this.dateFormatParts = DatePickerUtil.parseDateFormat(this.mask, this.locale);\n            if (this.mask === undefined) {\n                this.mask = DatePickerUtil.getMask(this.dateFormatParts);\n            }\n            this.inputMask = DatePickerUtil.getInputMask(this.dateFormatParts);\n        }\n\n        this._ngControl = this._injector.get<NgControl>(NgControl, null);\n    }\n\n    /**\n     *@hidden @internal\n    */\n    public ngAfterViewInit() {\n        if (this.mode === InteractionMode.DropDown && this._inputElementRef) {\n            fromEvent(this._inputElementRef.nativeElement, 'keydown').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy$)\n            ).subscribe((res) => this.onKeyDown(res));\n        }\n\n        if (this._ngControl) {\n            this._statusChanges$ = this._ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n        }\n    }\n\n    public ngAfterViewChecked() {\n        // if one sets mode at run time this forces initialization of new igxInputGroup\n        // As a result a new igxInputDirective is initialized too. In ngAfterViewInit of\n        // the new directive isRequired of the igxInputGroup is set again. However\n        // ngAfterViewInit of date picker is not called again and we may finish with wrong\n        // isRequired in igxInputGroup. This is why we should set it her, only when needed\n        if (this.inputGroup && this.inputGroup.isRequired !== this.required) {\n            this.inputGroup.isRequired = this.required;\n            this._cdr.detectChanges();\n        }\n    }\n\n    protected onStatusChanged() {\n        if ((this._ngControl.control.touched || this._ngControl.control.dirty) &&\n            (this._ngControl.control.validator || this._ngControl.control.asyncValidator)) {\n            if (this.inputGroup.isFocused) {\n                this._inputDirective.valid = this._ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n            } else {\n                this._inputDirective.valid = this._ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n            }\n        }\n\n        if (this.inputGroup && this.inputGroup.isRequired !== this.required) {\n            this.inputGroup.isRequired = this.required;\n        }\n    }\n\n    /**\n     *@hidden @internal\n    */\n    public ngOnDestroy(): void {\n        if (this._componentID) {\n            this._overlayService.hide(this._componentID);\n        }\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    /**\n     *Selects today's date from calendar.\n     *@remarks\n     *Changes the input field value, @calendar.viewDate and @calendar.value.\n     *@example\n     *```typescript\n     *this.datePicker.triggerTodaySelection();\n     *```\n     */\n    public triggerTodaySelection(): void {\n        const today = new Date(Date.now());\n        this.handleSelection(today);\n    }\n\n    /**\n     * Change the calendar selection.\n     * @remarks\n     * Calling this method will emit the @calendar.onSelection event,\n     * which will fire @handleSelection method.\n     * @example\n     *```typescript\n     *this.datePicker.selectDate(this.date);\n     * ```\n     * @param date passed date that has to be set to the calendar.\n     */\n    public selectDate(date: Date): void {\n        const oldValue =  this.value;\n        this.value = date;\n\n        this.emitValueChangeEvent(oldValue, this.value );\n        this.onSelection.emit(date);\n    }\n\n    /**\n     * Deselects the calendar date.\n     * @example\n     *```typescript\n     *this.datePicker.deselectDate();\n     * ```\n     */\n    public deselectDate(): void {\n        const oldValue =  this.value;\n        this.value = null;\n        this.emitValueChangeEvent(oldValue, this.value );\n        if (this.calendar) {\n            this.calendar.deselectDate();\n        }\n    }\n\n    /**\n     * Opens the date picker drop down or dialog.\n     * @param target HTMLElement - the target element to use for positioning the drop down container according to\n     * @example\n     * ```typescript\n     * this.datePicker.openDialog(target);\n     * ```\n     */\n    public openDialog(target?: HTMLElement): void {\n        if (!this.collapsed) {\n            return;\n        }\n        switch (this.mode) {\n            case InteractionMode.Dialog: {\n                this.hasHeader = true;\n                const modalOverlay = (this.modalOverlaySettings !== undefined) ? this._modalOverlay : this._modalOverlaySettings;\n                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent, modalOverlay, this._moduleRef);\n                this._overlayService.show(this._componentID);\n                break;\n            }\n            case InteractionMode.DropDown: {\n                this.hasHeader = false;\n                if (target) {\n                    this.dropDownOverlaySettings.positionStrategy.settings.target = target;\n                }\n                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent,\n                    this.dropDownOverlaySettings, this._moduleRef);\n                this._overlayService.show(this._componentID);\n                break;\n            }\n        }\n    }\n\n    public mouseDown(e) {\n        // if the click is not on the input but in input group\n        // e.g. on prefix or sufix, prevent default and this way prevent blur\n        if (e.target !== this.getEditElement()) {\n            e.preventDefault();\n        }\n    }\n\n    /**\n     * Close the calendar.\n     *\n     * @hidden @internal\n     */\n    public closeCalendar(): void {\n        this._overlayService.hide(this._componentID);\n    }\n\n    /**\n     * Clear the input field, date picker value and calendar selection.\n     *\n     * @hidden @internal\n     */\n    public clear(): void {\n        this.isEmpty = true;\n        this.invalidDate = '';\n        this.deselectDate();\n        this._setCursorPosition(0);\n    }\n\n    /**\n     * Evaluates when @calendar.onSelection event was fired\n     * and update the input value.\n     *\n     * @param event selected value from calendar.\n     *\n     * @hidden @internal\n     */\n    public handleSelection(date: Date): void {\n        if (this.value) {\n            date.setHours(this.value.getHours());\n            date.setMinutes(this.value.getMinutes());\n            date.setSeconds(this.value.getSeconds());\n            date.setMilliseconds(this.value.getMilliseconds());\n        }\n        const oldValue =  this.value;\n        this.value = date;\n\n        this.emitValueChangeEvent(oldValue, this.value );\n        this.calendar.viewDate = date;\n        this.closeCalendar();\n        this.onSelection.emit(date);\n    }\n\n    /**\n    * @hidden @internal\n    */\n    public onBlur(event): void {\n        this._isInEditMode = false;\n        if (this.mode === InteractionMode.DropDown) {\n            this.calculateDate(event.target.value, event.type);\n        }\n\n        if (this.collapsed) {\n            this._updateValidityOnBlur();\n        }\n    }\n\n    /**\n    * @hidden @internal\n    */\n    public onFocus(): void {\n        this._isInEditMode = true;\n        if (this.value && this.invalidDate === '') {\n            this._transformedDate = this._getEditorDate(this.value);\n        }\n    }\n\n    /**\n    * @hidden @internal\n    */\n    public onKeyDown(event) {\n        switch (event.key) {\n            case KEYS.UP_ARROW:\n            case KEYS.UP_ARROW_IE:\n                event.preventDefault();\n                event.stopPropagation();\n                this.spinValue(event.target.value, 1, event.type);\n                break;\n            case KEYS.DOWN_ARROW:\n            case KEYS.DOWN_ARROW_IE:\n                if (event.altKey) {\n                    this.openDialog(this.getInputGroupElement());\n                } else {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.spinValue(event.target.value, -1, event.type);\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n    * @hidden @internal\n    */\n    public onWheel(event) {\n        if (this._isInEditMode) {\n            event.preventDefault();\n            event.stopPropagation();\n            const sign = (event.deltaY > 0) ? -1 : 1;\n            this.spinValue(event.target.value, sign, event.type);\n        }\n    }\n\n    /**\n    * @hidden @internal\n    */\n    public onInput(event) {\n        const targetValue = event.target.value;\n        const cursorPosition = this._getCursorPosition();\n        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, targetValue);\n        this._isInEditMode = true;\n\n        if (targetValue !== DatePickerUtil.maskToPromptChars(this.inputMask)) {\n            this.isEmpty = false;\n        }\n\n        // If all date parts are completed, change the date-picker value, stay in edit mode\n        if (checkInput === 'complete' && event.inputType !== 'deleteContentBackward') {\n            this._transformedDate = targetValue;\n            this.calculateDate(targetValue, event.type);\n            this._setCursorPosition(cursorPosition);\n        } else if (checkInput === 'partial') {\n            // While editing, if one date part is deleted, date-picker value is set to null, the remaining input stays intact.\n            this.deselectDate();\n            requestAnimationFrame(() => {\n                this.getEditElement().value = targetValue;\n                this._setCursorPosition(cursorPosition);\n            });\n        } else if (checkInput === 'empty') {\n            // Total clean-up as input is deleted.\n            this.isEmpty = true;\n            this.deselectDate();\n        }\n    }\n\n    private emitValueChangeEvent(oldValue: Date, newValue: Date) {\n        if (!isEqual(oldValue, newValue)) {\n            this.valueChange.emit(newValue);\n        }\n    }\n\n    private calculateDate(dateString: string, invokedByEvent: string): void {\n        if (dateString !== '') {\n            const prevDateValue = this.value;\n            const inputValue = (invokedByEvent === 'blur') ? this.rawDateString : dateString;\n            const newDateArray = DatePickerUtil.parseDateArray(this.dateFormatParts, prevDateValue, inputValue);\n\n            if (newDateArray.state === DateState.Valid) {\n                const newValue = newDateArray.date;\n                // Restore the time part if any\n                if (prevDateValue) {\n                    newValue.setHours(prevDateValue.getHours());\n                    newValue.setMinutes(prevDateValue.getMinutes());\n                    newValue.setSeconds(prevDateValue.getSeconds());\n                    newValue.setMilliseconds(prevDateValue.getMilliseconds());\n                }\n\n                if (this.disabledDates === null\n                    || (this.disabledDates !== null && !isDateInRanges(newValue, this.disabledDates))) {\n                        const oldValue =  this.value;\n                        this.value = newValue;\n\n                        this.emitValueChangeEvent(oldValue, this.value );\n                        this.invalidDate = '';\n                } else {\n                    const args: IDatePickerDisabledDateEventArgs = {\n                        datePicker: this,\n                        currentValue: newValue,\n                    };\n                    this.onDisabledDate.emit(args);\n                }\n            } else {\n                const args: IDatePickerValidationFailedEventArgs = {\n                    datePicker: this,\n                    prevValue: prevDateValue\n                };\n                this.invalidDate = dateString;\n                this.onValidationFailed.emit(args);\n            }\n        }\n    }\n\n    private spinValue(inputValue: string, sign: number, eventType: string): void {\n        this._isInEditMode = true;\n        this.isEmpty = false;\n        const cursorPosition = this._getCursorPosition();\n\n        const modifiedInputValue =\n            DatePickerUtil.getModifiedDateInput(this.dateFormatParts, inputValue, cursorPosition, this.spinDelta * sign, this.isSpinLoop);\n\n        this.getEditElement().value = modifiedInputValue;\n        this._setCursorPosition(cursorPosition);\n\n        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, modifiedInputValue);\n        if (checkInput === 'complete') {\n            this._isInEditMode = true;\n            this.calculateDate(modifiedInputValue, eventType);\n            this._setCursorPosition(cursorPosition);\n        }\n    }\n\n    private _onOpening(event: OverlayCancelableEventArgs) {\n        this._initializeCalendarContainer(event.componentRef.instance as IgxCalendarContainerComponent);\n        this.collapsed = false;\n    }\n\n    private _onOpened(): void {\n        this.onOpened.emit(this);\n\n        // TODO: remove this line after deprecating 'onOpen'\n        this._onOpen.emit(this);\n\n        if (this.calendar) {\n            this._focusCalendarDate();\n        }\n    }\n\n    private _onClosed(): void {\n        this.collapsed = true;\n        this._componentID = null;\n        this.onClosed.emit(this);\n    }\n\n    private _initializeCalendarContainer(componentInstance: IgxCalendarContainerComponent) {\n        this.calendar = componentInstance.calendar;\n        const isVertical = (this.vertical && this.mode === InteractionMode.Dialog);\n        this.calendar.hasHeader = this.hasHeader;\n        this.calendar.formatOptions = this.formatOptions;\n        this.calendar.formatViews = this.formatViews;\n        this.calendar.locale = this.locale;\n        this.calendar.vertical = isVertical;\n        this.calendar.weekStart = this.weekStart;\n        this.calendar.specialDates = this.specialDates;\n        this.calendar.disabledDates = this.disabledDates;\n        this.calendar.headerTemplate = this.headerTemplate;\n        this.calendar.subheaderTemplate = this.subheaderTemplate;\n        this.calendar.hideOutsideDays = this.hideOutsideDays;\n        this.calendar.monthsViewNumber = this.monthsViewNumber;\n        this.calendar.onSelection.pipe(takeUntil(this._destroy$)).subscribe((ev: Date) => this.handleSelection(ev));\n\n        if (this.value) {\n            this.calendar.value = this.value;\n            this.calendar.viewDate = this.value;\n        }\n\n        componentInstance.mode = this.mode;\n        componentInstance.vertical = isVertical;\n        componentInstance.cancelButtonLabel = this.cancelButtonLabel;\n        componentInstance.todayButtonLabel = this.todayButtonLabel;\n        componentInstance.datePickerActions = this.datePickerActionsDirective;\n\n        componentInstance.onClose.pipe(takeUntil(this._destroy$)).subscribe(() => this.closeCalendar());\n        componentInstance.onTodaySelection.pipe(takeUntil(this._destroy$)).subscribe(() => this.triggerTodaySelection());\n    }\n\n    // Focus a date, after the calendar appearance into DOM.\n    private _focusCalendarDate(): void {\n        requestAnimationFrame(() => {\n            this.calendar.daysView.focusActiveDate();\n        });\n    }\n\n    private _setLocaleToDate(value: Date): string {\n        if (isIE()) {\n            // this is a workaround fixing the following IE11 issue:\n            // IE11 has added character code 8206 (mark for RTL) to the output of toLocaleDateString() that\n            // precedes each portion that comprises the total date... For more information read this article:\n            // tslint:disable-next-line: max-line-length\n            // https://www.csgpro.com/blog/2016/08/a-bad-date-with-internet-explorer-11-trouble-with-new-unicode-characters-in-javascript-date-strings/\n            const localeDateStrIE = new Date(value.getFullYear(), value.getMonth(), value.getDate(),\n                value.getHours(), value.getMinutes(), value.getSeconds(), value.getMilliseconds());\n            return localeDateStrIE.toLocaleDateString(this.locale);\n        }\n\n        return value.toLocaleDateString(this.locale);\n    }\n\n    private _getCursorPosition(): number {\n        return this.getEditElement().selectionStart;\n    }\n\n    private _setCursorPosition(start: number, end: number = start): void {\n        requestAnimationFrame(() => {\n            this.getEditElement().setSelectionRange(start, end);\n        });\n    }\n\n    /**\n     * Apply custom user formatter upon date.\n     * @param formatter custom formatter function.\n     * @param date passed date\n     */\n    private _customFormatChecker(formatter: (_: Date) => string, date: Date) {\n        return this.formatter ? this.formatter(date) : this._setLocaleToDate(date);\n    }\n\n    /*\n    * Transforms the date according to the specified format when `IgxDatePickerComponent` is in edit mode\n    * using @angular/common formatDate method: https://angular.io/api/common/formatDate\n    * @param  value: string | number | Date\n    * @returns formatted string\n    */\n    private _getDisplayDate(value: any): string {\n        if (this.format && !this.formatter) {\n            const locale = this.locale || this.defaultLocale;\n            return formatDate(value, this.format, locale);\n        } else {\n            return this._customFormatChecker(this.formatter, value);\n        }\n    }\n\n    private _getEditorDate(value: any) {\n        const locale = this.locale || this.defaultLocale;\n        const changedValue = (value) ? formatDate(value, this.mask, locale) : '';\n        return DatePickerUtil.addPromptCharsEditMode(this.dateFormatParts, this.value, changedValue);\n    }\n\n    public _updateValidityOnBlur() {\n        this._onTouchedCallback();\n        const input = this._inputDirective || this._inputDirectiveUserTemplate;\n        if (input && this._ngControl && !this._ngControl.valid) {\n            input.valid = IgxInputState.INVALID;\n        } else {\n            input.valid = IgxInputState.INITIAL;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxDatePickerComponent,\n        IgxCalendarContainerComponent,\n        IgxDatePickerActionsDirective,\n        IgxDatePickerTemplateDirective,\n        DatePickerDisplayValuePipe,\n        DatePickerInputValuePipe\n    ],\n    entryComponents: [\n        IgxCalendarContainerComponent\n    ],\n    exports: [\n        IgxDatePickerComponent,\n        IgxDatePickerTemplateDirective,\n        IgxDatePickerActionsDirective,\n        DatePickerDisplayValuePipe,\n        DatePickerInputValuePipe\n    ],\n    imports: [\n        CommonModule,\n        IgxIconModule,\n        IgxInputGroupModule,\n        IgxCalendarModule,\n        IgxButtonModule,\n        IgxRippleModule,\n        IgxMaskModule,\n        IgxTextSelectionModule\n    ]\n})\nexport class IgxDatePickerModule { }\n","import {\n    Directive, EmbeddedViewRef, Input, OnChanges, ChangeDetectorRef,\n    SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef, NgModule, NgZone, Output, EventEmitter\n} from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { IBaseEventArgs } from '../../core/utils';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxTemplateOutlet]' })\nexport class IgxTemplateOutletDirective implements OnChanges {\n    private _viewRef !: EmbeddedViewRef<any>;\n\n    /**\n    * The embedded views cache. Collection is key-value paired.\n    * Key is the template id, value is the embedded view for the related template.\n    */\n    private _embeddedViewsMap: Map<string, EmbeddedViewRef<any>> = new Map();\n\n    @Input() public igxTemplateOutletContext !: Object;\n\n    @Input() public igxTemplateOutlet !: TemplateRef<any>;\n\n    @Output()\n    public onViewCreated = new EventEmitter<IViewChangeEventArgs>();\n\n    @Output()\n    public onViewMoved = new EventEmitter<IViewChangeEventArgs>();\n\n    @Output()\n    public onCachedViewLoaded = new EventEmitter<ICachedViewLoadedEventArgs>();\n\n    @Output()\n    public onBeforeViewDetach = new EventEmitter<IViewChangeEventArgs>();\n\n    constructor(public _viewContainerRef: ViewContainerRef, private _zone: NgZone, public cdr: ChangeDetectorRef) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const actionType: TemplateOutletAction = this._getActionType(changes);\n        switch (actionType) {\n            case TemplateOutletAction.CreateView: this._recreateView(); break;\n            case TemplateOutletAction.MoveView: this._moveView(); break;\n            case TemplateOutletAction.UseCachedView: this._useCachedView(); break;\n            case TemplateOutletAction.UpdateViewContext: this._updateExistingContext(this.igxTemplateOutletContext); break;\n        }\n    }\n\n    public cleanCache() {\n        this._embeddedViewsMap.forEach((item) => {\n            if (!item.destroyed) {\n                item.destroy();\n            }\n        });\n        this._embeddedViewsMap.clear();\n    }\n\n    public cleanView(tmplID) {\n        const embView = this._embeddedViewsMap.get(tmplID);\n        if (embView) {\n            embView.destroy();\n            this._embeddedViewsMap.delete(tmplID);\n        }\n    }\n\n    private _recreateView() {\n        const prevIndex = this._viewRef ? this._viewContainerRef.indexOf(this._viewRef) : -1;\n        // detach old and create new\n        if (prevIndex !== -1) {\n            this.onBeforeViewDetach.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n            this._viewContainerRef.detach(prevIndex);\n        }\n        if (this.igxTemplateOutlet) {\n            this._viewRef = this._viewContainerRef.createEmbeddedView(\n                this.igxTemplateOutlet, this.igxTemplateOutletContext);\n            this.onViewCreated.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n            const tmplId = this.igxTemplateOutletContext['templateID'];\n            if (tmplId) {\n                // if context contains a template id, check if we have a view for that template already stored in the cache\n                // if not create a copy and add it to the cache in detached state.\n                // Note: Views in detached state do not appear in the DOM, however they remain stored in memory.\n                const res = this._embeddedViewsMap.get(this.igxTemplateOutletContext['templateID']);\n                if (!res) {\n                    this._embeddedViewsMap.set(this.igxTemplateOutletContext['templateID'], this._viewRef);\n                }\n            }\n        }\n    }\n\n    private _moveView() {\n        // using external view and inserting it in current view.\n        const view = this.igxTemplateOutletContext['moveView'];\n        const owner = this.igxTemplateOutletContext['owner'];\n        if (view !== this._viewRef) {\n            if (owner._viewContainerRef.indexOf(view) !== -1) {\n                // detach in case view it is attached somewhere else at the moment.\n                this.onBeforeViewDetach.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n                owner._viewContainerRef.detach(owner._viewContainerRef.indexOf(view));\n            }\n            if (this._viewRef && this._viewContainerRef.indexOf(this._viewRef) !== -1) {\n                this.onBeforeViewDetach.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n                this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n            }\n            this._viewRef = view;\n            this._viewContainerRef.insert(view, 0);\n            this._updateExistingContext(this.igxTemplateOutletContext);\n            this.onViewMoved.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n        } else {\n            this._updateExistingContext(this.igxTemplateOutletContext);\n        }\n    }\n    private _useCachedView() {\n        // use view for specific template cached in the current template outlet\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        // if view exists, but template has been changed and there is a view in the cache with the related template\n        // then detach old view and insert the stored one with the matching template\n        // after that update its context.\n        if (this._viewContainerRef.length > 0) {\n            this.onBeforeViewDetach.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n        }\n\n        this._viewRef = cachedView;\n        const oldContext = this._cloneContext(cachedView.context);\n        this._viewContainerRef.insert(this._viewRef, 0);\n        this._updateExistingContext(this.igxTemplateOutletContext);\n        this.onCachedViewLoaded.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext, oldContext });\n    }\n\n    private _shouldRecreateView(changes: SimpleChanges): boolean {\n        const ctxChange = changes['igxTemplateOutletContext'];\n        return !!changes['igxTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\n    }\n\n    private _hasContextShapeChanged(ctxChange: SimpleChange): boolean {\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n        if (prevCtxKeys.length === currCtxKeys.length) {\n            for (const propName of currCtxKeys) {\n                if (prevCtxKeys.indexOf(propName) === -1) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private _updateExistingContext(ctx: Object): void {\n        for (const propName of Object.keys(ctx)) {\n            (<any>this._viewRef.context)[propName] = (<any>this.igxTemplateOutletContext)[propName];\n        }\n    }\n\n    private _cloneContext(ctx: any): any {\n        const clone = {};\n        for (const propName of Object.keys(ctx)) {\n            clone[propName] = ctx[propName];\n        }\n        return clone;\n    }\n\n    private _getActionType(changes: SimpleChanges) {\n        const movedView = this.igxTemplateOutletContext['moveView'];\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        const shouldRecreate = this._shouldRecreateView(changes);\n        if (movedView) {\n            // view is moved from external source\n            return TemplateOutletAction.MoveView;\n        } else if (shouldRecreate && cachedView) {\n            // should recreate (template or context change) and there is a matching template in cache\n            return TemplateOutletAction.UseCachedView;\n        } else if (!this._viewRef || shouldRecreate) {\n            // no view or should recreate\n            return TemplateOutletAction.CreateView;\n        } else if (this.igxTemplateOutletContext) {\n            // has context, update context\n            return TemplateOutletAction.UpdateViewContext;\n        }\n    }\n}\nenum TemplateOutletAction {\n    CreateView,\n    MoveView,\n    UseCachedView,\n    UpdateViewContext\n}\n\nexport interface IViewChangeEventArgs extends IBaseEventArgs {\n    owner: IgxTemplateOutletDirective;\n    view: EmbeddedViewRef<any>;\n    context: any;\n}\n\nexport interface ICachedViewLoadedEventArgs extends IViewChangeEventArgs {\n    oldContext: any;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTemplateOutletDirective],\n    entryComponents: [],\n    exports: [IgxTemplateOutletDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxTemplateOutletModule {\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Directive, HostBinding } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-title,[igxDialogTitle]'\n})\nexport class IgxDialogTitleDirective {\n\n    @HostBinding('class.igx-dialog__window-title')\n    public defaultStyle = true;\n }\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-actions,[igxDialogActions]'\n})\nexport class IgxDialogActionsDirective {\n\n    @HostBinding('class.igx-dialog__window-actions')\n    public defaultClass = true;\n }\n","import { useAnimation } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    ViewChild,\n    AfterContentInit\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxDialogActionsDirective, IgxDialogTitleDirective } from './dialog.directives';\nimport { IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { OverlaySettings, GlobalPositionStrategy, NoOpScrollStrategy, PositionSettings } from '../services';\nimport { slideInBottom, slideOutTop } from '../animations/slide/index';\nimport { IgxFocusModule } from '../directives/focus/focus.directive';\nimport { IBaseEventArgs } from '../core/utils';\n\nlet DIALOG_ID = 0;\n/**\n * **Ignite UI for Angular Dialog Window** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/dialog.html)\n *\n * The Ignite UI Dialog Window presents a dialog window to the user which can simply display messages or display\n * more complicated visuals such as a user sign-in form.  It also provides a right and left button\n * which can be used for custom actions.\n *\n * Example:\n * ```html\n * <button (click)=\"form.open()\">Show Dialog</button>\n * <igx-dialog #form title=\"Sign In\" rightButtonLabel=\"OK\">\n *   <div>\n *     <input type=\"text\" igxInput/>\n *     <label igxLabel>Username</label>\n *   </div>\n *   <div>\n *     <input type=\"password\" igxInput/>\n *     <label igxLabel>Password</label>\n *   </div>\n * </igx-dialog>\n * ```\n */\n@Component({\n    selector: 'igx-dialog',\n    templateUrl: 'dialog-content.component.html'\n})\nexport class IgxDialogComponent implements IToggleView, OnInit, OnDestroy, AfterContentInit {\n    private static NEXT_ID = 1;\n    private static readonly DIALOG_CLASS = 'igx-dialog';\n\n    @ViewChild(IgxToggleDirective, { static: true })\n    public toggleRef: IgxToggleDirective;\n\n    /**\n    * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n    *```html\n    *<igx-dialog [id]=\"'igx-dialog-56'\" #alert title=\"Notification\" leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-dialog-${DIALOG_ID++}`;\n\n    @Input()\n    get isModal() {\n        return this._isModal;\n    }\n\n    set isModal(val: boolean) {\n        this._overlayDefaultSettings.modal = val;\n        this._isModal = val;\n    }\n\n    /**\n    * An @Input property controlling the `title` of the dialog.\n    *```html\n    *<igx-dialog title=\"Notification\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @Input()\n    public title = '';\n\n    /**\n     *  An @Input property controlling the `message` of the dialog.\n     *```html\n     *<igx-dialog message=\"Your email was sent!\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public message = '';\n\n    /**\n     * An @Input property to set the `label` of the left button of the dialog.\n     *```html\n     *<igx-dialog leftButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonLabel = '';\n\n    /**\n     * An @Input property to set the left button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog leftButtonType=\"raised\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonType = 'flat';\n    /**\n     * An @Input property to set the left button color. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonColor=\"yellow\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonColor = '';\n\n    /**\n     * An @Input property to set the left button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonBackgroundColor=\"black\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the left button `ripple`. The `ripple` animates a click/tap to a component as a series of fading waves.\n     * The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonRipple=\"green\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonRipple = '';\n\n    /**\n     * An @Input property to set the `label` of the right button of the dialog.\n     *```html\n     *<igx-dialog rightButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonLabel = '';\n\n    /**\n     * An @Input property to set the right button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog rightButtonType=\"fab\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonType = 'flat';\n\n    /**\n     * An @Input property to set the right button `color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonColor=\"yellow\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonColor = '';\n\n    /**\n     * An @Input property to set the right button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonBackgroundColor=\"black\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the right button `ripple`.\n     *```html\n     *<igx-dialog rightButtonRipple=\"green\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonRipple = '';\n\n    /**\n     * An @Input property that allows you to enable the \"close on click outside the dialog\". By default it's disabled.\n     *```html\n     *<igx-dialog closeOnOutsideSelect=\"true\" leftButtonLabel=\"Cancel\" (onLeftButtonSelect)=\"dialog.close()\"\n     *rightButtonLabel=\"OK\" rightButtonRipple=\"#4CAF50\" (onRightButtonSelect)=\"onDialogOKSelected($event)\">\n     *</igx-dialog>\n     *```\n     */\n    @Input()\n    get closeOnOutsideSelect() {\n        return this._closeOnOutsideSelect;\n    }\n\n    set closeOnOutsideSelect(val: boolean) {\n        this._overlayDefaultSettings.closeOnOutsideClick = val;\n        this._closeOnOutsideSelect = val;\n    }\n\n    /**\n     * Get the position and animation settings used by the dialog.\n     * ```typescript\n     * @ViewChild('alert', { static: true }) public alert: IgxDialogComponent;\n     * let currentPosition: PositionSettings = this.alert.positionSettings\n     * ```\n     */\n    @Input()\n    public get positionSettings(): PositionSettings {\n        return this._positionSettings;\n    }\n\n    /**\n     * Set the position and animation settings used by the dialog.\n     * ```typescript\n     * import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     * ...\n     * @ViewChild('alert', { static: true }) public alert: IgxDialogComponent;\n     *  public newPositionSettings: PositionSettings = {\n     *      openAnimation: useAnimation(slideInTop, { params: { duration: '2000ms' } }),\n     *      closeAnimation: useAnimation(slideOutBottom, { params: { duration: '2000ms'} }),\n     *      horizontalDirection: HorizontalAlignment.Left,\n     *      verticalDirection: VerticalAlignment.Middle,\n     *      horizontalStartPoint: HorizontalAlignment.Left,\n     *      verticalStartPoint: VerticalAlignment.Middle,\n     *      minSize: { height: 100, width: 100 }\n     *  };\n     * this.alert.positionSettings = this.newPositionSettings;\n     * ```\n     */\n    public set positionSettings(settings: PositionSettings) {\n        this._positionSettings = settings;\n        this._overlayDefaultSettings.positionStrategy = new GlobalPositionStrategy(this._positionSettings);\n    }\n\n    /**\n     * An event that is emitted when the dialog is opened.\n     *```html\n     *<igx-dialog (onOpen)=\"onDialogOpenHandler($event)\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onOpen = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the dialog is closed.\n     *```html\n     *<igx-dialog (onClose)=\"onDialogCloseHandler($event)\" title=\"Confirmation\" leftButtonLabel=\"Cancel\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onClose = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the left button is clicked.\n     *```html\n     *<igx-dialog (onLeftButtonSelect)=\"onDialogOKSelected($event)\" #dialog leftButtonLabel=\"OK\" rightButtonLabel=\"Cancel\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onLeftButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the right button is clicked.\n     * ```html\n     *<igx-dialog (onRightButtonSelect)=\"onDialogOKSelected($event)\"\n     *#dialog title=\"Confirmation\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\"\n     *rightButtonRipple=\"#4CAF50\" closeOnOutsideSelect=\"true\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onRightButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    private _positionSettings: PositionSettings = {\n        openAnimation: useAnimation(slideInBottom, { params: { fromPosition: 'translateY(100%)' } }),\n        closeAnimation: useAnimation(slideOutTop, { params: { toPosition: 'translateY(-100%)' } })\n    };\n\n    private _overlayDefaultSettings: OverlaySettings;\n    private _closeOnOutsideSelect = false;\n    private _isModal = true;\n    protected destroy$ = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * The default `tabindex` attribute for the component\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    private _titleId: string;\n\n    /**\n     * Returns the value of state. Possible state values are \"open\" or \"close\".\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogState = this.dialog.state;\n     *}\n     *```\n     */\n    get state(): string {\n        return this.isOpen ? 'open' : 'close';\n    }\n\n    /**\n     * Returns whether the dialog is visible to the end user.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogOpen = this.dialog.isOpen;\n     *}\n     * ```\n     */\n    @Input()\n    get isOpen() {\n        return !this.toggleRef.collapsed;\n    }\n\n    @HostBinding('class.igx-dialog--hidden')\n    get isCollapsed() {\n        return this.toggleRef.collapsed;\n    }\n\n    /**\n     *Returns the value of the role of the dialog. The valid values are `dialog`, `alertdialog`, `alert`.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogRole = this.dialog.role;\n     *}\n     * ```\n     */\n    @Input()\n    get role() {\n        if (this.leftButtonLabel !== '' && this.rightButtonLabel !== '') {\n            return 'dialog';\n        } else if (\n            this.leftButtonLabel !== '' ||\n            this.rightButtonLabel !== ''\n        ) {\n            return 'alertdialog';\n        } else {\n            return 'alert';\n        }\n    }\n\n    /**\n     *Returns the value of the title id.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogTitle = this.dialog.titleId;\n     *}\n     * ```\n     */\n    @Input()\n    get titleId() {\n        return this._titleId;\n    }\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService\n    ) {\n        this._titleId = IgxDialogComponent.NEXT_ID++ + '_title';\n\n        this._overlayDefaultSettings = {\n            positionStrategy: new GlobalPositionStrategy(this._positionSettings),\n            scrollStrategy: new NoOpScrollStrategy(),\n            modal: this.isModal,\n            closeOnOutsideClick: this.closeOnOutsideSelect\n        };\n    }\n\n    ngAfterContentInit() {\n        this.toggleRef.onClosing.pipe(takeUntil(this.destroy$)).subscribe(() => this.emitCloseFromDialog());\n    }\n\n    private emitCloseFromDialog() {\n        this.onClose.emit({ dialog: this, event: null });\n    }\n\n    /**\n     * A method that opens the dialog.\n     * @memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.open() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public open(overlaySettings: OverlaySettings = this._overlayDefaultSettings) {\n        this.toggleRef.open(overlaySettings);\n        this.onOpen.emit({ dialog: this, event: null });\n        if (!this.leftButtonLabel && !this.rightButtonLabel) {\n            this.toggleRef.element.focus();\n        }\n    }\n\n    /**\n     *A method that that closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.close() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public close() {\n        // `onClose` will emit from `toggleRef.onClosing` subscription\n        this.toggleRef.close();\n    }\n\n\n    /**\n     * A method that opens/closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.toggle() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public toggle() {\n        this.isOpen ? this.close() : this.open();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDialogSelected(event) {\n        event.stopPropagation();\n        if (\n            this.isOpen &&\n            this.closeOnOutsideSelect &&\n            event.target.classList.contains(IgxDialogComponent.DIALOG_CLASS)\n        ) {\n            this.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalLeftButtonSelect(event) {\n        this.onLeftButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalRightButtonSelect(event) {\n        this.onRightButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n\n    }\n\n}\n\nexport interface IDialogEventArgs extends IBaseEventArgs {\n    dialog: IgxDialogComponent;\n    event: Event;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    exports: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    imports: [CommonModule, IgxToggleModule, IgxButtonModule, IgxRippleModule, IgxFocusModule]\n})\nexport class IgxDialogModule { }\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxProcessBarText]'\n})\nexport class IgxProcessBarTextTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxProgressBarGradient]'\n})\nexport class IgxProgressBarGradientDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n","import { Injectable, Inject, InjectionToken, inject } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @hidden\n */\nexport type Direction = 'ltr' | 'rtl';\n\n/**\n * Injection token is used to inject the document into Directionality\n * which factory could be faked for testing purposes.\n *\n * We can't provide and mock the DOCUMENT token from platform-browser because configureTestingModule\n * allows override of the default providers, directive, pipes, modules of the test injector\n * which causes errors.\n *\n * @hidden\n */\nexport const DIR_DOCUMENT = new InjectionToken<Document>('dir-doc', {\n    providedIn: 'root',\n    factory: DIR_DOCUMENT_FACTORY\n});\n\n/**\n * @hidden\n */\nexport function DIR_DOCUMENT_FACTORY(): Document {\n    return inject(DOCUMENT);\n}\n\n/**\n * @hidden\n *\n * Bidirectional service that extracts the value of the direction attribute on the body or html elements.\n *\n * The dir attribute over the body element takes precedence.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class IgxDirectionality {\n    private _dir: Direction;\n    private _document: Document;\n\n    public get value(): Direction {\n        return this._dir;\n    }\n\n    public get document() {\n        return this._document;\n    }\n\n    public get rtl() {\n        return this._dir === 'rtl';\n    }\n\n    constructor(@Inject(DIR_DOCUMENT) document) {\n        this._document = <Document>document;\n        const bodyDir = this._document.body ? this._document.body.dir : null;\n        const htmlDir = this._document.documentElement ? this._document.documentElement.dir : null;\n        const extractedDir = bodyDir || htmlDir;\n        this._dir = (extractedDir === 'ltr' || extractedDir === 'rtl') ? extractedDir : 'ltr';\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Renderer2,\n    ViewChild,\n    ContentChild,\n    AfterViewInit\n} from '@angular/core';\nimport {\n    IgxProcessBarTextTemplateDirective,\n    IgxProgressBarGradientDirective,\n} from './progressbar.common';\nimport { IBaseEventArgs } from '../core/utils';\nimport { IgxDirectionality } from '../services/direction/directionality';\n\nconst ONE_PERCENT = 0.01;\nconst MIN_VALUE = 0;\n\nexport enum IgxTextAlign {\n    START = 'start',\n    CENTER = 'center',\n    END = 'end'\n}\n\nexport enum IgxProgressType {\n    ERROR = 'error',\n    INFO = 'info',\n    WARNING = 'warning',\n    SUCCESS = 'success'\n}\n\nexport interface IChangeProgressEventArgs extends IBaseEventArgs {\n    previousValue: number;\n    currentValue: number;\n}\n\nexport abstract class BaseProgress {\n    /**\n     * @hidden\n     */\n    private requestAnimationId: number = undefined;\n\n    /**\n     * @hidden\n     */\n    protected _valueInPercent = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _max = 100;\n    /**\n     * @hidden\n     */\n    protected _value = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _animate = true;\n\n    /**\n     * @hidden\n     */\n    protected _step;\n\n    /**\n     *Returns the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *public valuePercent(event){\n     *    let percentValue = this.progressBar.valueInPercent;\n     *    alert(percentValue);\n     *}\n     *```\n     */\n    public get valueInPercent(): number {\n        return this._valueInPercent;\n    }\n\n    /**\n     *Sets the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *    public setValue(event){\n     *    this.progressBar.valueInPercent = 56;\n     *}\n     * //...\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"setValue()\">setValue</button>\n     *```\n     */\n    public set valueInPercent(value: number) {\n        this._valueInPercent = value;\n    }\n\n    /**\n     * @hidden\n     */\n    protected runAnimation(val: number, step: number) {\n        this.requestAnimationId = requestAnimationFrame(\n            () => this.updateProgressSmoothly.call(this, val, step));\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressSmoothly(val: number, step: number) {\n        this._value += step;\n        const passedValue = convertInPercentage(val, this._max);\n        const progressValue = convertInPercentage(this._value, this._max);\n        if (this.valueInPercent === passedValue) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else if (this.isInLimitRange(progressValue, passedValue, step)) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else {\n            this.valueInPercent = progressValue;\n            this.requestAnimationId = requestAnimationFrame(() => this.updateProgressSmoothly.call(this, val, step));\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressDirectly(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n\n    /**\n     * @hidden\n     */\n    protected directionFlow(currentValue: number, prevValue: number, step: number): number {\n        if (currentValue < prevValue) {\n            return step;\n        }\n\n        return -step;\n    }\n\n    /**\n     * @hidden\n     */\n    private isInLimitRange(val: number, comparator: number, step: number) {\n        return this.isExceedingUpperLimit(val, comparator, step) || this.isExceedingLowerLimit(val, comparator, step);\n    }\n\n    /**\n     * @hidden\n     *\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingUpperLimit(val: number, comparator: number, step: number) {\n        return val > comparator && step > 0;\n    }\n\n    /**\n     * @hidden\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingLowerLimit(val: number, comparator: number, step: number) {\n        return val < comparator && step < 0;\n    }\n\n    /**\n     * @hidden\n     * @param step\n     */\n    private updateProgress(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n}\nlet NEXT_LINEAR_ID = 0;\nlet NEXT_CIRCULAR_ID = 0;\nlet NEXT_GRADIENT_ID = 0;\n@Component({\n    selector: 'igx-linear-bar',\n    templateUrl: 'templates/linear-bar.component.html'\n})\nexport class IgxLinearProgressBarComponent extends BaseProgress {\n\n    /**\n     *Animation on progress `IgxLinearProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-linear-bar [animate]=\"false\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxLinearProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('attr.aria-valuemax')\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     */\n    get max() {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-linear-bar>\n     *```\n     */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    constructor() {\n        super();\n    }\n\n    @HostBinding('attr.aria-valuemin')\n    public valueMin = 0;\n\n    @HostBinding('class.igx-linear-bar')\n    public cssClass = 'igx-linear-bar';\n\n    /**\n     *Set `IgxLinearProgressBarComponent` to have striped style. By default it is set to false.\n     *```html\n     *<igx-linear-bar [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('class.igx-linear-bar--striped')\n    @Input()\n    public striped = false;\n\n    /**\n     *Set `IgxLinearProgressBarComponent` to have indeterminate. By default it is set to false.\n     *```html\n     *<igx-linear-bar [indeterminate]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('class.igx-linear-bar--indeterminate')\n    @Input()\n    public indeterminate = false;\n\n    /**An @Input property that sets the value of the `role` attribute. If not provided it will be automatically set to `progressbar`.\n     * ```html\n     *<igx-linear-bar role=\"progressbar\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'progressbar';\n\n    /**An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     *<igx-linear-bar [id]=\"'igx-linear-bar-55'\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-linear-bar-${NEXT_LINEAR_ID++}`;\n\n    /**\n     *Set the position that defines where the text is aligned.\n     Possible options - `IgxTextAlign.START` (default), `IgxTextAlign.CENTER`, `IgxTextAlign.END`.\n     *```typescript\n     *public positionCenter: IgxTextAlign;\n     *public ngOnInit() {\n     *    this.positionCenter = IgxTextAlign.CENTER;\n     *}\n     * //...\n     *```\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textAlign: IgxTextAlign = IgxTextAlign.START;\n\n    /**\n     *Set the text to be visible. By default it is set to true.\n     * ```html\n     *<igx-linear-bar type=\"default\" [textVisibility]=\"false\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     *Set the position that defines if the text should be aligned above the progress line. By default is set to false.\n     *```html\n     *<igx-linear-bar type=\"error\" [textTop]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textTop = false;\n\n    /**\n     *Set a custom text that is displayed according to the defined position.\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public text: string;\n\n    /**\n     *Set type of the `IgxLinearProgressBarComponent`. Possible options - `default`, `success`, `info`, `warning`, and `error`.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"100\" [value]=\"0\" type=\"error\"></igx-linear-bar>\n     *```\n     */\n\n    @Input()\n    public type = 'default';\n\n    /**\n    *Returns value that indicates the current `IgxLinearProgressBarComponent` position.\n    *```typescript\n    *@ViewChild(\"MyProgressBar\")\n    *public progressBar: IgxLinearProgressBarComponent;\n    *public getValue(event) {\n    *    let value = this.progressBar.value;\n    *    alert(value);\n    *}\n    *```\n    */\n    @HostBinding('attr.aria-valuenow')\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxLinearProgressBarComponent` position.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    set value(val) {\n        val = Number(val);\n        if (this._value === val || this.indeterminate) {\n            return;\n        }\n\n        const valueInRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInRange)) {\n            return;\n        }\n        const changedValues = {\n            currentValue: valueInRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this._animate && val >= this.step) {\n            super.runAnimation(valueInRange, updateValue);\n        } else {\n            super.updateProgressDirectly(valueInRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-linear-bar (onProgressChanged)=\"progressChange($event)\" type=\"success\">\n     *```\n     */\n    @Output() public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--danger')\n    public get error() {\n        return this.type === IgxProgressType.ERROR;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--info')\n    public get info() {\n        return this.type === IgxProgressType.INFO;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--warning')\n    public get warning() {\n        return this.type === IgxProgressType.WARNING;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--success')\n    public get success() {\n        return this.type === IgxProgressType.SUCCESS;\n    }\n}\n\n@Component({\n    selector: 'igx-circular-bar',\n    templateUrl: 'templates/circular-bar.component.html'\n})\nexport class IgxCircularProgressBarComponent extends BaseProgress implements AfterViewInit {\n\n    private readonly STROKE_OPACITY_DVIDER = 100;\n    private readonly STROKE_OPACITY_ADDITION = .2;\n\n    /** @hidden */\n    @HostBinding('class.igx-circular-bar')\n    public cssClass = 'igx-circular-bar';\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-circular-bar [value]=\"currentValue\" (onProgressChanged)=\"progressChange($event)\"></igx-circular-bar>\n     *```\n     */\n    @Output()\n    public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-circular-bar [id]=\"'igx-circular-bar-55'\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-circular-bar-${NEXT_CIRCULAR_ID++}`;\n\n    /**\n     * @hidden\n     */\n    public gradientId = `igx-circular-gradient-${NEXT_GRADIENT_ID++}`;\n\n    /**\n     *An @Input property that sets the value of the `indeterminate` attribute. If not provided it will be automatically set to false.\n     *```html\n     *<igx-circular-bar [indeterminate]=\"true\"></igx-circular-bar>\n     *```\n     */\n    @HostBinding('class.igx-circular-bar--indeterminate')\n    @Input()\n    public indeterminate = false;\n\n    /**\n     *Sets the text visibility. By default it is set to true.\n     *```html\n     *<igx-circular-bar [textVisibility]=\"false\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     * Sets/gets the text to be displayed inside the `igxCircularBar`.\n     *```html\n     *<igx-circular-bar text=\"Progress\"></igx-circular-bar>\n     *```\n     *```typescript\n     *let text = this.circularBar.text;\n     *```\n     */\n    @Input()\n    public text: string;\n\n    @ContentChild(IgxProcessBarTextTemplateDirective, { read: IgxProcessBarTextTemplateDirective })\n    public textTemplate: IgxProcessBarTextTemplateDirective;\n\n    @ContentChild(IgxProgressBarGradientDirective, { read: IgxProgressBarGradientDirective })\n    public gradientTemplate: IgxProgressBarGradientDirective;\n\n    /**\n     * @hidden\n    */\n    public get context(): any {\n        return {\n            $implicit: { value: this.value, valueInPercent: this.valueInPercent, max: this.max }\n        };\n    }\n\n    /**\n    *Animation on progress `IgxCircularProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-circular-bar [animate]=\"false\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxCircularProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-circular-bar [max]=\"200\" [value]=\"0\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     *```html\n     *<igx-circular-bar [max]=\"245\" [animate]=\"false\" [value]=\"currentValue\"></igx-circular-bar>\n     *```\n     */\n    get max(): number {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-circular-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-circular-bar>\n     *```\n    */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    /**\n     *Returns value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public getValue(event) {\n     *    let value = this.progressBar.value;\n     *    alert(value);\n     *}\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"getValue()\">Click</button>\n     *```\n     */\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```html\n     *<igx-circular-bar [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    set value(val: number) {\n        val = Number(val);\n        if (this._value === val || this.indeterminate) {\n            return;\n        }\n\n        const valueInProperRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInProperRange)) {\n            return;\n        }\n\n        const changedValues = {\n            currentValue: valueInProperRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this.animate && val >= this.step) {\n            super.runAnimation(valueInProperRange, updateValue);\n        } else {\n            this.updateProgressDirectly(valueInProperRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    private _circleRadius = 46;\n    private _circumference = 2 * Math.PI * this._circleRadius;\n\n    @ViewChild('circle', { static: true }) private _svgCircle: ElementRef;\n\n    constructor(private renderer: Renderer2, private _directionality: IgxDirectionality) {\n        super();\n    }\n\n    ngAfterViewInit() {\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke',\n            `url(#${this.gradientId})`\n        );\n    }\n\n    /**\n     * @hidden\n     */\n    public updateProgressSmoothly(val: number, step: number) {\n        // Set frames for the animation\n        const FRAMES = [{\n            strokeDashoffset: this.getProgress(this._value),\n            strokeOpacity: (this._value / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }, {\n            strokeDashoffset: this.getProgress(this.valueInPercent),\n            strokeOpacity: (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }];\n        this._svgCircle.nativeElement.animate(FRAMES, {\n            easing: 'ease-out',\n            fill: 'forwards'\n        });\n\n        super.updateProgressSmoothly(val, step);\n    }\n\n    /**\n     * @hidden\n    */\n    public get textContent(): string {\n        return this.text;\n    }\n\n    /**\n     * @hidden\n    */\n    public updateProgressDirectly(val: number) {\n        super.updateProgressDirectly(val);\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-dashoffset',\n            this.getProgress(this.valueInPercent));\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-opacity',\n            (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION);\n    }\n\n    private getProgress(percentage: number) {\n        return this._directionality.rtl ?\n            this._circumference + (percentage * this._circumference / 100) :\n            this._circumference - (percentage * this._circumference / 100);\n    }\n}\n\nexport function getValueInProperRange(value: number, max: number, min = 0): number {\n    return Math.max(Math.min(value, max), min);\n}\n\nexport function convertInPercentage(value: number, max: number) {\n    return Math.floor(100 * value / max);\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxLinearProgressBarComponent,\n        IgxCircularProgressBarComponent,\n        IgxProcessBarTextTemplateDirective,\n        IgxProgressBarGradientDirective,\n    ],\n    exports: [\n        IgxLinearProgressBarComponent,\n        IgxCircularProgressBarComponent,\n        IgxProcessBarTextTemplateDirective,\n        IgxProgressBarGradientDirective,\n    ],\n    imports: [CommonModule]\n})\nexport class IgxProgressBarModule { }\n\n","import { IgxDropDownItemComponent } from './../drop-down/drop-down-item.component';\nimport { Component, DoCheck, Input } from '@angular/core';\n\n@Component({\n    selector: 'igx-select-item',\n    template: '<ng-content></ng-content>'\n})\nexport class IgxSelectItemComponent extends IgxDropDownItemComponent implements DoCheck {\n\n    private _text: any;\n\n    /**\n     * An @Input property that gets/sets the item's text to be displayed in the select component's input when the item is selected.\n     *\n     * ```typescript\n     *  //get\n     *  let mySelectedItem = this.dropDown.selectedItem;\n     *  let selectedItemText = mySelectedItem.text;\n     * ```\n\n     * ```html\n     * // set\n     * <igx-select-item [text]=\"'London'\"></igx-select-item>\n     * ```\n     */\n    @Input()\n    public get text(): string {\n        return this._text;\n    }\n\n    public set text(text: string) {\n        this._text = text;\n    }\n\n    /** @hidden @internal */\n    public get itemText() {\n        if (this._text !== undefined) {\n            return this._text;\n        }\n        // If text @Input is undefined, try extract a meaningful item text out of the item template\n        return this.elementRef.nativeElement.textContent.trim();\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the select\n     *\n     * ```typescript\n     *  let mySelectedItem = this.select.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.selected; // true\n     * ```\n     */\n    public get selected() {\n        return !this.isHeader && !this.disabled && this.selection.is_item_selected(this.dropDown.id, this);\n    }\n\n    public set selected(value: any) {\n        if (value && !this.isHeader && !this.disabled) {\n            this.dropDown.selectItem(this);\n        }\n    }\n\n    /** @hidden @internal */\n    public isHeader: boolean;\n\n    ngDoCheck(): void {\n    }\n}\n","import { VerticalAlignment, HorizontalAlignment, PositionSettings, Size, Util, ConnectedFit  } from '../services/overlay/utilities';\nimport { IPositionStrategy } from '../services/overlay/position';\nimport { fadeOut, fadeIn } from '../animations/main';\nimport { IgxSelectBase } from './select.common';\nimport { isIE } from '../core/utils';\nimport { BaseFitPositionStrategy } from '../services/overlay/position/base-fit-position-strategy';\n\n/** @hidden @internal */\nexport class SelectPositioningStrategy extends BaseFitPositionStrategy implements IPositionStrategy {\n\n    private _selectDefaultSettings = {\n        horizontalDirection: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Top,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut\n    };\n\n    /** @inheritdoc */\n    public settings: PositionSettings;\n\n    constructor(public select: IgxSelectBase, settings?: PositionSettings) {\n        super();\n        this.settings = Object.assign({}, this._selectDefaultSettings, settings);\n    }\n\n    // Global variables required for cases of !initialCall (page scroll/overlay repositionAll)\n    private global_yOffset = 0;\n    private global_xOffset = 0;\n    private global_styles: SelectStyles = {};\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n        const rects = super.calculateElementRectangles(contentElement);\n        // selectFit obj, to be used for both cases of initialCall and !initialCall(page scroll/overlay repositionAll)\n        const selectFit: SelectFit = {\n            verticalOffset: this.global_yOffset,\n            horizontalOffset: this.global_xOffset,\n            targetRect: rects.targetRect,\n            contentElementRect: rects.elementRect,\n            styles: this.global_styles,\n            scrollContainer: this.select.scrollContainer,\n            scrollContainerRect: this.select.scrollContainer.getBoundingClientRect()\n        };\n\n        if (initialCall) {\n            // Fill in the required selectFit object properties.\n            selectFit.viewPortRect = Util.getViewportRect(document);\n            selectFit.itemElement = this.getInteractionItemElement();\n            selectFit.itemRect = selectFit.itemElement.getBoundingClientRect();\n\n            // Calculate input and selected item elements style related variables\n            selectFit.styles = this.calculateStyles(selectFit);\n\n            selectFit.scrollAmount = this.calculateScrollAmount(selectFit);\n            // Calculate how much to offset the overlay container.\n            this.calculateYoffset(selectFit);\n            this.calculateXoffset(selectFit);\n\n            super.updateViewPortFit(selectFit);\n            // container does not fit in viewPort and is out on Top or Bottom\n            if (selectFit.fitVertical.back < 0 || selectFit.fitVertical.forward < 0 ) {\n                this.fitInViewport(contentElement, selectFit);\n            }\n            this.select.scrollContainer.scrollTop = selectFit.scrollAmount;\n        }\n        this.setStyles(contentElement, selectFit);\n    }\n\n    /**\n     * Calculate selected item scroll position.\n     */\n    private calculateScrollAmount(selectFit: SelectFit): number {\n        const itemElementRect = selectFit.itemRect;\n        const scrollContainer = selectFit.scrollContainer;\n        const scrollContainerRect = selectFit.scrollContainerRect;\n        const scrollDelta = scrollContainerRect.top - itemElementRect.top;\n        let scrollPosition = scrollContainer.scrollTop - scrollDelta;\n\n        const dropDownHeight = scrollContainer.clientHeight;\n        scrollPosition -= dropDownHeight / 2;\n        scrollPosition += itemElementRect.height / 2;\n\n        return Math.round(Math.min(Math.max(0, scrollPosition), scrollContainer.scrollHeight - scrollContainerRect.height));\n    }\n\n    /**\n     * Position the items outer container so selected item text is positioned over input text and if header\n     * And/OR footer - both header/footer are visible\n     * @param selectFit selectFit to use for computation.\n     */\n    protected fitInViewport(contentElement: HTMLElement, selectFit: SelectFit) {\n        const footer = selectFit.scrollContainerRect.bottom - selectFit.contentElementRect.bottom;\n        const header = selectFit.scrollContainerRect.top - selectFit.contentElementRect.top;\n        const lastItemFitSize = selectFit.targetRect.bottom + selectFit.styles.itemTextToInputTextDiff - footer;\n        const firstItemFitSize = selectFit.targetRect.top - selectFit.styles.itemTextToInputTextDiff - header;\n        // out of viewPort on Top\n        if (selectFit.fitVertical.back < 0) {\n            const possibleScrollAmount = selectFit.scrollContainer.scrollHeight -\n                selectFit.scrollContainerRect.height - selectFit.scrollAmount;\n            if (possibleScrollAmount + selectFit.fitVertical.back > 0 && firstItemFitSize > selectFit.viewPortRect.top) {\n                selectFit.scrollAmount -= selectFit.fitVertical.back;\n                selectFit.verticalOffset -= selectFit.fitVertical.back;\n                this.global_yOffset = selectFit.verticalOffset;\n            } else {\n                selectFit.verticalOffset = 0 ;\n                this.global_yOffset = 0;\n            }\n        // out of viewPort on Bottom\n        } else if (selectFit.fitVertical.forward < 0) {\n            if (selectFit.scrollAmount + selectFit.fitVertical.forward > 0 && lastItemFitSize < selectFit.viewPortRect.bottom) {\n                selectFit.scrollAmount += selectFit.fitVertical.forward;\n                selectFit.verticalOffset += selectFit.fitVertical.forward;\n                this.global_yOffset = selectFit.verticalOffset;\n            } else {\n                selectFit.verticalOffset = -selectFit.contentElementRect.height + selectFit.targetRect.height;\n                this.global_yOffset = selectFit.verticalOffset;\n            }\n        }\n    }\n\n    /**\n     * Sets element's style which effectively positions the provided element\n     * @param element Element to position\n     * @param selectFit selectFit to use for computation.\n     * @param initialCall should be true if this is the initial call to the position method calling setStyles\n     */\n    protected setStyles(contentElement: HTMLElement, selectFit: SelectFit) {\n        super.setStyle(contentElement, selectFit.targetRect, selectFit.contentElementRect, selectFit);\n        contentElement.style.width = `${selectFit.styles.contentElementNewWidth}px`; // manage container based on paddings?\n        this.global_styles.contentElementNewWidth = selectFit.styles.contentElementNewWidth;\n    }\n\n    /**\n     * Calculate the necessary input and selected item styles to be used for positioning item text over input text.\n     * Calculate & Set default items container width.\n     * @param selectFit selectFit to use for computation.\n     */\n    private calculateStyles(selectFit: SelectFit): SelectStyles  {\n        const styles: SelectStyles = {};\n        const inputElementStyles = window.getComputedStyle(this.settings.target as Element);\n        const itemElementStyles = window.getComputedStyle(selectFit.itemElement);\n        const numericInputFontSize = parseFloat(inputElementStyles.fontSize);\n        const numericItemFontSize = parseFloat(itemElementStyles.fontSize);\n        const inputTextToInputTop = (selectFit.targetRect.bottom - selectFit.targetRect.top - numericInputFontSize) / 2;\n        const itemTextToItemTop = (selectFit.itemRect.height - numericItemFontSize) / 2;\n         // Adjust for input top padding\n        const negateInputPaddings = (\n                parseFloat(inputElementStyles.paddingTop) -\n                parseFloat(inputElementStyles.paddingBottom)\n            ) / 2;\n        styles.itemTextToInputTextDiff = Math.round(itemTextToItemTop - inputTextToInputTop + negateInputPaddings);\n\n        const numericLeftPadding = parseFloat(itemElementStyles.paddingLeft);\n        const numericTextIndent = parseFloat(itemElementStyles.textIndent);\n\n        styles.itemTextPadding = numericLeftPadding;\n        styles.itemTextIndent = numericTextIndent;\n        // 24 is the input's toggle ddl icon width\n        styles.contentElementNewWidth = selectFit.targetRect.width + 24 + numericLeftPadding * 2;\n\n        return styles;\n    }\n\n    /**\n     * Obtain the selected item if there is such one or otherwise use the first one\n     */\n    public getInteractionItemElement(): HTMLElement {\n        let itemElement;\n        if (this.select.selectedItem) {\n            itemElement = this.select.selectedItem.element.nativeElement;\n            // D.P. Feb 22 2019, #3921 Force item scroll before measuring in IE11, due to base scrollToItem delay\n            if (isIE()) {\n                this.select.scrollContainer.scrollTop = this.select.calculateScrollPosition(this.select.selectedItem);\n            }\n        } else {\n            itemElement = this.select.getFirstItemElement();\n        }\n        return itemElement;\n    }\n\n    /**\n     * Calculate how much to offset the overlay container for Y-axis.\n     */\n    private calculateYoffset(selectFit: SelectFit) {\n        selectFit.verticalOffset = -(selectFit.itemRect.top - selectFit.contentElementRect.top +\n            selectFit.styles.itemTextToInputTextDiff - selectFit.scrollAmount);\n        this.global_yOffset = selectFit.verticalOffset;\n    }\n\n    /**\n     * Calculate how much to offset the overlay container for X-axis.\n     */\n    private calculateXoffset(selectFit: SelectFit) {\n        selectFit.horizontalOffset = selectFit.styles.itemTextIndent - selectFit.styles.itemTextPadding;\n        this.global_xOffset = selectFit.horizontalOffset;\n    }\n}\n\n/** @hidden */\nexport interface SelectFit extends ConnectedFit {\n    itemElement?: HTMLElement;\n    scrollContainer: HTMLElement;\n    scrollContainerRect: ClientRect;\n    itemRect?: ClientRect;\n    styles?: SelectStyles;\n    scrollAmount?: number;\n}\n\n/** @hidden */\nexport interface SelectStyles {\n    itemTextPadding?: number;\n    itemTextIndent?: number;\n    itemTextToInputTextDiff?: number;\n    contentElementNewWidth?: number;\n    numericLeftPadding?: number;\n}\n","import { IgxInputDirective, IgxInputState } from './../directives/input/input.directive';\nimport {\n    Component, ContentChildren, forwardRef, QueryList, ViewChild, Input, ContentChild,\n    AfterContentInit, HostBinding, Directive, TemplateRef, ElementRef, ChangeDetectorRef, Optional,\n    Injector, OnInit, AfterViewInit, OnDestroy, Inject, Type\n\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl, AbstractControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport { IgxDropDownItemBaseDirective } from '../drop-down/index';\nimport { IgxInputGroupComponent } from '../input-group/input-group.component';\n\nimport { IgxDropDownComponent } from './../drop-down/drop-down.component';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { SelectPositioningStrategy } from './select-positioning-strategy';\n\nimport { OverlaySettings, AbsoluteScrollStrategy } from '../services/index';\nimport { IGX_DROPDOWN_BASE, ISelectionEventArgs, Navigate } from '../drop-down/drop-down.common';\nimport { CancelableEventArgs } from '../core/utils';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxSelectBase } from './select.common';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectToggleIcon]'\n})\nexport class IgxSelectToggleIconDirective {\n}\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectHeader]'\n})\nexport class IgxSelectHeaderDirective {\n}\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectFooter]'\n})\nexport class IgxSelectFooterDirective {\n}\n\nconst noop = () => { };\n\n/**\n * **Ignite UI for Angular Select** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/select.html)\n *\n * The `igxSelect` provides an input with dropdown list allowing selection of a single item.\n *\n * Example:\n * ```html\n * <igx-select #select1 [placeholder]=\"'Pick One'\">\n *   <label igxLabel>Select Label</label>\n *   <igx-select-item *ngFor=\"let item of items\" [value]=\"item.field\">\n *     {{ item.field }}\n *   </igx-select-item>\n * </igx-select>\n * ```\n */\n@Component({\n    selector: 'igx-select',\n    templateUrl: './select.component.html',\n    providers: [\n        { provide: NG_VALUE_ACCESSOR, useExisting: IgxSelectComponent, multi: true },\n        { provide: IGX_DROPDOWN_BASE, useExisting: IgxSelectComponent }],\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSelectComponent extends IgxDropDownComponent implements IgxSelectBase, ControlValueAccessor,\n    AfterContentInit, OnInit, AfterViewInit, OnDestroy, EditorProvider {\n\n    private ngControl: NgControl = null;\n    private _statusChanges$: Subscription;\n    private _overlayDefaults: OverlaySettings;\n    private _value: any;\n\n    /** @hidden @internal do not use the drop-down container class */\n    public cssClass = false;\n\n    /** @hidden @internal */\n    @ViewChild('inputGroup', { read: IgxInputGroupComponent, static: true }) public inputGroup: IgxInputGroupComponent;\n\n    /** @hidden @internal */\n    @ViewChild('input', { read: IgxInputDirective, static: true }) public input: IgxInputDirective;\n\n    /** @hidden @internal */\n    @ContentChildren(forwardRef(() => IgxSelectItemComponent), { descendants: true })\n    public children: QueryList<IgxSelectItemComponent>;\n\n    /** @hidden @internal */\n    @ContentChild(forwardRef(() => IgxLabelDirective), { static: true }) label: IgxLabelDirective;\n\n    /** @hidden @internal */\n    public allowItemsFocus = false;\n\n    /** @hidden @internal */\n    public height: string;\n\n    /**\n     * An @Input property that gets/sets the component value.\n     *\n     * ```typescript\n     * // get\n     * let selectValue = this.select.value;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.select.value = 'London';\n     * ```\n     * ```html\n     * <igx-select [value]=\"value\"></igx-select>\n     * ```\n     */\n    @Input()\n    public get value(): any {\n        return this._value;\n    }\n    public set value(v: any) {\n        if (this._value === v) {\n            return;\n        }\n        this._value = v;\n        this.setSelection(this.items.find(x => x.value === this.value));\n    }\n    /**\n     * An @Input property that sets input placeholder.\n     *\n     */\n    @Input() public placeholder;\n\n\n    /**\n     * An @Input property that disables the `IgxSelectComponent`.\n     * ```html\n     * <igx-select [disabled]=\"'true'\"></igx-select>\n     * ```\n     */\n    @Input() public disabled = false;\n\n    /**\n     * An @Input property that sets custom OverlaySettings `IgxSelectComponent`.\n     * ```html\n     * <igx-select [overlaySettings] = \"customOverlaySettings\"></igx-select>\n     * ```\n     */\n    @Input()\n    overlaySettings: OverlaySettings;\n\n    /** @hidden @internal */\n    @HostBinding('style.maxHeight')\n    public maxHeight = '256px';\n\n    /** @hidden @internal */\n    public width: string;\n\n    /**\n     * An @Input property that sets how the select will be styled.\n     * The allowed values are `line`, `box` and `border`. The default is `line`.\n     * ```html\n     *<igx-select [type]=\"'box'\"></igx-select>\n     * ```\n     */\n    @Input()\n    public type = 'line';\n\n    /**\n     * The custom template, if any, that should be used when rendering the select TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.select.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-select #select>\n     *      ...\n     *      <ng-template igxSelectToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-select>\n     * ```\n     */\n    @ContentChild(IgxSelectToggleIconDirective, { read: TemplateRef })\n    public toggleIconTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the HEADER for the select items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.select.headerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-select #select>\n     *      ...\n     *      <ng-template igxSelectHeader>\n     *          <div class=\"select__header\">\n     *              This is a custom header\n     *          </div>\n     *      </ng-template>\n     *  </igx-select>\n     * ```\n     */\n    @ContentChild(IgxSelectHeaderDirective, { read: TemplateRef, static: false })\n    public headerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the FOOTER for the select items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.select.footerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-select #select>\n     *      ...\n     *      <ng-template igxSelectFooter>\n     *          <div class=\"select__footer\">\n     *              This is a custom footer\n     *          </div>\n     *      </ng-template>\n     *  </igx-select>\n     * ```\n     */\n    @ContentChild(IgxSelectFooterDirective, { read: TemplateRef, static: false })\n    public footerTemplate: TemplateRef<any> = null;\n\n    /** @hidden @internal */\n    public get selectionValue() {\n        const selectedItem = this.selectedItem;\n        return selectedItem ? selectedItem.itemText : '';\n    }\n\n    /** @hidden @internal */\n    public get selectedItem(): IgxSelectItemComponent {\n        return this.selection.first_item(this.id);\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        private _injector: Injector) {\n        super(elementRef, cdr, selection, _displayDensityOptions);\n    }\n\n    //#region ControlValueAccessor\n\n    /** @hidden @internal */\n    private _onChangeCallback: (_: any) => void = noop;\n    /** @hidden @internal */\n    private _onTouchedCallback: () => void = noop;\n\n    /** @hidden @internal */\n    public writeValue = (value: any) => {\n        this.value = value;\n    }\n\n    /** @hidden @internal */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /** @hidden @internal */\n    public registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n\n    /** @hidden @internal */\n    public setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n    //#endregion\n\n    /** @hidden @internal */\n    public getEditElement(): HTMLElement {\n        return this.input.nativeElement;\n    }\n\n    /** @hidden @internal */\n    public selectItem(newSelection: IgxDropDownItemBaseDirective, event?) {\n        const oldSelection = this.selectedItem;\n\n        if (event) {\n            this.toggleDirective.close();\n        }\n        if (newSelection === null || newSelection === oldSelection || newSelection.disabled || newSelection.isHeader) {\n            return;\n        }\n\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        this.setSelection(newSelection);\n        this._value = newSelection.value;\n        this.cdr.detectChanges();\n        this._onChangeCallback(this.value);\n    }\n\n    /** @hidden @internal */\n    public getFirstItemElement(): HTMLElement {\n        return this.children.first.element.nativeElement;\n    }\n\n    /**\n     * Opens the select\n     *\n     * ```typescript\n     * this.select.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        if (this.disabled || this.items.length === 0) {\n            return;\n        }\n        if (!this.selectedItem) {\n            this.navigateFirst();\n        }\n\n        super.open(Object.assign({}, this._overlayDefaults, this.overlaySettings, overlaySettings));\n    }\n\n    /** @hidden @internal */\n    ngAfterContentInit() {\n        this._overlayDefaults = {\n            modal: false,\n            closeOnOutsideClick: false,\n            positionStrategy: new SelectPositioningStrategy(this, { target: this.getEditElement() }),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            excludePositionTarget: true\n        };\n        this.children.changes.subscribe(() => {\n            this.setSelection(this.items.find(x => x.value === this.value));\n            this.cdr.detectChanges();\n        });\n        Promise.resolve().then(() => this.children.notifyOnChanges());\n    }\n\n    /** @hidden @internal */\n    public onToggleOpening(event: CancelableEventArgs) {\n        this.onOpening.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.scrollToItem(this.selectedItem);\n    }\n\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        if (this.collapsed && this.selectedItem) {\n            this.navigateItem(this.selectedItem.itemIndex);\n        }\n        super.navigate(direction, currentIndex);\n    }\n\n    protected manageRequiredAsterisk(): void {\n        if (this.ngControl && this.ngControl.control.validator) {\n            // Run the validation with empty object to check if required is enabled.\n            const error = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = error && error.required;\n            this.cdr.markForCheck();\n        }\n    }\n    private setSelection(item: IgxDropDownItemBaseDirective) {\n        if (item && item.value !== undefined && item.value !== null) {\n            this.selection.set(this.id, new Set([item]));\n        } else {\n            this.selection.clear(this.id);\n        }\n    }\n\n    /** @hidden @internal */\n    public onBlur(): void {\n        this._onTouchedCallback();\n        if (this.ngControl && !this.ngControl.valid) {\n             this.input.valid = IgxInputState.INVALID;\n        } else {\n            this.input.valid = IgxInputState.INITIAL;\n        }\n        if (!this.collapsed) {\n            this.toggleDirective.close();\n        }\n    }\n\n    /** @hidden @internal */\n    public onFocus(): void {\n        this._onTouchedCallback();\n    }\n\n    protected onStatusChanged() {\n        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&\n            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {\n            if (this.inputGroup.isFocused) {\n                this.input.valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n            } else {\n                this.input.valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n            }\n        }\n        this.manageRequiredAsterisk();\n    }\n    /**\n     * @hidden @internal\n     */\n    public ngOnInit() {\n        this.ngControl = this._injector.get<NgControl>(NgControl, null);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterViewInit() {\n        if (this.ngControl) {\n            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n            this.manageRequiredAsterisk();\n        }\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.selection.clear(this.id);\n        if (this._statusChanges$) {\n            this._statusChanges$.unsubscribe();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     * Prevent input blur - closing the items container on Header/Footer Template click.\n     */\n   public mousedownHandler(event) {\n        event.preventDefault();\n    }\n}\n\n","import { IgxDropDownItemNavigationDirective } from '../drop-down/drop-down-navigation.directive';\nimport { Directive, Input, HostListener, OnDestroy } from '@angular/core';\nimport { Subscription, timer } from 'rxjs';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { IgxSelectBase } from './select.common';\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectItemNavigation]'\n})\nexport class IgxSelectItemNavigationDirective extends IgxDropDownItemNavigationDirective implements OnDestroy {\n\n    @Input('igxSelectItemNavigation')\n    public target: IgxSelectBase;\n\n    constructor() { super(null); }\n\n    /** Captures keydown events and calls the appropriate handlers on the target component */\n    handleKeyDown(event: KeyboardEvent) {\n        if (!event || event.shiftKey) {\n            return;\n        }\n\n        const key = event.key.toLowerCase();\n        if (event.altKey && (key === 'arrowdown' || key === 'arrowup' || key === 'down' || key === 'up')) {\n            this.target.toggle();\n            return;\n        }\n\n        if (this.target.collapsed) {\n            switch (key) {\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                case 'enter':\n                    event.preventDefault();\n                    this.target.open();\n                    return;\n                case 'arrowdown':\n                case 'down':\n                    this.target.navigateNext();\n                    this.target.selectItem(this.target.focusedItem);\n                    event.preventDefault();\n                    return;\n                case 'arrowup':\n                case 'up':\n                    this.target.navigatePrev();\n                    this.target.selectItem(this.target.focusedItem);\n                    event.preventDefault();\n                    return;\n                default:\n                    break;\n            }\n        }\n\n        super.handleKeyDown(event);\n    }\n\n    // tslint:disable:member-ordering\n    private inputStream = '';\n    private clearStream$ = Subscription.EMPTY;\n\n    /** Handle continuous letter typing navigation */\n    @HostListener('keyup', ['$event'])\n    public captureKey(event: KeyboardEvent) {\n        // relying only on key, available on all major browsers:\n        // https://caniuse.com/#feat=keyboardevent-key (IE/Edge quirk doesn't affect letter typing)\n        if (!event || !event.key || event.key.length > 1) {\n            // ignore longer keys ('Alt', 'ArrowDown', etc)\n            return;\n        }\n\n        this.clearStream$.unsubscribe();\n        this.clearStream$ = timer(500).subscribe(() => {\n            this.inputStream = '';\n        });\n        this.inputStream += event.key;\n        const focusedItem = this.target.focusedItem as IgxSelectItemComponent;\n\n        // select the item\n        if (focusedItem && this.inputStream.length > 1 && focusedItem.itemText.toLowerCase().startsWith(this.inputStream.toLowerCase())) {\n            return;\n        }\n        this.activateItemByText(this.inputStream);\n    }\n\n    public activateItemByText(text: string) {\n        const items = this.target.items as IgxSelectItemComponent[];\n        const activeItemIndex = items.indexOf(this.target.focusedItem as IgxSelectItemComponent) || 0;\n        // ^ this is focused OR selected if the dd is closed\n        let nextItem = items.slice(activeItemIndex + 1).find(x => !x.disabled && (x.itemText.toLowerCase().startsWith(text.toLowerCase())));\n\n        if (!nextItem) {\n            nextItem = items.slice(0, activeItemIndex).find(x => !x.disabled && (x.itemText.toLowerCase().startsWith(text.toLowerCase())));\n        }\n\n        if (!nextItem) {\n            return;\n        }\n\n        if (this.target.collapsed) {\n            this.target.selectItem(nextItem);\n        }\n        this.target.navigateItem(items.indexOf(nextItem));\n    }\n\n    ngOnDestroy(): void {\n        this.clearStream$.unsubscribe();\n    }\n}\n","import { Component } from '@angular/core';\nimport { IgxDropDownGroupComponent } from '../drop-down/index';\n\n/**\n * The `<igx-select-item>` is a container intended for row items in\n * a `<igx-select>` container.\n */\n@Component({\n    selector: 'igx-select-item-group',\n    template: `\n        <label id=\"{{labelId}}\">{{ label }}</label>\n        <ng-content select=\"igx-select-item\"></ng-content>\n    `\n})\nexport class IgxSelectGroupComponent extends IgxDropDownGroupComponent {\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxDropDownModule } from './../drop-down/index';\nimport { IgxToggleModule } from './../directives/toggle/toggle.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\n\nimport { IgxSelectComponent, IgxSelectToggleIconDirective, IgxSelectHeaderDirective, IgxSelectFooterDirective } from './select.component';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { IgxSelectItemNavigationDirective } from './select-navigation.directive';\nimport { IgxSelectGroupComponent } from './select-group.component';\n\n/** @hidden */\n@NgModule({\n    declarations: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,\n        IgxSelectToggleIconDirective, IgxSelectGroupComponent, IgxSelectHeaderDirective,\n        IgxSelectFooterDirective],\n    exports: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,\n         IgxSelectToggleIconDirective, IgxSelectGroupComponent, IgxSelectHeaderDirective,\n         IgxSelectFooterDirective],\n    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,\n        IgxToggleModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],\n    providers: []\n})\nexport class IgxSelectModule { }\n","import { SimpleChanges, SimpleChange } from '@angular/core';\n\n/**\n* @hidden\n*/\nexport function WatchChanges(): PropertyDecorator {\n    return (target: any, key: string, propDesc?: PropertyDescriptor) => {\n        const privateKey = '_' + key.toString();\n        propDesc = propDesc || {\n            configurable: true,\n            enumerable: true,\n        };\n        propDesc.get = propDesc.get || (function (this: any) { return this[privateKey]; });\n        const originalSetter = propDesc.set || (function (this: any, val: any) { this[privateKey] = val; });\n\n        propDesc.set = function (this: any, val: any) {\n            const init = this._init;\n            const oldValue = this[key];\n            if (val !== oldValue || (typeof val === 'object' && val === oldValue)) {\n                originalSetter.call(this, val);\n                if (this.ngOnChanges && !init) {\n                    // in case wacthed prop changes trigger ngOnChanges manually\n                    const changes: SimpleChanges = {\n                        [key]: new SimpleChange(oldValue, val, false)\n                    };\n                    this.ngOnChanges(changes);\n               }\n            }\n        };\n        return propDesc;\n    };\n}\n\nexport function WatchColumnChanges(): PropertyDecorator {\n    return (target: any, key: string, propDesc?: PropertyDescriptor) => {\n        const privateKey = '_' + key.toString();\n        propDesc = propDesc || {\n            configurable: true,\n            enumerable: true,\n        };\n        propDesc.get = propDesc.get || (function (this: any) { return this[privateKey]; });\n        const originalSetter = propDesc.set || (function (this: any, val: any) { this[privateKey] = val; });\n\n        propDesc.set = function (this: any, val: any) {\n            const init = this._init;\n            const oldValue = this[key];\n            originalSetter.call(this, val);\n            if (val !== oldValue || (typeof val === 'object' && val === oldValue)) {\n                if (this.rowIslandAPI.rowIsland) {\n                    this.rowIslandAPI.rowIsland.updateColumnList();\n               }\n            }\n        };\n        return propDesc;\n    };\n}\n\nexport function notifyChanges(repaint = false) {\n    return (_: any, key: string, propDesc?: PropertyDescriptor) => {\n\n        const privateKey = `__${key}`;\n\n        propDesc = propDesc || {\n            enumerable: true,\n            configurable: true\n        };\n\n\n        const originalSetter = propDesc ? propDesc.set : null;\n\n        propDesc.get = propDesc.get || (function(this) { return this[privateKey]; });\n\n        propDesc.set = function(this, newValue) {\n            if (originalSetter) {\n                originalSetter.call(this, newValue);\n                if (this.grid) {\n                    this.grid.notifyChanges(repaint);\n                }\n            } else {\n                if (newValue === this[key]) { return; }\n                this[privateKey] = newValue;\n                if (this.grid) {\n                    this.grid.notifyChanges(repaint);\n                }\n            }\n        };\n        return propDesc as any;\n    };\n}\n","import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class IgxRowIslandAPIService {\n    public rowIsland: IgxRowIslandComponent;\n    public change: Subject<any> = new Subject<any>();\n    protected state: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    protected childRowIslands: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected childGrids:  Map<any, IgxHierarchicalGridComponent> = new Map<any, IgxHierarchicalGridComponent>();\n\n    public register(rowIsland: IgxRowIslandComponent) {\n        this.state.set(rowIsland.id, rowIsland);\n        this.destroyMap.set(rowIsland.id, new Subject<boolean>());\n    }\n\n    public unsubscribe(rowIsland: IgxRowIslandComponent) {\n        this.state.delete(rowIsland.id);\n    }\n\n    public get(id: string): IgxRowIslandComponent {\n        return this.state.get(id);\n    }\n\n    public unset(id: string) {\n        this.state.delete(id);\n        this.destroyMap.delete(id);\n    }\n\n    public reset(oldId: string, newId: string) {\n        const destroy = this.destroyMap.get(oldId);\n        const rowIsland = this.get(oldId);\n\n        this.unset(oldId);\n\n        if (rowIsland) {\n            this.state.set(newId, rowIsland);\n        }\n\n        if (destroy) {\n            this.destroyMap.set(newId, destroy);\n        }\n    }\n\n    registerChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.set(rowIsland.key, rowIsland);\n        this.destroyMap.set(rowIsland.key, new Subject<boolean>());\n    }\n\n    unsetChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.delete(rowIsland.key);\n        this.destroyMap.delete(rowIsland.key);\n    }\n\n    getChildRowIsland(rowIslandKey: string) {\n        return this.childRowIslands.get(rowIslandKey);\n    }\n\n    registerChildGrid(parentRowID: string|object, grid: IgxHierarchicalGridComponent) {\n        this.childGrids.set(parentRowID, grid);\n    }\n\n    getChildGrids(inDepth?: boolean) {\n        let allChildren = [];\n        this.childGrids.forEach((grid) => {\n            allChildren.push(grid);\n        });\n        if (inDepth) {\n            this.childRowIslands.forEach((layout) => {\n                allChildren = allChildren.concat(layout.rowIslandAPI.getChildGrids(inDepth));\n            });\n        }\n\n        return allChildren;\n    }\n\n    getChildGridByID(rowID) {\n        return this.childGrids.get(rowID);\n    }\n}\n","import { Injectable, EventEmitter, NgZone } from '@angular/core';\nimport { IGridEditEventArgs } from '../common/events';\nimport { IgxGridBaseDirective } from '../grid';\nimport { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\n\n\nexport interface GridSelectionRange {\n    rowStart: number;\n    rowEnd: number;\n    columnStart: string | number;\n    columnEnd: string | number;\n}\n\nexport interface ISelectionNode {\n    row: number;\n    column: number;\n    layout?: IMultiRowLayoutNode;\n    isSummaryRow?: boolean;\n}\n\nexport interface IMultiRowLayoutNode {\n    rowStart: number;\n    colStart: number;\n    rowEnd: number;\n    colEnd: number;\n    columnVisibleIndex: number;\n}\n\ninterface ISelectionKeyboardState {\n    node: null | ISelectionNode;\n    shift: boolean;\n    range: GridSelectionRange;\n    active: boolean;\n}\n\ninterface ISelectionPointerState extends ISelectionKeyboardState {\n    ctrl: boolean;\n    primaryButton: boolean;\n}\n\ntype SelectionState = ISelectionKeyboardState | ISelectionPointerState;\n\n\n// TODO: Refactor - export in a separate file\n\nexport class IgxRow {\n    transactionState: any;\n    state: any;\n    newData: any;\n\n    constructor(public id: any, public index: number, public data: any) {}\n\n    createEditEventArgs(): IGridEditEventArgs {\n        return {\n            rowID: this.id,\n            oldValue: { ... this.data },\n            newValue: this.newData,\n            cancel: false\n        };\n    }\n}\n\nexport class IgxCell {\n\n    primaryKey: any;\n    state: any;\n\n    constructor(\n        public id,\n        public rowIndex: number,\n        public column,\n        public value: any,\n        public editValue: any,\n        public rowData: any) {}\n\n    castToNumber(value: any): any {\n        if (this.column.dataType === 'number' && !this.column.inlineEditorTemplate) {\n            const v = parseFloat(value);\n            return !isNaN(v) && isFinite(v) ? v : 0;\n        }\n        return value;\n    }\n\n    createEditEventArgs(): IGridEditEventArgs {\n        return {\n            rowID: this.id.rowID,\n            cellID: this.id,\n            oldValue: this.value,\n            newValue: this.editValue,\n            cancel: false\n        };\n    }\n}\n\n@Injectable()\nexport class IgxGridCRUDService {\n\n    grid;\n    cell: IgxCell | null = null;\n    row: IgxRow | null = null;\n\n    createCell(cell): IgxCell {\n        return new IgxCell(cell.cellID, cell.rowIndex, cell.column, cell.value, cell.value, cell.row.rowData);\n    }\n\n    createRow(cell: IgxCell): IgxRow {\n        return new IgxRow(cell.id.rowID, cell.rowIndex, cell.rowData);\n    }\n\n    sameRow(rowID): boolean {\n        return this.row && this.row.id === rowID;\n    }\n\n    sameCell(cell: IgxCell): boolean {\n        return (this.cell.id.rowID === cell.id.rowID &&\n            this.cell.id.columnID === cell.id.columnID);\n    }\n\n    get inEditMode(): boolean {\n        return !!this.cell;\n    }\n\n    get rowEditing(): boolean {\n        return this.grid.rowEditable;\n    }\n\n    get primaryKey(): any {\n        return this.grid.primaryKey;\n    }\n\n    beginRowEdit() {\n        if (this.grid.rowEditable && (this.grid.primaryKey === undefined || this.grid.primaryKey === null)) {\n            console.warn('The grid must have a `primaryKey` specified when using `rowEditable`!');\n        }\n        this.row = this.createRow(this.cell);\n        const args = {\n            rowID: this.row.id,\n            oldValue: this.row.data,\n            cancel: false\n        };\n        this.grid.onRowEditEnter.emit(args);\n        if (args.cancel) {\n            this.endRowEdit();\n            return;\n        }\n        this.row.transactionState = this.grid.transactions.getAggregatedValue(this.row.id, true);\n        this.grid.transactions.startPending();\n        this.grid.openRowOverlay(this.row.id);\n    }\n\n\n    endRowEdit() {\n        this.row = null;\n    }\n\n    begin(cell): void {\n        const newCell = this.createCell(cell);\n        newCell.primaryKey = this.primaryKey;\n        const args = {\n            cellID: newCell.id,\n            rowID: newCell.id.rowID,\n            oldValue: newCell.value,\n            cancel: false\n        };\n\n        this.grid.onCellEditEnter.emit(args);\n\n        if (args.cancel) {\n            this.end();\n            return;\n        }\n\n        if (this.rowEditing) {\n            if (this.row && !this.sameRow(newCell.id.rowID)) {\n                this.grid.endEdit(true);\n                this.cell = newCell;\n                this.beginRowEdit();\n                return;\n            }\n\n            this.cell = newCell;\n\n            if (!this.row) {\n                this.beginRowEdit();\n                return;\n            }\n        } else {\n            this.cell = newCell;\n            this.endRowEdit();\n        }\n    }\n\n    end(): void {\n        this.cell = null;\n    }\n\n\n    isInEditMode(rowIndex: number, columnIndex: number): boolean {\n        if (!this.cell) {\n            return false;\n        }\n        return this.cell.column.index === columnIndex && this.cell.rowIndex === rowIndex;\n    }\n}\n\n\n@Injectable()\nexport class IgxGridSelectionService {\n    grid;\n    dragMode = false;\n    activeElement: ISelectionNode | null;\n    keyboardState = {} as ISelectionKeyboardState;\n    pointerState = {} as ISelectionPointerState;\n\n\n    selection = new Map<number, Set<number>>();\n    temp = new Map<number, Set<number>>();\n    _ranges: Set<string> = new Set<string>();\n    _selectionRange: Range;\n    rowSelection: Set<any> = new Set<any>();\n    private allRowsSelected: boolean;\n\n    /**\n     * Returns the current selected ranges in the grid from both\n     * keyboard and pointer interactions\n     */\n    get ranges(): GridSelectionRange[] {\n\n        // The last action was keyboard + shift selection -> add it\n        this.addKeyboardRange();\n\n        const ranges = Array.from(this._ranges).map(range => JSON.parse(range));\n\n        // No ranges but we have a focused cell -> add it\n        if (!ranges.length && this.activeElement && this.grid.isCellSelectable) {\n            ranges.push(this.generateRange(this.activeElement));\n        }\n\n        return ranges;\n    }\n\n    get primaryButton(): boolean {\n        return this.pointerState.primaryButton;\n    }\n\n    set primaryButton(value: boolean) {\n        this.pointerState.primaryButton = value;\n    }\n\n    constructor(private zone: NgZone) {\n        this.initPointerState();\n        this.initKeyboardState();\n    }\n\n    /**\n     * Resets the keyboard state\n     */\n    initKeyboardState(): void {\n        this.keyboardState.node = null;\n        this.keyboardState.shift = false;\n        this.keyboardState.range = null;\n        this.keyboardState.active = false;\n    }\n\n    /**\n     * Resets the pointer state\n     */\n    initPointerState(): void {\n        this.pointerState.node = null;\n        this.pointerState.ctrl = false;\n        this.pointerState.shift = false;\n        this.pointerState.range = null;\n        this.pointerState.primaryButton = true;\n    }\n\n    /**\n     * Adds a single node.\n     * Single clicks | Ctrl + single clicks on cells is the usual case.\n     */\n    add(node: ISelectionNode, addToRange = true): void {\n        this.selection.has(node.row) ? this.selection.get(node.row).add(node.column) :\n            this.selection.set(node.row, new Set<number>()).get(node.row).add(node.column);\n\n        if (addToRange) { this._ranges.add(JSON.stringify(this.generateRange(node))); }\n    }\n\n    /**\n     * Adds the active keyboard range selection (if any) to the `ranges` meta.\n     */\n    addKeyboardRange(): void {\n        if (this.keyboardState.range) {\n            this._ranges.add(JSON.stringify(this.keyboardState.range));\n        }\n    }\n\n    remove(node: ISelectionNode): void {\n        if (this.selection.has(node.row)) {\n            this.selection.get(node.row).delete(node.column);\n        }\n        if (this.isActiveNode(node)) {\n            this.activeElement = null;\n        }\n        this._ranges.delete(JSON.stringify(this.generateRange(node)));\n    }\n\n    isInMap(node: ISelectionNode): boolean {\n        return (this.selection.has(node.row) && this.selection.get(node.row).has(node.column)) ||\n            (this.temp.has(node.row) && this.temp.get(node.row).has(node.column));\n    }\n\n    selected(node: ISelectionNode): boolean {\n        return (this.isActiveNode(node) && this.grid.isCellSelectable) || this.isInMap(node);\n    }\n\n    isActiveNode(node: ISelectionNode): boolean {\n        if (this.activeElement) {\n            const isActive = this.activeElement.column === node.column && this.activeElement.row === node.row;\n            if (this.grid.hasColumnLayouts) {\n                const layout = this.activeElement.layout;\n                return isActive && this.isActiveLayout(layout, node.layout);\n            }\n            return isActive;\n        }\n        return false;\n    }\n\n    isActiveLayout(current: IMultiRowLayoutNode, target: IMultiRowLayoutNode): boolean {\n        return current.columnVisibleIndex === target.columnVisibleIndex;\n    }\n\n    addRangeMeta(node: ISelectionNode, state?: SelectionState): void {\n        this._ranges.add(JSON.stringify(this.generateRange(node, state)));\n    }\n\n    removeRangeMeta(node: ISelectionNode, state?: SelectionState): void {\n        this._ranges.delete(JSON.stringify(this.generateRange(node, state)));\n    }\n\n    /**\n     * Generates a new selection range from the given `node`.\n     * If `state` is passed instead it will generate the range based on the passed `node`\n     * and the start node of the `state`.\n     */\n    generateRange(node: ISelectionNode, state?: SelectionState): GridSelectionRange {\n        if (!state) {\n            return {\n                rowStart: node.row,\n                rowEnd: node.row,\n                columnStart: node.column,\n                columnEnd: node.column\n            };\n        }\n\n        const { row, column } = state.node;\n        const rowStart = Math.min(node.row, row);\n        const rowEnd = Math.max(node.row, row);\n        const columnStart = Math.min(node.column, column);\n        const columnEnd = Math.max(node.column, column);\n\n        return { rowStart, rowEnd, columnStart, columnEnd };\n    }\n\n    /**\n     *\n     */\n    keyboardStateOnKeydown(node: ISelectionNode, shift: boolean, shiftTab: boolean): void {\n        this.keyboardState.active = true;\n        this.initPointerState();\n        this.keyboardState.shift = shift && !shiftTab;\n\n        // Kb navigation with shift and no previous node.\n        // Clear the current selection init the start node.\n        if (this.keyboardState.shift && !this.keyboardState.node) {\n            this.clear();\n            this.keyboardState.node = node;\n        }\n    }\n\n    keyboardStateOnFocus(node: ISelectionNode, emitter: EventEmitter<GridSelectionRange>, dom): void {\n        const kbState = this.keyboardState;\n\n        // Focus triggered by keyboard navigation\n        if (kbState.active) {\n            if (isChromium()) {\n                this._moveSelectionChrome(dom);\n            }\n            // Start generating a range if shift is hold\n            if (kbState.shift) {\n                this.dragSelect(node, kbState);\n                kbState.range = this.generateRange(node, kbState);\n                emitter.emit(this.generateRange(node, kbState));\n                return;\n            }\n\n            this.initKeyboardState();\n            this.clear();\n            this.add(node);\n        }\n    }\n\n    pointerDown(node: ISelectionNode, shift: boolean, ctrl: boolean): void {\n        this.addKeyboardRange();\n        this.initKeyboardState();\n        this.pointerState.ctrl = ctrl;\n        this.pointerState.shift = shift;\n\n        // No ctrl key pressed - no multiple selection\n        if (!ctrl) {\n            this.clear();\n        }\n\n        if (shift) {\n            // No previously 'clicked' node. Use the last active node.\n            if (!this.pointerState.node) {\n                this.pointerState.node = this.activeElement || node;\n            }\n            this.pointerDownShiftKey(node);\n            this.clearTextSelection();\n            return;\n        }\n\n        this.removeRangeMeta(node);\n        this.pointerState.node = node;\n    }\n\n    pointerDownShiftKey(node: ISelectionNode): void {\n        this.clear();\n        this.selectRange(node, this.pointerState);\n    }\n\n    mergeMap(target: Map<number, Set<number>>, source: Map<number, Set<number>>): void {\n        const iterator = source.entries();\n        let pair = iterator.next();\n        let key: number;\n        let value: Set<number>;\n\n        while (!pair.done) {\n            [key, value] = pair.value;\n            if (target.has(key)) {\n                const newValue = target.get(key);\n                value.forEach(record => newValue.add(record));\n                target.set(key, newValue);\n            } else {\n                target.set(key, value);\n            }\n            pair = iterator.next();\n        }\n    }\n\n    pointerEnter(node: ISelectionNode, event: PointerEvent): boolean {\n        // https://www.w3.org/TR/pointerevents/#the-button-property\n        this.dragMode = event.buttons === 1 && event.button === -1;\n        if (!this.dragMode) {\n            return false;\n        }\n        this.clearTextSelection();\n\n        // If the users triggers a drag-like event by first clicking outside the grid cells\n        // and then enters in the grid body we may not have a initial pointer starting node.\n        // Assume the first pointerenter node is where we start.\n        if (!this.pointerState.node) {\n            this.pointerState.node = node;\n        }\n\n        this.pointerState.ctrl ? this.selectRange(node, this.pointerState, this.temp) :\n            this.dragSelect(node, this.pointerState);\n        return true;\n    }\n\n    pointerUp(node: ISelectionNode, emitter: EventEmitter<GridSelectionRange>): boolean {\n        if (this.dragMode) {\n            this.restoreTextSelection();\n            this.addRangeMeta(node, this.pointerState);\n            this.mergeMap(this.selection, this.temp);\n            this.zone.runTask(() => emitter.emit(this.generateRange(node, this.pointerState)));\n            this.temp.clear();\n            this.dragMode = false;\n            return true;\n        }\n\n        if (this.pointerState.shift) {\n            this.clearTextSelection();\n            this.restoreTextSelection();\n            this.addRangeMeta(node, this.pointerState);\n            emitter.emit(this.generateRange(node, this.pointerState));\n            return true;\n        }\n\n        this.add(node);\n        return false;\n    }\n\n    selectRange(node: ISelectionNode, state: SelectionState, collection: Map<number, Set<number>> = this.selection): void {\n        if (collection === this.temp) {\n            collection.clear();\n        }\n        const { rowStart, rowEnd, columnStart, columnEnd } = this.generateRange(node, state);\n        for (let i = rowStart; i <= rowEnd; i++) {\n            for (let j = columnStart as number; j <= columnEnd; j++) {\n                collection.has(i) ? collection.get(i).add(j) :\n                    collection.set(i, new Set<number>()).get(i).add(j);\n            }\n        }\n    }\n\n    dragSelect(node: ISelectionNode, state: SelectionState): void {\n        if (!this.pointerState.ctrl) {\n            this.selection.clear();\n        }\n        this.selectRange(node, state);\n    }\n\n    clear(clearAcriveEl = false): void {\n        if (clearAcriveEl) { this.activeElement = null; }\n        this.selection.clear();\n        this.temp.clear();\n        this._ranges.clear();\n    }\n\n    clearTextSelection(): void {\n        const selection = window.getSelection();\n        if (selection.rangeCount) {\n            this._selectionRange = selection.getRangeAt(0);\n            this._selectionRange.collapse(true);\n            selection.removeAllRanges();\n        }\n    }\n\n    restoreTextSelection(): void {\n        const selection = window.getSelection();\n        if (!selection.rangeCount) {\n            selection.addRange(this._selectionRange || document.createRange());\n        }\n    }\n\n    /**\n     * (â¯Â°â¡Â°ï¼â¯ï¸µ â»ââ»\n     * Chrome and Chromium don't care about the active\n     * range after keyboard navigation, thus this.\n     */\n    _moveSelectionChrome(node: Node) {\n        const selection = window.getSelection();\n        selection.removeAllRanges();\n        const range = new Range();\n        range.selectNode(node);\n        range.collapse(true);\n        selection.addRange(range);\n    }\n\n    /** Returns array of the selected row id's. */\n    getSelectedRows(): Array<any> {\n        return this.rowSelection.size ? Array.from(this.rowSelection.keys()) : [];\n    }\n\n    /** Clears row selection, if filtering is applied clears only selected rows from filtered data. */\n    clearRowSelection(event?): void {\n        const removedRec = this.isFilteringApplied() ?\n            this.getRowIDs(this.allData).filter(rID => this.isRowSelected(rID)) : this.getSelectedRows();\n        const newSelection = this.isFilteringApplied() ? this.getSelectedRows().filter(x => !removedRec.includes(x)) : [];\n        this.emitRowSelectionEvent(newSelection, [], removedRec, event);\n    }\n\n    /** Select all rows, if filtering is applied select only from filtered data. */\n    selectAllRows(event?) {\n        const allRowIDs = this.getRowIDs(this.allData);\n        const addedRows =  allRowIDs.filter((rID) => !this.isRowSelected(rID));\n        const newSelection = this.rowSelection.size ? this.getSelectedRows().concat(addedRows) : addedRows;\n\n        this.emitRowSelectionEvent(newSelection, addedRows, [], event);\n    }\n\n    /** Select the specified row and emit event. */\n    selectRowById(rowID, clearPrevSelection?, event?): void {\n        if (!this.grid.isRowSelectable || this.isRowDeleted(rowID)) { return; }\n        clearPrevSelection = !this.grid.isMultiRowSelectionEnabled || clearPrevSelection;\n\n        const newSelection = clearPrevSelection ? [rowID] : this.getSelectedRows().indexOf(rowID) !== -1 ?\n            this.getSelectedRows() : [...this.getSelectedRows(), rowID];\n        const removed = clearPrevSelection ? this.getSelectedRows() : [];\n        this.emitRowSelectionEvent(newSelection, [rowID], removed, event);\n    }\n\n    /** Deselect the specified row and emit event. */\n    deselectRow(rowID, event?): void {\n        if (!this.isRowSelected(rowID)) { return; }\n        const newSelection = this.getSelectedRows().filter(r => r !== rowID);\n        if (this.rowSelection.size && this.rowSelection.has(rowID)) {\n            this.emitRowSelectionEvent(newSelection, [], [rowID], event);\n        }\n    }\n\n    /** Select specified rows. No event is emitted. */\n    selectRowsWithNoEvent(rowIDs: any[], clearPrevSelection?): void {\n        if (clearPrevSelection) { this.rowSelection.clear(); }\n        rowIDs.forEach(rowID => { this.rowSelection.add(rowID); });\n        this.allRowsSelected = undefined;\n    }\n\n    /** Deselect specified rows. No event is emitted. */\n    deselectRowsWithNoEvent(rowIDs: any[]): void  {\n        rowIDs.forEach(rowID => this.rowSelection.delete(rowID));\n        this.allRowsSelected = undefined;\n    }\n\n    isRowSelected(rowID): boolean {\n        return this.rowSelection.size > 0 && this.rowSelection.has(rowID);\n    }\n\n    /** Select range from last selected row to the current specified row.*/\n    selectMultipleRows(rowID, rowData, event?): void  {\n        this.allRowsSelected = undefined;\n        if (!this.rowSelection.size || this.isRowDeleted(rowID)) {\n            this.selectRowById(rowID);\n            return;\n        }\n        const gridData = this.allData;\n        const lastRowID = this.getSelectedRows()[this.rowSelection.size - 1];\n        const currIndex = gridData.indexOf(this.getRowDataById(lastRowID));\n        const newIndex = gridData.indexOf(rowData);\n        const rows = gridData.slice(Math.min(currIndex, newIndex), Math.max(currIndex, newIndex) + 1);\n\n        const added = this.getRowIDs(rows).filter(rID => !this.isRowSelected(rID));\n        const newSelection = this.getSelectedRows().concat(added);\n\n        this.emitRowSelectionEvent(newSelection, added, [], event);\n    }\n\n    areAllRowSelected(): boolean {\n        if (!this.grid.data) { return false; }\n        if (this.allRowsSelected !== undefined) { return this.allRowsSelected; }\n\n        const dataItemsID = this.getRowIDs(this.allData);\n        return this.allRowsSelected = Math.min(this.rowSelection.size, dataItemsID.length) > 0 &&\n            new Set(Array.from(this.rowSelection.values()).concat(dataItemsID)).size === this.rowSelection.size;\n    }\n\n    hasSomeRowSelected(): boolean {\n        const filteredData = this.isFilteringApplied() ?\n            this.getRowIDs(this.grid.filteredData).some(rID => this.isRowSelected(rID)) : true;\n        return this.rowSelection.size > 0 && filteredData && !this.areAllRowSelected();\n    }\n\n    public get filteredSelectedRowIds(): any[] {\n        return this.isFilteringApplied() ?\n            this.getRowIDs(this.allData).filter(rowID => this.isRowSelected(rowID)) :\n            this.getSelectedRows().filter(rowID => !this.isRowDeleted(rowID));\n    }\n\n    public emitRowSelectionEvent(newSelection, added, removed, event?): boolean {\n        const currSelection = this.getSelectedRows();\n        if (this.areEqualCollections(currSelection, newSelection)) { return; }\n\n        const args = {\n            oldSelection: currSelection, newSelection: newSelection,\n            added: added, removed: removed, event: event, cancel: false\n        };\n        this.grid.onRowSelectionChange.emit(args);\n        if (args.cancel) { return; }\n        this.selectRowsWithNoEvent(args.newSelection, true);\n    }\n\n    public getRowDataById(rowID): Object {\n        if (!this.grid.primaryKey) { return rowID; }\n        const rowIndex = this.getRowIDs(this.grid.gridAPI.get_all_data(true)).indexOf(rowID);\n        return rowIndex < 0 ? {} : this.grid.gridAPI.get_all_data(true)[rowIndex];\n    }\n\n    public getRowIDs(data): Array<any> {\n        return this.grid.primaryKey && data.length ? data.map(rec => rec[this.grid.primaryKey]) : data;\n    }\n\n    public clearHeaderCBState(): void  {\n        this.allRowsSelected = undefined;\n    }\n\n    /**Clear rowSelection and update checkbox state*/\n    public clearAllSelectedRows(): void {\n        this.rowSelection.clear();\n        this.clearHeaderCBState();\n    }\n\n    /** Returns all data in the grid, with applied filtering and sorting and without deleted rows. */\n    public get allData(): Array<any> {\n        const allData = this.isFilteringApplied() || this.grid.sortingExpressions.length ?\n            this.grid.filteredSortedData : this.grid.gridAPI.get_all_data(true);\n        return allData.filter(rData => !this.isRowDeleted(this.grid.gridAPI.get_row_id(rData)));\n    }\n\n    private areEqualCollections(first, second): boolean {\n        return first.length === second.length && new Set(first.concat(second)).size === first.length;\n    }\n\n    private isFilteringApplied(): boolean {\n        const grid = this.grid as IgxGridBaseDirective;\n        return !FilteringExpressionsTree.empty(grid.filteringExpressionsTree) ||\n            !FilteringExpressionsTree.empty(grid.advancedFilteringExpressionsTree);\n    }\n\n    private isRowDeleted(rowID): boolean {\n        return this.grid.gridAPI.row_deleted_transaction(rowID);\n    }\n}\n\nexport function isChromium(): boolean {\n    return (/Chrom|e?ium/g.test(navigator.userAgent) || /Google Inc/g.test(navigator.vendor)) && !/Edge/g.test(navigator.userAgent);\n}\n","import { Inject, Injectable, NgZone } from '@angular/core';\nimport { ÉµgetDOM as getDOM } from '@angular/platform-browser';\nimport { DOCUMENT } from '@angular/common';\nimport { PlatformUtil } from './utils';\n\nconst EVENT_SUFFIX = 'precise';\n\n/**\n * Touch gestures manager based on Hammer.js\n * Use with caution, this will track references for single manager per element. Very TBD. Much TODO.\n * @hidden\n */\n@Injectable()\nexport class HammerGesturesManager {\n    private platformBrowser: boolean;\n    /**\n     * Event option defaults for each recognizer, see http://hammerjs.github.io/api/ for API listing.\n     */\n    protected hammerOptions: HammerOptions = {};\n\n    private _hammerManagers: Array<{ element: EventTarget, manager: HammerManager; }> = [];\n\n    constructor(private _zone: NgZone, @Inject(DOCUMENT) private doc: any, private platformUtil: PlatformUtil) {\n        this.platformBrowser = this.platformUtil.isBrowser;\n        if (this.platformBrowser) {\n            this.hammerOptions = {\n                // D.P. #447 Force TouchInput due to PointerEventInput bug (https://github.com/hammerjs/hammer.js/issues/1065)\n                // see https://github.com/IgniteUI/igniteui-angular/issues/447#issuecomment-324601803\n                inputClass: Hammer.TouchInput,\n                recognizers: [\n                    [Hammer.Pan, { threshold: 0 }],\n                    [Hammer.Swipe, {\n                        direction: Hammer.DIRECTION_HORIZONTAL\n                    }],\n                    [Hammer.Tap],\n                    [Hammer.Tap, { event: 'doubletap', taps: 2 }, ['tap']]\n                ]\n            };\n        }\n    }\n\n    public supports(eventName: string): boolean {\n        return eventName.toLowerCase().endsWith('.' + EVENT_SUFFIX);\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     */\n    public addEventListener(\n        element: HTMLElement,\n        eventName: string,\n        eventHandler: (eventObj) => void,\n        options: HammerOptions = null): () => void {\n        if (!this.platformBrowser) {\n            return;\n        }\n\n        // Creating the manager bind events, must be done outside of angular\n        return this._zone.runOutsideAngular(() => {\n            let mc: HammerManager = this.getManagerForElement(element);\n            if (mc === null) {\n                // new Hammer is a shortcut for Manager with defaults\n                mc = new Hammer(element, Object.assign(this.hammerOptions, options));\n                this.addManagerForElement(element, mc);\n            }\n            const handler = (eventObj) => { this._zone.run(() => { eventHandler(eventObj); }); };\n            mc.on(eventName, handler);\n            return () => { mc.off(eventName, handler); };\n        });\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     *\n     * @param target Can be one of either window, body or document(fallback default).\n     */\n    public addGlobalEventListener(target: string, eventName: string, eventHandler: (eventObj) => void): () => void {\n        if (!this.platformBrowser) {\n            return;\n        }\n\n        const element = this.getGlobalEventTarget(target);\n\n        // Creating the manager bind events, must be done outside of angular\n        return this.addEventListener(element as HTMLElement, eventName, eventHandler);\n    }\n\n    /**\n     * Exposes [Dom]Adapter.getGlobalEventTarget to get global event targets.\n     * Supported: window, document, body. Defaults to document for invalid args.\n     * @param target Target name\n     */\n    public getGlobalEventTarget(target: string): EventTarget {\n        return getDOM().getGlobalEventTarget(this.doc, target);\n    }\n\n    /**\n     * Set HammerManager options.\n     *\n     * @param element The DOM element used to create the manager on.\n     *\n     * ### Example\n     *\n     * ```ts\n     * manager.setManagerOption(myElem, \"pan\", { pointers: 1 });\n     * ```\n     */\n    public setManagerOption(element: EventTarget, event: string, options: any) {\n        const manager = this.getManagerForElement(element);\n        manager.get(event).set(options);\n    }\n\n    /**\n     * Add an element and manager map to the internal collection.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public addManagerForElement(element: EventTarget, manager: HammerManager) {\n        this._hammerManagers.push({element, manager});\n    }\n\n    /**\n     * Get HammerManager for the element or null\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public getManagerForElement(element: EventTarget): HammerManager {\n        const result =  this._hammerManagers.filter((value, index, array) => {\n            return value.element === element;\n        });\n        return result.length ? result[0].manager : null;\n    }\n\n    /**\n     * Destroys the HammerManager for the element, removing event listeners in the process.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public removeManagerForElement(element: HTMLElement) {\n        let index: number = null;\n        for (let i = 0; i < this._hammerManagers.length; i++) {\n            if (element === this._hammerManagers[i].element) {\n                index = i;\n                break;\n            }\n        }\n        if (index !== null) {\n            const item = this._hammerManagers.splice(index, 1)[0];\n            // destroy also\n            item.manager.destroy();\n        }\n    }\n\n    /** Destroys all internally tracked HammerManagers, removing event listeners in the process. */\n    public destroy() {\n        for (const item of this._hammerManagers) {\n            item.manager.destroy();\n        }\n        this._hammerManagers = [];\n    }\n}\n","\nexport enum FilterMode {\n    quickFilter = 'quickFilter',\n    excelStyleFilter = 'excelStyleFilter'\n}\n\nexport enum GridSummaryPosition {\n    top = 'top',\n    bottom = 'bottom'\n}\n\nexport enum GridSummaryCalculationMode {\n    rootLevelOnly = 'rootLevelOnly',\n    childLevelsOnly = 'childLevelsOnly',\n    rootAndChildLevels = 'rootAndChildLevels'\n}\n\nexport enum GridKeydownTargetType {\n    dataCell = 'dataCell',\n    summaryCell = 'summaryCell',\n    groupRow = 'groupRow',\n    hierarchicalRow = 'hierarchicalRow'\n}\n\nexport enum GridSelectionMode {\n    none = 'none',\n    single = 'single',\n    multiple = 'multiple',\n}\n\nexport enum ColumnDisplayOrder {\n    Alphabetical = 'Alphabetical',\n    DisplayOrder = 'DisplayOrder'\n}\n","ï»¿import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    TemplateRef,\n    ViewChild,\n    NgZone,\n    OnInit,\n    OnDestroy,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport { GridBaseAPIService } from './api.service';\nimport {\n    getNodeSizeViaRange, ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS, SUPPORTED_KEYS, NAVIGATION_KEYS, isIE, isLeftClick, PlatformUtil\n} from '../core/utils';\nimport { State } from '../services/index';\nimport { IgxGridBaseDirective } from './grid-base.directive';\nimport { IgxGridSelectionService, ISelectionNode, IgxGridCRUDService } from './selection/selection.service';\nimport { DeprecateProperty, DeprecateMethod } from '../core/deprecateDecorators';\nimport { HammerGesturesManager } from '../core/touch';\nimport { ColumnType } from './common/column.interface';\nimport { RowType } from './common/row.interface';\nimport { GridSelectionMode } from './common/enums';\nimport { GridType } from './common/grid.interface';\nimport { IgxGridComponent, ISearchInfo } from './grid';\n\n/**\n * Providing reference to `IgxGridCellComponent`:\n * ```typescript\n * @ViewChild('grid', { read: IgxGridComponent })\n *  public grid: IgxGridComponent;\n * ```\n * ```typescript\n *  let column = this.grid.columnList.first;\n * ```\n * ```typescript\n *  let cell = column.cells[0];\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-grid-cell',\n    templateUrl: './cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxGridCellComponent implements OnInit, OnChanges, OnDestroy {\n    private _vIndex = -1;\n    protected _lastSearchInfo: ISearchInfo;\n\n    /**\n     * Gets the column of the cell.\n     * ```typescript\n     *  let cellColumn = this.cell.column;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public column: ColumnType;\n\n    /**\n     * Gets the row of the cell.\n     * ```typescript\n     * let cellRow = this.cell.row;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public row: RowType;\n\n    /**\n     * Gets the data of the row of the cell.\n     * ```typescript\n     * let rowData = this.cell.rowData;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public rowData: any;\n\n    /**\n     * Sets/gets the template of the cell.\n     * ```html\n     * <ng-template #cellTemplate igxCell let-value>\n     *   <div style=\"font-style: oblique; color:blueviolet; background:red\">\n     *       <span>{{value}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild('cellTemplate',{read: TemplateRef})\n     * cellTemplate: TemplateRef<any>;\n     * ```\n     * ```typescript\n     * this.cell.cellTemplate = this.cellTemplate;\n     * ```\n     * ```typescript\n     * let template =  this.cell.cellTemplate;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public cellTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the cell value.\n     * ```typescript\n     * this.cell.value = \"Cell Value\";\n     * ```\n     * ```typescript\n     * let cellValue = this.cell.value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * Sets/gets the highlight class of the cell.\n     * Default value is `\"igx-highlight\"`.\n     * ```typescript\n     * let highlightClass = this.cell.highlightClass;\n     * ```\n     * ```typescript\n     * this.cell.highlightClass = 'igx-cell-highlight';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightClass = 'igx-highlight';\n\n    /**\n     * Sets/gets the active highlight class class of the cell.\n     * Default value is `\"igx-highlight__active\"`.\n     * ```typescript\n     * let activeHighlightClass = this.cell.activeHighlightClass;\n     * ```\n     * ```typescript\n     * this.cell.activeHighlightClass = 'igx-cell-highlight_active';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public activeHighlightClass = 'igx-highlight__active';\n\n    /**\n     * Gets the cell formatter.\n     * ```typescript\n     * let cellForamatter = this.cell.formatter;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    formatter: (value: any) => any;\n\n    /**\n     * Gets the cell template context object.\n     * ```typescript\n     *  let context = this.cell.context();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get context(): any {\n        return {\n            $implicit: this.value,\n            cell: this\n        };\n    }\n\n    /**\n     * Gets the cell template.\n     * ```typescript\n     * let template = this.cell.template;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.editMode) {\n            const inlineEditorTemplate = this.column.inlineEditorTemplate;\n            return inlineEditorTemplate ? inlineEditorTemplate : this.inlineEditorTemplate;\n        }\n        if (this.cellTemplate) {\n            return this.cellTemplate;\n        }\n        return this.defaultCellTemplate;\n    }\n\n    /**\n     * Gets the `id` of the grid in which the cell is stored.\n     * ```typescript\n     * let gridId = this.cell.gridID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get gridID(): any {\n        return this.row.gridID;\n    }\n\n    /**\n     * Gets the grid of the cell.\n     * ```typescript\n     * let grid = this.cell.grid;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets the `index` of the row where the cell is stored.\n     * ```typescript\n     * let rowIndex = this.cell.rowIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-rowIndex')\n    get rowIndex(): number {\n        return this.row.index;\n    }\n\n    /**\n     * Gets the `index` of the cell column.\n     * ```typescript\n     * let columnIndex = this.cell.columnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get columnIndex(): number {\n        return this.column.index;\n    }\n\n    /**\n     * Gets the visible `index` of the in which the cell is stored.\n     * ```typescript\n     * let visibleColumnIndex = this.cell.visibleColumnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-visibleIndex')\n    @Input()\n    get visibleColumnIndex() {\n        return this.column.columnLayoutChild ? this.column.visibleIndex : this._vIndex;\n    }\n\n    set visibleColumnIndex(val) {\n        this._vIndex = val;\n    }\n\n    /**\n     * Gets the ID of the cell.\n     * ```typescript\n     * let cellID = this.cell.cellID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get cellID() {\n        const primaryKey = this.grid.primaryKey;\n        const rowID = primaryKey ? this.rowData[primaryKey] : this.rowData;\n        return { rowID, columnID: this.columnIndex, rowIndex: this.rowIndex };\n    }\n\n    /**\n     * Returns a reference to the nativeElement of the cell.\n     * ```typescript\n     * let cellNativeElement = this.cell.nativeElement;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get nativeElement(): HTMLElement {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @deprecated\n     * Use `cell.editMode` as a getter and\n     * `cell.setEditMode(true | false)` to start/exit edit mode.\n     *\n     * Gets/sets whether the cell is in edit mode.\n     * ```typescript\n     * let isCellInEditMode = this.cell.inEditMode;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @DeprecateProperty(`'inEditMode' is deprecated\\nUse 'editMode' to get the current state and 'setEditMode(boolean)' as a setter`)\n    get inEditMode(): boolean {\n        return this.editMode;\n    }\n\n    set inEditMode(value: boolean) {\n        this.setEditMode(value);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    get cellSelectionMode() {\n        return this._cellSelection;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    set lastSearchInfo(value: ISearchInfo) {\n        this._lastSearchInfo = value;\n        this.highlightText(this._lastSearchInfo.searchText, this._lastSearchInfo.caseSensitive, this._lastSearchInfo.exactMatch);\n    }\n\n    set cellSelectionMode(value) {\n        if (this._cellSelection === value) { return; }\n         this.zone.runOutsideAngular(() => {\n            value === GridSelectionMode.multiple ?\n            this.addPointerListeners(value) : this.removePointerListeners(this._cellSelection);\n        });\n        this._cellSelection = value;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--pinned-last')\n    lastPinned = false;\n\n    /**\n     * Returns whether the cell is in edit mode.\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--editing')\n    editMode = false;\n\n    /**\n     * Sets/get the `tabindex` property of the cell.\n     * Default value is `0`.\n     * ```typescript\n     * this.cell.tabindex = 1;\n     * ```\n     * ```typescript\n     * let cellTabIndex = this.cell.tabindex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Sets/get the `role` property of the cell.\n     * Default value is `\"gridcell\"`.\n     * ```typescript\n     * this.cell.role = 'grid-cell';\n     * ```\n     * ```typescript\n     * let cellRole = this.cell.role;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'gridcell';\n\n    /**\n     * Gets whether the cell is editable.\n     * ```typescript\n     * let isCellReadonly = this.cell.readonly;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-readonly')\n    get readonly(): boolean {\n        return !this.column.editable;\n    }\n\n    get gridRowSpan(): number {\n        return this.column.gridRowSpan;\n    }\n\n    get gridColumnSpan(): number {\n        return this.column.gridColumnSpan;\n    }\n\n\n    get rowEnd(): number {\n        return this.column.rowEnd;\n    }\n\n    get colEnd(): number {\n        return this.column.colEnd;\n    }\n\n    get rowStart(): number {\n        return this.column.rowStart;\n    }\n\n    get colStart(): number {\n        return this.column.colStart;\n    }\n\n    /**\n     * Returns a string containing the grid `id` and the column `field` concatenated by \"_\".\n     * ```typescript\n     * let describedBy = this.cell.describedBy;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedby(): string {\n        return `${this.row.gridID}_${this.column.field}`;\n    }\n\n    /**\n     * Gets the width of the cell.\n     * ```typescript\n     * let cellWidth = this.cell.width;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    width = '';\n\n    /**\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isSelected = this.cell.selected;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-selected')\n    @HostBinding('class.igx-grid__td--selected')\n    get selected() {\n        return this.selectionService.selected(this.selectionNode);\n    }\n\n    /**\n     * Selects/deselects the cell.\n     * ```typescript\n     * this.cell.selected = true.\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    set selected(val: boolean) {\n        const node = this.selectionNode;\n        val ? this.selectionService.add(node) : this.selectionService.remove(node);\n        this.grid.notifyChanges();\n    }\n\n    @HostBinding('class.igx-grid__td--edited')\n    get dirty() {\n        if (this.grid.rowEditable) {\n            const rowCurrentState = this.grid.transactions.getAggregatedValue(this.row.rowID, false);\n            if (rowCurrentState) {\n                return rowCurrentState[this.column.field] !== undefined && rowCurrentState[this.column.field] !== null;\n            }\n        } else {\n            const rowTransaction: State = this.grid.transactions.getState(this.row.rowID);\n                return rowTransaction && rowTransaction.value &&\n                (rowTransaction.value[this.column.field] ||\n                 rowTransaction.value[this.column.field] === 0 ||\n                 rowTransaction.value[this.column.field] === false);\n        }\n\n        return false;\n    }\n\n    /**\n     * Sets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * this.cell.editValue = value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public set editValue(value) {\n        if (this.crudService.inEditMode) {\n            this.crudService.cell.editValue = value;\n        }\n    }\n\n    /**\n     * Gets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * let editValue = this.cell.editValue;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get editValue() {\n        if (this.crudService.inEditMode) {\n            return this.crudService.cell.editValue;\n        }\n    }\n\n    /**\n     * Returns whether the cell is editable.\n     */\n    get editable(): boolean {\n        return this.column.editable;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-grid__td--active')\n    public focused = false;\n\n    @ViewChild('defaultCell', { read: TemplateRef, static: true })\n    protected defaultCellTemplate: TemplateRef<any>;\n\n    @ViewChild('inlineEditor', { read: TemplateRef, static: true })\n    protected inlineEditorTemplate: TemplateRef<any>;\n\n    @ViewChild(IgxTextHighlightDirective, { read: IgxTextHighlightDirective })\n    protected set highlight(value: IgxTextHighlightDirective) {\n        this._highlight = value;\n\n        if (this._highlight && this.grid.lastSearchInfo.searchText) {\n            this._highlight.highlight(this.grid.lastSearchInfo.searchText,\n                this.grid.lastSearchInfo.caseSensitive,\n                this.grid.lastSearchInfo.exactMatch);\n            this._highlight.activateIfNecessary();\n        }\n    }\n\n    protected get highlight() {\n        return this._highlight;\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.rowIndex,\n            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,\n            layout: this.column.columnLayoutChild ? {\n                rowStart: this.column.rowStart,\n                colStart: this.column.colStart,\n                rowEnd: this.column.rowEnd,\n                colEnd: this.column.colEnd,\n                columnVisibleIndex: this.visibleColumnIndex\n            } : null\n            };\n    }\n\n    protected isInCompositionMode = false;\n    protected compositionStartHandler;\n    protected compositionEndHandler;\n    private _highlight: IgxTextHighlightDirective;\n    private _cellSelection = GridSelectionMode.multiple;\n\n\n    constructor(\n        protected selectionService: IgxGridSelectionService,\n        protected crudService: IgxGridCRUDService,\n        public gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n        public cdr: ChangeDetectorRef,\n        private element: ElementRef,\n        protected zone: NgZone,\n        private touchManager: HammerGesturesManager,\n        protected platformUtil: PlatformUtil) { }\n\n    private addPointerListeners(selection) {\n        if (selection !== GridSelectionMode.multiple) { return; }\n        this.nativeElement.addEventListener('pointerdown', this.pointerdown);\n        this.nativeElement.addEventListener('pointerenter', this.pointerenter);\n        this.nativeElement.addEventListener('pointerup', this.pointerup);\n    }\n\n    private  removePointerListeners(selection) {\n        if (selection !== GridSelectionMode.multiple) { return; }\n        this.nativeElement.removeEventListener('pointerdown', this.pointerdown);\n        this.nativeElement.removeEventListener('pointerenter', this.pointerenter);\n        this.nativeElement.removeEventListener('pointerup', this.pointerup);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            this.addPointerListeners(this.cellSelectionMode);\n            // IE 11 workarounds\n            if (isIE()) {\n                this.compositionStartHandler = () => this.isInCompositionMode = true;\n                this.compositionEndHandler = () => this.isInCompositionMode = false;\n                // Hitting Enter with IME submits and exits from edit mode instead of first closing the IME dialog\n                this.nativeElement.addEventListener('compositionstart', this.compositionStartHandler);\n                this.nativeElement.addEventListener('compositionend', this.compositionEndHandler);\n            }\n        });\n        if (this.platformUtil.isIOS) {\n            this.touchManager.addEventListener(this.nativeElement, 'doubletap', this.onDoubleClick, {\n                cssProps: { } /* don't disable user-select, etc */\n            } as HammerOptions);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.removePointerListeners(this.cellSelectionMode);\n            if (isIE()) {\n                this.nativeElement.removeEventListener('compositionstart', this.compositionStartHandler);\n                this.nativeElement.removeEventListener('compositionend', this.compositionEndHandler);\n            }\n        });\n        this.touchManager.destroy();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    _updateCRUDStatus() {\n        if (this.editMode) {\n            return;\n        }\n\n        const crud = this.crudService;\n        const editableCell = this.crudService.cell;\n        const editMode = !!(crud.row || crud.cell);\n\n        if (this.editable && editMode && !this.row.deleted) {\n            if (editableCell) {\n                this.gridAPI.update_cell(editableCell, editableCell.editValue);\n                /* This check is related with the following issue #6517:\n                 * when edit cell that belongs to a column which is sorted and press tab,\n                 * the next cell in edit mode is with wrong value /its context is not updated/;\n                 * So we reapply sorting before the next cell enters edit mode.\n                 * Also we need to keep the notifyChanges below, because of the current\n                 * change detection cycle when we have editing with enabled transactions\n                 */\n                if (this.grid.sortingExpressions.length && this.grid.sortingExpressions.indexOf(editableCell.column.field)) {\n                    this.grid.cdr.detectChanges();\n                }\n            }\n            crud.end();\n            this.grid.notifyChanges();\n            crud.begin(this);\n            return;\n        }\n\n        if (editableCell && crud.sameRow(this.cellID.rowID)) {\n            this.gridAPI.submit_value();\n        } else if (editMode && !crud.sameRow(this.cellID.rowID)) {\n            this.grid.endEdit(true);\n        }\n    }\n\n    /**\n     * @deprecated\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isCellSelected = thid.cell.isCellSelected();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @DeprecateMethod(`'isCellSelected' is deprecated. Use 'selected' property instead.`)\n    public isCellSelected() {\n        return this.selectionService.selected(this.selectionNode);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.value && !changes.value.firstChange) {\n            if (this.highlight) {\n                this.highlight.lastSearchInfo.searchedText = this.grid.lastSearchInfo.searchText;\n                this.highlight.lastSearchInfo.caseSensitive = this.grid.lastSearchInfo.caseSensitive;\n                this.highlight.lastSearchInfo.exactMatch = this.grid.lastSearchInfo.exactMatch;\n            }\n        }\n    }\n\n    /**\n     * Starts/ends edit mode for the cell.\n     *\n     * ```typescript\n     * cell.setEditMode(true);\n     * ```\n     */\n    setEditMode(value: boolean): void {\n        if (this.row.deleted) {\n            return;\n        }\n        if (this.editable && value) {\n            this.gridAPI.submit_value();\n            this.crudService.begin(this);\n        } else {\n            this.gridAPI.escape_editMode();\n        }\n        this.grid.notifyChanges();\n    }\n\n    /**\n     * Sets new value to the cell.\n     * ```typescript\n     * this.cell.update('New Value');\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    // TODO: Refactor\n    public update(val: any) {\n        if (this.row.deleted) {\n            return;\n        }\n        const cell = this.crudService.createCell(this);\n        const args = this.gridAPI.update_cell(cell, val);\n        if (this.crudService.cell && this.crudService.sameCell(cell)) {\n            if (args.cancel) {\n                return;\n            }\n            this.gridAPI.escape_editMode();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerdown = (event: PointerEvent) => {\n        if (!isLeftClick(event)) {\n            this.selectionService.addKeyboardRange();\n            this.selectionService.initKeyboardState();\n            this.selectionService.primaryButton = false;\n            return;\n        }\n        this.selectionService.pointerDown(this.selectionNode, event.shiftKey, event.ctrlKey);\n    }\n\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerenter = (event: PointerEvent) => {\n        const dragMode = this.selectionService.pointerEnter(this.selectionNode, event);\n        if (dragMode) {\n            this.grid.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    pointerup = (event: PointerEvent) => {\n        if (this.grid.hasColumnLayouts) {\n            this.grid.navigation.setStartNavigationCell(this.colStart, this.rowStart, null);\n        }\n        if (!isLeftClick(event)) { return; }\n        if (this.selectionService.pointerUp(this.selectionNode, this.grid.onRangeSelection)) {\n            this.grid.cdr.detectChanges();\n        }\n        this._updateCRUDStatus();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('dblclick', ['$event'])\n    public onDoubleClick = (event: MouseEvent | HammerInput) => {\n        if (event.type === 'doubletap') {\n            // prevent double-tap to zoom on iOS\n            (event as HammerInput).preventDefault();\n        }\n        if (this.editable && !this.editMode && !this.row.deleted) {\n            this.crudService.begin(this);\n        }\n\n        this.grid.onDoubleClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event: MouseEvent) {\n        this.grid.onCellClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('contextmenu', ['$event'])\n    public onContextMenu(event: MouseEvent) {\n        this.grid.onContextMenu.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event: FocusEvent) {\n        if (this.focused) {\n            return;\n        }\n        this.focused = true;\n        this.row.focused = true;\n        const node = this.selectionNode;\n        const shouldEmitSelection = !this.selectionService.isActiveNode(node);\n\n        if (this.selectionService.primaryButton) {\n            this._updateCRUDStatus();\n            this.selectionService.activeElement = node;\n        } else {\n            this.selectionService.activeElement = null;\n            if (this.crudService.inEditMode && !this.editMode) {\n                this.gridAPI.submit_value();\n            }\n        }\n\n        this.selectionService.primaryButton = true;\n        if (this.cellSelectionMode === GridSelectionMode.multiple && this.selectionService.activeElement) {\n            this.selectionService.add(this.selectionService.activeElement, false); // pointer events handle range generation\n            this.selectionService.keyboardStateOnFocus(node, this.grid.onRangeSelection, this.nativeElement);\n        }\n        if (this.grid.isCellSelectable && shouldEmitSelection) {\n            this.grid.onSelection.emit({ cell: this, event });\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.focused = false;\n        this.row.focused = false;\n    }\n\n    protected handleAlt(key: string, event: KeyboardEvent) {\n        if (this.isToggleKey(key)) {\n            const collapse = (this.row as any).expanded && ROW_COLLAPSE_KEYS.has(key);\n            const expand = !(this.row as any).expanded && ROW_EXPAND_KEYS.has(key);\n            if (expand) {\n                this.gridAPI.set_row_expansion_state(this.row.rowID, true, event);\n            } else if (collapse) {\n                this.gridAPI.set_row_expansion_state(this.row.rowID, false, event);\n            }\n            this.grid.notifyChanges();\n        }\n    }\n\n    protected handleTab(shift: boolean) {\n        if (shift) {\n            this.grid.navigation.performShiftTabKey(this.row.nativeElement, this.selectionNode);\n        } else {\n            this.grid.navigation.performTab(this.row.nativeElement, this.selectionNode);\n        }\n    }\n\n    protected handleEnd(ctrl: boolean) {\n        if (ctrl) {\n            this.grid.navigation.goToLastCell();\n        } else {\n            this.grid.navigation.onKeydownEnd(this.rowIndex, false, this.rowStart);\n        }\n    }\n\n    protected handleHome(ctrl: boolean) {\n        if (ctrl) {\n            this.grid.navigation.goToFirstCell();\n        } else {\n            this.grid.navigation.onKeydownHome(this.rowIndex, false, this.rowStart);\n        }\n    }\n\n    // TODO: Refactor\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        const shift = event.shiftKey;\n        const ctrl = event.ctrlKey;\n        const node = this.selectionNode;\n\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n\n        const keydownArgs = { targetType: 'dataCell', target: this, event: event, cancel: false };\n\n        // This fixes IME editing issue(#6335) that happens only on IE\n        if (isIE() && keydownArgs.event.keyCode === 229 && event.key === 'Tab') {\n            return;\n        }\n\n        this.grid.onGridKeydown.emit(keydownArgs);\n        if (keydownArgs.cancel) {\n            this.selectionService.clear();\n            this.selectionService.keyboardState.active = true;\n            return;\n        }\n\n        if (event.altKey) {\n            event.preventDefault();\n            this.handleAlt(key, event);\n            return;\n        }\n\n        this.selectionService.keyboardStateOnKeydown(node, shift, shift && key === 'tab');\n\n\n        if (key === 'tab') {\n            event.preventDefault();\n        }\n\n        if (this.editMode) {\n            if (NAVIGATION_KEYS.has(key)) {\n                if (this.column.inlineEditorTemplate) { return; }\n                if (['date', 'boolean'].indexOf(this.column.dataType) > -1) { return; }\n                return;\n            }\n        }\n\n        if (NAVIGATION_KEYS.has(key)) {\n            event.preventDefault();\n        }\n\n        switch (key) {\n            case 'tab':\n                this.handleTab(shift);\n                break;\n            case 'end':\n                this.handleEnd(ctrl);\n                break;\n            case 'home':\n                this.handleHome(ctrl);\n                break;\n            case 'arrowleft':\n            case 'left':\n                if (ctrl) {\n                    this.grid.navigation.onKeydownHome(node.row, false, this.rowStart);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, this.selectionNode);\n                break;\n            case 'arrowright':\n            case 'right':\n                if (ctrl) {\n                    this.grid.navigation.onKeydownEnd(node.row, false, this.rowStart);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowRight(this.nativeElement, this.selectionNode);\n                break;\n            case 'arrowup':\n            case 'up':\n                if (ctrl) {\n                    this.grid.navigation.navigateTop(this.visibleColumnIndex);\n                    break;\n                }\n                this.grid.navigation.navigateUp(this.row.nativeElement, this.selectionNode);\n                break;\n            case 'arrowdown':\n            case 'down':\n                if (ctrl) {\n                    this.grid.navigation.navigateBottom(this.visibleColumnIndex);\n                    break;\n                }\n                this.grid.navigation.navigateDown(this.row.nativeElement, this.selectionNode);\n                break;\n            case 'enter':\n            case 'f2':\n                this.onKeydownEnterEditMode();\n                break;\n            case 'escape':\n            case 'esc':\n                this.onKeydownExitEditMode();\n                break;\n            case ' ':\n            case 'spacebar':\n            case 'space':\n                if (this.grid.isRowSelectable) {\n                    this.row.selected ? this.selectionService.deselectRow(this.row.rowID, event) :\n                    this.selectionService.selectRowById(this.row.rowID, false, event);\n                }\n                break;\n            default:\n                return;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onKeydownEnterEditMode() {\n        if (this.isInCompositionMode) {\n            return;\n        }\n        if (this.column.editable && !this.row.deleted) {\n            if (this.editMode) {\n                this.grid.endEdit(true);\n                this.nativeElement.focus();\n            } else {\n                this.crudService.begin(this);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onKeydownExitEditMode() {\n        if (this.isInCompositionMode) {\n            return;\n        }\n\n        if (this.editMode) {\n            const args = this.crudService.cell.createEditEventArgs();\n            this.grid.onCellEditCancel.emit(args);\n            if (args.cancel) {\n                return;\n            }\n            this.grid.endEdit(false);\n            this.nativeElement.focus();\n        }\n    }\n\n    /**\n     * If the provided string matches the text in the cell, the text gets highlighted.\n     * ```typescript\n     * this.cell.highlightText('Cell Value', true);\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightText(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.highlight && this.column.searchable ? this.highlight.highlight(text, caseSensitive, exactMatch) : 0;\n    }\n\n    /**\n     * Clears the highlight of the text in the cell.\n     * ```typescript\n     * this.cell.clearHighLight();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public clearHighlight() {\n        if (this.highlight && this.column.searchable) {\n            this.highlight.clearHighlight();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public calculateSizeToFit(range: any): number {\n        return Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => getNodeSizeViaRange(range, child)));\n    }\n\n    private isToggleKey(key: string): boolean {\n        return ROW_COLLAPSE_KEYS.has(key) || ROW_EXPAND_KEYS.has(key);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { first, debounceTime } from 'rxjs/operators';\nimport { IgxColumnComponent } from './columns/column.component';\nimport { IgxGridGroupByRowComponent } from './grid/groupby-row.component';\nimport { ISelectionNode } from './selection/selection.service';\nimport { IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { GridType } from './common/grid.interface';\nimport { FilterMode } from './common/enums';\n\nenum MoveDirection {\n    LEFT = 'left',\n    RIGHT = 'right'\n}\n\n/** @hidden */\n@Injectable()\nexport class IgxGridNavigationService {\n    public grid: GridType;\n\n    get displayContainerWidth() {\n        return Math.round(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth);\n    }\n\n    get displayContainerScrollLeft() {\n        return Math.ceil(this.grid.headerContainer.scrollPosition);\n    }\n\n    get verticalDisplayContainerElement() {\n        return this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n    }\n\n    public horizontalScroll(rowIndex) {\n        let rowComp = this.grid.dataRowList.find((row) => row.index === rowIndex) || this.grid.dataRowList.first;\n        if (!rowComp) {\n            rowComp = this.grid.summariesRowList.find((row) => row.index === rowIndex);\n        }\n        return rowComp.virtDirRow;\n    }\n\n    public getColumnUnpinnedIndex(visibleColumnIndex: number) {\n        const column = this.grid.unpinnedColumns.find((col) => !col.columnGroup && col.visibleIndex === visibleColumnIndex);\n        return this.grid.pinnedColumns.length ? this.grid.unpinnedColumns.filter((c) => !c.columnGroup).indexOf(column) :\n            visibleColumnIndex;\n    }\n\n    public isColumnFullyVisible(columnIndex: number) {\n        return this.isColumnRightEdgeVisible(columnIndex) && this.isColumnLeftEdgeVisible(columnIndex);\n    }\n\n    public isColumnRightEdgeVisible(columnIndex: number) {\n        const forOfDir: IgxForOfDirective<any> = this.forOfDir();\n        if (this.isColumnPinned(columnIndex, forOfDir)) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(columnIndex);\n        return this.displayContainerWidth >= forOfDir.getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft;\n    }\n\n    public isColumnLeftEdgeVisible(columnIndex: number) {\n        const forOfDir = this.forOfDir();\n        if (this.isColumnPinned(columnIndex, forOfDir)) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(columnIndex);\n        return this.displayContainerScrollLeft <= forOfDir.getColumnScrollLeft(index);\n    }\n\n    private forOfDir(): IgxForOfDirective<any> {\n        let forOfDir: IgxForOfDirective<any>;\n        if (this.grid.dataRowList.length > 0) {\n            forOfDir = this.grid.dataRowList.first.virtDirRow;\n        } else {\n            forOfDir = this.grid.headerContainer;\n        }\n        return forOfDir;\n    }\n\n    private isColumnPinned(columnIndex: number, forOfDir: IgxForOfDirective<any>): boolean {\n        const horizontalScroll = forOfDir.getScroll();\n        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === columnIndex);\n        return (!horizontalScroll.clientWidth || column.pinned);\n    }\n\n    public get gridOrderedColumns(): IgxColumnComponent[] {\n        return [...this.grid.pinnedColumns, ...this.grid.unpinnedColumns].filter(c => !c.columnGroup);\n    }\n\n    public isRowInEditMode(rowIndex): boolean {\n        return this.grid.rowEditable && (this.grid.rowInEditMode && this.grid.rowInEditMode.index === rowIndex);\n    }\n\n    public findNextEditable(direction: string, visibleColumnIndex: number) {\n        // go trough all columns in one cycle instead of\n        // splice().reverse().find()\n        const gridColumns = this.gridOrderedColumns;\n        const start = visibleColumnIndex;\n        let end = 0;\n        let step = 0;\n        let result = -1;\n        if (direction === MoveDirection.LEFT) {\n            end = 0;\n            step = -1;\n        } else if (direction === MoveDirection.RIGHT) {\n            end = gridColumns.length - 1;\n            step = 1;\n        }\n        for (let c = start; (c * step) <= end; c += step) {\n            const column = gridColumns[c];\n            if (column.editable) {\n                result = c;\n                break;\n            }\n        }\n        return result;\n    }\n\n    public getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary = false) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        return this.grid.nativeElement.querySelector(\n            `${cellSelector}[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`) as HTMLElement;\n    }\n\n    public onKeydownArrowRight(element, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            return;\n        }\n        if (this.isColumnRightEdgeVisible(visibleColumnIndex + 1)) { // if next column is fully visible or is pinned\n            if (element.classList.contains('igx-grid__td--pinned-last') || element.classList.contains('igx-grid-summary--pinned-last')) {\n                if (this.isColumnLeftEdgeVisible(visibleColumnIndex + 1)) {\n                    element.nextElementSibling.firstElementChild.focus({ preventScroll: true });\n                } else {\n                    this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n                    this.grid.parentVirtDir.onChunkLoad\n                        .pipe(first())\n                        .subscribe(() => {\n                            element.nextElementSibling.firstElementChild.focus({ preventScroll: true });\n                        });\n                    this.horizontalScroll(rowIndex).scrollTo(0);\n                }\n            } else {\n                element.nextElementSibling.focus({ preventScroll: true });\n            }\n        } else {\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex + 1, isSummary);\n        }\n    }\n\n    public onKeydownArrowLeft(element, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (visibleColumnIndex === 0) {\n            return;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex - 1);\n        if (!element.previousElementSibling && this.grid.pinnedColumns.length && index === - 1) {\n            element.parentNode.previousElementSibling.focus({ preventScroll: true });\n        } else if (!this.isColumnLeftEdgeVisible(visibleColumnIndex - 1)) {\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex - 1, isSummary);\n        } else {\n            element.previousElementSibling.focus({ preventScroll: true });\n        }\n\n    }\n\n    public movePreviousEditable(rowIndex: number, currentColumnVisibleIndex: number) {\n        let prevEditableColumnIndex = this.findNextEditable(MoveDirection.LEFT, currentColumnVisibleIndex - 1);\n        if (prevEditableColumnIndex === -1) {\n            if (this.grid.rowEditTabs.length) {\n                //  TODO: make gridAPI visible for internal use and remove cast to any\n                (this.grid as any).gridAPI.submit_value();\n                this.grid.rowEditTabs.last.element.nativeElement.focus();\n                return;\n            } else {\n                // In case when row edit template is empty select last editable cell\n                prevEditableColumnIndex = this.grid.lastEditableColumnIndex;\n            }\n\n        }\n        this.focusEditableTarget(rowIndex, prevEditableColumnIndex);\n    }\n\n    public moveNextEditable(rowIndex: number, currentColumnVisibleIndex: number) {\n        let nextEditableColumnIndex = this.findNextEditable(MoveDirection.RIGHT, currentColumnVisibleIndex + 1);\n        if (nextEditableColumnIndex === -1) {\n            if ( this.grid.rowEditTabs.length) {\n                 //  TODO: make gridAPI visible for internal use and remove cast to any\n                (this.grid as any).gridAPI.submit_value();\n                this.grid.rowEditTabs.first.element.nativeElement.focus();\n                return;\n            } else {\n                // In case when row edit template is empty select first editable cell\n                nextEditableColumnIndex = this.grid.firstEditableColumnIndex;\n            }\n        }\n        this.focusEditableTarget(rowIndex, nextEditableColumnIndex);\n    }\n\n    public focusEditableTarget(rowIndex: number, columnIndex: number) {\n        if (this.isColumnFullyVisible(columnIndex)) {\n            this.getCellElementByVisibleIndex(rowIndex, columnIndex).focus();\n        } else {\n            this.performHorizontalScrollToCell(rowIndex, columnIndex);\n        }\n    }\n\n    public onKeydownHome(rowIndex, isSummary = false) {\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        const cellSelector = this.getCellSelector(0, isSummary);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n        let firstCell = rowElement.querySelector(cellSelector);\n        if (this.grid.pinnedColumns.length || this.displayContainerScrollLeft === 0) {\n            firstCell.focus({ preventScroll: true });\n        } else {\n            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    firstCell = rowElement.querySelector(cellSelector);\n                    firstCell.focus({ preventScroll: true });\n                });\n            this.horizontalScroll(rowIndex).scrollTo(0);\n        }\n    }\n\n    public onKeydownEnd(rowIndex, isSummary = false) {\n        const index = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex;\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n        if (this.isColumnRightEdgeVisible(index)) {\n            const allCells = rowElement.querySelectorAll(this.getCellSelector(-1, isSummary));\n            allCells[allCells.length - 1].focus({ preventScroll: true });\n        } else {\n            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const allCells = rowElement.querySelectorAll(this.getCellSelector(-1, isSummary));\n                    allCells[allCells.length - 1].focus({ preventScroll: true });\n                });\n            this.horizontalScroll(rowIndex).scrollTo(this.getColumnUnpinnedIndex(index));\n        }\n    }\n\n    public navigateTop(visibleColumnIndex) {\n        const targetIndex = this.findFirstDataRowIndex();\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        const targetScr = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, false);\n        if (targetScr >= verticalScroll.scrollTop) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            (cells[0] as HTMLElement).focus();\n        } else {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(targetIndex !== -1 ? targetIndex : 0);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(debounceTime(10)).pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) { (cells[0] as HTMLElement).focus(); }\n                });\n        }\n    }\n\n    private findFirstDataRowIndex() {\n        const dv = this.grid.dataView;\n        return dv.findIndex(rec => !this.grid.isGroupByRecord(rec) && !this.grid.isDetailRecord(rec));\n    }\n\n    private findLastDataRowIndex() {\n        let i = this.grid.dataView.length;\n        while (i--) {\n            const rec = this.grid.dataView[i];\n            if (!this.grid.isGroupByRecord(rec) && !this.grid.isDetailRecord(rec)) {\n                 return i;\n            }\n        }\n    }\n\n    public navigateBottom(visibleColumnIndex) {\n        const targetIndex = this.findLastDataRowIndex();\n        const targetScr = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === targetScr) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            (cells[cells.length - 1] as HTMLElement).focus();\n        } else {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(targetIndex !== -1 ? targetIndex : this.grid.dataView.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(debounceTime(10)).pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) {\n                        (cells[cells.length - 1] as HTMLElement).focus({preventScroll: true});\n                    }\n                });\n        }\n    }\n\n    public navigateUp(rowElement, selectedNode: ISelectionNode) {\n        const currentRowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        if (currentRowIndex === 0) {\n            return;\n        }\n        const containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);\n        if (!rowElement.previousElementSibling ||\n            rowElement.previousElementSibling.offsetTop < Math.abs(containerTopOffset)) {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(currentRowIndex - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const tag = rowElement.tagName.toLowerCase();\n                    rowElement = this.getRowByIndex(currentRowIndex, tag);\n                    this.focusPreviousElement(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusPreviousElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    protected focusPreviousElement(currentRowEl, visibleColumnIndex) {\n        this.focusElem(currentRowEl.previousElementSibling, visibleColumnIndex);\n    }\n\n    public navigateDown(rowElement, selectedNode: ISelectionNode) {\n        const currentRowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        if (currentRowIndex === this.grid.dataView.length - 1 ||\n            (currentRowIndex === 0 && rowElement.tagName.toLowerCase() === 'igx-grid-summary-row')) {\n            // check if this is rootSummary row\n            return;\n        }\n        const rowHeight = this.grid.verticalScrollContainer.getSizeAt(currentRowIndex + 1);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const targetEndTopOffset = rowElement.nextElementSibling ?\n            rowElement.nextElementSibling.offsetTop + rowHeight + parseInt(this.verticalDisplayContainerElement.style.top, 10) :\n            containerHeight + rowHeight;\n       this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n        if (containerHeight && containerHeight < targetEndTopOffset) {\n            const nextIndex = currentRowIndex + 1;\n            this.grid.verticalScrollContainer.scrollTo(nextIndex);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    rowElement = this.getNextRowByIndex(nextIndex);\n                    this.focusElem(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusNextElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    protected focusElem(rowElement, visibleColumnIndex) {\n        if (rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row' || rowElement.className === 'igx-grid__tr-container') {\n            rowElement.focus();\n        } else {\n            const isSummaryRow = rowElement.tagName.toLowerCase() === 'igx-grid-summary-row';\n            if (this.isColumnFullyVisible(visibleColumnIndex)) {\n                const cellSelector = this.getCellSelector(visibleColumnIndex, isSummaryRow);\n                const cell = rowElement.querySelector(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                cell.focus();\n                return cell;\n            }\n            this.performHorizontalScrollToCell(parseInt(\n                rowElement.getAttribute('data-rowindex'), 10), visibleColumnIndex, isSummaryRow);\n        }\n    }\n\n    protected focusNextElement(rowElement, visibleColumnIndex) {\n        return this.focusElem(rowElement.nextElementSibling, visibleColumnIndex);\n    }\n\n    public goToFirstCell() {\n        const targetIndex = this.findFirstDataRowIndex();\n        const targetScr = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, false);\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        if (verticalScroll.scrollTop === targetScr) {\n            this.onKeydownHome(this.grid.dataRowList.first.index);\n        } else {\n            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(targetIndex !== -1 ? targetIndex : 0);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    this.onKeydownHome(this.grid.dataRowList.first.index);\n                });\n        }\n    }\n\n    public goToLastCell() {\n        const targetIndex = this.findLastDataRowIndex();\n        const targetScr = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === targetScr) {\n            const rows = this.getAllRows();\n            const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n            this.onKeydownEnd(rowIndex);\n        } else {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(targetIndex !== -1 ? targetIndex : this.grid.dataView.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const rows = this.getAllRows();\n                    if (rows.length > 0) {\n                        const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n                        this.onKeydownEnd(rowIndex);\n                    }\n                });\n        }\n    }\n\n    public goToLastBodyElement() {\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const rowIndex = this.grid.dataView.length - 1;\n            const row = this.grid.nativeElement.querySelector(`[data-rowindex=\"${rowIndex}\"]`) as HTMLElement;\n            const isRowTarget = row.tagName.toLowerCase() === 'igx-grid-groupby-row' ||\n            this.grid.isDetailRecord(this.grid.dataView[rowIndex]);\n            if (row && isRowTarget) {\n                row.focus();\n                return;\n            }\n            const isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;\n            this.onKeydownEnd(rowIndex, isSummary);\n        } else {\n            this.grid.verticalScrollContainer.scrollTo(this.grid.dataView.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const rowIndex = this.grid.dataView.length - 1;\n                    const row = this.grid.nativeElement.querySelector(`[data-rowindex=\"${rowIndex}\"]`) as HTMLElement;\n                    const isRowTarget = row.tagName.toLowerCase() === 'igx-grid-groupby-row' ||\n                    this.grid.isDetailRecord(this.grid.dataView[rowIndex]);\n                    if (row && isRowTarget) {\n                        row.focus();\n                        return;\n                    }\n                    const isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;\n                    this.onKeydownEnd(rowIndex, isSummary);\n                });\n        }\n    }\n\n    public performTab(currentRowEl, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummaryRow = selectedNode.isSummaryRow;\n        const nextIsDetailRow = rowIndex + 1 <= this.grid.dataView.length - 1 ?\n         this.grid.isDetailRecord(this.grid.dataView[rowIndex + 1]) : false;\n        const isLastColumn = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex;\n        if (isSummaryRow && rowIndex === 0 &&\n            this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            return;\n        }\n\n        if (this.isRowInEditMode(rowIndex)) {\n            this.moveNextEditable(rowIndex, visibleColumnIndex);\n            return;\n        }\n\n        if (nextIsDetailRow && isLastColumn) {\n            this.navigateDown(currentRowEl, { row: rowIndex, column: visibleColumnIndex });\n            return;\n        }\n\n        if (isLastColumn) {\n            const rowEl = this.grid.rowList.find(row => row.index === rowIndex + 1) ?\n                this.grid.rowList.find(row => row.index === rowIndex + 1) :\n                this.grid.summariesRowList.find(row => row.index === rowIndex + 1);\n            if (rowIndex === this.grid.dataView.length - 1 && this.grid.rootSummariesEnabled) {\n                this.onKeydownHome(0, true);\n                return;\n            }\n            if (rowEl) {\n                this.navigateDown(currentRowEl, { row: rowIndex, column: 0 });\n            }\n        } else {\n            const cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummaryRow);\n            if (cell) {\n                this.onKeydownArrowRight(cell, selectedNode);\n            }\n        }\n    }\n\n    public moveFocusToFilterCell(toStart?: boolean) {\n        if (this.grid.filteringService.isFilterRowVisible) {\n            this.grid.filteringService.focusFilterRowCloseButton();\n            return;\n        }\n\n        const columns = this.grid.filteringService.unpinnedFilterableColumns;\n        const targetIndex = toStart ? 0 : columns.length - 1;\n        const visibleIndex = columns[targetIndex].visibleIndex;\n        const isVisible = toStart ? this.isColumnLeftEdgeVisible(visibleIndex) : this.isColumnRightEdgeVisible(visibleIndex);\n        if (isVisible) {\n            this.grid.filteringService.focusFilterCellChip(columns[targetIndex], false);\n        } else {\n            this.grid.filteringService.scrollToFilterCell(columns[targetIndex], false);\n        }\n    }\n\n    public navigatePrevFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const prevFilterableIndex = cols.indexOf(column) - 1;\n        const visibleIndex = column.visibleIndex;\n        if (visibleIndex === 0 || prevFilterableIndex < 0) {\n            // prev is not filter cell\n            const firstFiltarableCol = this.getFirstPinnedFilterableColumn();\n            if (!firstFiltarableCol || column === firstFiltarableCol) {\n                eventArgs.preventDefault();\n            }\n            return;\n        }\n        const prevColumn = cols[prevFilterableIndex];\n        const prevVisibleIndex = prevColumn.visibleIndex;\n\n        if (prevFilterableIndex >= 0 && visibleIndex > 0 && !this.isColumnLeftEdgeVisible(prevVisibleIndex) && !column.pinned) {\n            eventArgs.preventDefault();\n            this.grid.filteringService.scrollToFilterCell(prevColumn, false);\n        }\n    }\n\n    public navigateFirstCellIfPossible(eventArgs) {\n        if (this.grid.rowList.length > 0) {\n            if (this.grid.rowList.filter(row => row instanceof IgxGridGroupByRowComponent).length > 0) {\n                eventArgs.stopPropagation();\n                return;\n            }\n            this.goToFirstCell();\n        } else if (this.grid.rootSummariesEnabled) {\n            this.onKeydownHome(0, true);\n        }\n        eventArgs.preventDefault();\n    }\n\n    public navigateNextFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const nextFilterableIndex = cols.indexOf(column) + 1;\n        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {\n            // next is not filter cell\n            this.navigateFirstCellIfPossible(eventArgs);\n            return;\n        }\n        const nextColumn = cols[nextFilterableIndex];\n        const nextVisibleIndex = nextColumn.visibleIndex;\n        if (!column.pinned && !this.isColumnRightEdgeVisible(nextVisibleIndex)) {\n            eventArgs.preventDefault();\n            this.grid.filteringService.scrollToFilterCell(nextColumn, true);\n        } else if (column === this.getLastPinnedFilterableColumn() && !this.isColumnRightEdgeVisible(nextVisibleIndex)) {\n            this.grid.filteringService.scrollToFilterCell(nextColumn, false);\n            eventArgs.stopPropagation();\n        }\n    }\n\n    private getLastPinnedFilterableColumn(): IgxColumnComponent {\n        const pinnedFilterableColums =\n            this.grid.pinnedColumns.filter(col => !(col.columnGroup) && col.filterable);\n        return pinnedFilterableColums[pinnedFilterableColums.length - 1];\n    }\n\n    private getFirstPinnedFilterableColumn(): IgxColumnComponent {\n        return this.grid.pinnedColumns.filter(col => !(col.columnGroup) && col.filterable)[0];\n    }\n\n    public performShiftTabKey(currentRowEl, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (isSummary && rowIndex === 0 && visibleColumnIndex === 0 && this.grid.rowList.length) {\n            this.goToLastBodyElement();\n            return;\n        }\n\n        if (this.isRowInEditMode(rowIndex)) {\n            this.movePreviousEditable(rowIndex, visibleColumnIndex);\n            return;\n        }\n\n        const prevIsDetailRow = rowIndex > 0 ? this.grid.isDetailRecord(this.grid.dataView[rowIndex - 1]) : false;\n        if (visibleColumnIndex === 0 && prevIsDetailRow) {\n            let target = currentRowEl.previousElementSibling;\n            const applyFocusFunc = () => {\n                    target = this.getRowByIndex(rowIndex - 1, '');\n                    target.focus({ preventScroll: true });\n            };\n            if (target) {\n                applyFocusFunc();\n            } else {\n                this.performVerticalScrollToCell(rowIndex - 1, visibleColumnIndex, () => {\n                    applyFocusFunc();\n                });\n            }\n\n            return;\n        }\n\n        if (visibleColumnIndex === 0) {\n            if (rowIndex === 0 && this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                this.moveFocusToFilterCell();\n            } else {\n                this.navigateUp(currentRowEl,\n                    {\n                        row: rowIndex,\n                        column: this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex\n                    });\n            }\n        } else {\n            const cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary);\n            if (cell) {\n                this.onKeydownArrowLeft(cell, selectedNode);\n            }\n        }\n    }\n\n    public shouldPerformVerticalScroll(targetRowIndex: number, visibleColumnIndex: number): boolean {\n        const containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);\n        const targetRow = this.getRowByIndex(targetRowIndex, '') as any;\n        const rowHeight = this.grid.verticalScrollContainer.getSizeAt(targetRowIndex);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const targetEndTopOffset = targetRow ? targetRow.offsetTop + rowHeight + containerTopOffset :\n            containerHeight + rowHeight;\n        if (!targetRow || targetRow.offsetTop < Math.abs(containerTopOffset)\n            || containerHeight && containerHeight < targetEndTopOffset) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public performVerticalScrollToCell(rowIndex: number, visibleColIndex: number, cb?: () => void) {\n        this.grid.verticalScrollContainer.scrollTo(rowIndex);\n        this.grid.verticalScrollContainer.onChunkLoad\n            .pipe(first()).subscribe(() => {\n                cb();\n            });\n    }\n\n    public performHorizontalScrollToCell(\n        rowIndex: number, visibleColumnIndex: number, isSummary: boolean = false, cb?: () => void) {\n        const unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex);\n       this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n        this.grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(() => {\n                if (cb) {\n                    cb();\n                } else {\n                    const cellElement = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary);\n                    if (cellElement) {\n                        cellElement.focus({ preventScroll: true });\n                    }\n                }\n            });\n        this.horizontalScroll(rowIndex).scrollTo(unpinnedIndex);\n    }\n\n    protected getFocusableGrid() {\n        return this.grid;\n    }\n\n    protected getRowByIndex(index, selector = this.getRowSelector()) {\n        const gridTag = this.grid.nativeElement.tagName.toLocaleLowerCase();\n        const row = Array.from(this.grid.tbody.nativeElement.querySelectorAll(\n            `${selector}[data-rowindex=\"${index}\"]`))\n            .find(x => this.getClosestElemByTag(x, gridTag).getAttribute('id') === this.grid.id);\n            return row;\n        }\n\n    protected getNextRowByIndex(nextIndex) {\n        const gridTag = this.grid.nativeElement.tagName.toLocaleLowerCase();\n        const row = Array.from(this.grid.tbody.nativeElement.querySelectorAll(\n            `[data-rowindex=\"${nextIndex}\"]`)).find(x => this.getClosestElemByTag(x, gridTag).getAttribute('id') === this.grid.id);\n        return row;\n    }\n\n    private getAllRows() {\n        const selector = this.getRowSelector();\n        return this.grid.nativeElement.querySelectorAll(selector);\n    }\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false): string {\n        if (visibleIndex === 0 && this.grid.hasDetails && !isSummary) {\n            return 'igx-expandable-grid-cell';\n        }\n        return isSummary ? 'igx-grid-summary-cell' : 'igx-grid-cell';\n    }\n\n    protected getRowSelector(): string {\n        return 'igx-grid-row';\n    }\n\n    protected getClosestElemByTag(sourceElem, targetTag) {\n        let result = sourceElem;\n        while (result !== null && result.nodeType === 1) {\n            if (result.tagName.toLowerCase() === targetTag.toLowerCase()) {\n                return result;\n            }\n            result = result.parentNode;\n        }\n        return null;\n    }\n}\n","import {\n    ChangeDetectorRef,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n    Directive\n} from '@angular/core';\nimport { IgxCheckboxComponent } from '../checkbox/checkbox.component';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './columns/column.component';\nimport { TransactionType } from '../services';\nimport { IgxGridBaseDirective } from './grid-base.directive';\nimport { IgxGridSelectionService, IgxGridCRUDService, IgxRow } from './selection/selection.service';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { GridType } from './common/grid.interface';\n\n@Directive({\n    selector: '[igxRowBaseComponent]'\n})\nexport class IgxRowDirective<T extends IgxGridBaseDirective & GridType> implements DoCheck {\n\n    private _rowData: any;\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public get rowData(): any {\n        if (this.inEditMode) {\n            return Object.assign({}, this._rowData, this.grid.transactions.getAggregatedValue(this.rowID, false));\n        }\n        return this._rowData;\n    }\n\n    public set rowData(v: any) {\n        this._rowData = v;\n    }\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(forwardRef(() => IgxCheckboxComponent), { read: IgxCheckboxComponent })\n    public checkboxElement: IgxCheckboxComponent;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxGridCellComponent))\n    public cells: QueryList<IgxGridCellComponent>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return this.resolveClasses();\n    }\n\n    /**\n     * @hidden\n     */\n    @Input()\n    @HostBinding('attr.aria-selected')\n    get selected(): boolean {\n        return this.selectionService.isRowSelected(this.rowID);\n    }\n\n    set selected(value: boolean) {\n        value ? this.selectionService.selectRowsWithNoEvent([this.rowID]) :\n        this.selectionService.deselectRowsWithNoEvent([this.rowID]);\n        this.grid.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    get columns(): IgxColumnComponent[] {\n        return this.grid.visibleColumns;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get viewIndex(): number {\n        if ((this.grid as any).groupingExpressions.length) {\n            return this.grid.filteredSortedData.indexOf(this.rowData);\n        }\n        return this.index + this.grid.page * this.grid.perPage;\n    }\n\n    /**\n     * @hidden\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get showRowSelectors(): boolean {\n        return this.grid.showRowSelectors;\n    }\n\n    /** @hidden */\n    public get dirty(): boolean {\n        const row = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD || row.type === TransactionType.UPDATE;\n        }\n\n        return false;\n    }\n\n    @DeprecateProperty('isSelected property is deprecated. Use selected property instead.')\n    public get isSelected() {\n        return this.selectionService.isRowSelected(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowDraggable(): boolean {\n        return this.grid.rowDraggable;\n    }\n\n    /** @hidden */\n    public get added(): boolean {\n        const row = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD;\n        }\n\n         return false;\n    }\n\n    /** @hidden */\n    public get deleted(): boolean {\n        return this.gridAPI.row_deleted_transaction(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    public dragging = false;\n\n    // TODO: Refactor\n    public get inEditMode(): boolean {\n        if (this.grid.rowEditable) {\n            const editRowState = this.crudService.row;\n            return (editRowState && editRowState.id === this.rowID) || false;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    get grid(): T {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets the ID of the row.\n     * A row in the grid is identified either by:\n     * - primaryKey data value,\n     * - the whole rowData, if the primaryKey is omitted.\n     *\n     * ```typescript\n     * let rowID = this.grid.selectedRows[2].rowID;\n     * ```\n     */\n    public get rowID() {\n        const primaryKey = this.grid.primaryKey;\n        return primaryKey ? this._rowData[primaryKey] : this._rowData;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    public focused = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public defaultCssClass = 'igx-grid__tr';\n\n\n    constructor(\n        public gridAPI: GridBaseAPIService<T>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        public element: ElementRef<HTMLElement>,\n        public cdr: ChangeDetectorRef) {}\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event: MouseEvent) {\n        if (this.grid.rowSelection === 'none' || this.deleted) { return; }\n        if (event.shiftKey && this.grid.rowSelection === 'multiple') {\n            this.selectionService.selectMultipleRows(this.rowID, this.rowData, event);\n            return;\n        }\n        this.selectionService.selectRowById(this.rowID, !event.ctrlKey, event);\n    }\n\n    /**\n     * @hidden\n     */\n    public onRowSelectorClick(event) {\n        event.stopPropagation();\n        if (event.shiftKey && this.grid.rowSelection === 'multiple') {\n            this.selectionService.selectMultipleRows(this.rowID, this.rowData, event);\n            return;\n        }\n        this.selected ? this.selectionService.deselectRow(this.rowID, event) :\n        this.selectionService.selectRowById(this.rowID, false, event);\n    }\n\n    /**\n     * Updates the specified row object and the data source record with the passed value.\n     * This method emits `onEditDone` event.\n     *\n     * ```typescript\n     * // update the second selected row's value\n     * let newValue = \"Apple\";\n     * this.grid.selectedRows[1].update(newValue);\n     * ```\n     */\n    public update(value: any) {\n        const crudService = this.crudService;\n        if (crudService.inEditMode && crudService.cell.id.rowID === this.rowID) {\n            this.grid.endEdit(false);\n        }\n        const row = new IgxRow(this.rowID, this.index, this.rowData);\n        this.gridAPI.update_row(row, value);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Removes the specified row from the grid's data source.\n     * This method emits `onRowDeleted` event.\n     *\n     * ```typescript\n     * // delete the third selected row from the grid\n     * this.grid.selectedRows[2].delete();\n     * ```\n     */\n    public delete() {\n        this.grid.deleteRowById(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    get rowCheckboxAriaLabel() {\n        return this.grid.primaryKey ?\n            this.selected ? 'Deselect row with key ' + this.rowID : 'Select row with key ' + this.rowID :\n            this.selected ? 'Deselect row' : 'Select row';\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const indexClass = this.index % 2 ? this.grid.evenRowCSS : this.grid.oddRowCSS;\n        const selectedClass = this.selected ? 'igx-grid__tr--selected' : '';\n        const editClass = this.inEditMode ? 'igx-grid__tr--edit' : '';\n        const dirtyClass = this.dirty ? 'igx-grid__tr--edited' : '';\n        const deletedClass = this.deleted ? 'igx-grid__tr--deleted' : '';\n        const mrlClass = this.grid.hasColumnLayouts ? 'igx-grid__tr--mrl' : '';\n        const dragClass = this.dragging ? 'igx-grid__tr--drag' : '';\n        return `${this.defaultCssClass} ${indexClass} ${selectedClass} ${editClass} ${dirtyClass}\n         ${deletedClass} ${mrlClass} ${dragClass}`.trim();\n    }\n\n    /**\n     * @hidden\n     */\n    public get resolveDragIndicatorClasses(): string {\n        const defaultDragIndicatorCssClass = 'igx-grid__drag-indicator';\n        const dragIndicatorOff = this.grid.rowDragging && !this.dragging ? 'igx-grid__drag-indicator--off' : '';\n        return `${defaultDragIndicatorCssClass} ${dragIndicatorOff}`;\n    }\n}\n","export interface ISummaryExpression {\n    fieldName: string;\n    customSummary?: any;\n}\nexport interface IgxSummaryResult {\n    key: string;\n    label: string;\n    summaryResult: any;\n}\n\nexport interface ISummaryRecord {\n    summaries: Map<string, IgxSummaryResult[]>;\n    max?: number;\n    cellIndentation?: number;\n}\n\nconst clear = (el) => el === 0 || Boolean(el);\nconst first = (arr) => arr[0];\nconst last = (arr) => arr[arr.length - 1];\n\nexport class IgxSummaryOperand {\n    /**\n     * Counts all the records in the data source.\n     * If filtering is applied, counts only the filtered records.\n     * ```typescript\n     * IgxSummaryOperand.count(dataSource);\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public static count(data: any[]): number {\n        return data.length;\n    }\n    /**\n     * Executes the static `count` method and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomSummary extends IgxSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data: any[], allData: any[], fieldName: string): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"test\",\n     *       label: \"Test\",\n     *       summaryResult: IgxSummaryOperand.count(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomSummary;\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public operate(data: any[] = [], allData: any[] = [], fieldName?: string): IgxSummaryResult[] {\n        return [{\n            key: 'count',\n            label: 'Count',\n            summaryResult: IgxSummaryOperand.count(data)\n        }];\n    }\n}\n\n// @dynamic\nexport class IgxNumberSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the minimum numeric value in the provided data records.\n     * If filtering is applied, returns the minimum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.min(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static min(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => Math.min(a, b)) : 0;\n    }\n    /**\n     * Returns the maximum numeric value in the provided data records.\n     * If filtering is applied, returns the maximum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.max(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static max(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => Math.max(a, b)) : 0;\n    }\n    /**\n     * Returns the sum of the numeric values in the provided data records.\n     * If filtering is applied, returns the sum of the numeric values in the data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.sum(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static sum(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => +a + +b) : 0;\n    }\n    /**\n     * Returns the average numeric value in the data provided data records.\n     * If filtering is applied, returns the average numeric value in the filtered data records.\n     * ```typescript\n     * IgxSummaryOperand.average(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static average(data: any[]): number {\n        return data.length && data.filter(clear).length ? this.sum(data) / this.count(data) : 0;\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomNumberSummary extends IgxNumberSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data: any[], allData: any[], fieldName: string): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"avg\",\n     *       label: \"Avg\",\n     *       summaryResult: IgxNumberSummaryOperand.average(data)\n     *     });\n     *     result.push({\n     *       key: \"max\",\n     *       label: \"Max\",\n     *       summaryResult: IgxNumberSummaryOperand.max(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomNumberSummary;\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public operate(data: any[] = [], allData: any[] = [], fieldName?: string): IgxSummaryResult[] {\n        const result = super.operate(data, allData, fieldName);\n        result.push({\n            key: 'min',\n            label: 'Min',\n            summaryResult: IgxNumberSummaryOperand.min(data)\n        });\n        result.push({\n            key: 'max',\n            label: 'Max',\n            summaryResult: IgxNumberSummaryOperand.max(data)\n        });\n        result.push({\n            key: 'sum',\n            label: 'Sum',\n            summaryResult: IgxNumberSummaryOperand.sum(data)\n        });\n        result.push({\n            key: 'average',\n            label: 'Avg',\n            summaryResult: IgxNumberSummaryOperand.average(data)\n        });\n        return result;\n    }\n}\n\n// @dynamic\nexport class IgxDateSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the latest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.latest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static latest(data: any[]) {\n        return data.length && data.filter(clear).length ?\n            first(data.filter(clear).sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())) : undefined;\n    }\n    /**\n     * Returns the earliest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.earliest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static earliest(data: any[]) {\n        return data.length && data.filter(clear).length ?\n            last(data.filter(clear).sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())) : undefined;\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomDateSummary extends IgxDateSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data: any[], allData: any[], fieldName: string): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"latest\",\n     *       label: \"Latest Date\",\n     *       summaryResult: IgxDateSummaryOperand.latest(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomDateSummary;\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public operate(data: any[] = [], allData: any[] = [], fieldName?: string): IgxSummaryResult[] {\n        const result = super.operate(data, allData, fieldName);\n        result.push({\n            key: 'earliest',\n            label: 'Earliest',\n            summaryResult: IgxDateSummaryOperand.earliest(data)\n        });\n        result.push({\n            key: 'latest',\n            label: 'Latest',\n            summaryResult: IgxDateSummaryOperand.latest(data)\n        });\n        return result;\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n@Directive({\n    selector: '[igxFilterCellTemplate]'\n})\nexport class IgxFilterCellTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxCell]'\n})\nexport class IgxCellTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxHeader]'\n})\nexport class IgxCellHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxFooter]'\n})\nexport class IgxCellFooterTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxCellEditor]'\n})\nexport class IgxCellEditorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxCollapsibleIndicator]'\n})\nexport class IgxCollapsibleIndicatorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Input,\n    QueryList,\n    TemplateRef,\n    Output,\n    EventEmitter,\n} from '@angular/core';\nimport { notifyChanges } from '../watch-changes';\nimport { WatchColumnChanges } from '../watch-changes';\nimport { IgxRowIslandAPIService } from '../hierarchical-grid/row-island-api.service';\nimport { DataType } from '../../data-operations/data-util';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\nimport {\n    IgxFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand,\n    IgxStringFilteringOperand\n} from '../../data-operations/filtering-condition';\nimport { ISortingStrategy, DefaultSortingStrategy } from '../../data-operations/sorting-strategy';\nimport { DisplayDensity } from '../../core/displayDensity';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxGridCellComponent } from '../cell.component';\nimport { IgxRowDirective } from '../row.directive';\nimport { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { GridBaseAPIService } from '../api.service';\nimport { GridType } from '../common/grid.interface';\nimport { IgxGridHeaderComponent } from '../headers/grid-header.component';\nimport { IgxGridFilteringCellComponent } from '../filtering/base/grid-filtering-cell.component';\nimport { IgxGridHeaderGroupComponent } from '../headers/grid-header-group.component';\nimport { getNodeSizeViaRange } from '../../core/utils';\nimport { IgxSummaryOperand, IgxNumberSummaryOperand, IgxDateSummaryOperand } from '../summaries/grid-summary';\nimport {\n    IgxCellTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellEditorTemplateDirective,\n    IgxCollapsibleIndicatorTemplateDirective,\n    IgxFilterCellTemplateDirective\n} from './templates.directive';\nimport { MRLResizeColumnInfo, MRLColumnSizeInfo } from './interfaces';\n\n/**\n * **Ignite UI for Angular Column** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html#columns-configuration)\n *\n * The Ignite UI Column is used within an `igx-grid` element to define what data the column will show. Features such as sorting,\n * filtering & editing are enabled at the column level.  You can also provide a template containing custom content inside\n * the column using `ng-template` which will be used for all cells within the column.\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-column',\n    template: ``\n})\nexport class IgxColumnComponent implements AfterContentInit {\n    /**\n     * Sets/gets the `field` value.\n     * ```typescript\n     * let columnField = this.column.field;\n     * ```\n     * ```html\n     * <igx-column [field] = \"'ID'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public field: string;\n    /**\n     * Sets/gets the `header` value.\n     * ```typescript\n     * let columnHeader = this.column.header;\n     * ```\n     * ```html\n     * <igx-column [header] = \"'ID'\"></igx-column>\n     * ```\n     *\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public header = '';\n    /**\n     * Sets/gets whether the column is sortable.\n     * Default value is `false`.\n     * ```typescript\n     * let isSortable = this.column.sortable;\n     * ```\n     * ```html\n     * <igx-column [sortable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public sortable = false;\n    /**\n     * Sets/gets whether the column is groupable.\n     * Default value is `false`.\n     * ```typescript\n     * let isGroupable = this.column.groupable;\n     * ```\n     * ```html\n     * <igx-column [groupable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    groupable = false;\n    /**\n     * Gets whether the column is editable.\n     * Default value is `false`.\n     * ```typescript\n     * let isEditable = this.column.editable;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    get editable(): boolean {\n        // Updating the primary key when grid has transactions (incl. row edit)\n        // should not be allowed, as that can corrupt transaction state.\n        const rowEditable = this.grid && this.grid.rowEditable;\n        const hasTransactions = this.grid && this.grid.transactions.enabled;\n\n        if (this.isPrimaryColumn && (rowEditable || hasTransactions)) {\n            return false;\n        }\n\n        if (this._editable !== undefined) {\n            return this._editable;\n        } else {\n            return rowEditable;\n        }\n    }\n    /**\n     * Sets whether the column is editable.\n     * ```typescript\n     * this.column.editable = true;\n     * ```\n     * ```html\n     * <igx-column [editable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set editable(editable: boolean) {\n        this._editable = editable;\n    }\n    /**\n     * Sets/gets whether the column is filterable.\n     * Default value is `true`.\n     * ```typescript\n     * let isFilterable = this.column.filterable;\n     * ```\n     * ```html\n     * <igx-column [filterable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public filterable = true;\n    /**\n     * Sets/gets whether the column is resizable.\n     * Default value is `false`.\n     * ```typescript\n     * let isResizable = this.column.resizable;\n     * ```\n     * ```html\n     * <igx-column [resizable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public resizable = false;\n    /**\n     * Gets a value indicating whether the summary for the column is enabled.\n     * ```typescript\n     * let hasSummary = this.column.hasSummary;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    get hasSummary() {\n        return this._hasSummary;\n    }\n    /**\n     * Sets a value indicating whether the summary for the column is enabled.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [hasSummary] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hasSummary(value) {\n        this._hasSummary = value;\n\n        if (this.grid) {\n            this.grid.summaryService.resetSummaryHeight();\n        }\n    }\n    /**\n     * Gets whether the column is hidden.\n     * ```typescript\n     * let isHidden = this.column.hidden;\n     * ```\n     *@memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    get hidden(): boolean {\n        return this._hidden;\n    }\n    /**\n     * Sets the column hidden property.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-column [(hidden)] = \"model.isHidden\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hidden(value: boolean) {\n        if (this._hidden !== value) {\n            this._hidden = value;\n            this.hiddenChange.emit(this._hidden);\n            if (this.columnLayoutChild && this.parent.hidden !== value) {\n                this.parent.hidden = value;\n                return;\n            }\n            if (this.grid) {\n                this.grid.endEdit(false);\n                this.grid.summaryService.resetSummaryHeight();\n                this.grid.filteringService.refreshExpressions();\n                this.grid.notifyChanges();\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public hiddenChange = new EventEmitter<boolean>();\n\n    /** @hidden */\n    @Output()\n    public expandedChange = new EventEmitter<boolean>();\n\n    /** @hidden */\n    @Output()\n    public collapsibleChange = new EventEmitter<boolean>();\n    /** @hidden */\n    @Output()\n    public visibleWhenCollapsedChange = new EventEmitter<boolean>();\n\n    /**\n     * Gets whether the hiding is disabled.\n     * ```typescript\n     * let isHidingDisabled =  this.column.disableHiding;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    disableHiding = false;\n    /**\n     * Gets whether the pinning is disabled.\n     * ```typescript\n     * let isPinningDisabled =  this.column.disablePinning;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    disablePinning = false;\n    /**\n     * Sets/gets whether the column is movable.\n     * Default value is `false`.\n     * ```typescript\n     * let isMovable = this.column.movable;\n     * ```\n     * ```html\n     * <igx-column [movable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @notifyChanges()\n    @Input()\n    public movable = false;\n    /**\n     * Gets the `width` of the column.\n     * ```typescript\n     * let columnWidth = this.column.width;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    public get width(): string {\n        return this.widthSetByUser ? this._width : this.defaultWidth;\n    }\n    /**\n     * Sets the `width` of the column.\n     * ```html\n     * <igx-column [width] = \"'25%'\"></igx-column>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-column [(width)]=\"model.columns[0].width\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set width(value: string) {\n        if (value) {\n            this._calcWidth = null;\n            this.calcPixelWidth = NaN;\n            this.widthSetByUser = true;\n            // width could be passed as number from the template\n            // host bindings are not px affixed so we need to ensure we affix simple number strings\n            if (typeof(value) === 'number' || value.match(/^[0-9]*$/)) {\n                value = value + 'px';\n            }\n            this._width = value;\n            if (this.grid) {\n                this.cacheCalcWidth();\n            }\n            this.widthChange.emit(this._width);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public widthChange = new EventEmitter<string>();\n\n    /**\n     * @hidden\n     */\n    public get calcWidth(): any {\n        return this.getCalcWidth();\n    }\n\n    private _calcWidth = null;\n    public calcPixelWidth: number;\n\n    /**\n     * Sets/gets the maximum `width` of the column.\n     * ```typescript\n     * let columnMaxWidth = this.column.width;\n     * ```\n     * ```html\n     * <igx-column [maxWidth] = \"'75%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public maxWidth: string;\n    /**\n     * Sets/gets the minimum `width` of the column.\n     * Default value is `88`;\n     * ```typescript\n     * let columnMinWidth = this.column.minWidth;\n     * ```\n     * ```html\n     * <igx-column [minWidth] = \"'15%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public set minWidth(value: string) {\n        const minVal = parseFloat(value);\n        if (Number.isNaN(minVal)) { return; }\n        this._defaultMinWidth = value;\n\n    }\n    public get minWidth(): string {\n        return !this._defaultMinWidth ? this.defaultMinWidth : this._defaultMinWidth;\n    }\n    /**\n     * Sets/gets the class selector of the column header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerClasses;\n     * ```\n     * ```html\n     * <igx-column [headerClasses] = \"'column-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public headerClasses = '';\n\n    /**\n     * Sets/gets the class selector of the column group header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerGroupClasses;\n     * ```\n     * ```html\n     * <igx-column [headerGroupClasses] = \"'column-group-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public headerGroupClasses = '';\n    /**\n     * Sets a conditional class selector of the column cells.\n     * Accepts an object literal, containing key-value pairs,\n     * where the key is the name of the CSS class, while the\n     * value is either a callback function that returns a boolean,\n     * or boolean, like so:\n     * ```typescript\n     * callback = (rowData, columnKey, cellValue, rowIndex) => { return rowData[columnKey] > 6; }\n     * cellClasses = { 'className' : this.callback };\n     * ```\n     * ```html\n     * <igx-column [cellClasses] = \"cellClasses\"></igx-column>\n     * <igx-column [cellClasses] = \"{'class1' : true }\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public cellClasses: any;\n\n    /**\n     * Sets conditional style properties on the column cells.\n     * Similar to `ngStyle` it accepts an object literal where the keys are\n     * the style properties and the value is the expression to be evaluated.\n     * As with `cellClasses` it accepts a callback function.\n     * ```typescript\n     * styles = {\n     *  background: 'royalblue',\n     *  color: (rowData, columnKey, cellValue, rowIndex) => value.startsWith('Important') : 'red': 'inherit'\n     * }\n     * ```\n     * ```html\n     * <igx-column [cellStyles]=\"styles\"></igx-column>\n     * ```\n     *\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    cellStyles = null;\n    /**\n     * Gets the column index.\n     * ```typescript\n     * let columnIndex = this.column.index;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get index(): number {\n        return this.grid.columns.indexOf(this);\n    }\n    /**\n     * When autogenerating columns, the formatter is used to format the display of the column data\n     * without modifying the underlying bound values.\n     *\n     * In this example, we check to see if the column name is Salary, and then provide a method as the column formatter\n     * to format the value into a currency string.\n     *\n     * ```typescript\n     * onColumnInit(column: IgxColumnComponent) {\n     *   if (column.field == \"Salary\") {\n     *     column.formatter = (salary => this.format(salary));\n     *   }\n     * }\n     *\n     * format(value: number) : string {\n     *   return formatCurrency(value, \"en-us\", \"$\");\n     * }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    formatter: (value: any) => any;\n    /**\n     * Sets/gets whether the column filtering should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let filteringIgnoreCase = this.column.filteringIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [filteringIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public filteringIgnoreCase = true;\n    /**\n     * Sets/gets whether the column sorting should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let sortingIgnoreCase = this.column.sortingIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [sortingIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public sortingIgnoreCase = true;\n    /**\n     * Sets/gets the data type of the column values.\n     * Default value is `string`.\n     * ```typescript\n     * let columnDataType = this.column.dataType;\n     * ```\n     * ```html\n     * <igx-column [dataType] = \"'number'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public dataType: DataType = DataType.String;\n    /**\n     * Gets whether the column is `pinned`.\n     * ```typescript\n     * let isPinned = this.column.pinned;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public get pinned(): boolean {\n        return this._pinned;\n    }\n    /**\n     * Sets whether the column is pinned.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [pinned] = \"true\"></igx-column>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-column [(pinned)] = \"model.columns[0].isPinned\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set pinned(value: boolean) {\n        if (this._pinned !== value) {\n            if (this.grid && this.width && !isNaN(parseInt(this.width, 10))) {\n                value ? this.pin() : this.unpin();\n                return;\n            }\n            /* No grid/width available at initialization. `initPinning` in the grid\n               will re-init the group (if present)\n            */\n            this._unpinnedIndex = this.grid ? this.grid.columns.filter(x => !x.pinned).indexOf(this) : 0;\n            this._pinned = value;\n            this.pinnedChange.emit(this._pinned);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public pinnedChange = new EventEmitter<boolean>();\n\n    /**\n     * @deprecated\n     * Gets/Sets the `id` of the `igx-grid`.\n     * ```typescript\n     * let columnGridId = this.column.gridID;\n     * ```\n     * ```typescript\n     * this.column.gridID = 'grid-1';\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @DeprecateProperty(`The property is deprecated. Please, use \\`column.grid.id\\` instead.`)\n    public gridID: string;\n    /**\n     * Gets the column `summaries`.\n     * ```typescript\n     * let columnSummaries = this.column.summaries;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column `summaries`.\n     * ```typescript\n     * this.column.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set summaries(classRef: any) {\n        this._summaries = new classRef();\n\n        if (this.grid) {\n            this.grid.summaryService.removeSummariesCachePerColumn(this.field);\n            (this.grid as any)._summaryPipeTrigger++;\n            this.grid.summaryService.resetSummaryHeight();\n        }\n    }\n    /**\n     * Sets/gets whether the column is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.column.searchable';\n     * ```\n     * ```html\n     *  <igx-column [searchable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column `filters`.\n     * ```typescript\n     * let columnFilters = this.column.filters'\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get filters(): IgxFilteringOperand {\n        return this._filters;\n    }\n    /**\n     * Sets the column `filters`.\n     * ```typescript\n     * this.column.filters = IgxBooleanFilteringOperand.instance().\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set filters(instance: IgxFilteringOperand) {\n        this._filters = instance;\n    }\n    /**\n     * Gets the column `sortStrategy`.\n     * ```typescript\n     * let sortStrategy = this.column.sortStrategy\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get sortStrategy(): ISortingStrategy {\n        return this._sortStrategy;\n    }\n    /**\n     * Sets the column `sortStrategy`.\n     * ```typescript\n     * this.column.sortStrategy = new CustomSortingStrategy().\n     * class CustomSortingStrategy extends SortingStrategy {...}\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set sortStrategy(classRef: ISortingStrategy) {\n        this._sortStrategy = classRef;\n    }\n    /**\n    * Gets the function that compares values for grouping.\n    * ```typescript\n    * let groupingComparer = this.column.groupingComparer'\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    @Input()\n    public get groupingComparer(): (a: any, b: any) => number {\n        return this._groupingComparer;\n    }\n    /**\n     * Sets a custom function to compare values for grouping.\n     * Subsequent values in the sorted data that the function returns 0 for are grouped.\n     * ```typescript\n     * this.column.groupingComparer = (a: any, b: any) => { return a === b ? 0 : -1; }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set groupingComparer(funcRef: (a: any, b: any) => number) {\n        this._groupingComparer = funcRef;\n    }\n    /**\n     * Gets the default minimum `width` of the column.\n     * ```typescript\n     * let defaultMinWidth =  this.column.defaultMinWidth;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get defaultMinWidth(): string {\n        if (!this.grid) { return '80'; }\n        switch (this.grid.displayDensity) {\n            case DisplayDensity.cosy:\n                return '64';\n            case DisplayDensity.compact:\n                return '56';\n            default:\n                return '80';\n        }\n    }\n    /**\n     * The reference to the `igx-grid` owner.\n     * ```typescript\n     * let gridComponent = this.column.grid;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public get grid(): IgxGridBaseDirective {\n        return this.gridAPI.grid;\n    }\n    /**\n     * Returns a reference to the `bodyTemplate`.\n     * ```typescript\n     * let bodyTemplate = this.column.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input('cellTemplate')\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * Sets the body template.\n     * ```html\n     * <ng-template #bodyTemplate igxCell let-val>\n     *    <div style = \"background-color: yellowgreen\" (click) = \"changeColor(val)\">\n     *       <span> {{val}} </span>\n     *    </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'bodyTemplate'\", {read: TemplateRef })\n     * public bodyTemplate: TemplateRef<any>;\n     * this.column.bodyTemplate = this.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set bodyTemplate(template: TemplateRef<any>) {\n        this._bodyTemplate = template;\n    }\n    /**\n     * Returns a reference to the header template.\n     * ```typescript\n     * let headerTemplate = this.column.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    get headerTemplate(): TemplateRef<any> {\n        return this._headerTemplate;\n    }\n    /**\n     * Sets the header template.\n     * Note that the column header height is fixed and any content bigger than it will be cut off.\n     * ```html\n     * <ng-template #headerTemplate>\n     *   <div style = \"background-color:black\" (click) = \"changeColor(val)\">\n     *       <span style=\"color:red\" >{{column.field}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'headerTemplate'\", {read: TemplateRef })\n     * public headerTemplate: TemplateRef<any>;\n     * this.column.headerTemplate = this.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set headerTemplate(template: TemplateRef<any>) {\n        this._headerTemplate = template;\n    }\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.column.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input('cellEditorTemplate')\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * Sets the inline editor template.\n     * ```html\n     * <ng-template #inlineEditorTemplate igxCellEditor let-cell=\"cell\">\n     *     <input type=\"string\" [(ngModel)]=\"cell.value\"/>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'inlineEditorTemplate'\", {read: TemplateRef })\n     * public inlineEditorTemplate: TemplateRef<any>;\n     * this.column.inlineEditorTemplate = this.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) {\n        this._inlineEditorTemplate = template;\n    }\n    /**\n     * Returns a reference to the `filterCellTemplate`.\n     * ```typescript\n     * let filterCellTemplate = this.column.filterCellTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input('filterCellTemplate')\n    get filterCellTemplate(): TemplateRef<any> {\n        return this._filterCellTemplate;\n    }\n    /**\n     * Sets the quick filter template.\n     * ```html\n     * <ng-template #filterCellTemplate IgxFilterCellTemplate let-column=\"column\">\n     *    <input (input)=\"onInput()\">\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'filterCellTemplate'\", {read: TemplateRef })\n     * public filterCellTemplate: TemplateRef<any>;\n     * this.column.filterCellTemplate = this.filterCellTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set filterCellTemplate(template: TemplateRef<any>) {\n        this._filterCellTemplate = template;\n    }\n\n    /** @hidden */\n    @Input('collapsibleIndicatorTemplate')\n    public collapsibleIndicatorTemplate: TemplateRef<any>;\n    /**\n     * Gets the cells of the column.\n     * ```typescript\n     * let columnCells =  this.column.cells;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return this.grid.rowList.filter((row) => row instanceof IgxRowDirective)\n            .map((row) => {\n                if (row.cells) {\n                    return row.cells.filter((cell) => cell.columnIndex === this.index);\n                }\n            }).reduce((a, b) => a.concat(b), []);\n    }\n    /**\n     * Gets the column visible index.\n     * If the column is not visible, returns `-1`.\n     * ```typescript\n     * let visibleColumnIndex =  this.column.visibleIndex;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get visibleIndex(): number {\n        if (!isNaN(this._vIndex)) {\n            return this._vIndex;\n        }\n        const unpinnedColumns = this.grid.unpinnedColumns.filter(c => !c.columnGroup);\n        const pinnedColumns = this.grid.pinnedColumns.filter(c => !c.columnGroup);\n        let col = this;\n        let vIndex = -1;\n\n        if (this.columnGroup) {\n            col = this.allChildren.filter(c => !c.columnGroup)[0] as any;\n        }\n        if (this.columnLayoutChild) {\n            return this.parent.childrenVisibleIndexes.find(x => x.column === this).index;\n        }\n\n        if (!this.pinned) {\n            const indexInCollection = unpinnedColumns.indexOf(col);\n            vIndex = indexInCollection === -1 ? -1 : pinnedColumns.length + indexInCollection;\n        } else {\n            vIndex = pinnedColumns.indexOf(col);\n        }\n        this._vIndex = vIndex;\n        return vIndex;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnGroup() {\n        return false;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnLayout` for multi-row layout.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnLayout() {\n        return false;\n    }\n\n    /**\n    * Returns a boolean indicating if the column is a child of a `ColumnLayout` for multi-row layout.\n    * ```typescript\n    * let columnLayoutChild =  this.column.columnLayoutChild;\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    get columnLayoutChild() {\n        return this.parent && this.parent.columnLayout;\n    }\n\n    /**\n     * Returns the children columns collection.\n     * Returns an empty array if the column does not contain children columns.\n     * ```typescript\n     * let childrenColumns =  this.column.allChildren;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return [];\n    }\n    /**\n     * Returns the level of the column in a column group.\n     * Returns `0` if the column doesn't have a `parent`.\n     * ```typescript\n     * let columnLevel =  this.column.level;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get level() {\n        let ptr = this.parent;\n        let lvl = 0;\n\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parent;\n        }\n        return lvl;\n    }\n\n    get isLastPinned(): boolean {\n        return this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1] === this;\n    }\n    get gridRowSpan(): number {\n        return this.rowEnd && this.rowStart ? this.rowEnd - this.rowStart : 1;\n    }\n    get gridColumnSpan(): number {\n        return this.colEnd && this.colStart ? this.colEnd - this.colStart : 1;\n    }\n\n    /**\n     * Row index where the current field should end.\n     * The amount of rows between rowStart and rowEnd will determine the amount of spanning rows to that field\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [rowEnd]=\"2\" [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public rowEnd: number;\n\n    /**\n     * Column index where the current field should end.\n     * The amount of columns between colStart and colEnd will determine the amount of spanning columns to that field\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [colEnd]=\"3\" [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public colEnd: number;\n\n    /**\n     * Row index from which the field is starting.\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input() rowStart: number;\n\n    /**\n     * Column index from which the field is starting.\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [colStart]=\"1\" [rowStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input() colStart: number;\n\n    /**\n     * Indicates whether the column will be visible when its parent is collapsed.\n     * ```html\n     * <igx-column-group>\n     *   <igx-column [visibleWhenCollapsed]=\"true\"></igx-column>\n     * </igx-column-group>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @Input()\n    set visibleWhenCollapsed(value: boolean) {\n        this._visibleWhenCollapsed = value;\n        this.visibleWhenCollapsedChange.emit(this._visibleWhenCollapsed);\n        if (this.parent) { this.parent.setExpandCollapseState(); }\n    }\n\n    get visibleWhenCollapsed(): boolean {\n        return this._visibleWhenCollapsed;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public collapsible = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public expanded = true;\n\n    /**\n     * hidden\n     */\n    public defaultWidth: string;\n\n    /**\n     * hidden\n     */\n    public widthSetByUser: boolean;\n\n    /**\n     * Returns the filteringExpressionsTree of the column.\n     * ```typescript\n     * let tree =  this.column.filteringExpressionsTree;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get filteringExpressionsTree(): FilteringExpressionsTree {\n        return this.grid.filteringExpressionsTree.find(this.field) as FilteringExpressionsTree;\n    }\n    /**\n     * Sets/gets the parent column.\n     * ```typescript\n     * let parentColumn = this.column.parent;\n     * ```\n     * ```typescript\n     * this.column.parent = higherLevelColumn;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    parent = null;\n    /**\n     * Sets/gets the children columns.\n     * ```typescript\n     * let columnChildren = this.column.children;\n     * ```\n     * ```typescript\n     * this.column.children = childrenColumns;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    children: QueryList<IgxColumnComponent>;\n\n    /**\n     *@hidden\n     */\n    protected _unpinnedIndex;\n    /**\n     *@hidden\n     */\n    protected _pinned = false;\n    /**\n     *@hidden\n     */\n    protected _bodyTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _headerTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _inlineEditorTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _filterCellTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _collapseIndicatorTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _summaries = null;\n    /**\n     *@hidden\n     */\n    protected _filters = null;\n    /**\n     *@hidden\n     */\n    protected _sortStrategy: ISortingStrategy = DefaultSortingStrategy.instance();\n    /**\n     *@hidden\n     */\n    protected _groupingComparer: (a: any, b: any) => number;\n    /**\n     *@hidden\n     */\n    protected _hidden = false;\n    /**\n     *@hidden\n     */\n    protected _index: number;\n    /**\n     *@hidden\n     */\n    protected _disablePinning = false;\n    /**\n     *@hidden\n     */\n    protected _width: string;\n    /**\n     *@hidden\n     */\n    protected _defaultMinWidth = '';\n    /**\n     *@hidden\n     */\n    protected _hasSummary = false;\n    /**\n     * @hidden\n     */\n    protected _editable: boolean;\n    /**\n     *  @hidden\n    */\n    protected _visibleWhenCollapsed;\n    /**\n     * @hidden\n     */\n    protected _collapsible = false;\n    /**\n     * @hidden\n     */\n    protected _expanded = true;\n    /**\n     * @hidden\n     */\n    protected get isPrimaryColumn(): boolean {\n        return this.field !== undefined && this.grid !== undefined && this.field === this.grid.primaryKey;\n    }\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellTemplateDirective, { read: IgxCellTemplateDirective })\n    protected cellTemplate: IgxCellTemplateDirective;\n    /**\n     *@hidden\n     */\n    @ContentChildren(IgxCellHeaderTemplateDirective, { read: IgxCellHeaderTemplateDirective, descendants: false })\n    protected headTemplate: QueryList<IgxCellHeaderTemplateDirective>;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellEditorTemplateDirective, { read: IgxCellEditorTemplateDirective })\n    protected editorTemplate: IgxCellEditorTemplateDirective;\n\n    protected _vIndex = NaN;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxFilterCellTemplateDirective, { read: IgxFilterCellTemplateDirective })\n    public filterCellTemplateDirective: IgxFilterCellTemplateDirective;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCollapsibleIndicatorTemplateDirective, { read: IgxCollapsibleIndicatorTemplateDirective, static: false })\n    protected collapseIndicatorTemplate:  IgxCollapsibleIndicatorTemplateDirective;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>, public cdr: ChangeDetectorRef,\n        public rowIslandAPI: IgxRowIslandAPIService) { }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCaches() {\n        this._vIndex = NaN;\n        if (this.grid) {\n            this.cacheCalcWidth();\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.cellTemplate) {\n            this._bodyTemplate = this.cellTemplate.template;\n        }\n        if (this.headTemplate && this.headTemplate.length) {\n            this._headerTemplate = this.headTemplate.toArray()[0].template;\n        }\n        if (this.editorTemplate) {\n            this._inlineEditorTemplate = this.editorTemplate.template;\n        }\n        if (this.filterCellTemplateDirective) {\n            this._filterCellTemplate = this.filterCellTemplateDirective.template;\n        }\n        if (!this.summaries) {\n            switch (this.dataType) {\n                case DataType.String:\n                case DataType.Boolean:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n                case DataType.Number:\n                    this.summaries = IgxNumberSummaryOperand;\n                    break;\n                case DataType.Date:\n                    this.summaries = IgxDateSummaryOperand;\n                    break;\n                default:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n            }\n        }\n        if (!this.filters) {\n            switch (this.dataType) {\n                case DataType.Boolean:\n                    this.filters = IgxBooleanFilteringOperand.instance();\n                    break;\n                case DataType.Number:\n                    this.filters = IgxNumberFilteringOperand.instance();\n                    break;\n                case DataType.Date:\n                    this.filters = IgxDateFilteringOperand.instance();\n                    break;\n                case DataType.String:\n                default:\n                    this.filters = IgxStringFilteringOperand.instance();\n                    break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    getGridTemplate(isRow: boolean, isIE: boolean): string {\n        if (isRow) {\n            const rowsCount = this.grid.multiRowLayoutRowSize;\n            return isIE ?\n                `(1fr)[${rowsCount}]` :\n                `repeat(${rowsCount},1fr)`;\n        } else {\n            return this.getColumnSizesString(this.children);\n        }\n    }\n\n    public getInitialChildColumnSizes(children: QueryList<IgxColumnComponent>): Array<MRLColumnSizeInfo> {\n        const columnSizes: MRLColumnSizeInfo[] = [];\n        // find the smallest col spans\n        children.forEach(col => {\n            if (!col.colStart) {\n                return;\n            }\n            const newWidthSet = col.widthSetByUser && columnSizes[col.colStart - 1] && !columnSizes[col.colStart - 1].widthSetByUser;\n            const newSpanSmaller = columnSizes[col.colStart - 1] && columnSizes[col.colStart - 1].colSpan > col.gridColumnSpan;\n            const bothWidthsSet = col.widthSetByUser && columnSizes[col.colStart - 1] && columnSizes[col.colStart - 1].widthSetByUser;\n            const bothWidthsNotSet = !col.widthSetByUser && columnSizes[col.colStart - 1] && !columnSizes[col.colStart - 1].widthSetByUser;\n\n            if (columnSizes[col.colStart - 1] === undefined) {\n                // If nothing is defined yet take any column at first\n                // We use colEnd to know where the column actually ends, because not always it starts where we have it set in columnSizes.\n                columnSizes[col.colStart - 1] = {\n                    ref: col,\n                    width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                    colSpan: col.gridColumnSpan,\n                    colEnd: col.colStart + col.gridColumnSpan,\n                    widthSetByUser: col.widthSetByUser\n                };\n            } else if (newWidthSet || (newSpanSmaller && ((bothWidthsSet) || (bothWidthsNotSet)))) {\n                // If a column is set already it should either not have width defined or have width with bigger span than the new one.\n\n                /**\n                 *  If replaced column has bigger span, we want to fill the remaining columns\n                 *  that the replacing column does not fill with the old one.\n                 **/\n                if (bothWidthsSet && newSpanSmaller) {\n                    // Start from where the new column set would end and apply the old column to the rest depending on how much it spans.\n                    // We have not yet replaced it so we can use it directly from the columnSizes collection.\n                    // This is where colEnd is used because the colStart of the old column is not actually i + 1.\n                    for (let i = col.colStart - 1 + col.gridColumnSpan; i < columnSizes[col.colStart - 1].colEnd - 1; i++) {\n                        if (!columnSizes[i] || !columnSizes[i].widthSetByUser) {\n                            columnSizes[i] = columnSizes[col.colStart - 1];\n                        } else {\n                            break;\n                        }\n                    }\n                }\n\n                // Replace the old column with the new one.\n                columnSizes[col.colStart - 1] = {\n                    ref: col,\n                    width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                    colSpan: col.gridColumnSpan,\n                    colEnd: col.colStart + col.gridColumnSpan,\n                    widthSetByUser: col.widthSetByUser\n                };\n            } else if (bothWidthsSet && columnSizes[col.colStart - 1].colSpan < col.gridColumnSpan) {\n                // If the column already in the columnSizes has smaller span, we still need to fill any empty places with the current col.\n                // Start from where the smaller column set would end and apply the bigger column to the rest depending on how much it spans.\n                // Since here we do not have it in columnSizes we set it as a new column keeping the same colSpan.\n                for (let i = col.colStart - 1 + columnSizes[col.colStart - 1].colSpan; i < col.colStart - 1 + col.gridColumnSpan; i++) {\n                    if (!columnSizes[i] || !columnSizes[i].widthSetByUser) {\n                        columnSizes[i] = {\n                            ref: col,\n                            width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                            colSpan: col.gridColumnSpan,\n                            colEnd: col.colStart + col.gridColumnSpan,\n                            widthSetByUser: col.widthSetByUser\n                        };\n                    } else {\n                        break;\n                    }\n                }\n            }\n        });\n\n        // Flatten columnSizes so there are not columns with colSpan > 1\n        for (let i = 0; i < columnSizes.length; i++) {\n            if (columnSizes[i] && columnSizes[i].colSpan > 1) {\n                let j = 1;\n\n                // Replace all empty places depending on how much the current column spans starting from next col.\n                for (; j < columnSizes[i].colSpan && i + j + 1 < columnSizes[i].colEnd; j++) {\n                    if (columnSizes[i + j] &&\n                        ((!columnSizes[i].width && columnSizes[i + j].width) ||\n                            (!columnSizes[i].width && !columnSizes[i + j].width && columnSizes[i + j].colSpan <= columnSizes[i].colSpan) ||\n                            (!!columnSizes[i + j].width && columnSizes[i + j].colSpan <= columnSizes[i].colSpan))) {\n                        // If we reach an already defined column that has width and the current doesn't have or\n                        // if the reached column has bigger colSpan we stop.\n                        break;\n                    } else {\n                        const width = columnSizes[i].widthSetByUser ?\n                            columnSizes[i].width / columnSizes[i].colSpan :\n                            columnSizes[i].width;\n                        columnSizes[i + j] = {\n                            ref: columnSizes[i].ref,\n                            width: width,\n                            colSpan: 1,\n                            colEnd: columnSizes[i].colEnd,\n                            widthSetByUser: columnSizes[i].widthSetByUser\n                        };\n                    }\n                }\n\n                // Update the current column width so it is divided between all columns it spans and set it to 1.\n                columnSizes[i].width = columnSizes[i].widthSetByUser ?\n                    columnSizes[i].width / columnSizes[i].colSpan :\n                    columnSizes[i].width;\n                columnSizes[i].colSpan = 1;\n\n                // Update the index based on how much we have replaced. Subtract 1 because we started from 1.\n                i += j - 1;\n            }\n        }\n\n        return columnSizes;\n    }\n\n    public getFilledChildColumnSizes(children: QueryList<IgxColumnComponent>): Array<string> {\n        const columnSizes = this.getInitialChildColumnSizes(children);\n\n        // fill the gaps if there are any\n        const result: string[] = [];\n        for (let i = 0; i < columnSizes.length; i++) {\n            if (columnSizes[i] && !!columnSizes[i].width) {\n                result.push(columnSizes[i].width + 'px');\n            } else {\n                result.push(parseInt(this.grid.getPossibleColumnWidth(), 10) + 'px');\n            }\n        }\n        return result;\n    }\n\n    protected getColumnSizesString(children: QueryList<IgxColumnComponent>): string {\n        const res = this.getFilledChildColumnSizes(children);\n        return res.join(' ');\n    }\n\n    public getResizableColUnderEnd(): MRLResizeColumnInfo[] {\n        if (this.columnLayout || !this.columnLayoutChild || this.columnGroup) {\n            return [{ target: this, spanUsed: 1 }];\n        }\n\n        const columnSized = this.getInitialChildColumnSizes(this.parent.children);\n        const targets: MRLResizeColumnInfo[] = [];\n        const colEnd = this.colEnd ? this.colEnd : this.colStart + 1;\n\n        for (let i = 0; i < columnSized.length; i++) {\n            if (this.colStart <= i + 1 && i + 1 < colEnd) {\n                targets.push({ target: columnSized[i].ref, spanUsed: 1 });\n            }\n        }\n\n        const targetsSquashed: MRLResizeColumnInfo[] = [];\n        for (let j = 0; j < targets.length; j++) {\n            if (targetsSquashed.length && targetsSquashed[targetsSquashed.length - 1].target.field === targets[j].target.field) {\n                targetsSquashed[targetsSquashed.length - 1].spanUsed++;\n            } else {\n                targetsSquashed.push(targets[j]);\n            }\n        }\n\n        return targetsSquashed;\n    }\n\n    /**\n     * Pins the column at the provided index in the pinned area. Defaults to index `0` if not provided.\n     * Returns `true` if the column is successfully pinned. Returns `false` if the column cannot be pinned.\n     * Column cannot be pinned if:\n     * - Is already pinned\n     * - index argument is out of range\n     * - The pinned area exceeds 80% of the grid width\n     * ```typescript\n     * let success = this.column.pin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public pin(index?: number): boolean {\n        // TODO: Probably should the return type of the old functions\n        // should be moved as a event parameter.\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (this._pinned) {\n            return false;\n        }\n\n        if (this.parent && !this.parent.pinned) {\n            return this.topLevelParent.pin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid.pinnedColumns.length)) {\n            return false;\n        }\n\n        if (!this.parent && !this.pinnable) {\n            return false;\n        }\n\n        this._pinned = true;\n        this.pinnedChange.emit(this._pinned);\n        this._unpinnedIndex = grid._unpinnedColumns.indexOf(this);\n        index = index !== undefined ? index : grid._pinnedColumns.length;\n        const targetColumn = grid._pinnedColumns[index];\n        const args = { column: this, insertAtIndex: index, isPinned: true };\n        grid.onColumnPinning.emit(args);\n\n        if (grid._pinnedColumns.indexOf(this) === -1) {\n            grid._pinnedColumns.splice(args.insertAtIndex, 0, this);\n\n            if (grid._unpinnedColumns.indexOf(this) !== -1) {\n                grid._unpinnedColumns.splice(grid._unpinnedColumns.indexOf(this), 1);\n            }\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.pin());\n            grid.reinitPinStates();\n        }\n\n        grid.resetCaches();\n        grid.notifyChanges();\n        if (this.columnLayoutChild) {\n            this.grid.columns.filter(x => x.columnLayout).forEach(x => x.populateVisibleIndexes());\n        }\n        this.grid.filteringService.refreshExpressions();\n        return true;\n    }\n    /**\n     * Unpins the column and place it at the provided index in the unpinned area. Defaults to index `0` if not provided.\n     * Returns `true` if the column is successfully unpinned. Returns `false` if the column cannot be unpinned.\n     * Column cannot be unpinned if:\n     * - Is already unpinned\n     * - index argument is out of range\n     * ```typescript\n     * let success = this.column.unpin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public unpin(index?: number): boolean {\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (!this._pinned) {\n            return false;\n        }\n\n        if (this.parent && this.parent.pinned) {\n            return this.topLevelParent.unpin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid._unpinnedColumns.length)) {\n            return false;\n        }\n\n        index = (index !== undefined ? index :\n            this._unpinnedIndex !== undefined ? this._unpinnedIndex : this.index);\n        this._pinned = false;\n        this.pinnedChange.emit(this._pinned);\n\n        const targetColumn = grid._unpinnedColumns[index];\n\n        grid._unpinnedColumns.splice(index, 0, this);\n        if (grid._pinnedColumns.indexOf(this) !== -1) {\n            grid._pinnedColumns.splice(grid._pinnedColumns.indexOf(this), 1);\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.unpin());\n        }\n\n        grid.reinitPinStates();\n        grid.resetCaches();\n\n        const insertAtIndex = grid._unpinnedColumns.indexOf(this);\n        const args = { column: this, insertAtIndex, isPinned: false };\n        grid.onColumnPinning.emit(args);\n\n        grid.notifyChanges();\n        if (this.columnLayoutChild) {\n            this.grid.columns.filter(x => x.columnLayout).forEach(x => x.populateVisibleIndexes());\n        }\n        this.grid.filteringService.refreshExpressions();\n\n        return true;\n    }\n    /**\n     * Returns a reference to the top level parent column.\n     * ```typescript\n     * let topLevelParent =  this.column.topLevelParent;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get topLevelParent() {\n        let parent = this.parent;\n        while (parent && parent.parent) {\n            parent = parent.parent;\n        }\n        return parent;\n    }\n\n    /**\n     * Returns a reference to the header of the column.\n     * ```typescript\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let headerCell = column.headerCell;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get headerCell(): IgxGridHeaderComponent {\n        return this.grid.headerCellList.find((header) => header.column === this);\n    }\n\n    /**\n    * Returns a reference to the filter cell of the column.\n    * ```typescript\n    * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n    * let filterell = column.filterell;\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    get filterCell(): IgxGridFilteringCellComponent {\n        return this.grid.filterCellList.find((filterCell) => filterCell.column === this);\n    }\n\n    /**\n     * Returns a reference to the header group of the column.\n     * @memberof IgxColumnComponent\n     */\n    get headerGroup(): IgxGridHeaderGroupComponent {\n        return this.grid.headerGroupsList.find((headerGroup) => headerGroup.column === this);\n    }\n\n    /**\n     * Autosize the column to the longest currently visible cell value, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * column.autosize();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public autosize() {\n        if (!this.columnGroup) {\n\n            this.width = this.getLargestCellWidth();\n            this.grid.reflow();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getCalcWidth(): any {\n        if (this._calcWidth !== null && !isNaN(this.calcPixelWidth)) {\n            return this._calcWidth;\n        }\n        this.cacheCalcWidth();\n        return this._calcWidth;\n    }\n\n    /**\n     * @hidden\n     * Returns the size (in pixels) of the longest currently visible cell, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     *\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let size = column.getLargestCellWidth();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public getLargestCellWidth(): string {\n        const range = this.grid.document.createRange();\n        const largest = new Map<number, number>();\n\n        if (this.cells.length > 0) {\n            let cellsContentWidths = [];\n            if (this.cells[0].nativeElement.children.length > 0) {\n                this.cells.forEach((cell) => cellsContentWidths.push(cell.calculateSizeToFit(range)));\n            } else {\n                cellsContentWidths = this.cells.map((cell) => getNodeSizeViaRange(range, cell.nativeElement));\n            }\n\n            const index = cellsContentWidths.indexOf(Math.max(...cellsContentWidths));\n            const cellStyle = this.grid.document.defaultView.getComputedStyle(this.cells[index].nativeElement);\n            const cellPadding = parseFloat(cellStyle.paddingLeft) + parseFloat(cellStyle.paddingRight) +\n                parseFloat(cellStyle.borderRightWidth);\n\n            largest.set(Math.max(...cellsContentWidths), cellPadding);\n        }\n\n        if (this.headerCell) {\n            let headerCell;\n            if (this.headerTemplate && this.headerCell.elementRef.nativeElement.children[0].children.length > 0) {\n                headerCell = Math.max(...Array.from(this.headerCell.elementRef.nativeElement.children[0].children)\n                    .map((child) => getNodeSizeViaRange(range, child)));\n            } else {\n                headerCell = getNodeSizeViaRange(range, this.headerCell.elementRef.nativeElement.children[0]);\n            }\n\n            if (this.sortable || this.filterable) {\n                headerCell += this.headerCell.elementRef.nativeElement.children[1].getBoundingClientRect().width;\n            }\n\n            const headerStyle = this.grid.document.defaultView.getComputedStyle(this.headerCell.elementRef.nativeElement);\n            const headerPadding = parseFloat(headerStyle.paddingLeft) + parseFloat(headerStyle.paddingRight) +\n                parseFloat(headerStyle.borderRightWidth);\n            largest.set(headerCell, headerPadding);\n\n        }\n\n        const largestCell = Math.max(...Array.from(largest.keys()));\n        const width = Math.ceil(largestCell + largest.get(largestCell));\n\n        if (Number.isNaN(width)) {\n            return this.width;\n        } else {\n            return width + 'px';\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public getCellWidth() {\n        const colWidth = this.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (this.columnLayoutChild) {\n            return '';\n        }\n\n        if (colWidth && !isPercentageWidth) {\n\n            let cellWidth = colWidth;\n            if (typeof cellWidth !== 'string' || cellWidth.endsWith('px') === false) {\n                cellWidth += 'px';\n            }\n\n            return cellWidth;\n        } else {\n            return colWidth;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected cacheCalcWidth(): any {\n        const grid = this.gridAPI.grid;\n        const colWidth = this.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n        if (isPercentageWidth) {\n            this._calcWidth = parseInt(colWidth, 10) / 100 * (grid.calcWidth - grid.featureColumnsWidth());\n        } else if (!colWidth) {\n            // no width\n            this._calcWidth = this.defaultWidth || grid.getPossibleColumnWidth();\n        } else {\n            this._calcWidth = this.width;\n        }\n        this.calcPixelWidth = parseInt(this._calcWidth, 10);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected setExpandCollapseState() {\n        this.children.filter(col => (col.visibleWhenCollapsed !== undefined)).forEach(c =>  {\n            if (!this.collapsible) { c.hidden = this.hidden; return; }\n            c.hidden = this._expanded ? c.visibleWhenCollapsed : !c.visibleWhenCollapsed;\n        });\n    }\n     /**\n     * @hidden\n     * @internal\n     */\n    protected checkCollapsibleState() {\n        if (!this.children) { return false; }\n        const cols = this.children.map(child => child.visibleWhenCollapsed);\n        return (cols.some(c => c === true) && cols.some(c => c === false));\n    }\n\n    /**\n     *@hidden\n    */\n    public get pinnable() {\n        return (this.grid as any)._init || !this.pinned;\n    }\n\n    /**\n     * @hidden\n     */\n    public populateVisibleIndexes() { }\n}\n","ï»¿import { Directive } from '@angular/core';\nimport { ConnectedPositioningStrategy } from '../services';\nimport { VerticalAlignment, PositionSettings } from '../services/overlay/utilities';\nimport { scaleInVerBottom, scaleInVerTop } from '../animations/main';\nimport { IgxForOfSyncService } from '../directives/for-of/for_of.sync.service';\n\n\n@Directive({\n    selector: '[igxGridBody]',\n    providers: [IgxForOfSyncService]\n})\nexport class IgxGridBodyDirective {}\n\n\n/**\n * @hidden\n */\nexport interface RowEditPositionSettings extends PositionSettings {\n    container?: HTMLElement;\n}\n\n/**\n * @hidden\n */\nexport class RowEditPositionStrategy extends ConnectedPositioningStrategy {\n    isTop = false;\n    isTopInitialPosition = null;\n    public settings: RowEditPositionSettings;\n    position(contentElement: HTMLElement, size: { width: number, height: number }, document?: Document, initialCall?: boolean): void {\n        const container = this.settings.container; // grid.tbody\n        const target = <HTMLElement>this.settings.target; // current grid.row\n\n        // Position of the overlay depends on the available space in the grid.\n        // If the bottom space is not enough then the the row overlay will show at the top of the row.\n        // Once shown, either top or bottom, then this position stays until the overlay is closed (isTopInitialPosition property),\n        // which means that when scrolling then overlay may hide, while the row is still visible (UX requirement).\n        this.isTop = this.isTopInitialPosition !== null ?\n            this.isTopInitialPosition :\n            container.getBoundingClientRect().bottom <\n                target.getBoundingClientRect().bottom + contentElement.getBoundingClientRect().height;\n\n        // Set width of the row editing overlay to equal row width, otherwise it fits 100% of the grid.\n        contentElement.style.width = target.clientWidth + 'px';\n        this.settings.verticalStartPoint = this.settings.verticalDirection = this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom;\n        this.settings.openAnimation = this.isTop ? scaleInVerBottom : scaleInVerTop;\n\n        super.position(contentElement, { width: target.clientWidth, height: target.clientHeight }, document, initialCall);\n    }\n}\n","import { EventEmitter, Input, Output, Directive } from '@angular/core';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport interface IValueChangedEventArgs extends IBaseEventArgs {\n    oldValue: any;\n    newValue: any;\n}\n\n/**\n *@hidden\n */\n@Directive()\nexport abstract class ItemPropertyValueChangedDirective {\n    private _object: any;\n    private _propName: string;\n\n    get object() {\n        return this._object;\n    }\n\n    set object(value) {\n        if (value) {\n            this._object = value;\n        }\n    }\n\n    @Input()\n    get value() {\n        return (this.object) ? this.object[this._propName] : null;\n    }\n\n    set value(value) {\n        this.onValueChanged(value);\n    }\n\n    @Output()\n    public valueChanged = new EventEmitter<IValueChangedEventArgs>();\n\n    constructor(propName: string) {\n        this._propName = propName;\n    }\n\n    protected onValueChanged(value) {\n        const currentValue = this.value;\n        if (value !== currentValue) {\n            this.object[this._propName] = value;\n            this.valueChanged.emit({ oldValue: currentValue, newValue: value });\n        }\n    }\n}\n\n/** @hidden */\n@Directive()\nexport class ColumnChooserItemBaseDirective extends ItemPropertyValueChangedDirective {\n    @Input()\n    get column() {\n        return this.object;\n    }\n\n    set column(value) {\n        if (value) {\n            this.object = value;\n        }\n    }\n\n    @Input()\n    public indentation = 30;\n\n    @Input()\n    public container: any;\n\n    constructor(public prop: string) {\n        super(prop);\n    }\n\n    get name() {\n        return (this.column) ? ((this.column.header) ? this.column.header : this.column.field) : '';\n    }\n\n    get level() {\n        return this.column.level;\n    }\n\n    get calcIndent() {\n        return this.indentation * this.level;\n    }\n}\n","\nimport { Directive } from '@angular/core';\nimport { ColumnChooserItemBaseDirective } from '../column-chooser-item-base';\nimport { IBaseEventArgs } from '../../core/utils';\n\nexport interface IColumnVisibilityChangedEventArgs extends IBaseEventArgs {\n    column: any;\n    newValue: boolean;\n}\n\n/** @hidden */\n@Directive({\n    selector: '[igxColumnHidingItem]'\n})\nexport class IgxColumnHidingItemDirective extends ColumnChooserItemBaseDirective {\n\n    constructor() {\n        super('hidden');\n    }\n\n    get disabled() {\n        return this.column.disableHiding;\n    }\n}\n","import { ChangeDetectorRef, HostBinding, Input, OnDestroy, Directive } from '@angular/core';\nimport { IgxStringFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { FilteringStrategy } from '../data-operations/filtering-strategy';\nimport { ColumnChooserItemBaseDirective } from './column-chooser-item-base';\nimport { ColumnDisplayOrder } from './common/enums';\n\nclass CustomFilteringStrategy extends FilteringStrategy {\n    public filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[] {\n        const res: ColumnChooserItemBaseDirective[] = [];\n        data.forEach((item: ColumnChooserItemBaseDirective) => {\n            if (this.matchRecord(item, expressionsTree.filteringOperands[0] as IFilteringExpression)) {\n                res.push(item);\n            } else if (item.column.columnGroup) {\n                if (item.column.allChildren.findIndex((child) =>\n                    this.matchRecord(child, expressionsTree.filteringOperands[1] as IFilteringExpression) ||\n                    this.matchRecord(child, expressionsTree.filteringOperands[2] as IFilteringExpression)) > -1) {\n                    res.push(item);\n                }\n            }\n        });\n\n        return res;\n    }\n}\n\n/** @hidden */\n@Directive()\nexport abstract class ColumnChooserBaseDirective implements OnDestroy {\n    /**\n     * Gets the grid columns that are going to be manipulated.\n     * ```typescript\n     * let gridColumns = this.columnHidingUI.columns;\n     * ```\n     */\n\n    @Input()\n    get columns() {\n        return this._gridColumns;\n    }\n    /**\n     * Sets the the grid columns that are going to be manipulated.\n     * ```html\n     * <igx-column-hiding [columns]=\"grid.columns\"></igx-column-hiding>\n     * ```\n     */\n    set columns(value) {\n        if (value) {\n            this._gridColumns = value;\n            this.createColumnItems();\n            if (this.filterCriteria) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Sets/gets the title of the column chooser.\n     * ```typescript\n     * let title =  this.columnHidingUI.title;\n     * ```\n     */\n    @Input()\n    get title() {\n        return this._title;\n    }\n    /**\n     * ```html\n     * <igx-column-hiding [title]=\"'IgxColumnHidingComponent Title'\"></igx-column-hiding>\n     * ```\n     */\n    set title(value) {\n        this._title = (value) ? value : '';\n    }\n    /**\n     * Gets the prompt that is displayed in the filter input.\n     * ```typescript\n     * let filterColumnsPrompt =  this.columnHidingUI.filterColumnsPrompt;\n     * ```\n     */\n    @Input()\n    get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n    /**\n     * Sets the prompt that is going to be displayed in the filter input.\n     * ```html\n     * <igx-column-hiding [filterColumnsPrompt]=\"'Type here to search'\"></igx-column-hiding>\n     * ```\n     */\n    set filterColumnsPrompt(value) {\n        this._filterColumnsPrompt = (value) ? value : '';\n    }\n    /**\n     * Hides/ shows the filtering columns input from the UI.\n     */\n    @Input()\n    public disableFilter = false;\n    /**\n     * Gets the items of the selected columns.\n     * ```typescript\n     * let columnItems =  this.columnHidingUI.columnItems;\n     * ```\n     */\n    @Input()\n    get columnItems() {\n        return this._currentColumns;\n    }\n    /**\n     * Gets the value which filters the columns list.\n     * ```typescript\n     * let filterCriteria =  this.columnHidingUI.filterCriteria;\n     * ```\n     */\n    @Input()\n    get filterCriteria() {\n        return this._filterCriteria;\n    }\n\n    /**\n     * Sets the value which filters the columns list.\n     * ```html\n     *  <igx-column-hiding [filterCriteria]=\"'ID'\"></igx-column-hiding>\n     * ```\n     */\n    set filterCriteria(value) {\n        if (!value || value.length === 0) {\n            this.clearFiltering();\n            this._filterCriteria = '';\n            this.cdr.detectChanges();\n            return;\n        } else if (this._filterCriteria && this._filterCriteria.length > value.length) {\n            this.clearFiltering();\n        }\n\n        this._filterCriteria = value;\n        this.filter();\n        this.cdr.detectChanges();\n    }\n    /**\n     * Gets the display order of the columns.\n     * ```typescript\n     * let columnDisplayOrder  =  this.columnHidingUI.columnDisplayOrder;\n     * ```\n     */\n    @Input()\n    get columnDisplayOrder() {\n        return this._columnDisplayOrder;\n    }\n    /**\n     * Sets the display order of the columns.\n     * ```typescript\n     * this.columnHidingUI.columnDisplayOrder = ColumnDisplayOrder.Alphabetical;\n     * ```\n     */\n    set columnDisplayOrder(value: ColumnDisplayOrder) {\n        if (value !== undefined) {\n            this.orderColumns(value);\n            if (this._filterCriteria.length > 0) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Access to the columnHidingUI:\n     * ```typescript\n     * @ViewChild('column-hiding-component')\n     *  public columnHidingUI: IgxColumnHidingComponent;\n     * ```\n     * Sets/gets the max height of the column area.\n     * ```typescript\n     * let columnsAreaMaxHeight =  this.columnHidingUI.columnsAreaMaxHeight;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [columnsAreaMaxHeight]=\"200px\"></igx-column-hiding>\n     * ```\n     */\n    @Input()\n    public columnsAreaMaxHeight = '100%';\n    /**\n     * Sets/Gets the css class selector.\n     * By default the value of the `class` attribute is `\"igx-column-hiding\"`.\n     * ```typescript\n     * let cssCLass =  this.columnHidingUI.cssClass;\n     * ```\n     * ```typescript\n     * this.columnHidingUI.cssClass = 'column-chooser';\n     * ```\n     */\n    @HostBinding('attr.class')\n    public cssClass = 'igx-column-hiding';\n    /**\n     *@hidden\n     */\n    private _currentColumns = [];\n    /**\n     *@hidden\n     */\n    private _gridColumns = [];\n    /**\n     *@hidden\n     */\n    private _rawColumns = [];\n    /**\n     *@hidden\n     */\n    private _columnDisplayOrder = ColumnDisplayOrder.DisplayOrder;\n    /**\n     *@hidden\n     */\n    private _filterCriteria = '';\n    /**\n     *@hidden\n     */\n    private _filterColumnsPrompt = '';\n    /**\n     *@hidden\n     */\n    private _title = '';\n\n    constructor(public cdr: ChangeDetectorRef) {\n    }\n    /**\n     *@hidden\n     */\n    ngOnDestroy() {\n        for (const item of this._currentColumns) {\n            item.valueChanged.unsubscribe();\n        }\n    }\n    /**\n     *@hidden\n     */\n    private createColumnItems() {\n        if (this._gridColumns.length > 0) {\n            this._rawColumns = [];\n            this._gridColumns.forEach((column) => {\n                const item = this.createColumnItem(this, column);\n                if (item) {\n                    this._rawColumns.push(item);\n                }\n            });\n            this._currentColumns = this._rawColumns.slice(0);\n            this.orderColumns(this._columnDisplayOrder);\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected abstract createColumnItem(container: any, column: any);\n    /**\n     *@hidden\n     */\n    private orderColumns(value) {\n        this._columnDisplayOrder = value;\n        if (value === ColumnDisplayOrder[ColumnDisplayOrder.Alphabetical] ||\n            value === ColumnDisplayOrder.Alphabetical) {\n            this._currentColumns = this._rawColumns.slice(0).sort((current, next) => {\n                return current.name.toLowerCase().localeCompare(next.name.toLowerCase());\n            });\n        } else {\n            this._currentColumns = this._rawColumns;\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected filter() {\n        const filteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.Or);\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('name'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('field'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('header'));\n\n        const strategy = new CustomFilteringStrategy();\n        this._currentColumns = strategy.filter(this._currentColumns, filteringExpressionsTree);\n    }\n    /**\n     *@hidden\n     */\n    protected createFilteringExpression(fieldName: string): IFilteringExpression {\n        return {\n            condition: IgxStringFilteringOperand.instance().condition('contains'),\n            fieldName: fieldName,\n            ignoreCase: true,\n            searchVal: this._filterCriteria\n        };\n    }\n    /**\n     *@hidden\n     */\n    protected clearFiltering() {\n        this.createColumnItems();\n    }\n}\n\n\n","import {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    OnDestroy\n} from '@angular/core';\nimport { IColumnVisibilityChangedEventArgs, IgxColumnHidingItemDirective } from './column-hiding-item.directive';\nimport { ColumnChooserBaseDirective } from '../column-chooser-base';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-hiding',\n    templateUrl: './column-hiding.component.html'\n})\nexport class IgxColumnHidingComponent extends ColumnChooserBaseDirective implements OnDestroy {\n    /**\n     * Returns a boolean indicating whether the `HIDE ALL` button is disabled.\n     * ```html\n     * <igx-column-hiding #columnHidingUI\n     *     [columns]=\"grid.columns\" [title]=\"'Column Hiding'\">\n     * </igx-column-hiding>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'columnHidingUI'\")\n     * public columnHiding: IgxColumnHidingComponent;\n     * let isHideAlldisabled =  this.columnHiding.disableHideAll;\n     * ```\n     *@memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableHideAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount === this.columns.length) {\n            return true;\n        } else if (this.hidableColumns.length < 1 ||\n            this.hidableColumns.length === this.hidableColumns.filter((col) => col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Returns a boolean indicating whether the `SHOW ALL` button is disabled.\n     * ```typescript\n     * let isShowAlldisabled =  this.columnHiding.disableShowAll;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableShowAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount < 1 || this.hidableColumns.length < 1) {\n            return true;\n        } else if (this.hidableColumns.length === this.hidableColumns.filter((col) => !col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Sets/gets the text of the button that shows all columns if they are hidden.\n     * ```typescript\n     * let showAllButtonText =  this.columnHiding.showAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [showAllText] = \"'Show Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public showAllText = 'Show All';\n    /**\n     * Sets/gets the text of the button that hides all columns if they are shown.\n     * ```typescript\n     * let hideAllButtonText =  this.columnHiding.hideAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [hideAllText] = \"'Hide Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public hideAllText = 'Hide All';\n    /**\n     * An event that is emitted after the columns visibility is changed.\n     * Provides references to the `column` and the `newValue` properties as event arguments.\n     * ```html\n     *  <igx-column-hiding (onColumnVisibilityChanged) = \"onColumnVisibilityChanged($event)\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n    /**\n     * Gets the count of the hidden columns.\n     * ```typescript\n     * let hiddenColumnsCount =  this.columnHiding.hiddenColumnsCount;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public get hiddenColumnsCount() {\n        return (this.columns) ? this.columns.filter((col) => col.hidden).length : 0;\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     *@hidden\n     */\n    public get hidableColumns() {\n        return this.columnItems.filter((col) => !col.disabled);\n    }\n\n    private destroy$ = new Subject<boolean>();\n    /**\n     *@hidden\n     */\n    protected createColumnItem(container: any, column: any) {\n        if (column.grid.hasColumnLayouts && !column.columnLayout) {\n            return null;\n        }\n        const item = new IgxColumnHidingItemDirective();\n        item.container = container;\n        item.column = column;\n\n        item.valueChanged.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.onVisibilityChanged({ column: item.column, newValue: args.newValue });\n        });\n\n        return item;\n    }\n    /**\n     * Shows all columns in the grid.\n     * ```typescript\n     * this.columnHiding.showAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public showAllColumns() {\n        const collection = this.hidableColumns;\n        for (const col of collection) {\n            col.value = false;\n        }\n    }\n    /**\n     * Hides all columns in the grid.\n     * ```typescript\n     * this.columnHiding.hideAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public hideAllColumns() {\n        const collection = this.hidableColumns;\n        for (const col of collection) {\n            col.value = true;\n        }\n    }\n    /**\n     * @hidden\n     */\n    public onVisibilityChanged(args: IColumnVisibilityChangedEventArgs) {\n        this.onColumnVisibilityChanged.emit(args);\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n\n","import { Directive } from '@angular/core';\nimport { ColumnChooserItemBaseDirective } from '../column-chooser-item-base';\n\n\n@Directive({\n    selector: '[igxColumnPinningItem]'\n})\nexport class IgxColumnPinningItemDirective extends ColumnChooserItemBaseDirective {\n\n    constructor() {\n        super('pinned');\n    }\n\n    /**\n     * Returns whether a column could be pinned.\n     * It's not possible to pin a column if there is not enough space for the unpinned area.\n     * ```typescript\n     * const columnItem: IgxColumnPinningItemDirective;\n     * this.columnItem.pinnable;\n     * ```\n     */\n    get pinnable() {\n        return this.column.pinnable;\n    }\n}\n","\nimport { Component, ChangeDetectorRef } from '@angular/core';\nimport { ColumnChooserBaseDirective } from '../column-chooser-base';\nimport { IgxColumnPinningItemDirective } from './pinning.directive';\n\n\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-pinning',\n    templateUrl: './column-pinning.component.html'\n})\nexport class IgxColumnPinningComponent extends ColumnChooserBaseDirective {\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     * @hidden\n     */\n    createColumnItem(container: any, column: any) {\n        if (column.level !== 0 || column.disablePinning) {\n            return null;\n        }\n        const item = new IgxColumnPinningItemDirective();\n        item.container = container;\n        item.column = column;\n        return item;\n    }\n\n    /**\n     * @hidden\n     */\n    public checkboxValueChange(event, columnItem: IgxColumnPinningItemDirective) {\n        if (event.checked && !columnItem.pinnable) {\n            event.checkbox.checked = false;\n            return false;\n        }\n        columnItem.value = !columnItem.value;\n    }\n}\n\n","import {\n    ChangeDetectorRef,\n    Component,\n    HostBinding,\n    Input,\n    Optional,\n    ViewChild,\n    Inject,\n    TemplateRef\n} from '@angular/core';\n\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../../core/displayDensity';\nimport {\n    CsvFileTypes,\n    IgxBaseExporter,\n    IgxCsvExporterOptions,\n    IgxCsvExporterService,\n    IgxExcelExporterOptions,\n    IgxExcelExporterService,\n    AbsoluteScrollStrategy\n} from '../../services/index';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxButtonDirective } from '../../directives/button/button.directive';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxDropDownComponent } from '../../drop-down/drop-down.component';\nimport { IgxColumnHidingComponent } from '../hiding/column-hiding.component';\nimport { IgxColumnPinningComponent } from '../pinning/column-pinning.component';\nimport { OverlaySettings, PositionSettings, HorizontalAlignment, VerticalAlignment } from '../../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../../services/overlay/position';\nimport { GridType } from '../common/grid.interface';\n\n/**\n * This class encapsulates the Toolbar's logic and is internally used by\n * the `IgxGridComponent`, `IgxTreeGridComponent` and `IgxHierarchicalGridComponent`.\n */\n@Component({\n    selector: 'igx-grid-toolbar',\n    templateUrl: './grid-toolbar.component.html'\n})\nexport class IgxGridToolbarComponent extends DisplayDensityBase {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid-toolbar')\n    @Input()\n    public gridID: string;\n\n    /**\n     * Gets the default text shown in the filtering box.\n     * ```typescript\n     * const filterPrompt = this.grid.toolbar.filterColumnsPrompt;\n     * ```\n     */\n    @Input()\n    public get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n\n    /**\n     * Sets the default text shown in the filtering box.\n     * ```typescript\n     * this.grid.toolbar.filterColumnsPrompt('Filter columns ...');\n     * ```\n     */\n    public set filterColumnsPrompt(value: string) {\n        this._filterColumnsPrompt = value;\n    }\n\n    private _filterColumnsPrompt = 'Filter columns list ...';\n\n    /**\n     * Gets the height for the `IgxGridToolbarComponent`'s drop down panels.\n     * ```typescript\n     * const dropdownHeight = this.grid.toolbar.defaultDropDownsMaxHeight;\n     * ```\n     */\n    @Input()\n    get defaultDropDownsMaxHeight() {\n        const gridHeight = this.grid.calcHeight;\n        return (gridHeight) ? gridHeight * 0.7 + 'px' : '100%';\n    }\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Hiding UI.\n     * ```typescript\n     * const dropdownHiding = this.grid.toolbar.columnHidingDropdown;\n     * ```\n     */\n    @ViewChild('columnHidingDropdown', { read: IgxDropDownComponent })\n    public columnHidingDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnHidingComponent`.\n     * ```typescript\n     * const hidingUI = this.grid.toolbar.columnHidingUI;\n     * ```\n     */\n    @ViewChild(IgxColumnHidingComponent)\n    public columnHidingUI: IgxColumnHidingComponent;\n\n    /**\n     * Provides a reference to the Column Hiding button.\n     * ```typescript\n     * const hidingButton = this.grid.toolbar.columnHidingButton;\n     * ```\n     */\n    @ViewChild('columnHidingButton', { read: IgxButtonDirective })\n    public columnHidingButton: IgxButtonDirective;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Export button.\n     * ```typescript\n     * const exportDropdown = this.grid.toolbar.exportDropdown;\n     * ```\n     */\n    @ViewChild('exportDropdown', { read: IgxDropDownComponent })\n    public exportDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the Export button.\n     * ```typescript\n     * const exportBtn = this.grid.toolbar.exportButton;\n     * ```\n     */\n    @ViewChild('btnExport', { read: IgxButtonDirective })\n    public exportButton: IgxButtonDirective;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Pinning UI.\n     * ```typescript\n     * const dropdownPinning = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild('columnPinningDropdown', { read: IgxDropDownComponent })\n    public columnPinningDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnPinningComponent`.\n     * ```typescript\n     * const pinningUI = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild(IgxColumnPinningComponent)\n    public columnPinningUI: IgxColumnPinningComponent;\n\n    /**\n     * Provides a reference to the Column Pinning button.\n     * ```typescript\n     * const pinningButton = this.grid.toolbar.columnPinningButton;\n     * ```\n     */\n    @ViewChild('columnPinningButton', { read: IgxButtonDirective })\n    public columnPinningButton: IgxButtonDirective;\n\n    /**\n     * Returns a reference to the `IgxGridComponent` component, hosting the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const grid = this.igxGrid1.toolbar.grid;\n     * ```\n     */\n    public get grid(): IgxGridBaseDirective {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an export button.\n     * ```typescript\n     * const exportButton = this.igxGrid1.toolbar.shouldShowExportButton;\n     * ```\n     */\n    public get shouldShowExportButton(): boolean {\n        return (this.grid != null && (this.grid.exportExcel || this.grid.exportCsv));\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an Excel export button.\n     * ```typescript\n     * const exportExcelButton = this.igxGrid1.toolbar.shouldShowExportExcelButton;\n     * ```\n     */\n    public get shouldShowExportExcelButton(): boolean {\n        return (this.grid != null && this.grid.exportExcel);\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an CSV export button.\n     * ```typescript\n     * const exportCSVButton = this.igxGrid1.toolbar.shouldShowExportCsvButton;\n     * ```\n     */\n    public get shouldShowExportCsvButton(): boolean {\n        return (this.grid != null && this.grid.exportCsv);\n    }\n\n    /**\n     * Returns how many columns are pinned.\n     * ```typescript\n     * const pinnedCount = this.igxGrid1.toolbar.pinnedColumnsCount;\n     * ```\n     */\n    public get pinnedColumnsCount() {\n        return this.grid.pinnedColumns.filter(col => !col.columnLayout).length;\n    }\n\n    /**\n     * Returns the theme of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTheme = this.grid.toolbar.hostClass;\n     * ```\n     */\n\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        return this.getComponentDensityClass('igx-grid-toolbar');\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n        public cdr: ChangeDetectorRef,\n        @Optional() public excelExporter: IgxExcelExporterService,\n        @Optional() public csvExporter: IgxCsvExporterService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n    }\n\n    private _positionSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Left,\n        horizontalStartPoint: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _overlaySettings: OverlaySettings = {\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: true,\n        excludePositionTarget: true\n    };\n\n    /**\n     * Returns the title of `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTitle = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getTitle(): string {\n        return this.grid != null ? this.grid.toolbarTitle : '';\n    }\n\n    /**\n     * Returns the text of the export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExportText = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getExportText(): string {\n        return this.grid != null ? this.grid.exportText : '';\n    }\n\n    /**\n     * Returns the text of the Excel export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExcelText = this.igxGrid1.toolbar.getExportExcelText();\n     * ```\n     */\n    public getExportExcelText(): string {\n        return this.grid != null ? this.grid.exportExcelText : '';\n    }\n\n    /**\n     * Returns the text of the CSV export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarCSVText = this.igxGrid1.toolbar.getExportCsvText();\n     * ```\n     */\n    public getExportCsvText(): string {\n        return this.grid != null ? this.grid.exportCsvText : '';\n    }\n\n    /**\n     * Toggles the export button's dropdown menu.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportClicked();\n     * ```\n     */\n    public exportClicked() {\n        this._overlaySettings.positionStrategy.settings.target = this.exportButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.exportDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Exports the grid to excel.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToExcelClicked();\n     * ```\n     */\n    public exportToExcelClicked() {\n        this.performExport(this.excelExporter, 'excel');\n    }\n\n    /**\n     * Exports the grid to CSV.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToCsvClicked();\n     * ```\n     */\n    public exportToCsvClicked() {\n        this.performExport(this.csvExporter, 'csv');\n    }\n\n    private performExport(exp: IgxBaseExporter, exportType: string) {\n        this.exportClicked();\n\n        const fileName = 'ExportedData';\n        const options = exportType === 'excel' ?\n            new IgxExcelExporterOptions(fileName) :\n            new IgxCsvExporterOptions(fileName, CsvFileTypes.CSV);\n\n        const args = { grid: this.grid, exporter: exp, options: options, cancel: false };\n\n        this.grid.onToolbarExporting.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        exp.export(this.grid, options);\n    }\n\n    /**\n     * Toggles the Column Hiding UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnHidingUI();\n     * ```\n     */\n    public toggleColumnHidingUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnHidingButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnHidingDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Toggles the Column Pinning UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnPinningUI();\n     * ```\n     */\n    public toggleColumnPinningUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnPinningButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnPinningDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public showAdvancedFilteringUI() {\n        this.grid.openAdvancedFilteringDialog();\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the\n     * `toolbar custom container` by providing references to the parent IgxGird and the toolbar itself.\n     * ```typescript\n     * const context =  this.igxGrid.toolbar.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            // $implicit: this\n            grid: this.grid,\n            toolbar: this\n        };\n    }\n\n    /** @hidden */\n    public get customContentTemplate(): TemplateRef<any> {\n        if (this.grid != null && this.grid.toolbarCustomContentTemplate != null) {\n            return this.grid.toolbarCustomContentTemplate.template;\n        } else {\n            return null;\n        }\n    }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { GridBaseAPIService } from './api.service';\nimport { GridType } from './common/grid.interface';\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEdit]'\n})\nexport class IgxRowEditTemplateDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditText]'\n})\nexport class IgxRowEditTextDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditActions]'\n})\nexport class IgxRowEditActionsDirective { }\n\n\n// TODO: Refactor circular ref, deps and logic\n/** @hidden */\n@Directive({\n    selector: `[igxRowEditTabStop]`\n})\nexport class IgxRowEditTabStopDirective {\n    private currentCellIndex: number;\n\n\n    constructor(public api: GridBaseAPIService<any>, public element: ElementRef) {}\n\n    get grid(): GridType {\n        return this.api.grid;\n    }\n\n    @HostListener('keydown.Tab', [`$event`])\n    @HostListener('keydown.Shift.Tab', [`$event`])\n    public handleTab(event: KeyboardEvent): void {\n        event.stopPropagation();\n        if ((this.grid.rowEditTabs.last === this && !event.shiftKey) ||\n            (this.grid.rowEditTabs.first === this && event.shiftKey)\n        ) {\n            this.move(event);\n        }\n    }\n\n    @HostListener('keydown.Escape', [`$event`])\n    public handleEscape(event: KeyboardEvent): void {\n        this.grid.endEdit(false, event);\n        const activeNode = this.grid.selectionService.activeElement;\n        //  on right click activeNode is deleted, so we may have no one\n        if (activeNode) {\n            const cell = this.grid.navigation.getCellElementByVisibleIndex(\n                activeNode.row,\n                activeNode.layout ? activeNode.layout.columnVisibleIndex : activeNode.column);\n            cell.focus();\n        }\n    }\n\n    /**\n     * Moves focus to first/last editable cell in the editable row and put the cell in edit mode.\n     * If cell is out of view first scrolls to the cell\n     * @param event keyboard event containing information about whether SHIFT key was pressed\n     */\n    private move(event: KeyboardEvent) {\n        event.preventDefault();\n        this.currentCellIndex = event.shiftKey ? this.grid.lastEditableColumnIndex : this.grid.firstEditableColumnIndex;\n        if (!this.grid.navigation.isColumnFullyVisible(this.currentCellIndex)) {\n            this.grid.navigation.performHorizontalScrollToCell(\n                this.grid.rowInEditMode.index, this.currentCellIndex, false, this.activateCell);\n        } else {\n            this.activateCell();\n        }\n    }\n\n    /**\n     * Sets the cell in edit mode and focus its native element\n     * @param cellIndex index of the cell to activate\n     */\n    private activateCell = (): void => {\n        const cell = this.grid.rowInEditMode.cells.find(e => e.visibleColumnIndex === this.currentCellIndex);\n        cell.nativeElement.focus();\n        cell.setEditMode(true);\n        this.currentCellIndex = -1;\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n    TemplateRef,\n} from '@angular/core';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { DataType } from '../../data-operations/data-util';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxGridSelectionService, ISelectionNode } from '../selection/selection.service';\nimport { ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS, SUPPORTED_KEYS } from '../../core/utils';\nimport { GridType } from '../common/grid.interface';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-groupby-row',\n    templateUrl: './groupby-row.component.html'\n})\nexport class IgxGridGroupByRowComponent {\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n        private gridSelection: IgxGridSelectionService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden\n     */\n    protected defaultCssClass = 'igx-grid__group-row';\n\n    /**\n     * @hidden\n     */\n    protected paddingIndentationCssClass = 'igx-grid__group-row--padding-level';\n\n    /**\n    * @hidden\n    */\n    @ViewChild('defaultGroupByExpandedTemplate', { read: TemplateRef, static: true })\n    protected defaultGroupByExpandedTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n    @ViewChild('defaultGroupByCollapsedTemplate', { read: TemplateRef, static: true })\n    protected defaultGroupByCollapsedTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    protected isFocused = false;\n\n    /**\n     * Returns whether the row is focused.\n     * ```\n     * let gridRowFocused = this.grid1.rowList.first.focused;\n     * ```\n     */\n    get focused(): boolean {\n        return this.isFocused;\n    }\n\n    /**\n     * An @Input property that sets the index of the row.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * An @Input property that sets the id of the grid the row belongs to.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * An @Input property that specifies the group record the component renders for.\n     * ```typescript\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public groupRow: IGroupByRecord;\n\n    /**\n     * Returns a reference of the content of the group.\n     * ```typescript\n     * const groupRowContent = this.grid1.rowList.first.groupContent;\n     * ```\n     */\n    @ViewChild('groupContent', { static: true })\n    public groupContent: ElementRef;\n\n    /**\n     * Returns whether the group row is expanded.\n     * ```typescript\n     * const groupRowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this.grid.isExpandedGroup(this.groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedBy(): string {\n        const grRowExpr = this.groupRow.expression !== undefined ? this.groupRow.expression.fieldName : '';\n        return this.gridID + '_' + grRowExpr;\n    }\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * Returns a reference to the underlying HTML element.\n     * ```typescript\n     * const groupRowElement = this.nativeElement;\n     * ```\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the style classes applied to the group rows.\n     * ```typescript\n     * const groupCssStyles = this.grid1.rowList.first.styleClasses;\n     * ```\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return `${this.defaultCssClass} ` + `${this.paddingIndentationCssClass}-` + this.groupRow.level +\n            (this.focused ? ` ${this.defaultCssClass}--active` : '');\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus')\n    public onFocus() {\n        this.isFocused = true;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.isFocused = false;\n    }\n\n    /**\n     * Toggles the group row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle() {\n        const isVirtualized = !this.grid.verticalScrollContainer.dc.instance.notVirtual;\n        const groupRowIndex = this.index;\n        this.grid.toggleGroup(this.groupRow);\n        if (isVirtualized) {\n            const groupRow = this.grid.nativeElement.querySelector(`[data-rowIndex=\"${groupRowIndex}\"]`);\n            if (groupRow) {\n                groupRow.focus();\n            }\n        }\n    }\n\n    public get iconTemplate() {\n        if (this.expanded) {\n            return this.grid.rowExpandedIndicatorTemplate || this.defaultGroupByExpandedTemplate;\n        } else {\n            return this.grid.rowCollapsedIndicatorTemplate || this.defaultGroupByCollapsedTemplate;\n        }\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.index,\n            column: this.gridSelection.activeElement ? this.gridSelection.activeElement.column : 0\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event) {\n        // TODO: Refactor\n        const key = event.key.toLowerCase();\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n        const keydownArgs = { targetType: 'groupRow', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(keydownArgs);\n        if (keydownArgs.cancel) {\n            return;\n        }\n        event.preventDefault();\n\n        if (!this.isKeySupportedInGroupRow(key, event.shiftKey, event.altKey) || event.ctrlKey) { return; }\n\n        if (this.isToggleKey(key, event.altKey)) {\n            if ((this.expanded && ROW_COLLAPSE_KEYS.has(key)) || (!this.expanded && ROW_EXPAND_KEYS.has(key))) {\n                this.toggle();\n            }\n            return;\n        }\n\n        const selection = this.gridSelection;\n        selection.keyboardState.shift = event.shiftKey && !(key === 'tab');\n\n        const activeNode = selection.activeElement ? Object.assign({}, selection.activeElement) : this.selectionNode;\n        activeNode.row = this.index;\n        switch (key) {\n            case 'arrowdown':\n            case 'down':\n                this.grid.navigation.navigateDown(this.nativeElement, activeNode);\n                break;\n            case 'arrowup':\n            case 'up':\n                this.grid.navigation.navigateUp(this.nativeElement, activeNode);\n                break;\n            case 'tab':\n                this.handleTabKey(event.shiftKey, activeNode);\n                break;\n        }\n    }\n\n    /**\n     * Returns a reference to the `IgxGridComponent` the `IgxGridGroupByRowComponent` belongs to.\n     * ```typescript\n     * this.grid1.rowList.first.grid;\n     * ```\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * @hidden\n     */\n    get dataType(): any {\n        const column = this.grid.getColumnByName(this.groupRow.expression.fieldName);\n        return (column && column.dataType) || DataType.String;\n    }\n\n    private handleTabKey(shift: boolean, activeNode: ISelectionNode) {\n        if (shift) {\n            this.grid.navigation.performShiftTabKey(this.nativeElement, activeNode);\n        } else {\n            if (this.index === this.grid.dataView.length - 1 && this.grid.rootSummariesEnabled) {\n                this.grid.navigation.onKeydownHome(0, true);\n            } else {\n                const orderedColumns = this.grid.navigation.gridOrderedColumns;\n                const lastCol = orderedColumns[orderedColumns.length - 1];\n                activeNode.column = lastCol.columnLayoutChild ? lastCol.parent.visibleIndex : lastCol.visibleIndex;\n                this.grid.navigation.performTab(this.nativeElement, activeNode);\n            }\n        }\n    }\n\n    private isKeySupportedInGroupRow(key, shift = false, alt = false) {\n        if (shift) {\n            return ['down', 'up', 'arrowdown', 'arrowup', 'tab'].indexOf(key) !== -1;\n        }\n        return this.isToggleKey(key, alt) ? true : ['down', 'up', 'arrowdown', 'arrowup', 'tab'].indexOf(key) !== -1;\n    }\n\n    private isToggleKey(key, altKey) {\n        return altKey && ['left', 'right', 'up', 'down', 'arrowleft', 'arrowright', 'arrowup', 'arrowdown'].indexOf(key) !== -1;\n    }\n\n}\n","import { Directive, TemplateRef, EventEmitter, QueryList, Optional, Inject } from '@angular/core';\nimport { DisplayDensityBase, IDisplayDensityOptions, DisplayDensityToken } from '../core/density';\n\nexport interface IListChild {\n    index: number;\n}\n\n/** @hidden */\n@Directive({\n    selector: '[igxListBase]'\n})\nexport class IgxListBaseDirective extends DisplayDensityBase {\n    onItemClicked: EventEmitter<any>;\n    allowLeftPanning: boolean;\n    allowRightPanning: boolean;\n    panEndTriggeringThreshold: number;\n    onLeftPan: EventEmitter<any>;\n    onRightPan: EventEmitter<any>;\n    onPanStateChange: EventEmitter<any>;\n    children: QueryList<any>;\n    listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n    listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n\n    constructor(@Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n}\n\nexport enum IgxListPanState { NONE, LEFT, RIGHT }\n\n@Directive({\n    selector: '[igxEmptyList]'\n})\nexport class IgxEmptyListTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxDataLoading]'\n})\nexport class IgxDataLoadingTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemLeftPanning]'\n})\nexport class IgxListItemLeftPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemRightPanning]'\n})\nexport class IgxListItemRightPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","/* tslint:disable */\nexport default [\n    {\n        name: 'add_filter',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 15v-3h-2v3h-3v2h3v3h2v-3h3v-2h-3zM5 10h10v2H5zM2 5h16v2H2zM8 15h4v2H8z\"/>\n      </svg>`\n    },\n    {\n        name: 'contains',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" id=\"Layer_1\" data-name=\"Layer 1\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 3v18h18V3zm16 16H5V5h14z\"/>\n        <path d=\"M12 11.3a4.39 4.39 0 0 0-2.54.63 2.07 2.07 0 0 0-.9 1.78 2.29 2.29 0 0 0 .66 1.74 2.63 2.63 0 0 0 1.89.63 2.39 2.39 0 0 0 1.32-.37 3.05 3.05 0 0 0 1-.93 3.72 3.72 0 0 0 .08.57c0 .19.1.38.16.58h1.79a4.51 4.51 0 0 1-.21-.88 5.57 5.57 0 0 1-.07-.93v-3.5a2.44 2.44 0 0 0-.84-2 3.34 3.34 0 0 0-2.22-.7 3.54 3.54 0 0 0-2.3.72A1.93 1.93 0 0 0 9 10.29h1.71a.93.93 0 0 1 .29-.71 1.5 1.5 0 0 1 1-.29 1.45 1.45 0 0 1 1 .35 1.3 1.3 0 0 1 .37 1v.69zm1.4 1.08v1.17a1.61 1.61 0 0 1-.71.77 2.27 2.27 0 0 1-1.21.34 1.18 1.18 0 0 1-.84-.27.92.92 0 0 1-.3-.72 1.16 1.16 0 0 1 .44-.9 1.76 1.76 0 0 1 1.22-.39z\"/>\n      </svg>`\n    },\n    {\n        name: 'does_not_contain',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21,19.74V3H4.26L2.89,1.63,1.63,2.92,3,4.29V21H19.73l1.37,1.37,1.27-1.26ZM5,19V6.28l5.28,5.27a3.19,3.19,0,0,0-.81.38,2.07,2.07,0,0,0-.9,1.78,2.29,2.29,0,0,0,.66,1.74,2.63,2.63,0,0,0,1.89.63,2.39,2.39,0,0,0,1.32-.37,3.05,3.05,0,0,0,1-.93,3.72,3.72,0,0,0,.08.57c0,.19.1.38.16.58h1L17.73,19Zm5.79-6.23a1.31,1.31,0,0,1,.45-.25l1.37,1.36.28.29a1.57,1.57,0,0,1-.19.15,2.27,2.27,0,0,1-1.21.34,1.18,1.18,0,0,1-.84-.27.92.92,0,0,1-.3-.72A1.16,1.16,0,0,1,10.79,12.77Zm2.6-1.47h-.83L10.94,9.68l.08-.1a1.5,1.5,0,0,1,1-.29,1.45,1.45,0,0,1,1,.35,1.3,1.3,0,0,1,.37,1ZM19,17.74l-3.85-3.85V10.62a2.44,2.44,0,0,0-.84-2,3.34,3.34,0,0,0-2.22-.7,3.64,3.64,0,0,0-2.24.67L6.26,5H19Z\"/>\n    </svg>`\n    },\n    {\n        name: 'all',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M2 14h8v2H2zM2 6h12v2H2zM16 17l-3-3-1.5 1.5L16 20l7-7-1.5-1.5L16 17zM2 10h12v2H2z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 17h2v2H5zM13 17h2v2h-2zM5 13h2v2H5zM17 17h2v2h-2zM13 5h2v2h-2zM9 17h2v2H9zM17 9h2v2h-2zM17 13h2v2h-2zM17 5h2v2h-2zM5 9h2v2H5zM5 5h2v2H5zM9 5h2v2H9z\"/>\n      </svg>`\n    },\n    {\n        name: 'end_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M13.14 6.76L17.49 12l-4.35 5.24 1.54 1.28L20.09 12l-5.41-6.52-1.54 1.28z\"/>\n        <path d=\"M11.91 11h2v2h-2zM7.91 11h2v2h-2zM3.91 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'ends_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 14.5h2v2H3zM11 14.5h2v2h-2zM7 14.5h2v2H7zM20.8 14.8v-3A2.1 2.1 0 0 0 20 10a3 3 0 0 0-2-.6 3 3 0 0 0-2 .6 1.7 1.7 0 0 0-.7 1.5h1.5a.8.8 0 0 1 .3-.7 1.3 1.3 0 0 1 .9-.3 1.3 1.3 0 0 1 .9.4 1.1 1.1 0 0 1 .3.8v.6H18a3.8 3.8 0 0 0-2.2.6 1.8 1.8 0 0 0-.8 1.5 2 2 0 0 0 .6 1.6 2.3 2.3 0 0 0 1.6.6 2.1 2.1 0 0 0 1.2-.4 2.8 2.8 0 0 0 .8-.8 4.3 4.3 0 0 0 .1.5l.1.5H21a4.1 4.1 0 0 1-.2-.7 5.4 5.4 0 0 1 0-1zm-1.6-.5a1.5 1.5 0 0 1-.6.7 2 2 0 0 1-1 .2 1.1 1.1 0 0 1-.8-.2.8.8 0 0 1-.2-.6 1 1 0 0 1 .3-.8 1.5 1.5 0 0 1 1.1-.3h1.2z\"/>\n      </svg>`\n    },\n    {\n        name: 'equals',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 13.5h14v2H5zM5 8.5h14v2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 9.47L6 3v2.11L15.09 10 6 14.9v2.11l12-6.47V9.47z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 7.11L15.09 12 6 16.89V19l12-6.46v-1.08L6 5v2.11z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'is_after',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 7h4v10h-4v2h6V5h-6v2zM11 3h2v18h-2zM7 5h2v2H7zM3 5h2v2H3zM3 17h2v2H3zM3 13h2v2H3zM3 9h2v2H3zM7 17h2v2H7z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_before',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 19h6v-2H5V7h4V5H3v14zM11 3h2v18h-2zM15 5h2v2h-2zM19 5h2v2h-2zM19 13h2v2h-2zM15 17h2v2h-2zM19 17h2v2h-2zM19 9h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_false',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm4.31 9.79l-1.52 1.52L8 13.52l-2.79 2.79-1.52-1.52L6.48 12 3.69 9.21l1.52-1.52L8 10.48l2.79-2.79 1.52 1.52L9.52 12zM18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7z\"/>\n        <path d=\"M17.52 13.85l2.91-2.92-.78-.78-2.13 2.12-1.17-1.15-.38.37-.41.41.42.42L17 13.34l.52.51z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_not_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M16.58 6.07l.79-1.36-1.74-1-.78 1.35a7.5 7.5 0 0 0-7.43 12.87l-.79 1.36 1.74 1 .78-1.35a7.5 7.5 0 0 0 7.43-12.87zM6.5 12A5.5 5.5 0 0 1 12 6.5a5.65 5.65 0 0 1 1.84.32l-5.41 9.36A5.49 5.49 0 0 1 6.5 12zm5.5 5.5a5.65 5.65 0 0 1-1.84-.32l5.41-9.36A5.5 5.5 0 0 1 12 17.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M12 4.5a7.5 7.5 0 1 0 7.5 7.5A7.5 7.5 0 0 0 12 4.5zm0 13a5.5 5.5 0 1 1 5.5-5.5 5.5 5.5 0 0 1-5.5 5.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_true',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19.44 14.22zM16.56 14.22zM16.56 14.22L18 12.79l1.44 1.43.78-.78L18.79 12l1.43-1.44-.78-.78L18 11.21l-1.44-1.43-.78.78L17.21 12l-1.43 1.44.78.78z\"/>\n        <path d=\"M18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7zM8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm-.93 10.18l-3.38-3.37 1.13-1.12 2.25 2.25 4.11-4.12 1.13 1.12z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.5 14a4.48 4.48 0 1 0 4.5 4.5 4.47 4.47 0 0 0-4.5-4.5zm3.5 5.5h-4v2l-3-3 3-3v2h4zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 10v11H7v2h14a2 2 0 0 0 2-2V10z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.87 9l-2.99 3 2.99 3v-2.25h5.26v-1.5H8.87V9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 14.9L8.91 10 18 5.11V3L6 9.47v1.07l12 6.47V14.9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 12.54L18 19v-2.11L8.91 12 18 7.11V5L6 11.46v1.08z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M20 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2 6.74v-2h-4v-2h4v-2l3 3zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M11.13 11.25H5.88v1.5h5.25V15l3-3-3-3v2.25z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 9h2v2H5zM9 17h2v2H9zM13 17h2v2h-2zM17 9h2v2h-2zM17 5h2v2h-2zM5 17h2v2H5zM13 5h2v2h-2zM5 13h2v2H5zM19 15v-2h-2v.47L18.53 15H19zM11 7V5H9v.46L10.54 7H11zM2.76 1.76L1.5 3.06 20.97 22.5l1.26-1.26-8.89-8.89L2.76 1.76z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.37 4.71l-1.74-1-2.76 4.79H5v2h6.71l-1.73 3H5v2h3.82l-2.19 3.79 1.74 1 2.76-4.79H19v-2h-6.71l1.73-3H19v-2h-3.82l2.19-3.79z\"/>\n      </svg>`\n    },\n    {\n        name: 'start_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M18.1 11h2v2h-2zM10.1 11h2v2h-2z\"/>\n        <path d=\"M10.9 6.8L9.3 5.5 4 12l5.4 6.5 1.6-1.3L6.5 12 11 6.8zM14.1 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'starts_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path fill=\"none\" d=\"M4.97 13.23h3.06L6.5 9.12l-1.53 4.11z\"/>\n        <path d=\"M5.89 7.5L2 16.5h1.72l.73-1.8h4.1l.73 1.8H11l-3.89-9zM5 13.23l1.5-4.11L8 13.23zM12 14.5h2v2h-2zM20 14.5h2v2h-2zM16 14.5h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 9h2v2H6zM6 13h2v2H6zM11 13h2v2h-2zM6 17h2v2H6zM11 17h2v2h-2zM11 9h2v2h-2zM16 9h2v2h-2zM21 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2.94 5.41l-1.75-1.76.69-.71 1.05 1L20 16.83l.71.71z\"/>\n        <path d=\"M5 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H8V1H6v2H5a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.85 13.15l-1.77-1.77-.88.89 2.65 2.65 4.95-4.96-.88-.88-4.07 4.07z\"/>\n      </svg>`\n    },\n    {\n        name: 'today',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n        <path d=\"M16.53 12.06L15.47 11l-4.88 4.88-2.12-2.12-1.06 1.06L10.59 18l5.94-5.94z\"/>\n      </svg>`\n    },\n    {\n        name: 'ungroup',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 15h5v5h-5zM6 13h5v5H6zM13 6h5v5h-5zM6 6h5v5H6z\"/>\n        <path d=\"M20 2H4a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h9v-2H4V4h16v9h2V4a2 2 0 0 0-2-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'yesterday',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M10.68 15.38h6.13v-1.75h-6.13V11l-3.49 3.5 3.49 3.5v-2.62z\"/>\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n      </svg>`\n    },\n    {\n        name: 'pin',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15.18 2.25l7.07 7.07-2.83-.01-3.54 3.55.01 4.24-3.53-3.54-5.66 5.66H5.28V17.8l5.66-5.66L7.4 8.61l4.24.01 3.55-3.54-.01-2.83z\"/>\n      </svg>`\n    },\n    {\n        name: 'unpin',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path fill=\"none\" d=\"M0 0h24v25H0V0z\"/>\n        <path d=\"M11.84 14.08L6.7 19.22H5.28V17.8l5.14-5.14L2 4.26 3.29 3l18 18L20 22.21zm4-.49l-5-5h.73l3.55-3.54v-2.8l7.07 7.07h-2.77l-3.54 3.54z\" />\n      </svg>`\n    },\n    {\n        name: 'ungroup',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n          <path d=\"M18,4.5H6A1.5,1.5,0,0,0,4.5,6V18A1.5,1.5,0,0,0,6,19.5h6.75V18H6V6H18v6.75h1.5V6A1.5,1.5,0,0,0,18,4.5Z\"/>\n          <rect x=\"7.5\" y=\"12.75\" width=\"3.75\" height=\"3.75\"/>\n          <rect x=\"14.25\" y=\"14.25\" width=\"3.75\" height=\"3.75\"/>\n          <rect x=\"7.5\" y=\"7.5\" width=\"3.75\" height=\"3.75\"/>\n          <rect x=\"12.75\" y=\"7.5\" width=\"3.75\" height=\"3.75\"/>\n        </svg>`\n    }\n];\n","import { Pipe, PipeTransform, Inject, LOCALE_ID } from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\nimport { GridType } from './grid.interface';\nimport { DatePipe, DecimalPipe } from '@angular/common';\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxCellStyleClasses'\n})\nexport class IgxGridCellStyleClassesPipe implements PipeTransform {\n\n    transform(cssClasses: { [prop: string]: any }, value: any, data: any, field: string, index: number): string {\n        if (!cssClasses) {\n            return '';\n        }\n\n        const result = [];\n\n        for (const cssClass of Object.keys(cssClasses)) {\n            const callbackOrValue = cssClasses[cssClass];\n            const apply = typeof callbackOrValue === 'function' ? callbackOrValue(data, field, value, index) : callbackOrValue;\n            if (apply) {\n                result.push(cssClass);\n            }\n        }\n\n        return result.join(' ');\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxCellStyles'\n})\nexport class IgxGridCellStylesPipe implements PipeTransform {\n\n    transform(styles: { [prop: string]: any }, value: any, data: any, field: string, index: number): { [prop: string]: any } {\n        const css = {};\n        if (!styles) {\n            return css;\n        }\n\n        for (const prop of Object.keys(styles)) {\n            const res = styles[prop];\n            css[prop] = typeof res === 'function' ? res(data, field, value, index) : res;\n        }\n\n        return css;\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxNotGrouped'\n})\nexport class IgxGridNotGroupedPipe implements PipeTransform {\n\n    transform(value: any[]): any[] {\n        return value.filter(item => !item.columnGroup);\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxTopLevel'\n})\nexport class IgxGridTopLevelColumns implements PipeTransform {\n\n    transform(value: any[]): any[] {\n        return value.filter(item => item.level === 0);\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'filterCondition',\n    pure: true\n})\nexport class IgxGridFilterConditionPipe implements PipeTransform {\n\n    public transform(value: string): string {\n        return value.split(/(?=[A-Z])/).join(' ');\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'gridTransaction',\n    pure: true\n})\nexport class IgxGridTransactionPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) { }\n\n    transform(collection: any[], id: string, pipeTrigger: number) {\n        const grid: IgxGridBaseDirective = this.gridAPI.grid;\n\n        if ( grid.transactions.enabled) {\n            const result = DataUtil.mergeTransactions(\n                cloneArray(collection),\n                grid.transactions.getAggregatedChanges(true),\n                grid.primaryKey);\n            return result;\n        }\n        return collection;\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'paginatorOptions',\n    pure: true,\n})\nexport class IgxGridPaginatorOptionsPipe implements PipeTransform {\n    public transform(values: Array<number>) {\n        return Array.from(new Set([...values])).sort((a, b) => a - b);\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'visibleColumns',\n    pure: true\n})\nexport class IgxHasVisibleColumnsPipe implements PipeTransform {\n    transform(values: any[], hasVisibleColumns) {\n        if (!(values && values.length)) {\n            return values;\n        }\n        return hasVisibleColumns ? values : [];\n    }\n\n}\n\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxdate'\n})\nexport class IgxDatePipeComponent extends DatePipe implements PipeTransform {\n\n    private readonly DEFAULT_DATE_FORMAT = 'mediumDate';\n\n    constructor(@Inject(LOCALE_ID) locale: string) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(locale);\n    }\n    transform(value: any, locale: string): string {\n        if (value && value instanceof Date) {\n            if (locale) {\n                return super.transform(value, this.DEFAULT_DATE_FORMAT, undefined, locale);\n            } else {\n                return super.transform(value);\n            }\n        } else {\n            return value;\n        }\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxdecimal'\n})\nexport class IgxDecimalPipeComponent extends DecimalPipe implements PipeTransform {\n    constructor(@Inject(LOCALE_ID) locale: string) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(locale);\n    }\n    transform(value: any, locale: string): string {\n        if (value && typeof value === 'number') {\n            if (locale) {\n                return super.transform(value, undefined, locale);\n            } else {\n                return super.transform(value);\n            }\n        } else {\n            return value;\n        }\n    }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { IgxIconService } from '../../icon/icon.service';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport icons from './svgIcons';\nimport { IFilteringExpression, FilteringLogic } from '../../data-operations/filtering-expression.interface';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IForOfState } from '../../directives/for-of/for_of.directive';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IFilteringOperation } from '../../data-operations/filtering-condition';\nimport { GridBaseAPIService } from '../api.service';\nimport { IColumnVisibilityChangedEventArgs } from '../grid';\nimport { IColumnResizeEventArgs } from '../common/events';\nimport { GridType } from '../common/grid.interface';\nimport { IgxDatePipeComponent } from '../common/pipes';\n\nconst FILTERING_ICONS_FONT_SET = 'filtering-icons';\n\n/**\n *@hidden\n */\nexport class ExpressionUI {\n    public expression: IFilteringExpression;\n    public beforeOperator: FilteringLogic;\n    public afterOperator: FilteringLogic;\n    public isSelected = false;\n    public isVisible = true;\n}\n\n/**\n *@hidden\n */\n@Injectable()\nexport class IgxFilteringService implements OnDestroy {\n\n    private columnsWithComplexFilter = new Set<string>();\n    private areEventsSubscribed = false;\n    private destroy$ = new Subject<boolean>();\n    private isFiltering = false;\n    private columnToExpressionsMap = new Map<string, ExpressionUI[]>();\n    private _datePipe: IgxDatePipeComponent;\n    private columnStartIndex = -1;\n    private _filterIconsRegistered = false;\n\n    public gridId: string;\n    public isFilterRowVisible = false;\n    public filteredColumn: IgxColumnComponent = null;\n    public selectedExpression: IFilteringExpression = null;\n    public columnToFocus: IgxColumnComponent = null;\n    public shouldFocusNext = false;\n    public columnToMoreIconHidden = new Map<string, boolean>();\n\n    grid: IgxGridBaseDirective;\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>, private iconService: IgxIconService) {}\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    public get displayContainerWidth() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10);\n    }\n\n    public get displayContainerScrollLeft() {\n        return this.grid.headerContainer.scrollPosition;\n    }\n\n    public get areAllColumnsInView() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10) === 0;\n    }\n\n    public get unpinnedFilterableColumns() {\n        return this.grid.unpinnedColumns.filter(col => !col.columnGroup && col.filterable);\n    }\n\n    public get unpinnedColumns() {\n        return this.grid.unpinnedColumns.filter(col => !col.columnGroup);\n    }\n\n    public get datePipe(): IgxDatePipeComponent {\n        if (!this._datePipe) {\n            this._datePipe = new IgxDatePipeComponent(this.grid.locale);\n        }\n        return this._datePipe;\n    }\n\n    /**\n     * Subscribe to grid's events.\n     */\n    public subscribeToEvents() {\n        if (!this.areEventsSubscribed) {\n            this.areEventsSubscribed = true;\n\n            this.grid.onColumnResized.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IColumnResizeEventArgs) => {\n                this.updateFilteringCell(eventArgs.column);\n            });\n\n            this.grid.parentVirtDir.onChunkLoad.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IForOfState) => {\n                if (eventArgs.startIndex !== this.columnStartIndex) {\n                    this.columnStartIndex = eventArgs.startIndex;\n                    this.grid.filterCellList.forEach((filterCell) => {\n                        filterCell.updateFilterCellArea();\n                    });\n                }\n                if (this.columnToFocus) {\n                    this.focusFilterCellChip(this.columnToFocus, false);\n                    this.columnToFocus = null;\n                }\n            });\n\n            this.grid.onColumnMovingEnd.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.grid.filterCellList.forEach((filterCell) => {\n                    filterCell.updateFilterCellArea();\n                });\n            });\n\n            this.grid.onColumnVisibilityChanged.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IColumnVisibilityChangedEventArgs) => {\n                if (this.grid.filteringRow && this.grid.filteringRow.column === eventArgs.column ) {\n                    this.grid.filteringRow.close();\n\n                }\n            });\n        }\n    }\n\n    /**\n     * Internal method to create expressionsTree and filter grid used in both filter modes.\n     */\n    public filterInternal(field: string, expressions: FilteringExpressionsTree | Array<ExpressionUI> = null): void {\n        this.isFiltering = true;\n\n        let expressionsTree;\n        if (expressions instanceof FilteringExpressionsTree) {\n            expressionsTree = expressions;\n        } else {\n            expressionsTree = this.createSimpleFilteringTree(field, expressions);\n        }\n\n        if (expressionsTree.filteringOperands.length === 0) {\n            this.clearFilter(field);\n        } else {\n            this.filter(field, null, expressionsTree);\n        }\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Execute filtering on the grid.\n     */\n    public filter(field: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        const col = this.gridAPI.get_column_by_name(field);\n        const filteringIgnoreCase = ignoreCase || (col ? col.filteringIgnoreCase : false);\n\n        if (conditionOrExpressionTree) {\n            this.gridAPI.filter(field, value, conditionOrExpressionTree, filteringIgnoreCase);\n        } else {\n            const expressionsTreeForColumn = this.grid.filteringExpressionsTree.find(field);\n            if (!expressionsTreeForColumn) {\n                throw new Error('Invalid condition or Expression Tree!');\n            } else if (expressionsTreeForColumn instanceof FilteringExpressionsTree) {\n                this.gridAPI.filter(field, value, expressionsTreeForColumn, filteringIgnoreCase);\n            } else {\n                const expressionForColumn = expressionsTreeForColumn as IFilteringExpression;\n                this.gridAPI.filter(field, value, expressionForColumn.condition, filteringIgnoreCase);\n            }\n        }\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(col.filteringExpressionsTree));\n    }\n\n    /**\n     * Clear the filter of a given column.\n     */\n    public clearFilter(field: string): void {\n        if (field) {\n            const column = this.gridAPI.get_column_by_name(field);\n            if (!column) {\n                return;\n            }\n        }\n\n        this.isFiltering = true;\n\n        this.gridAPI.clear_filter(field);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(null));\n\n        if (field) {\n            const expressions = this.getExpressions(field);\n            expressions.length = 0;\n        }\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     */\n    public filterGlobal(value: any, condition, ignoreCase?) {\n        this.gridAPI.filter_global(value, condition, ignoreCase);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(this.grid.filteringExpressionsTree));\n    }\n\n    /**\n     * Register filtering SVG icons in the icon service.\n     */\n    public registerSVGIcons(): void {\n        if (!this._filterIconsRegistered) {\n            for (const icon of icons) {\n                if (!this.iconService.isSvgIconCached(icon.name, FILTERING_ICONS_FONT_SET)) {\n                    this.iconService.addSvgIconFromText(icon.name, icon.value, FILTERING_ICONS_FONT_SET);\n                }\n            }\n            this._filterIconsRegistered = true;\n        }\n    }\n\n    /**\n     * Returns the ExpressionUI array for a given column.\n     */\n    public getExpressions(columnId: string): ExpressionUI[] {\n        if (!this.columnToExpressionsMap.has(columnId)) {\n            const column = this.grid.columns.find((col) => col.field === columnId);\n            const expressionUIs = new Array<ExpressionUI>();\n            if (column) {\n                this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, expressionUIs);\n                this.columnToExpressionsMap.set(columnId, expressionUIs);\n            }\n            return expressionUIs;\n        }\n\n        return this.columnToExpressionsMap.get(columnId);\n    }\n\n    /**\n     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.\n     */\n    public refreshExpressions() {\n        if (!this.isFiltering) {\n            this.columnsWithComplexFilter.clear();\n\n            this.columnToExpressionsMap.forEach((value: ExpressionUI[], key: string) => {\n                const column = this.grid.columns.find((col) => col.field === key);\n                if (column) {\n                    value.length = 0;\n\n                    this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, value);\n\n                    const isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);\n                    if (isComplex) {\n                        this.columnsWithComplexFilter.add(key);\n                    }\n\n                    this.updateFilteringCell(column);\n                } else {\n                    this.columnToExpressionsMap.delete(key);\n                }\n            });\n        }\n    }\n\n    /**\n     * Remove an ExpressionUI for a given column.\n     */\n    public removeExpression(columnId: string, indexToRemove: number) {\n        const expressionsList = this.getExpressions(columnId);\n\n        if (indexToRemove === 0 && expressionsList.length > 1) {\n            expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === expressionsList.length - 1) {\n            expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            expressionsList[indexToRemove - 1].afterOperator = expressionsList[indexToRemove + 1].beforeOperator;\n            expressionsList[0].beforeOperator = null;\n            expressionsList[expressionsList.length - 1].afterOperator = null;\n        }\n\n        expressionsList.splice(indexToRemove, 1);\n    }\n\n    /**\n     * Generate filtering tree for a given column from existing ExpressionUIs.\n     */\n    public createSimpleFilteringTree(columnId: string, expressionUIList = null): FilteringExpressionsTree {\n        const expressionsList = expressionUIList ? expressionUIList : this.getExpressions(columnId);\n        const expressionsTree = new FilteringExpressionsTree(FilteringLogic.Or, columnId);\n        let currAndBranch: FilteringExpressionsTree;\n        let currExpressionUI: ExpressionUI;\n\n        for (let i = 0; i < expressionsList.length; i++) {\n            currExpressionUI = expressionsList[i];\n\n            if (!currExpressionUI.expression.condition.isUnary && currExpressionUI.expression.searchVal === null) {\n                if (currExpressionUI.afterOperator === FilteringLogic.And && !currAndBranch) {\n                    currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                    expressionsTree.filteringOperands.push(currAndBranch);\n                }\n                continue;\n            }\n\n            if ((currExpressionUI.beforeOperator === undefined || currExpressionUI.beforeOperator === null ||\n                 currExpressionUI.beforeOperator === FilteringLogic.Or) &&\n                currExpressionUI.afterOperator === FilteringLogic.And) {\n\n                currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                expressionsTree.filteringOperands.push(currAndBranch);\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n\n            } else if (currExpressionUI.beforeOperator === FilteringLogic.And) {\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n            } else {\n                expressionsTree.filteringOperands.push(currExpressionUI.expression);\n                currAndBranch = null;\n            }\n        }\n\n        return expressionsTree;\n    }\n\n    /**\n     * Returns whether a complex filter is applied to a given column.\n     */\n    public isFilterComplex(columnId: string) {\n        if (this.columnsWithComplexFilter.has(columnId)) {\n            return true;\n        }\n\n        const column = this.grid.columns.find((col) => col.field === columnId);\n        const isComplex = column && this.isFilteringTreeComplex(column.filteringExpressionsTree);\n        if (isComplex) {\n            this.columnsWithComplexFilter.add(columnId);\n        }\n\n        return isComplex;\n    }\n\n    /**\n     * Returns the string representation of the FilteringLogic operator.\n     */\n    public getOperatorAsString(operator: FilteringLogic): any {\n        if (operator === 0) {\n            return this.grid.resourceStrings.igx_grid_filter_operator_and;\n        } else {\n            return this.grid.resourceStrings.igx_grid_filter_operator_or;\n        }\n    }\n\n    /**\n     * Generate the label of a chip from a given filtering expression.\n     */\n    public getChipLabel(expression: IFilteringExpression): any {\n        if (expression.condition.isUnary) {\n            return this.grid.resourceStrings[`igx_grid_filter_${expression.condition.name}`] || expression.condition.name;\n        } else if (expression.searchVal instanceof Date) {\n            return this.datePipe.transform(expression.searchVal, this.grid.locale);\n        } else {\n            return expression.searchVal;\n        }\n    }\n\n    /**\n     * Updates the content of a filterCell.\n     */\n    public updateFilteringCell(column: IgxColumnComponent) {\n        const filterCell = column.filterCell;\n        if (filterCell) {\n            filterCell.updateFilterCellArea();\n        }\n    }\n\n    /**\n     * Focus a chip in a filterCell.\n     */\n    public focusFilterCellChip(column: IgxColumnComponent, focusFirst: boolean) {\n        const filterCell = column.filterCell;\n        if (filterCell) {\n            filterCell.focusChip(focusFirst);\n        }\n    }\n\n    /**\n     * Focus the close button in the filtering row.\n     */\n    public focusFilterRowCloseButton() {\n        this.grid.filteringRow.closeButton.nativeElement.focus();\n    }\n\n    public get filteredData() {\n        return this.grid.filteredData;\n    }\n\n    /**\n     * Scrolls to a filterCell.\n     */\n    public scrollToFilterCell(column: IgxColumnComponent, shouldFocusNext: boolean) {\n        this.grid.nativeElement.focus({preventScroll: true});\n        this.columnToFocus = column;\n        this.shouldFocusNext = shouldFocusNext;\n\n        let currentColumnRight = 0;\n        let currentColumnLeft = 0;\n        for (let index = 0; index < this.unpinnedColumns.length; index++) {\n            currentColumnRight += parseInt(this.unpinnedColumns[index].width, 10);\n            if (this.unpinnedColumns[index] === column) {\n                currentColumnLeft = currentColumnRight - parseInt(this.unpinnedColumns[index].width, 10);\n                break;\n            }\n        }\n\n        const forOfDir = this.grid.headerContainer;\n        const width = this.displayContainerWidth + this.displayContainerScrollLeft;\n        if (shouldFocusNext) {\n            forOfDir.scrollPosition += currentColumnRight - width;\n        } else {\n            forOfDir.scrollPosition = currentColumnLeft;\n        }\n    }\n\n    private isFilteringTreeComplex(expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (!expressions) {\n            return false;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            if (expressionsTree.operator === FilteringLogic.Or) {\n                const andOperatorsCount = this.getChildAndOperatorsCount(expressionsTree);\n\n                // having more that 'And' and operator in the sub-tree means that the filter could not be represented without parentheses.\n                return andOperatorsCount > 1;\n            }\n\n            let isComplex = false;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                isComplex = isComplex || this.isFilteringTreeComplex(expressionsTree.filteringOperands[i]);\n            }\n\n            return isComplex;\n        }\n\n        return false;\n    }\n\n    private getChildAndOperatorsCount(expressions: IFilteringExpressionsTree): number {\n        let count = 0;\n        let operand;\n        for (let i = 0; i < expressions.filteringOperands.length; i++) {\n            operand = expressions[i];\n            if (operand instanceof FilteringExpressionsTree) {\n                if (operand.operator === FilteringLogic.And) {\n                    count++;\n                }\n\n                count = count + this.getChildAndOperatorsCount(operand);\n            }\n        }\n\n        return count;\n    }\n\n    public generateExpressionsList(expressions: IFilteringExpressionsTree | IFilteringExpression,\n        operator: FilteringLogic,\n        expressionsUIs: ExpressionUI[]): void {\n        this.generateExpressionsListRecursive(expressions, operator, expressionsUIs);\n\n        // The beforeOperator of the first expression and the afterOperator of the last expression should be null\n        if (expressionsUIs.length) {\n            expressionsUIs[expressionsUIs.length - 1].afterOperator = null;\n        }\n    }\n\n    private generateExpressionsListRecursive(expressions: IFilteringExpressionsTree | IFilteringExpression,\n                                    operator: FilteringLogic,\n                                    expressionsUIs: ExpressionUI[]): void {\n        if (!expressions) {\n            return;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                this.generateExpressionsListRecursive(expressionsTree.filteringOperands[i], expressionsTree.operator, expressionsUIs);\n            }\n            if (expressionsUIs.length) {\n                expressionsUIs[expressionsUIs.length - 1].afterOperator = operator;\n            }\n        } else {\n            const exprUI = new ExpressionUI();\n            exprUI.expression = expressions as IFilteringExpression;\n            exprUI.afterOperator = operator;\n\n            const prevExprUI = expressionsUIs[expressionsUIs.length - 1];\n            if (prevExprUI) {\n                exprUI.beforeOperator = prevExprUI.afterOperator;\n            }\n\n            expressionsUIs.push(exprUI);\n        }\n    }\n\n    public isFilteringExpressionsTreeEmpty(expressionTree: IFilteringExpressionsTree): boolean {\n        if (FilteringExpressionsTree.empty(expressionTree)) {\n            return true;\n        }\n\n        let expr: any;\n\n        for (let i = 0; i < expressionTree.filteringOperands.length; i++) {\n            expr = expressionTree.filteringOperands[i];\n\n            if ((expr instanceof FilteringExpressionsTree)) {\n                const exprTree = expr as FilteringExpressionsTree;\n                if (exprTree.filteringOperands && exprTree.filteringOperands.length) {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { IgxColumnComponent } from '../columns/column.component';\n\n/**\n * @hidden\n * @internal\n */\n@Injectable()\nexport class IgxColumnResizingService {\n\n    private pinnedMaxWidth: string;\n\n    /**\n     *@hidden\n     */\n    public startResizePos: number;\n    /**\n     * Indicates that a column is currently being resized.\n     */\n    public isColumnResizing: boolean;\n    /**\n     *@hidden\n     */\n    public resizeCursor: string = null;\n    /**\n     *@hidden\n     */\n    public showResizer = false;\n    /**\n     * The column being resized.\n     */\n    public column: IgxColumnComponent;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     *@hidden\n     */\n    get resizerHeight(): number {\n        let height = this.column.grid.getVisibleContentHeight();\n\n        // Column height multiplier in case there are Column Layouts. The resizer height need to take into account rowStart.\n        let columnHeightMultiplier = 1;\n        if (this.column.columnLayoutChild) {\n            columnHeightMultiplier = this.column.grid.multiRowLayoutRowSize - this.column.rowStart + 1;\n        }\n\n        if (this.column.level !== 0) {\n            height -= this.column.topLevelParent.headerGroup.height - this.column.headerGroup.height * columnHeightMultiplier;\n        }\n\n        return height;\n    }\n\n    /**\n     * Returns the minimal possible width to which the column can be resized.\n     */\n    get restrictResizeMin(): number {\n        const actualMinWidth = parseFloat(this.column.minWidth);\n        const minWidth = actualMinWidth < parseFloat(this.column.width) ? actualMinWidth : parseFloat(this.column.width);\n\n        return this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width - minWidth;\n    }\n\n    /**\n     * Returns the maximal possible width to which the column can be resized.\n     */\n    get restrictResizeMax(): number {\n        const actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        if (this.column.maxWidth) {\n            return parseFloat(this.column.maxWidth) - actualWidth;\n        } else {\n            return Number.MAX_SAFE_INTEGER;\n        }\n    }\n\n    /**\n     * Autosizes the column to the longest currently visible cell value, including the header cell.\n     * If the column has a predifined maxWidth and the autosized column width will become bigger than it,\n     * then the column is sized to its maxWidth.\n     * If the column is pinned and the autosized column width will cause the pinned area to become bigger\n     * than the maximum allowed pinned area width (80% of the total grid width), autosizing will be deismissed.\n     */\n    public autosizeColumnOnDblClick() {\n        const currentColWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n\n        const size = this.column.getLargestCellWidth();\n        if (this.column.maxWidth && (parseFloat(size) > parseFloat(this.column.maxWidth))) {\n            this.column.width = parseFloat(this.column.maxWidth) + 'px';\n        } else if (parseFloat(size) < parseFloat(this.column.minWidth)) {\n            this.column.width = this.column.minWidth + 'px';\n        } else {\n            this.column.width = size;\n        }\n\n        this.zone.run(() => {});\n\n        this.column.grid.onColumnResized.emit({\n            column: this.column,\n            prevWidth: currentColWidth.toString(),\n            newWidth: this.column.width\n        });\n    }\n\n    /**\n     * Resizes the column regaridng to the column minWidth and maxWidth.\n     */\n    public resizeColumn(event: MouseEvent) {\n        this.showResizer = false;\n        const diff = event.clientX - this.startResizePos;\n\n        let currentColWidth = parseFloat(this.column.width);\n        const actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;\n\n        const colMinWidth = this.getColMinWidth(this.column);\n        const colMaxWidth = this.getColMaxWidth(this.column);\n        if (this.column.grid.hasColumnLayouts) {\n            this.resizeColumnLayoutFor(this.column, diff);\n        } else {\n            if (currentColWidth + diff < colMinWidth) {\n                this.column.width = colMinWidth + 'px';\n            } else if (colMaxWidth && (currentColWidth + diff > colMaxWidth)) {\n                this.column.width = colMaxWidth + 'px';\n            } else {\n                this.column.width = (currentColWidth + diff) + 'px';\n            }\n        }\n\n        this.zone.run(() => {});\n\n        if (currentColWidth !== parseFloat(this.column.width)) {\n            this.column.grid.onColumnResized.emit({\n                column: this.column,\n                prevWidth: currentColWidth.toString(),\n                newWidth: this.column.width\n            });\n        }\n\n        this.isColumnResizing = false;\n    }\n\n    protected getColMinWidth(column: IgxColumnComponent) {\n        let currentColWidth = parseFloat(column.width);\n        const actualWidth = column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;\n\n        const actualMinWidth = parseFloat(column.minWidth);\n        return actualMinWidth < currentColWidth ? actualMinWidth : currentColWidth;\n    }\n\n    protected getColMaxWidth(column: IgxColumnComponent) {\n        return column.pinned ? parseFloat(this.pinnedMaxWidth) : parseFloat(column.maxWidth);\n    }\n\n    protected resizeColumnLayoutFor(column: IgxColumnComponent, diff: number) {\n        const relativeColumns = column.getResizableColUnderEnd();\n        const combinedSpan = relativeColumns.reduce((acc, col) =>  acc + col.spanUsed, 0);\n\n        // Resize first those who might reach min/max width\n        let columnsToResize = [...relativeColumns];\n        let updatedDiff = diff;\n        let updatedCombinedSpan = combinedSpan;\n        let setMinMaxCols = false;\n        do {\n            // Cycle them until there are not ones that reach min/max size, because the diff accumulates after each cycle.\n            // This is because we can have at first 2 cols reaching min width and then after\n            // recalculating the diff there might be 1 more that reaches min width.\n            setMinMaxCols = false;\n            let newCombinedSpan = updatedCombinedSpan;\n            const newColsToResize = [];\n            columnsToResize.forEach((col) => {\n                const currentResizeWidth = parseFloat(col.target.calcWidth);\n                const resizeScaled = (diff / updatedCombinedSpan) * col.target.gridColumnSpan;\n\n                const minWidth = this.getColMinWidth(col.target);\n                const maxWidth = this.getColMaxWidth(col.target);\n                if (currentResizeWidth + resizeScaled < minWidth) {\n                    col.target.width = minWidth + 'px';\n                    updatedDiff += (currentResizeWidth - minWidth);\n                    newCombinedSpan -= col.spanUsed;\n                    setMinMaxCols = true;\n                } else if (maxWidth && (currentResizeWidth + resizeScaled > maxWidth)) {\n                    col.target.width = maxWidth + 'px';\n                    updatedDiff -= (maxWidth - currentResizeWidth);\n                    newCombinedSpan -= col.spanUsed;\n                    setMinMaxCols = true;\n                } else {\n                    // Save new ones that can be resized\n                    newColsToResize.push(col);\n                }\n            });\n\n            updatedCombinedSpan = newCombinedSpan;\n            columnsToResize = newColsToResize;\n        } while (setMinMaxCols);\n\n        // Those left that don't reach min/max size resize them normally.\n        columnsToResize.forEach((col) => {\n            const currentResizeWidth = parseFloat(col.target.calcWidth);\n            const resizeScaled = (updatedDiff / updatedCombinedSpan) * col.target.gridColumnSpan;\n            col.target.width = (currentResizeWidth + resizeScaled) + 'px';\n        });\n    }\n}\n","import { Directive, Input, Output, EventEmitter, ElementRef, OnDestroy, NgZone, OnInit } from '@angular/core';\nimport { interval, Observable, Subscription, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nexport enum DragScrollDirection {\n    NONE,\n    LEFT,\n    TOP,\n    RIGHT,\n    BOTTOM,\n    TOPLEFT,\n    TOPRIGHT,\n    BOTTOMLEFT,\n    BOTTOMRIGHT\n}\n\n\n@Directive({\n    selector: '[igxGridDragSelect]'\n})\nexport class IgxGridDragSelectDirective implements OnInit, OnDestroy {\n    _activeDrag: boolean;\n\n    @Input('igxGridDragSelect')\n    get activeDrag(): boolean {\n        return this._activeDrag;\n    }\n\n    set activeDrag(val: boolean) {\n        if (val !== this._activeDrag) {\n            this.unsubscribe();\n            this._activeDrag = val;\n        }\n    }\n\n    @Output()\n    onDragStop = new EventEmitter<boolean>();\n\n    @Output()\n    onDragScroll = new EventEmitter<DragScrollDirection>();\n\n    get nativeElement(): HTMLElement {\n        return this.ref.nativeElement;\n    }\n\n    get clientRect(): ClientRect {\n        return this.nativeElement.getBoundingClientRect();\n    }\n\n    protected end$ = new Subject<any>();\n    protected lastDirection = DragScrollDirection.NONE;\n    protected _interval$: Observable<any>;\n    protected _sub: Subscription;\n\n    constructor(private ref: ElementRef, private zone: NgZone) {\n        this._interval$ = interval(100).pipe(\n            takeUntil(this.end$),\n            filter(() => this.activeDrag)\n        );\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.addEventListener('pointerover', this.startDragSelection);\n            this.nativeElement.addEventListener('pointerleave', this.stopDragSelection);\n        });\n    }\n\n    ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.removeEventListener('pointerover', this.startDragSelection);\n            this.nativeElement.removeEventListener('pointerleave', this.stopDragSelection);\n        });\n        this.unsubscribe();\n        this.end$.complete();\n    }\n\n\n    startDragSelection = (ev: PointerEvent) => {\n        if (!this.activeDrag) {\n            return;\n        }\n        const x = ev.clientX;\n        const y = ev.clientY;\n        const direction = this._measureDimensions(x, y);\n        if (direction === this.lastDirection) {\n            return;\n        }\n        this.unsubscribe();\n        this._sub = this._interval$.subscribe(() => this.onDragScroll.emit(direction));\n        this.lastDirection = direction;\n    }\n\n    stopDragSelection = () => {\n        if (!this.activeDrag) {\n            return;\n        }\n        this.onDragStop.emit(false);\n        this.unsubscribe();\n        this.lastDirection = DragScrollDirection.NONE;\n    }\n\n    _measureDimensions(x: number, y: number): DragScrollDirection {\n        let direction: DragScrollDirection;\n\n        const rect = this.clientRect;\n        const RATIO = 0.15;\n        const offsetX = Math.trunc(x - rect.left);\n        const offsetY = Math.trunc(y - rect.top);\n\n        const left = offsetX <= rect.width * RATIO;\n        const right = offsetX >= rect.width * (1 - RATIO);\n        const top = offsetY <= rect.height * RATIO;\n        const bottom = offsetY >= rect.height * (1 - RATIO);\n\n        if (top && left) {\n            direction = DragScrollDirection.TOPLEFT;\n        } else if (top && right) {\n            direction = DragScrollDirection.TOPRIGHT;\n        } else if (bottom && left) {\n            direction = DragScrollDirection.BOTTOMLEFT;\n        } else if (bottom && right) {\n            direction = DragScrollDirection.BOTTOMRIGHT;\n        } else if (top) {\n            direction = DragScrollDirection.TOP;\n        } else if (bottom) {\n            direction = DragScrollDirection.BOTTOM;\n        } else if (left) {\n            direction = DragScrollDirection.LEFT;\n        } else if (right) {\n            direction = DragScrollDirection.RIGHT;\n        } else {\n            direction = DragScrollDirection.NONE;\n        }\n\n        return direction;\n\n    }\n\n    protected unsubscribe() {\n        if (this._sub) {\n            this._sub.unsubscribe();\n        }\n    }\n}\n","\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Renderer2,\n    ViewChild\n} from '@angular/core';\n\nimport {\n    IgxListPanState,\n    IListChild,\n    IgxListBaseDirective\n} from './list.common';\n\nimport { HammerGesturesManager } from '../core/touch';\n\n/**\n * The Ignite UI List Item component is a container intended for row items in the Ignite UI for Angular List component.\n *\n * Example:\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-list-item',\n    templateUrl: 'list-item.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IgxListItemComponent implements IListChild {\n\n    /**\n     *@hidden\n     */\n    private _panState: IgxListPanState = IgxListPanState.NONE;\n\n    /**\n     *@hidden\n     */\n    private panOffset = 0;\n\n    /**\n     * @hidden\n     */\n    private _index: number = null;\n\n    /**\n     *@hidden\n     */\n    private lastPanDir = IgxListPanState.NONE;\n\n    /**\n     * Provides a reference to the template's base element shown when left panning a list item.\n     * ```typescript\n     * const leftPanTmpl = this.listItem.leftPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('leftPanningTmpl')\n    public leftPanningTemplateElement;\n\n    /**\n     * Provides a reference to the template's base element shown when right panning a list item.\n     * ```typescript\n     * const rightPanTmpl = this.listItem.rightPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('rightPanningTmpl')\n    public rightPanningTemplateElement;\n\n    constructor(\n        public list: IgxListBaseDirective,\n        private elementRef: ElementRef,\n        private _renderer: Renderer2) {\n    }\n\n    /**\n     * Sets/gets whether the `list item` is a header.\n     * ```html\n     * <igx-list-item [isHeader] = \"true\">Header</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHeader =  this.listItem.isHeader;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public isHeader: boolean;\n\n    /**\n     * Sets/gets whether the `list item` is hidden.\n     * By default the `hidden` value is `false`.\n     * ```html\n     * <igx-list-item [hidden] = \"true\">Hidden Item</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHidden =  this.listItem.hidden;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public hidden = false;\n\n    /**\n     * Gets the `role` attribute of the `list item`.\n     * ```typescript\n     * let itemRole =  this.listItem.role;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return this.isHeader ? 'separator' : 'listitem';\n    }\n\n    /**\n     * Sets/gets the `aria-label` attribute of the `list item`.\n     * ```typescript\n     * this.listItem.ariaLabel = \"Item1\";\n     * ```\n     * ```typescript\n     * let itemAriaLabel = this.listItem.ariaLabel;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel: string;\n\n    /**\n     * Gets the `touch-action` style of the `list item`.\n     * ```typescript\n     * let touchAction = this.listItem.touchAction;\n     * ```\n     */\n    @HostBinding('style.touch-action')\n    public touchAction = 'pan-y';\n\n    /**\n     * Indicates whether `list item` should have header style.\n     * ```typescript\n     * let headerStyle =  this.listItem.headerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__header')\n    get headerStyle(): boolean {\n        return this.isHeader;\n    }\n\n    /**\n     * Applies the inner style of the `list item` if the item is not counted as header.\n     * ```typescript\n     * let innerStyle =  this.listItem.innerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__item-base')\n    get innerStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * Returns string value which describes the display mode of the `list item`.\n     * ```typescript\n     * let isHidden = this.listItem.display;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('style.display')\n    get display(): string {\n        return this.hidden ? 'none' : '';\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    clicked(evt) {\n        this.list.onItemClicked.emit({ item: this, event: evt, direction: this.lastPanDir });\n        this.lastPanDir = IgxListPanState.NONE;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panstart', ['$event'])\n    panStart(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panmove', ['$event'])\n    panMove(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n        const isPanningToLeft = ev.deltaX < 0;\n        if (isPanningToLeft && this.isTrue(this.list.allowLeftPanning)) {\n            this.showLeftPanTemplate();\n            this.setContentElementLeft(Math.max(this.maxLeft, ev.deltaX));\n        } else if (!isPanningToLeft && this.isTrue(this.list.allowRightPanning)) {\n            this.showRightPanTemplate();\n            this.setContentElementLeft(Math.min(this.maxRight, ev.deltaX));\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panend', ['$event'])\n    panEnd(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n\n        // the translation offset of the current list item content\n        const relativeOffset = this.panOffset;\n        const widthTriggeringGrip = this.width * this.list.panEndTriggeringThreshold;\n\n        if (relativeOffset === 0) {\n            return; // no panning has occured\n        }\n\n        const dir = relativeOffset > 0 ? IgxListPanState.RIGHT : IgxListPanState.LEFT;\n        this.lastPanDir = dir;\n\n        const oldPanState = this._panState;\n        if (Math.abs(relativeOffset) < widthTriggeringGrip) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n            this.hideLeftAndRightPanTemplates();\n            return;\n        }\n\n        const args = { item: this, direction: dir, keepItem: false};\n\n        if (dir === IgxListPanState.LEFT) {\n            this.list.onLeftPan.emit(args);\n        } else {\n            this.list.onRightPan.emit(args);\n        }\n\n        if (args.keepItem === true) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n        } else {\n            if (dir === IgxListPanState.LEFT) {\n                this.setContentElementLeft(this.maxLeft);\n                this._panState = IgxListPanState.LEFT;\n            } else {\n                this.setContentElementLeft(this.maxRight);\n                this._panState = IgxListPanState.RIGHT;\n            }\n        }\n\n        if (oldPanState !== this._panState) {\n            const args2 = { oldState: oldPanState, newState: this._panState, item: this };\n            this.list.onPanStateChange.emit(args2);\n        }\n        this.hideLeftAndRightPanTemplates();\n    }\n\n    /**\n     *@hidden\n     */\n    private showLeftPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('visible', 'hidden');\n    }\n\n    /**\n     *@hidden\n     */\n    private showRightPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('hidden', 'visible');\n    }\n\n    /**\n     *@hidden\n     */\n    private hideLeftAndRightPanTemplates() {\n        setTimeout(() => {\n            this.setLeftAndRightTemplatesVisibility('hidden', 'hidden');\n        }, 500);\n    }\n\n    /**\n     *@hidden\n     */\n    private setLeftAndRightTemplatesVisibility(leftVisibility, rightVisibility) {\n        if (this.leftPanningTemplateElement && this.leftPanningTemplateElement.nativeElement) {\n            this.leftPanningTemplateElement.nativeElement.style.visibility = leftVisibility;\n        }\n        if (this.rightPanningTemplateElement && this.rightPanningTemplateElement.nativeElement) {\n            this.rightPanningTemplateElement.nativeElement.style.visibility = rightVisibility;\n        }\n    }\n\n    /**\n     * Gets the `panState` of a `list item`.\n     * ```typescript\n     * let itemPanState =  this.listItem.panState;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get panState(): IgxListPanState {\n        return this._panState;\n    }\n\n    /**\n     * Gets the `index` of a `list item`.\n     * ```typescript\n     * let itemIndex =  this.listItem.index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public get index(): number {\n        return this._index !== null ? this._index : this.list.children.toArray().indexOf(this);\n    }\n\n    /**\n     * Sets the `index` of the `list item`.\n     * ```typescript\n     * this.listItem.index = index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public set index(value: number) {\n        this._index = value;\n    }\n\n    /**\n     * Returns an element reference to the list item.\n     * ```typescript\n     * let listItemElement =  this.listItem.element.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Returns a reference container which contains the list item's content.\n     * ```typescript\n     * let listItemContainer =  this.listItem.contentElement.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get contentElement() {\n        const candidates = this.element.getElementsByClassName('igx-list__item-content');\n        return (candidates && candidates.length > 0) ? candidates[0] : null;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list item container`\n     * by providing the `$implicit` declaration which is the `IgxListItemComponent` itself.\n     * ```typescript\n     * let listItemComponent = this.listItem.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Gets the width of a `list item`.\n     * ```typescript\n     * let itemWidth = this.listItem.width;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get width() {\n        if (this.element) {\n            return this.element.offsetWidth;\n        }\n    }\n\n    /**\n     * Gets the maximum left position of the `list item`.\n     * ```typescript\n     * let maxLeft = this.listItem.maxLeft;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxLeft() {\n        return -this.width;\n    }\n\n    /**\n     * Gets the maximum right position of the `list item`.\n     * ```typescript\n     * let maxRight = this.listItem.maxRight;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxRight() {\n        return this.width;\n    }\n\n    /**\n     *@hidden\n     */\n    private setContentElementLeft(value: number) {\n        this.panOffset = value;\n        this.contentElement.style.transform = 'translateX(' + value + 'px)';\n    }\n\n    /**\n     *@hidden\n     */\n    private isTrue(value: boolean): boolean {\n        if (typeof (value) === 'boolean') {\n            return value;\n        } else {\n            return value === 'true';\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    Optional,\n    Inject, Directive\n} from '@angular/core';\n\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\n\nimport { IgxListItemComponent } from './list-item.component';\nimport {\n    IgxListBaseDirective,\n    IgxDataLoadingTemplateDirective,\n    IgxEmptyListTemplateDirective,\n    IgxListPanState,\n    IgxListItemLeftPanningTemplateDirective,\n    IgxListItemRightPanningTemplateDirective\n} from './list.common';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensity } from '../core/density';\nimport { IBaseEventArgs } from '../core/utils';\n\nlet NEXT_ID = 0;\n\n/**\n * Interface for the panStateChange igxList event arguments\n */\nexport interface IPanStateChangeEventArgs extends IBaseEventArgs {\n    oldState: IgxListPanState;\n    newState: IgxListPanState;\n    item: IgxListItemComponent;\n}\n\n/**\n * Interface for the listItemClick igxList event arguments\n */\nexport interface IListItemClickEventArgs extends IBaseEventArgs {\n    item: IgxListItemComponent;\n    event: Event;\n    direction: IgxListPanState;\n}\n\n/**\n * Interface for the listItemPanning igxList event arguments\n */\nexport interface IListItemPanningEventArgs extends IBaseEventArgs {\n    item: IgxListItemComponent;\n    direction: IgxListPanState;\n    keepItem: boolean;\n}\n\n/**\n * igxListThumbnail is container for the List media\n * Use it to wrap anything you want to be used as a thumbnail.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListThumbnail]'\n})\nexport class IgxListThumbnailDirective {}\n\n/**\n * igxListAction is container for the List action\n * Use it to wrap anything you want to be used as a list action: icon, checkbox...\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListAction]'\n})\nexport class IgxListActionDirective {}\n\n/**\n * igxListLine is container for the List text content\n * Use it to wrap anything you want to be used as a plane text.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLine]'\n})\nexport class IgxListLineDirective {}\n\n/**\n * igxListLineTitle is a directive that add class to the target element\n * Use it to make anything to look like list Title.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLineTitle]'\n})\nexport class IgxListLineTitleDirective {\n    @HostBinding('class.igx-list__item-line-title')\n    public cssClass = 'igx-list__item-line-title';\n}\n\n/**\n * igxListLineSubTitle is a directive that add class to the target element\n * Use it to make anything to look like list Subtitle.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLineSubTitle]'\n})\nexport class IgxListLineSubTitleDirective {\n    @HostBinding('class.igx-list__item-line-subtitle')\n    public cssClass = 'igx-list__item-line-subtitle';\n}\n\n/**\n * Displays a collection of data items in a templatable list format\n *\n * @igxModule IgxListModule\n *\n * @igxTheme igx-list-theme\n *\n * @igxKeywords list, data\n *\n * @igxGroup Grids & Lists\n *\n * @remarks\n * The Ignite UI List displays rows of items and supports one or more header items as well as search and filtering\n * of list items. Each list item is completely templatable and will support any valid HTML or Angular component.\n *\n * @example\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\n@Component({\n    selector: 'igx-list',\n    templateUrl: 'list.component.html',\n    providers: [{ provide: IgxListBaseDirective, useExisting: IgxListComponent }]\n})\nexport class IgxListComponent extends IgxListBaseDirective {\n\n    constructor(public element: ElementRef,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Returns a collection of all items and headers in the list.\n     *\n     * @example\n     * ```typescript\n     * let listChildren: QueryList = this.list.children;\n     * ```\n     */\n    @ContentChildren(forwardRef(() => IgxListItemComponent), { descendants: true })\n    public children: QueryList<IgxListItemComponent>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected get sortedChildren(): IgxListItemComponent[] {\n        if (this.children !== undefined) {\n            return this.children.toArray()\n                .sort((a: IgxListItemComponent, b: IgxListItemComponent) => {\n                    return a.index - b.index;\n                });\n        }\n        return null;\n    }\n\n    /**\n     * Sets/gets the empty list template.\n     *\n     * @remarks\n     * This template is used by IgxList in case there are no list items\n     * defined and `isLoading` is set to `false`.\n     *\n     * @example\n     * ```html\n     * <igx-list>\n     *   <ng-template igxEmptyList>\n     *     <p class=\"empty\">No contacts! :(</p>\n     *   </ng-template>\n     * </igx-list>\n     * ```\n     * ```typescript\n     * let emptyTemplate = this.list.emptyListTemplate;\n     * ```\n     */\n    @ContentChild(IgxEmptyListTemplateDirective, { read: IgxEmptyListTemplateDirective })\n    public emptyListTemplate: IgxEmptyListTemplateDirective;\n\n    /**\n     * Sets/gets the list loading template.\n     *\n     * @remarks\n     * This template is used by IgxList in case there are no list items defined and `isLoading` is set to `true`.\n     *\n     * @example\n     * ```html\n     * <igx-list>\n     *   <ng-template igxDataLoading>\n     *     <p>Patience, we are currently loading your data...</p>\n     *   </ng-template>\n     * </igx-list>\n     * ```\n     * ```typescript\n     * let loadingTemplate = this.list.dataLoadingTemplate;\n     * ```\n     */\n    @ContentChild(IgxDataLoadingTemplateDirective, { read: IgxDataLoadingTemplateDirective })\n    public dataLoadingTemplate: IgxDataLoadingTemplateDirective;\n\n    /**\n     * Sets/gets the template for left panning a list item.\n     *\n     * @remarks\n     * Default value is `null`.\n     *\n     * @example\n     * ```html\n     * <igx-list [allowLeftPanning]=\"true\">\n     *   <ng-template igxListItemLeftPanning>\n     *     <igx-icon>delete</igx-icon>Delete\n     *   </ng-template>\n     * </igx-list>\n     * ```\n     * ```typescript\n     * let itemLeftPanTmpl = this.list.listItemLeftPanningTemplate;\n     * ```\n     */\n    @ContentChild(IgxListItemLeftPanningTemplateDirective, { read: IgxListItemLeftPanningTemplateDirective })\n    public listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n\n    /**\n     * Sets/gets the template for right panning a list item.\n     *\n     * @remarks\n     * Default value is `null`.\n     *\n     * @example\n     * ```html\n     * <igx-list [allowRightPanning] = \"true\">\n     *   <ng-template igxListItemRightPanning>\n     *     <igx-icon>call</igx-icon>Dial\n     *   </ng-template>\n     * </igx-list>\n     * ```\n     * ```typescript\n     * let itemRightPanTmpl = this.list.listItemRightPanningTemplate;\n     * ```\n     */\n    @ContentChild(IgxListItemRightPanningTemplateDirective, { read: IgxListItemRightPanningTemplateDirective })\n    public listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n\n    /**\n     * Provides a threshold after which the item's panning will be completed automatically.\n     *\n     * @remarks\n     * By default this property is set to 0.5 which is 50% of the list item's width.\n     *\n     * @example\n     * ```html\n     * <igx-list [panEndTriggeringThreshold]=\"0.8\"></igx-list>\n     * ```\n     */\n    @Input()\n    public panEndTriggeringThreshold = 0.5;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('defaultEmptyList', { read: TemplateRef, static: true })\n    protected defaultEmptyListTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('defaultDataLoading', { read: TemplateRef, static: true })\n    protected defaultDataLoadingTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the `id` of the list.\n     *\n     * @remarks\n     * If not set, the `id` of the first list component will be `\"igx-list-0\"`.\n     *\n     * @example\n     * ```html\n     * <igx-list id=\"my-first-list\"></igx-list>\n     * ```\n     * ```typescript\n     * let listId = this.list.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-list-${NEXT_ID++}`;\n\n    /**\n     * Sets/gets whether the left panning of an item is allowed.\n     *\n     * @remarks\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     * <igx-list [allowLeftPanning]=\"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLeftPanningAllowed = this.list.allowLeftPanning;\n     * ```\n     */\n    @Input()\n    public allowLeftPanning = false;\n\n    /**\n     * Sets/gets whether the right panning of an item is allowed.\n     *\n     * @remarks\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     * <igx-list [allowRightPanning]=\"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isRightPanningAllowed = this.list.allowRightPanning;\n     * ```\n     */\n    @Input()\n    public allowRightPanning = false;\n\n    /**\n     * Sets/gets whether the list is currently loading data.\n     *\n     * @remarks\n     * Set it to display the dataLoadingTemplate while data is being retrieved.\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     *  <igx-list [isLoading]=\"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLoading = this.list.isLoading;\n     * ```\n     */\n    @Input()\n    public isLoading = false;\n\n    /**\n     * Event emitted when a left pan gesture is executed on a list item.\n     *\n     * @remarks\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     *\n     * @example\n     * ```html\n     * <igx-list [allowLeftPanning]=\"true\" (onLeftPan)=\"onLeftPan($event)\"></igx-list>\n     * ```\n     */\n    @Output()\n    public onLeftPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n     * Event emitted when a right pan gesture is executed on a list item.\n     *\n     * @remarks\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     *\n     * @example\n     * ```html\n     * <igx-list [allowRightPanning]=\"true\" (onRightPan)=\"onRightPan($event)\"></igx-list>\n     * ```\n     */\n    @Output()\n    public onRightPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n     *\n     * Event emitted when a pan gesture is executed on a list item.\n     *\n     * @remarks\n     * Provides references to the `IgxListItemComponent` and `IgxListPanState` as event arguments.\n     *\n     * @example\n     * ```html\n     * <igx-list (onPanStateChange)=\"onPanStateChange($event)\"></igx-list>\n     * ```\n    */\n    @Output()\n    public onPanStateChange = new EventEmitter<IPanStateChangeEventArgs>();\n\n    /**\n     * Event emitted when a list item is clicked.\n     *\n     * @remarks\n     * Provides references to the `IgxListItemComponent` and `Event` as event arguments.\n     *\n     * @example\n     * ```html\n     * <igx-list (onItemClicked)=\"onItemClicked($event)\"></igx-list>\n     * ```\n     */\n    @Output()\n    public onItemClicked = new EventEmitter<IListItemClickEventArgs>();\n\n    /**\n     * Gets the `role` attribute value.\n     *\n     * @example\n     * ```typescript\n     * let listRole =  this.list.role;\n     * ```\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'list';\n    }\n\n    /**\n     * Gets a boolean indicating if the list is empty.\n     *\n     * @example\n     * ```typescript\n     * let isEmpty =  this.list.isListEmpty;\n     * ```\n     */\n    @HostBinding('class.igx-list-empty')\n    public get isListEmpty(): boolean {\n        return !this.children || this.children.length === 0;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-list')\n    public get cssClass(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-list--compact')\n    public get cssClassCompact(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-list--cosy')\n    public get cssClassCosy(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * Gets the list `items` excluding the header ones.\n     *\n     * @example\n     * ```typescript\n     * let listItems: IgxListItemComponent[] = this.list.items;\n     * ```\n     */\n    public get items(): IgxListItemComponent[] {\n        const items: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.sortedChildren) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n        return items;\n    }\n\n    /**\n     * Gets the header list `items`.\n     *\n     * @example\n     * ```typescript\n     * let listHeaders: IgxListItemComponent[] =  this.list.headers;\n     * ```\n     */\n    public get headers(): IgxListItemComponent[] {\n        const headers: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n        return headers;\n    }\n\n    /**\n     * Gets the `context` object of the template binding.\n     *\n     * @remark\n     * Gets the `context` object which represents the `template context` binding into the `list container`\n     * by providing the `$implicit` declaration which is the `IgxListComponent` itself.\n     *\n     * @example\n     * ```typescript\n     * let listComponent =  this.list.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Gets a `TemplateRef` to the currently used template.\n     *\n     * @example\n     * ```typescript\n     * let listTemplate = this.list.template;\n     * ```\n     */\n    public get template(): TemplateRef<any> {\n        if (this.isLoading) {\n            return this.dataLoadingTemplate ? this.dataLoadingTemplate.template : this.defaultDataLoadingTemplate;\n        } else {\n            return this.emptyListTemplate ? this.emptyListTemplate.template : this.defaultEmptyListTemplate;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxListBaseDirective,\n        IgxListComponent,\n        IgxListItemComponent,\n        IgxListThumbnailDirective,\n        IgxListActionDirective,\n        IgxListLineDirective,\n        IgxListLineTitleDirective,\n        IgxListLineSubTitleDirective,\n        IgxDataLoadingTemplateDirective,\n        IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective,\n        IgxListItemRightPanningTemplateDirective\n    ],\n    exports: [\n        IgxListComponent,\n        IgxListItemComponent,\n        IgxListThumbnailDirective,\n        IgxListActionDirective,\n        IgxListLineDirective,\n        IgxListLineTitleDirective,\n        IgxListLineSubTitleDirective,\n        IgxDataLoadingTemplateDirective,\n        IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective,\n        IgxListItemRightPanningTemplateDirective\n    ],\n    imports: [\n        CommonModule,\n        IgxRippleModule\n    ]\n})\nexport class IgxListModule {\n}\n","import {\n    AfterViewInit,\n    Component,\n    ChangeDetectionStrategy,\n    Input,\n    ViewChild,\n    ChangeDetectorRef,\n    TemplateRef,\n    Directive\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { IChangeCheckboxEventArgs } from '../../../checkbox/checkbox.component';\nimport { IgxInputDirective } from '../../../directives/input/input.directive';\nimport { DisplayDensity } from '../../../core/density';\nimport { IgxForOfDirective } from '../../../directives/for-of/for_of.directive';\nimport { FilterListItem } from './grid.excel-style-filtering.component';\nimport { IgxListComponent } from '../../../list';\n\n@Directive({\n    selector: '[igxExcelStyleLoading]'\n})\nexport class IgxExcelStyleLoadingValuesTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-search',\n    templateUrl: './excel-style-search.component.html'\n})\nexport class IgxExcelStyleSearchComponent implements AfterViewInit {\n\n    private _isLoading;\n\n    public get isLoading() {\n        return this._isLoading;\n    }\n\n    public set isLoading(value: boolean) {\n        this._isLoading = value;\n        if (!(this.cdr as any).destroyed) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    public searchValue: any;\n\n    @Input()\n    public grid: any;\n\n    @Input()\n    public data: FilterListItem[];\n\n    @Input()\n    public inline: boolean;\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @ViewChild('input', { read: IgxInputDirective, static: true })\n    public searchInput: IgxInputDirective;\n\n    @ViewChild('list', { read: IgxListComponent, static: true })\n    public list: IgxListComponent;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChild(IgxForOfDirective, { static: true })\n    protected virtDir: IgxForOfDirective<any>;\n\n    @ViewChild('defaultExcelStyleLoadingValuesTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStyleLoadingValuesTemplate: TemplateRef<any>;\n\n    public get valuesLoadingTemplate() {\n        if (this.grid.excelStyleLoadingValuesTemplateDirective) {\n            return this.grid.excelStyleLoadingValuesTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleLoadingValuesTemplate;\n        }\n    }\n\n    constructor(public cdr: ChangeDetectorRef) { }\n\n    public ngAfterViewInit() {\n        this.refreshSize();\n    }\n\n    public refreshSize() {\n        requestAnimationFrame(() => {\n            this.virtDir.recalcUpdateSizes();\n        });\n    }\n\n    public clearInput() {\n        this.searchValue = null;\n    }\n\n    public onCheckboxChange(eventArgs: IChangeCheckboxEventArgs) {\n        const selectedIndex = this.data.indexOf(eventArgs.checkbox.value);\n        if (selectedIndex === 0) {\n            this.data.forEach(element => {\n                element.isSelected = eventArgs.checked;\n                this.data[0].indeterminate = false;\n            });\n        } else {\n            eventArgs.checkbox.value.isSelected = eventArgs.checked;\n            if (!this.data.slice(1, this.data.length).find(el => el.isSelected === false)) {\n                this.data[0].indeterminate = false;\n                this.data[0].isSelected = true;\n            } else if (!this.data.slice(1, this.data.length).find(el => el.isSelected === true)) {\n                this.data[0].indeterminate = false;\n                this.data[0].isSelected = false;\n            } else {\n                this.data[0].indeterminate = true;\n            }\n        }\n        eventArgs.checkbox.nativeCheckbox.nativeElement.blur();\n    }\n\n    public get itemSize() {\n        let itemSize = '40px';\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy: itemSize = '32px'; break;\n            case DisplayDensity.compact: itemSize = '24px'; break;\n            default: break;\n        }\n        return itemSize;\n    }\n\n    public get containerSize() {\n        return this.list.element.nativeElement.offsetHeight;\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    AfterViewInit,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectorRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { ExpressionUI } from '../grid-filtering.service';\nimport { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';\nimport { IgxDropDownItemComponent, IgxDropDownComponent } from '../../../drop-down/index';\nimport { IgxInputGroupComponent, IgxInputDirective } from '../../../input-group/index';\nimport { DataType, DataUtil } from '../../../data-operations/data-util';\nimport { IFilteringOperation } from '../../../data-operations/filtering-condition';\nimport { OverlaySettings, ConnectedPositioningStrategy, CloseScrollStrategy } from '../../../services/index';\nimport { KEYS, IBaseEventArgs } from '../../../core/utils';\nimport { FilteringLogic } from '../../../data-operations/filtering-expression.interface';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\nexport interface ILogicOperatorChangedArgs extends IBaseEventArgs {\n    target: ExpressionUI;\n    newValue: FilteringLogic;\n}\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-default-expression',\n    templateUrl: './excel-style-default-expression.component.html'\n})\nexport class IgxExcelStyleDefaultExpressionComponent implements AfterViewInit {\n\n    private _dropDownOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(),\n        scrollStrategy: new CloseScrollStrategy()\n    };\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public expressionUI: ExpressionUI;\n\n    @Input()\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    public grid: any;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @Output()\n    public onExpressionRemoved = new EventEmitter<ExpressionUI>();\n\n    @Output()\n    public onLogicOperatorChanged = new EventEmitter<ILogicOperatorChangedArgs>();\n\n    @ViewChild('inputGroupConditions', { read: IgxInputGroupComponent, static: true })\n    protected inputGroupConditions: IgxInputGroupComponent;\n\n    @ViewChild('inputValues', { read: IgxInputDirective, static: true })\n    protected inputValuesDirective: IgxInputDirective;\n\n    @ViewChild('dropdownConditions', { read: IgxDropDownComponent, static: true })\n    protected dropdownConditions: IgxDropDownComponent;\n\n    @ViewChild('logicOperatorButtonGroup', { read: IgxButtonGroupComponent })\n    protected logicOperatorButtonGroup: IgxButtonGroupComponent;\n\n    protected get inputValuesElement() {\n        return this.inputValuesDirective;\n    }\n\n    get isLast(): boolean {\n        return this.expressionsList[this.expressionsList.length - 1] === this.expressionUI;\n    }\n\n    get isSingle(): boolean {\n        return this.expressionsList.length === 1;\n    }\n\n    get inputConditionsPlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_condition_placeholder'];\n    }\n\n    get inputValuePlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_row_placeholder'];\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.Number:\n                return 'number';\n            default:\n                return 'text';\n        }\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {}\n\n    ngAfterViewInit(): void {\n        this._dropDownOverlaySettings.outlet = this.column.grid.outletDirective;\n        this._dropDownOverlaySettings.positionStrategy.settings.target = this.inputGroupConditions.element.nativeElement;\n    }\n\n    public focus() {\n        // use requestAnimationFrame to focus the values input because when initializing the component\n        // datepicker's input group is not yet fully initialized\n        requestAnimationFrame(() => this.inputValuesElement.focus());\n    }\n\n    public isConditionSelected(conditionName: string): boolean {\n        return this.expressionUI.expression.condition && this.expressionUI.expression.condition.name === conditionName;\n    }\n\n    public getConditionName(condition: IFilteringOperation) {\n        return condition ? this.translateCondition(condition.name) : null;\n    }\n\n    public getInputWidth() {\n        return this.inputGroupConditions.element.nativeElement.offsetWidth + 'px';\n    }\n\n    get conditions() {\n        return this.column.filters.conditionList();\n    }\n\n    public translateCondition(value: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expressionUI.expression.condition === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else if (!this.expressionUI.expression.condition) {\n            return 'filter_list';\n        } else {\n            return this.expressionUI.expression.condition.iconName;\n        }\n    }\n\n    public toggleCustomDialogDropDown() {\n        this.dropdownConditions.toggle(this._dropDownOverlaySettings);\n    }\n\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    public onConditionsChanged(eventArgs: any) {\n        const value = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n        this.expressionUI.expression.condition = this.getCondition(value);\n\n        this.focus();\n    }\n\n    public onValuesInput(eventArgs) {\n        this.expressionUI.expression.searchVal = DataUtil.parseValue(this.column.dataType, eventArgs.target.value);\n    }\n\n    public onLogicOperatorButtonClicked(eventArgs, buttonIndex: number) {\n        if (this.logicOperatorButtonGroup.selectedButtons.length === 0) {\n            eventArgs.stopPropagation();\n            this.logicOperatorButtonGroup.selectButton(buttonIndex);\n        } else {\n            this.onLogicOperatorChanged.emit({\n                target: this.expressionUI,\n                newValue: buttonIndex as FilteringLogic\n            });\n        }\n    }\n\n    public onLogicOperatorKeyDown(eventArgs, buttonIndex: number) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.logicOperatorButtonGroup.selectButton(buttonIndex);\n            this.onLogicOperatorChanged.emit({\n                target: this.expressionUI,\n                newValue: buttonIndex as FilteringLogic\n            });\n        }\n    }\n\n    public onRemoveButtonClick() {\n        this.onExpressionRemoved.emit(this.expressionUI);\n    }\n\n    public onInputConditionsKeyDown(eventArgs) {\n        if (eventArgs.altKey && (eventArgs.key === KEYS.DOWN_ARROW || eventArgs.key === KEYS.DOWN_ARROW_IE)) {\n            this.toggleCustomDialogDropDown();\n        }\n\n        if (eventArgs.key === KEYS.TAB && eventArgs.shiftKey && this.expressionsList[0] === this.expressionUI) {\n            eventArgs.preventDefault();\n        }\n\n        event.stopPropagation();\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewChild,\n    Input\n} from '@angular/core';\nimport { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { IgxDatePickerComponent } from '../../../date-picker/date-picker.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-date-expression',\n    templateUrl: './excel-style-date-expression.component.html'\n})\nexport class IgxExcelStyleDateExpressionComponent extends IgxExcelStyleDefaultExpressionComponent {\n\n    @ViewChild('datePicker', { read: IgxDatePickerComponent, static: true })\n    private datePicker: IgxDatePickerComponent;\n\n    protected get inputValuesElement() {\n        return this.datePicker.getEditElement();\n    }\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    get inputDatePlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_row_date_placeholder'];\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    Input,\n    ChangeDetectorRef,\n    ViewChild,\n    AfterViewInit,\n    TemplateRef,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport { FilteringLogic } from '../../../data-operations/filtering-expression.interface';\nimport { DataType } from '../../../data-operations/data-util';\nimport {\n    IgxStringFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand\n} from '../../../data-operations/filtering-condition';\nimport { IgxToggleDirective } from '../../../directives/toggle/toggle.directive';\nimport {\n    ConnectedPositioningStrategy,\n    AutoPositionStrategy,\n    OverlaySettings,\n    VerticalAlignment,\n    PositionSettings,\n    HorizontalAlignment,\n    IgxOverlayService,\n    AbsoluteScrollStrategy\n} from '../../../services/index';\nimport { ILogicOperatorChangedArgs, IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { KEYS } from '../../../core/utils';\nimport { IgxExcelStyleDateExpressionComponent } from './excel-style-date-expression.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-custom-dialog',\n    templateUrl: './excel-style-custom-dialog.component.html'\n})\nexport class IgxExcelStyleCustomDialogComponent implements AfterViewInit {\n\n    @Input()\n    public expressionsList = new Array<ExpressionUI>();\n\n    private _customDialogPositionSettings: PositionSettings = {\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalDirection: HorizontalAlignment.Center,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle\n    };\n\n    private _customDialogOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new AutoPositionStrategy(this._customDialogPositionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy()\n    };\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public selectedOperator: string;\n\n    @Input()\n    public filteringService: IgxFilteringService;\n\n    @Input()\n    public overlayComponentId: string;\n\n    @Input()\n    public overlayService: IgxOverlayService;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChildren(IgxExcelStyleDefaultExpressionComponent)\n    private expressionComponents: QueryList<IgxExcelStyleDefaultExpressionComponent>;\n\n    @ViewChildren(IgxExcelStyleDateExpressionComponent)\n    private expressionDateComponents: QueryList<IgxExcelStyleDateExpressionComponent>;\n\n    @ViewChild('toggle', { read: IgxToggleDirective, static: true })\n    public toggle: IgxToggleDirective;\n\n    @ViewChild('defaultExpressionTemplate', { read: TemplateRef })\n    protected defaultExpressionTemplate: TemplateRef<any>;\n\n    @ViewChild('dateExpressionTemplate', { read: TemplateRef })\n    protected dateExpressionTemplate: TemplateRef<any>;\n\n    @ViewChild('expressionsContainer', { static: true })\n    protected expressionsContainer: ElementRef;\n\n    constructor(private cdr: ChangeDetectorRef) {}\n\n    ngAfterViewInit(): void {\n        this._customDialogOverlaySettings.outlet = this.grid.outlet;\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.dateExpressionTemplate;\n        }\n\n        return this.defaultExpressionTemplate;\n    }\n\n    get grid(): any {\n        return this.filteringService.grid;\n    }\n\n    public onCustomDialogOpening() {\n        if (this.selectedOperator) {\n            this.createInitialExpressionUIElement();\n        }\n    }\n\n    public onCustomDialogOpened() {\n        if (this.expressionComponents.first) {\n            this.expressionComponents.first.focus();\n        }\n    }\n\n    public open(esf) {\n        this._customDialogOverlaySettings.positionStrategy.settings.target =\n            this.overlayComponentId ?\n                this.grid.rootGrid ? this.grid.rootGrid.nativeElement : this.grid.nativeElement :\n                esf;\n        this.toggle.open(this._customDialogOverlaySettings);\n    }\n\n    public onClearButtonClick() {\n        this.filteringService.clearFilter(this.column.field);\n        this.createInitialExpressionUIElement();\n        this.cdr.detectChanges();\n    }\n\n    public closeDialog() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n        } else {\n            this.toggle.close();\n        }\n    }\n\n    public onApplyButtonClick() {\n        this.expressionsList = this.expressionsList.filter(\n            element => element.expression.condition &&\n            (element.expression.searchVal || element.expression.searchVal === 0 || element.expression.condition.isUnary));\n\n        if (this.expressionsList.length > 0) {\n            this.expressionsList[0].beforeOperator = null;\n            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;\n        }\n\n        this.filteringService.filterInternal(this.column.field, this.expressionsList);\n        this.closeDialog();\n    }\n\n    public onAddButtonClick() {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = {\n            condition: null,\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n\n        this.expressionsList[this.expressionsList.length - 1].afterOperator = FilteringLogic.And;\n        exprUI.beforeOperator = this.expressionsList[this.expressionsList.length - 1].afterOperator;\n\n        this.expressionsList.push(exprUI);\n\n        this.markChildrenForCheck();\n        this.scrollToBottom();\n    }\n\n    public onExpressionRemoved(event: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(event);\n\n        if (indexToRemove === 0 && this.expressionsList.length > 1) {\n            this.expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === this.expressionsList.length - 1) {\n            this.expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            this.expressionsList[indexToRemove - 1].afterOperator = this.expressionsList[indexToRemove + 1].beforeOperator;\n            this.expressionsList[0].beforeOperator = null;\n            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;\n        }\n\n        this.expressionsList.splice(indexToRemove, 1);\n\n        this.cdr.detectChanges();\n\n        this.markChildrenForCheck();\n    }\n\n    public onLogicOperatorChanged(event: ILogicOperatorChangedArgs) {\n        const index = this.expressionsList.indexOf(event.target);\n        event.target.afterOperator = event.newValue;\n        if (index + 1 < this.expressionsList.length) {\n            this.expressionsList[index + 1].beforeOperator = event.newValue;\n        }\n    }\n\n    public onKeyDown(eventArgs) {\n        eventArgs.stopPropagation();\n    }\n\n    public onApplyButtonKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.TAB && !eventArgs.shiftKey) {\n            eventArgs.stopPropagation();\n            eventArgs.preventDefault();\n        }\n    }\n\n    private createCondition(conditionName: string) {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return IgxBooleanFilteringOperand.instance().condition(conditionName);\n            case DataType.Number:\n                return IgxNumberFilteringOperand.instance().condition(conditionName);\n            case DataType.Date:\n                return IgxDateFilteringOperand.instance().condition(conditionName);\n            default:\n                return IgxStringFilteringOperand.instance().condition(conditionName);\n        }\n    }\n\n    private markChildrenForCheck() {\n        this.expressionComponents.forEach(x => x.cdr.markForCheck());\n        this.expressionDateComponents.forEach(x => x.cdr.markForCheck());\n    }\n\n    private createInitialExpressionUIElement() {\n        this.expressionsList = [];\n        const firstExprUI = new ExpressionUI();\n\n        firstExprUI.expression = {\n            condition: this.createCondition(this.selectedOperator),\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n        firstExprUI.afterOperator = FilteringLogic.And;\n\n        this.expressionsList.push(firstExprUI);\n\n        const secondExprUI = new ExpressionUI();\n        secondExprUI.expression = {\n            condition: null,\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n\n        secondExprUI.beforeOperator = FilteringLogic.And;\n\n        this.expressionsList.push(secondExprUI);\n    }\n\n    private scrollToBottom() {\n        requestAnimationFrame(() => {\n            this.expressionsContainer.nativeElement.scrollTop = this.expressionsContainer.nativeElement.scrollHeight;\n        });\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewChild,\n    Input,\n    AfterViewInit,\n    OnDestroy,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';\nimport { DisplayDensity } from '../../../core/density';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { GridType } from '../../common/grid.interface';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-sorting',\n    templateUrl: './excel-style-sorting.component.html'\n})\nexport class IgxExcelStyleSortingComponent implements AfterViewInit, OnDestroy, OnChanges {\n    private destroy$ = new Subject<boolean>();\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public grid: GridType;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChild('sortButtonGroup', { read: IgxButtonGroupComponent, static: true })\n    public sortButtonGroup: IgxButtonGroupComponent;\n\n    constructor() {}\n\n    ngAfterViewInit(): void {\n        this.grid.sortingExpressionsChange.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.updateSelectedButtons(this.column.field);\n        });\n        this.updateSelectedButtons(this.column.field);\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.column && !changes.column.firstChange) {\n            this.updateSelectedButtons(changes.column.currentValue.field);\n        }\n    }\n\n    private updateSelectedButtons(fieldName: string) {\n        const sortIndex = this.grid.sortingExpressions.findIndex(s => s.fieldName === fieldName);\n\n        this.sortButtonGroup.buttons.forEach((b, i) => {\n            this.sortButtonGroup.deselectButton(i);\n        });\n\n        if (sortIndex !== -1 ) {\n            const sortDirection = this.grid.sortingExpressions[sortIndex].dir;\n            this.sortButtonGroup.selectButton(sortDirection - 1);\n        }\n    }\n\n    public onSortButtonClicked(sortDirection) {\n        if (this.sortButtonGroup.selectedIndexes.length === 0) {\n            if (this.grid.isColumnGrouped(this.column.field)) {\n                this.sortButtonGroup.selectButton(sortDirection - 1);\n            } else {\n                this.grid.clearSort(this.column.field);\n            }\n        } else {\n            this.grid.sort({ fieldName: this.column.field, dir: sortDirection, ignoreCase: true });\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ViewChild,\n    HostBinding,\n    ChangeDetectionStrategy,\n    TemplateRef,\n    Directive,\n    OnDestroy,\n    ElementRef,\n    Input,\n    ViewRef\n} from '@angular/core';\nimport {\n    HorizontalAlignment,\n    VerticalAlignment,\n    OverlaySettings,\n    IgxOverlayService,\n    AbsoluteScrollStrategy,\n    AutoPositionStrategy\n} from '../../../services/index';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport {\n    IFilteringOperation,\n    IgxStringFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxDateFilteringOperand\n} from '../../../data-operations/filtering-condition';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { cloneArray, KEYS } from '../../../core/utils';\nimport { DataType, DataUtil } from '../../../data-operations/data-util';\nimport { IgxExcelStyleSearchComponent } from './excel-style-search.component';\nimport { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';\nimport { Subscription, Subject } from 'rxjs';\nimport { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { ISelectionEventArgs, IgxDropDownComponent } from '../../../drop-down';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { IgxGridBaseDirective } from '../../grid-base.directive';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n *@hidden\n */\nexport class FilterListItem {\n    public value: any;\n    public label: any;\n    public isSelected: boolean;\n    public indeterminate: boolean;\n    public isSpecial = false;\n}\n\n@Directive({\n    selector: '[igxExcelStyleSorting]'\n})\nexport class IgxExcelStyleSortingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStyleMoving]'\n})\nexport class IgxExcelStyleMovingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStyleHiding]'\n})\nexport class IgxExcelStyleHidingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStylePinning]'\n})\nexport class IgxExcelStylePinningTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * A component used for presenting Excel style filtering UI for a specific column.\n * It is used internally in the Grid, but could also be hosted in a container outside of it.\n *\n * Example:\n * ```html\n * <igx-grid-excel-style-filtering\n *     [column]=\"grid1.columns[0]\">\n * </igx-grid-excel-style-filtering>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-excel-style-filtering',\n    templateUrl: './grid.excel-style-filtering.component.html'\n})\nexport class IgxGridExcelStyleFilteringComponent implements OnDestroy {\n    private static readonly filterOptimizationThreshold = 2;\n\n    private shouldOpenSubMenu = true;\n    private expressionsList = new Array<ExpressionUI>();\n    private destroy$ = new Subject<boolean>();\n    private containsNullOrEmpty = false;\n    private selectAllSelected = true;\n    private selectAllIndeterminate = false;\n    private filterValues = new Set<any>();\n    private _column: IgxColumnComponent;\n    private _columnPinning: Subscription;\n    private _columnVisibilityChanged: Subscription;\n    private _filteringChanged: Subscription;\n    private _densityChanged: Subscription;\n\n    /**\n     * An @Input property that sets the column.\n     */\n    @Input()\n    public set column(value: IgxColumnComponent) {\n        this._column = value;\n\n        if (this._columnPinning) {\n            this._columnPinning.unsubscribe();\n        }\n\n        if (this._columnVisibilityChanged) {\n            this._columnVisibilityChanged.unsubscribe();\n        }\n\n        if (this._filteringChanged) {\n            this._filteringChanged.unsubscribe();\n        }\n\n        if (this._densityChanged) {\n            this._densityChanged.unsubscribe();\n        }\n\n        if (this._column) {\n            this._column.grid.filteringService.registerSVGIcons();\n            this.isColumnPinnable = this.column.pinnable;\n            this.init();\n\n            this._columnPinning = this.grid.onColumnPinning.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                requestAnimationFrame(() => {\n                    this.isColumnPinnable = this.column.pinnable;\n                    if (!(this.cdr as ViewRef).destroyed) {\n                       this.cdr.detectChanges();\n                    }\n                });\n            });\n            this._columnVisibilityChanged = this.grid.onColumnVisibilityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.cdr.detectChanges();\n            });\n            this._filteringChanged = this.grid.filteringExpressionsTreeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.init();\n            });\n            this._densityChanged = this.grid.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.cdr.detectChanges();\n            });\n        }\n    }\n\n    /**\n     * Returns the current column.\n     */\n    public get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get filteringService(): IgxFilteringService {\n        return this.grid.filteringService;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public listData = new Array<FilterListItem>();\n    /**\n     * @hidden @internal\n     */\n    public uniqueValues = [];\n    /**\n     * @hidden @internal\n     */\n    public overlayService: IgxOverlayService;\n    /**\n     * @hidden @internal\n     */\n    public overlayComponentId: string;\n\n    private _subMenuPositionSettings = {\n        verticalStartPoint: VerticalAlignment.Top\n    };\n\n    private _subMenuOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new AutoPositionStrategy(this._subMenuPositionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy()\n    };\n\n    /**\n     * @hidden @internal\n     */\n    get minHeight() {\n        if (!this.inline) {\n            let minHeight = 600;\n            switch (this.grid.displayDensity) {\n                case DisplayDensity.cosy: minHeight = 465; break;\n                case DisplayDensity.compact: minHeight = 330; break;\n                default: break;\n            }\n            return `${minHeight}px`;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('style.max-height') get maxHeight() {\n        if (!this.inline) {\n            let maxHeight = 730;\n            switch (this.grid.displayDensity) {\n                case DisplayDensity.cosy: maxHeight = 565; break;\n                case DisplayDensity.compact: maxHeight = 405; break;\n                default: break;\n            }\n            return `${maxHeight}px`;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-excel-filter')\n    className = 'igx-excel-filter';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-excel-filter--inline')\n    public inline = true;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('dropdown', { read: ElementRef })\n    public mainDropdown: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('subMenu', { read: IgxDropDownComponent })\n    public subMenu: IgxDropDownComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('customDialog', { read: IgxExcelStyleCustomDialogComponent })\n    public customDialog: IgxExcelStyleCustomDialogComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('excelStyleSearch', { read: IgxExcelStyleSearchComponent })\n    protected excelStyleSearch: IgxExcelStyleSearchComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('excelStyleSorting', { read: IgxExcelStyleSortingComponent })\n    protected excelStyleSorting: IgxExcelStyleSortingComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('defaultExcelStyleSortingTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStyleSortingTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('defaultExcelStyleHidingTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStyleHidingTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('defaultExcelStyleMovingTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStyleMovingTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('defaultExcelStylePinningTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStylePinningTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    public isColumnPinnable: boolean;\n\n    /**\n     * @hidden @internal\n     */\n    get grid(): IgxGridBaseDirective {\n        return this.column.grid;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get conditions() {\n        return this.column.filters.conditionList();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get subMenuText() {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return this.grid.resourceStrings.igx_grid_excel_boolean_filter;\n            case DataType.Number:\n                return this.grid.resourceStrings.igx_grid_excel_number_filter;\n            case DataType.Date:\n                return this.grid.resourceStrings.igx_grid_excel_date_filter;\n            default:\n                return this.grid.resourceStrings.igx_grid_excel_text_filter;\n        }\n    }\n\n    constructor(private cdr: ChangeDetectorRef) {}\n\n    /**\n     * @hidden @internal\n     */\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    private init() {\n        this.expressionsList = new Array<ExpressionUI>();\n        this.filteringService.generateExpressionsList(this.column.filteringExpressionsTree, this.grid.filteringLogic, this.expressionsList);\n        this.populateColumnData();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public clearFilterClass() {\n        if (this.column.filteringExpressionsTree) {\n            return 'igx-excel-filter__actions-clear';\n        }\n\n        return 'igx-excel-filter__actions-clear--disabled';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public pinClass() {\n        return this.isColumnPinnable ? 'igx-excel-filter__actions-pin' : 'igx-excel-filter__actions-pin--disabled';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public initialize(column: IgxColumnComponent, overlayService: IgxOverlayService,\n        overlayComponentId: string) {\n        this.inline = false;\n        this.column = column;\n        this.overlayService = overlayService;\n        this.overlayComponentId = overlayComponentId;\n\n        this._subMenuOverlaySettings.outlet = (this.grid as any).outlet;\n\n        requestAnimationFrame(() => {\n            this.excelStyleSearch.searchInput.nativeElement.focus();\n        });\n\n        this.grid.onColumnMoving.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.closeDropdown();\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public translateCondition(value: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onPin() {\n        this.column.pinned = !this.column.pinned;\n        this.closeDropdown();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onHideToggle() {\n        this.column.hidden = !this.column.hidden;\n        this.grid.onColumnVisibilityChanged.emit({ column: this.column, newValue: this.column.hidden });\n        this.closeDropdown();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onTextFilterClick(eventArgs) {\n        if (this.shouldOpenSubMenu) {\n            this._subMenuOverlaySettings.positionStrategy.settings.target = eventArgs.currentTarget;\n\n            const gridRect = this.grid.nativeElement.getBoundingClientRect();\n            const dropdownRect = this.mainDropdown.nativeElement.getBoundingClientRect();\n\n            let x = dropdownRect.left + dropdownRect.width;\n            let x1 = gridRect.left + gridRect.width;\n            x += window.pageXOffset;\n            x1 += window.pageXOffset;\n            if (Math.abs(x - x1) < 200) {\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Left;\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Left;\n            } else {\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Right;\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Right;\n            }\n\n            this.subMenu.open(this._subMenuOverlaySettings);\n            this.shouldOpenSubMenu = false;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onTextFilterKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.onTextFilterClick(eventArgs);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onSubMenuClosed() {\n        requestAnimationFrame(() => {\n            this.shouldOpenSubMenu = true;\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onSubMenuSelection(eventArgs: ISelectionEventArgs) {\n        if (this.expressionsList && this.expressionsList.length &&\n            this.expressionsList[0].expression.condition.name !== 'in') {\n            this.customDialog.expressionsList = this.expressionsList;\n        }\n\n        this.customDialog.selectedOperator = eventArgs.newSelection.value;\n        eventArgs.cancel = true;\n        if (this.overlayComponentId) {\n            this.mainDropdown.nativeElement.style.display = 'none';\n        }\n        this.subMenu.close();\n        this.customDialog.open(this.mainDropdown.nativeElement);\n    }\n\n    private areExpressionsSelectable () {\n        if (this.expressionsList.length === 1 &&\n            (this.expressionsList[0].expression.condition.name === 'equals' ||\n             this.expressionsList[0].expression.condition.name === 'true' ||\n             this.expressionsList[0].expression.condition.name === 'false' ||\n             this.expressionsList[0].expression.condition.name === 'empty' ||\n             this.expressionsList[0].expression.condition.name === 'in')) {\n            return true;\n        }\n\n        const selectableExpressionsCount = this.expressionsList.filter(exp =>\n            (exp.beforeOperator === 1 || exp.afterOperator === 1) &&\n            (exp.expression.condition.name === 'equals' ||\n             exp.expression.condition.name === 'true' ||\n             exp.expression.condition.name === 'false' ||\n             exp.expression.condition.name === 'empty' ||\n             exp.expression.condition.name === 'in')).length;\n\n        return selectableExpressionsCount === this.expressionsList.length;\n    }\n\n    private areExpressionsValuesInTheList() {\n        if (this.column.dataType === DataType.Boolean) {\n            return true;\n        }\n\n        if (this.filterValues.size === 1) {\n            const firstValue = this.filterValues.values().next().value;\n\n            if (!firstValue && firstValue !== 0) {\n                return true;\n            }\n        }\n\n        for (let index = 0; index < this.uniqueValues.length; index++) {\n            if (this.filterValues.has(this.uniqueValues[index])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private populateColumnData() {\n        if (this.grid.uniqueColumnValuesStrategy) {\n            this.cdr.detectChanges();\n            this.renderColumnValuesRemotely();\n        } else {\n            this.renderColumnValuesFromData();\n        }\n    }\n\n    private renderColumnValuesRemotely() {\n        this.excelStyleSearch.isLoading = true;\n        const expressionsTree: FilteringExpressionsTree = this.getColumnFilterExpressionsTree();\n\n        this.grid.uniqueColumnValuesStrategy(this.column, expressionsTree, (colVals: any[]) => {\n            const columnValues = (this.column.dataType === DataType.Date) ?\n                colVals.map(val => val ? val.toDateString() : val) : colVals;\n\n            this.renderValues(columnValues);\n            this.excelStyleSearch.isLoading = false;\n            this.excelStyleSearch.refreshSize();\n        });\n    }\n\n    private renderColumnValuesFromData() {\n        let data = this.column.gridAPI.get_all_data((this.grid as any).id);\n        const expressionsTree = this.getColumnFilterExpressionsTree();\n\n        if (expressionsTree.filteringOperands.length) {\n            const state = { expressionsTree: expressionsTree };\n            data = DataUtil.filter(cloneArray(data), state);\n        }\n\n        const columnField = this.column.field;\n        const columnValues = (this.column.dataType === DataType.Date) ?\n            data.map(record => record[columnField] ? record[columnField].toDateString() : record[columnField]) :\n            data.map(record => record[columnField]);\n\n        this.renderValues(columnValues);\n    }\n\n    private renderValues(columnValues: any[]) {\n        this.generateUniqueValues(columnValues);\n        this.generateFilterValues(this.column.dataType === DataType.Date);\n        this.generateListData();\n    }\n\n    private generateUniqueValues(columnValues: any[]) {\n        this.uniqueValues = Array.from(new Set(columnValues));\n    }\n\n    private generateFilterValues(isDateColumn: boolean = false) {\n        if (isDateColumn) {\n            this.filterValues = new Set<any>(this.expressionsList.reduce((arr, e) => {\n                if (e.expression.condition.name === 'in') {\n                    return [ ...arr, ...Array.from((e.expression.searchVal as Set<any>).values()).map(v =>\n                        new Date(v).toDateString()) ];\n                }\n                return [ ...arr, ...[e.expression.searchVal ? e.expression.searchVal.toDateString() : e.expression.searchVal] ];\n            }, []));\n        } else {\n            this.filterValues = new Set<any>(this.expressionsList.reduce((arr, e) => {\n                if (e.expression.condition.name === 'in') {\n                    return [ ...arr, ...Array.from((e.expression.searchVal as Set<any>).values()) ];\n                }\n                return [ ...arr, ...[e.expression.searchVal] ];\n            }, []));\n        }\n    }\n\n    private generateListData() {\n        this.listData = new Array<FilterListItem>();\n\n        const shouldUpdateSelection = this.areExpressionsSelectable() && this.areExpressionsValuesInTheList();\n\n        if (this.column.dataType === DataType.Boolean) {\n            this.addBooleanItems();\n        } else {\n            this.addItems(shouldUpdateSelection);\n        }\n\n        this.listData.sort((a, b) => this.sortData(a, b));\n\n        if (this.column.dataType === DataType.Date) {\n            this.uniqueValues = this.uniqueValues.map(value => new Date(value));\n        }\n\n        if (this.containsNullOrEmpty) {\n            this.addBlanksItem(shouldUpdateSelection);\n        }\n\n        this.addSelectAllItem();\n\n        if (!(this.cdr as any).destroyed) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    private getColumnFilterExpressionsTree() {\n        const gridExpressionsTree: IFilteringExpressionsTree = this.grid.filteringExpressionsTree;\n        const expressionsTree = new FilteringExpressionsTree(gridExpressionsTree.operator, gridExpressionsTree.fieldName);\n\n        for (const operand of gridExpressionsTree.filteringOperands) {\n            if (operand instanceof FilteringExpressionsTree) {\n                const columnExprTree = operand as FilteringExpressionsTree;\n                if (columnExprTree.fieldName === this.column.field) {\n                    break;\n                }\n            }\n            expressionsTree.filteringOperands.push(operand);\n        }\n\n        return expressionsTree;\n    }\n\n    private addBooleanItems() {\n        this.selectAllSelected = true;\n        this.selectAllIndeterminate = false;\n        this.uniqueValues.forEach(element => {\n            const filterListItem = new FilterListItem();\n            if (element !== undefined && element !== null && element !== '') {\n                if (this.column.filteringExpressionsTree) {\n                    if (element === true && this.expressionsList.find(exp => exp.expression.condition.name === 'true' )) {\n                        filterListItem.isSelected = true;\n                        this.selectAllIndeterminate = true;\n                    } else if (element === false && this.expressionsList.find(exp => exp.expression.condition.name === 'false' )) {\n                            filterListItem.isSelected = true;\n                            this.selectAllIndeterminate = true;\n                    } else {\n                        filterListItem.isSelected = false;\n                    }\n                } else {\n                    filterListItem.isSelected = true;\n                }\n                filterListItem.value = element;\n                filterListItem.label = element;\n                filterListItem.indeterminate = false;\n                this.listData.push(filterListItem);\n            } else {\n                this.containsNullOrEmpty = true;\n            }\n        });\n    }\n\n    private addItems(shouldUpdateSelection: boolean) {\n        this.selectAllSelected = true;\n        this.selectAllIndeterminate = false;\n        this.uniqueValues.forEach(element => {\n            if (element !== undefined && element !== null && element !== '') {\n                const filterListItem = new FilterListItem();\n                if (this.column.filteringExpressionsTree) {\n                    if (shouldUpdateSelection) {\n                        if (this.filterValues.has(element)) {\n                            filterListItem.isSelected = true;\n                        } else {\n                            filterListItem.isSelected = false;\n                        }\n                        this.selectAllIndeterminate = true;\n                    } else {\n                        filterListItem.isSelected = false;\n                        this.selectAllSelected = false;\n                    }\n                } else {\n                    filterListItem.isSelected = true;\n                }\n                if (this.column.dataType === DataType.Date) {\n                    filterListItem.value = new Date(element);\n                    filterListItem.label = new Date(element);\n                } else {\n                    filterListItem.value = element;\n                    filterListItem.label = element;\n                }\n                filterListItem.indeterminate = false;\n                this.listData.push(filterListItem);\n            } else {\n                this.containsNullOrEmpty = true;\n            }\n        });\n    }\n\n    private addSelectAllItem() {\n        const selectAll =  new FilterListItem();\n        selectAll.isSelected = this.selectAllSelected;\n        selectAll.value = this.grid.resourceStrings.igx_grid_excel_select_all;\n        selectAll.label = this.grid.resourceStrings.igx_grid_excel_select_all;\n        selectAll.indeterminate = this.selectAllIndeterminate;\n        selectAll.isSpecial = true;\n        this.listData.unshift(selectAll);\n    }\n\n    private addBlanksItem(shouldUpdateSelection) {\n        const blanks =  new FilterListItem();\n        if (this.column.filteringExpressionsTree) {\n            if (shouldUpdateSelection) {\n                if (this.filterValues.has(null)) {\n                    blanks.isSelected = true;\n                } else {\n                    blanks.isSelected = false;\n                }\n            }\n        } else {\n            blanks.isSelected = true;\n        }\n        blanks.value = null;\n        blanks.label = this.grid.resourceStrings.igx_grid_excel_blanks;\n        blanks.indeterminate = false;\n        blanks.isSpecial = true;\n        this.listData.unshift(blanks);\n    }\n\n    private sortData(a: FilterListItem, b: FilterListItem) {\n        let valueA = a.value;\n        let valueB = b.value;\n        if (typeof(a) === DataType.String) {\n            valueA = a.value.toUpperCase();\n            valueB = b.value.toUpperCase();\n        }\n        if (valueA < valueB) {\n            return -1;\n        } else if (valueA > valueB) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    private selectAllFilterItems() {\n        this.listData.forEach(filterListItem => {\n            filterListItem.isSelected = true;\n            filterListItem.indeterminate = false;\n        });\n        this.excelStyleSearch.cdr.detectChanges();\n    }\n\n    // TODO: sort members by access modifier\n\n    /**\n     * @hidden @internal\n     */\n    get sortingTemplate() {\n        if (this.grid.excelStyleSortingTemplateDirective) {\n            return this.grid.excelStyleSortingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleSortingTemplate;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get movingTemplate() {\n        if (this.grid.excelStyleMovingTemplateDirective) {\n            return this.grid.excelStyleMovingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleMovingTemplate;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get pinningTemplate() {\n        if (this.grid.excelStylePinningTemplateDirective) {\n            return this.grid.excelStylePinningTemplateDirective.template;\n        } else {\n            return this.defaultExcelStylePinningTemplate;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get hidingTemplate() {\n        if (this.grid.excelStyleHidingTemplateDirective) {\n            return this.grid.excelStyleHidingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleHidingTemplate;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get applyButtonDisabled() {\n        return this.listData[0] && !this.listData[0].isSelected && !this.listData[0].indeterminate;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public applyFilter() {\n        const filterTree = new FilteringExpressionsTree(FilteringLogic.Or, this.column.field);\n        const selectedItems = this.listData.slice(1, this.listData.length).filter(el => el.isSelected === true);\n        const unselectedItem = this.listData.slice(1, this.listData.length).find(el => el.isSelected === false);\n\n        if (unselectedItem) {\n            if (selectedItems.length <= IgxGridExcelStyleFilteringComponent.filterOptimizationThreshold) {\n                selectedItems.forEach(element => {\n                    let condition = null;\n                    if (element.value !== null && element.value !== undefined) {\n                        if (this.column.dataType === DataType.Boolean) {\n                            condition = this.createCondition(element.value.toString());\n                        } else {\n                            condition = this.createCondition('equals');\n                        }\n                    } else {\n                        condition = this.createCondition('empty');\n                    }\n                    filterTree.filteringOperands.push({\n                        condition: condition,\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: element.value\n                    });\n                });\n            } else {\n                const blanksItemIndex = selectedItems.findIndex(e => e.value === null || e.value === undefined);\n                let blanksItem: any;\n                if (blanksItemIndex >= 0) {\n                    blanksItem = selectedItems[blanksItemIndex];\n                    selectedItems.splice(blanksItemIndex, 1);\n                }\n\n                filterTree.filteringOperands.push({\n                    condition: this.createCondition('in'),\n                    fieldName: this.column.field,\n                    ignoreCase: this.column.filteringIgnoreCase,\n                    searchVal: new Set(this.column.dataType === DataType.Date ?\n                        selectedItems.map(d => new Date(d.value.getFullYear(), d.value.getMonth(), d.value.getDate()).toISOString()) :\n                        selectedItems.map(e => e.value))\n                });\n\n                if (blanksItem) {\n                    filterTree.filteringOperands.push({\n                        condition: this.createCondition('empty'),\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: blanksItem.value\n                    });\n                }\n            }\n\n            this.filteringService.filterInternal(this.column.field, filterTree);\n            this.expressionsList = new Array<ExpressionUI>();\n            this.filteringService.generateExpressionsList(this.column.filteringExpressionsTree,\n                this.grid.filteringLogic, this.expressionsList);\n        } else {\n            this.filteringService.clearFilter(this.column.field);\n        }\n\n        this.closeDropdown();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public cancel() {\n        if (!this.overlayComponentId) {\n            this.init();\n        }\n        this.closeDropdown();\n    }\n\n    private closeDropdown() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n            this.overlayComponentId = null;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ESCAPE || eventArgs.key === KEYS.ESCAPE_IE) {\n            this.closeDropdown();\n        }\n        eventArgs.stopPropagation();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public clearFilter() {\n        this.filteringService.clearFilter(this.column.field);\n        this.selectAllFilterItems();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onClearFilterKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.clearFilter();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public showCustomFilterItem(): boolean {\n        const exprTree = this.column.filteringExpressionsTree;\n        return exprTree && exprTree.filteringOperands && exprTree.filteringOperands.length &&\n            !((exprTree.filteringOperands[0] as IFilteringExpression).condition &&\n            (exprTree.filteringOperands[0] as IFilteringExpression).condition.name === 'in');\n    }\n\n    private createCondition(conditionName: string) {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return IgxBooleanFilteringOperand.instance().condition(conditionName);\n            case DataType.Number:\n                return IgxNumberFilteringOperand.instance().condition(conditionName);\n            case DataType.Date:\n                return IgxDateFilteringOperand.instance().condition(conditionName);\n            default:\n                return IgxStringFilteringOperand.instance().condition(conditionName);\n        }\n    }\n}\n","import { AutoPositionStrategy } from '../../../services/overlay/position/auto-position-strategy';\nimport { ConnectedFit } from '../../../services/overlay/utilities';\n\n/** @hidden */\nexport class ExcelStylePositionStrategy extends AutoPositionStrategy {\n    protected shouldFitInViewPort(connectedFit: ConnectedFit) {\n        return true;\n    }\n\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        const heightOverflow = connectedFit.contentElementRect.height - connectedFit.viewPortRect.height;\n        if (heightOverflow > 0) {\n            element.style.width = 'auto';\n            element.style.height = `${connectedFit.viewPortRect.height}px`;\n        } else {\n            element.style.height = `${Math.max(\n                connectedFit.viewPortRect.height - connectedFit.targetRect.bottom - 1,\n                connectedFit.contentElementRect.height)}px`;\n        }\n\n        super.fitInViewport(element, connectedFit);\n    }\n}\n","import { ElasticPositionStrategy } from './../../services/overlay/position/elastic-position-strategy';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DoCheck,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgZone,\n    OnInit,\n    Inject,\n    OnDestroy,\n    NgModuleRef\n} from '@angular/core';\nimport { DataType } from '../../data-operations/data-util';\nimport { SortingDirection } from '../../data-operations/sorting-expression.interface';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxColumnResizingService } from '../resizing/resizing.service';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { IgxGridExcelStyleFilteringComponent } from '../filtering/excel-style/grid.excel-style-filtering.component';\nimport { OverlaySettings, PositionSettings, VerticalAlignment } from '../../services/overlay/utilities';\nimport { useAnimation } from '@angular/animations';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { fadeIn, fadeOut } from '../../animations/main';\nimport { AbsoluteScrollStrategy } from '../../services/overlay/scroll/absolute-scroll-strategy';\nimport { GridType } from '../common/grid.interface';\nimport { ExcelStylePositionStrategy } from '../filtering/excel-style/excel-style-position-strategy';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header',\n    templateUrl: './grid-header.component.html'\n})\nexport class IgxGridHeaderComponent implements DoCheck, OnInit, OnDestroy {\n\n    private _componentOverlayId: string;\n    private _filterMenuPositionSettings: PositionSettings;\n    private _filterMenuOverlaySettings: OverlaySettings;\n    private _destroy$ = new Subject<boolean>();\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public gridID: string;\n\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__th--fw',\n            this.column.headerClasses\n        ];\n\n        const classList = {\n            'igx-grid__th': !this.column.columnGroup,\n            'asc': this.ascending,\n            'desc': this.descending,\n            'igx-grid__th--number': this.column.dataType === DataType.Number,\n            'igx-grid__th--sortable': this.column.sortable,\n            'igx-grid__th--filtrable': this.column.filterable && this.grid.filteringService.isFilterRowVisible,\n            'igx-grid__th--sorted': this.sorted\n        };\n\n        for (const klass of Object.keys(classList)) {\n            if (classList[klass]) {\n                defaultClasses.push(klass);\n            }\n        }\n        return defaultClasses.join(' ');\n    }\n\n    @HostBinding('style.height.rem')\n    get height() {\n        if (this.grid.hasColumnGroups) {\n            return (this.grid.maxLevelHeaderDepth + 1 - this.column.level) * this.grid.defaultRowHeight / this.grid._baseFontSize;\n        }\n        return null;\n    }\n\n    get ascending() {\n        return this.sortDirection === SortingDirection.Asc;\n    }\n\n    get descending() {\n        return this.sortDirection === SortingDirection.Desc;\n    }\n\n    get sortingIcon(): string {\n        if (this.sortDirection !== SortingDirection.None) {\n            // arrow_downward and arrow_upward\n            // are material icons ligature strings\n            return this.sortDirection === SortingDirection.Asc ? 'arrow_upward' : 'arrow_downward';\n        }\n        return 'arrow_upward';\n    }\n\n    get sorted() {\n        return this.sortDirection !== SortingDirection.None;\n    }\n\n    get filterIconClassName() {\n        return this.column.filteringExpressionsTree ? 'igx-excel-filter__icon--filtered' : 'igx-excel-filter__icon';\n    }\n\n    @HostBinding('attr.role')\n    public hostRole = 'columnheader';\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('attr.id')\n    get headerID() {\n        return `${this.gridID}_${this.column.field}`;\n    }\n\n    protected sortDirection = SortingDirection.None;\n\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n        public colResizingService: IgxColumnResizingService,\n        public cdr: ChangeDetectorRef,\n        public elementRef: ElementRef,\n        public zone: NgZone,\n        private _filteringService: IgxFilteringService,\n        private _moduleRef: NgModuleRef<any>,\n        @Inject(IgxOverlayService) private _overlayService: IgxOverlayService\n    ) { }\n\n    public ngOnInit() {\n        this.initFilteringSettings();\n    }\n\n    public ngDoCheck() {\n        this.getSortDirection();\n        this.cdr.markForCheck();\n    }\n\n    ngOnDestroy(): void {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n\n        if (this._componentOverlayId) {\n            this._overlayService.hide(this._componentOverlayId);\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this.colResizingService.isColumnResizing) {\n            event.stopPropagation();\n            if (this.grid.filteringService.isFilterRowVisible) {\n                if (this.column.filterable && !this.column.columnGroup &&\n                    !this.grid.filteringService.isFilterComplex(this.column.field)) {\n                    this.grid.filteringService.filteredColumn = this.column;\n                }\n            } else if (this.column.sortable) {\n                this.triggerSort();\n            }\n        }\n    }\n\n    public onFilteringIconClick(event) {\n        event.stopPropagation();\n\n        this.toggleFilterDropdown();\n    }\n\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    protected getSortDirection() {\n        const expr = this.gridAPI.grid.sortingExpressions.find((x) => x.fieldName === this.column.field);\n        this.sortDirection = expr ? expr.dir : SortingDirection.None;\n    }\n\n    public onSortingIconClick(event) {\n        if (this.grid.filteringService.isFilterRowVisible) {\n            event.stopPropagation();\n            this.triggerSort();\n        }\n    }\n\n    private triggerSort() {\n        const groupingExpr = this.grid.groupingExpressions ?\n            this.grid.groupingExpressions.find((expr) => expr.fieldName === this.column.field) : null;\n        const sortDir = groupingExpr ?\n            this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.Asc : SortingDirection.Desc\n            : this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.None : this.sortDirection + 1;\n        this.sortDirection = sortDir;\n        this.grid.sort({ fieldName: this.column.field, dir: this.sortDirection, ignoreCase: this.column.sortingIgnoreCase,\n            strategy: this.column.sortStrategy });\n    }\n\n    private toggleFilterDropdown() {\n        if (!this._componentOverlayId) {\n            const headerTarget = this.elementRef.nativeElement;\n            const filterIconTarget = headerTarget.querySelector('.' + this.filterIconClassName);\n\n            this._filterMenuOverlaySettings.positionStrategy.settings.target = filterIconTarget;\n            this._filterMenuOverlaySettings.outlet = this.grid.outlet;\n\n            this._componentOverlayId =\n                this._overlayService.attach(IgxGridExcelStyleFilteringComponent, this._filterMenuOverlaySettings, this._moduleRef);\n            this._overlayService.show(this._componentOverlayId, this._filterMenuOverlaySettings);\n        }\n    }\n\n    private initFilteringSettings() {\n        this._filterMenuPositionSettings = {\n            verticalStartPoint: VerticalAlignment.Bottom,\n            openAnimation: useAnimation(fadeIn, {\n                params: {\n                    duration: '250ms'\n                }\n            }),\n            closeAnimation: useAnimation(fadeOut, {\n                params: {\n                    duration: '200ms'\n                }\n            })\n        };\n\n        this._filterMenuOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: false,\n            positionStrategy: new ExcelStylePositionStrategy(this._filterMenuPositionSettings),\n            scrollStrategy: new AbsoluteScrollStrategy()\n        };\n\n        this._overlayService.onOpening.pipe(\n            filter((overlay) => overlay.id === this._componentOverlayId),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this.onOverlayOpening(eventArgs);\n            });\n\n        this._overlayService.onClosed.pipe(\n            filter(overlay => overlay.id === this._componentOverlayId),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this.onOverlayClosed();\n            });\n    }\n\n    private onOverlayOpening(eventArgs) {\n        const instance = eventArgs.componentRef.instance as IgxGridExcelStyleFilteringComponent;\n        if (instance) {\n            instance.initialize(this.column, this._overlayService, eventArgs.id);\n        }\n    }\n\n    private onOverlayClosed() {\n        this._componentOverlayId = null;\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    HostBinding,\n    AfterViewInit,\n    ElementRef,\n    HostListener,\n    OnInit,\n    ChangeDetectionStrategy,\n    DoCheck\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../../chips';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport { KEYS } from '../../../core/utils';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-cell',\n    templateUrl: './grid-filtering-cell.component.html'\n})\nexport class IgxGridFilteringCellComponent implements AfterViewInit, OnInit, DoCheck {\n\n    private baseClass = 'igx-grid__filtering-cell-indicator';\n    private currentTemplate = null;\n\n    public expressionsList: ExpressionUI[];\n    public moreFiltersCount = 0;\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @ViewChild('emptyFilter', { read: TemplateRef, static: true })\n    protected emptyFilter: TemplateRef<any>;\n\n    @ViewChild('defaultFilter', { read: TemplateRef, static: true })\n    protected defaultFilter: TemplateRef<any>;\n\n    @ViewChild('complexFilter', { read: TemplateRef, static: true })\n    protected complexFilter: TemplateRef<any>;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChild('moreIcon', { read: ElementRef })\n    protected moreIcon: ElementRef;\n\n    @ViewChild('ghostChip', { read: IgxChipComponent })\n    protected ghostChip: IgxChipComponent;\n\n    @ViewChild('complexChip', { read: IgxChipComponent })\n    protected complexChip: IgxChipComponent;\n\n    @HostBinding('class.igx-grid__filtering-cell')\n    public cssClass = 'igx-grid__filtering-cell';\n\n    constructor(public cdr: ChangeDetectorRef, public filteringService: IgxFilteringService) {\n        this.filteringService.subscribeToEvents();\n    }\n\n    ngOnInit(): void {\n        this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n    }\n\n    ngAfterViewInit(): void {\n        this.updateFilterCellArea();\n    }\n\n    public ngDoCheck() {\n        this.updateFilterCellArea();\n    }\n\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeyDown(eventArgs) {\n\n        if (this.isLastElementFocused()) {\n            this.filteringService.grid.navigation.navigateNextFilterCell(this.column, eventArgs);\n        }\n        eventArgs.stopPropagation();\n    }\n\n    @HostListener('keydown.shift.tab', ['$event'])\n    public onShiftTabKeyDown(eventArgs) {\n        if (this.isFirstElementFocused()) {\n            this.filteringService.grid.navigation.navigatePrevFilterCell(this.column, eventArgs);\n        }\n        eventArgs.stopPropagation();\n    }\n\n    /**\n     * Returns whether a chip with a given index is visible or not.\n     */\n    public isChipVisible(index: number) {\n        const expression = this.expressionsList[index];\n        return !!(expression && expression.isVisible);\n    }\n\n    /**\n     * Updates the filtering cell area.\n     */\n    public updateFilterCellArea() {\n        this.expressionsList = this.filteringService.getExpressions(this.column.field);\n        this.updateVisibleFilters();\n    }\n\n    get template(): TemplateRef<any> {\n        if (!this.column.filterable) {\n            this.currentTemplate = null;\n            return null;\n        }\n\n        if (this.column.filterCellTemplate) {\n            this.currentTemplate = this.column.filterCellTemplate;\n            return this.column.filterCellTemplate;\n        }\n\n        const expressionTree = this.column.filteringExpressionsTree;\n        if (!expressionTree || expressionTree.filteringOperands.length === 0) {\n            this.currentTemplate = this.emptyFilter;\n            return this.emptyFilter;\n        }\n\n        if (this.filteringService.isFilterComplex(this.column.field)) {\n            this.currentTemplate = this.complexFilter;\n            return this.complexFilter;\n        }\n\n        this.currentTemplate = this.defaultFilter;\n        return this.defaultFilter;\n    }\n\n    /**\n     * Gets the context passed to the filter template.\n     * @memberof IgxGridFilteringCellComponent\n     */\n    get context() {\n        return {\n            column: this.column\n        };\n    }\n\n    /**\n     * Chip clicked event handler.\n     */\n    public onChipClicked(expression?: IFilteringExpression) {\n        if (expression) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = (item.expression === expression);\n            });\n        } else if (this.expressionsList.length > 0) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = false;\n            });\n            this.expressionsList[0].isSelected = true;\n        }\n\n        const index = this.filteringService.unpinnedFilterableColumns.indexOf(this.column);\n        if (index >= 0 && !this.isColumnRightVisible(index)) {\n            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], true);\n        } else if (index >= 0 && !this.isColumnLeftVisible(index)) {\n            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], false);\n        }\n\n        this.filteringService.filteredColumn = this.column;\n        this.filteringService.isFilterRowVisible = true;\n        this.filteringService.selectedExpression = expression;\n    }\n\n    /**\n     * Chip removed event handler.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI): void {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove);\n        this.focusChip();\n    }\n\n    /**\n     * Clears the filtering.\n     */\n    public clearFiltering(): void {\n        this.filteringService.clearFilter(this.column.field);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Chip keydown event handler.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, expression?: IFilteringExpression) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n            this.onChipClicked(expression);\n        }\n    }\n\n    /**\n     * Returns the filtering indicator class.\n     */\n    public filteringIndicatorClass() {\n        return {\n            [this.baseClass]: !this.isMoreIconHidden(),\n            [`${this.baseClass}--hidden`]: this.isMoreIconHidden()\n        };\n    }\n\n    /**\n     * Focus a chip depending on the current visible template.\n     */\n    public focusChip(focusFirst: boolean = false) {\n        if (this.currentTemplate === this.defaultFilter) {\n            if (focusFirst) {\n                this.focusFirstElement();\n            } else {\n                this.focusElement();\n            }\n        } else if (this.currentTemplate === this.emptyFilter) {\n            this.ghostChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        } else if (this.currentTemplate === this.complexFilter) {\n            this.complexChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        }\n    }\n\n    private removeExpression(indexToRemove: number) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.updateVisibleFilters();\n        this.filteringService.filterInternal(this.column.field);\n    }\n\n    private isMoreIconHidden(): boolean {\n        return this.filteringService.columnToMoreIconHidden.get(this.column.field);\n    }\n\n    private updateVisibleFilters() {\n        this.expressionsList.forEach((ex) => ex.isVisible = true);\n\n        if (this.moreIcon) {\n            this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n        }\n        this.cdr.detectChanges();\n\n        if (this.chipsArea && this.expressionsList.length > 1) {\n            const areaWidth = this.chipsArea.element.nativeElement.offsetWidth;\n            let viewWidth = 0;\n            const chipsAreaElements = this.chipsArea.element.nativeElement.children;\n            let visibleChipsCount = 0;\n            const moreIconWidth = this.moreIcon.nativeElement.offsetWidth -\n                parseInt(document.defaultView.getComputedStyle(this.moreIcon.nativeElement)['margin-left'], 10);\n\n            for (let index = 0; index < chipsAreaElements.length - 1; index++) {\n                if (viewWidth + chipsAreaElements[index].offsetWidth < areaWidth) {\n                    viewWidth += chipsAreaElements[index].offsetWidth;\n                    if (index % 2 === 0) {\n                        visibleChipsCount++;\n                    } else {\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-left'], 10);\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-right'], 10);\n                    }\n                } else {\n                    if (index % 2 !== 0 && viewWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    } else if (visibleChipsCount > 0 && viewWidth - chipsAreaElements[index - 1].offsetWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    }\n                    this.moreFiltersCount = this.expressionsList.length - visibleChipsCount;\n                    this.filteringService.columnToMoreIconHidden.set(this.column.field, false);\n                    break;\n                }\n            }\n\n            for (let i = visibleChipsCount; i < this.expressionsList.length; i++) {\n                this.expressionsList[i].isVisible = false;\n            }\n            this.cdr.detectChanges();\n        }\n    }\n\n    private isFirstElementFocused(): boolean {\n        return !(this.chipsArea && this.chipsArea.chipsList.length > 0 &&\n            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`) !== document.activeElement);\n    }\n\n    private isLastElementFocused(): boolean {\n        if (this.chipsArea) {\n            if (this.isMoreIconHidden() && this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__remove`) !==\n                document.activeElement) {\n                return false;\n            } else if (!this.isMoreIconHidden() && this.moreIcon.nativeElement !== document.activeElement) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private focusFirstElement(): void {\n        if (this.chipsArea.chipsList.length > 0) {\n            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        } else {\n            this.moreIcon.nativeElement.focus();\n        }\n    }\n\n    private focusElement(): void {\n        if (this.filteringService.shouldFocusNext) {\n            if (!this.isMoreIconHidden() && this.chipsArea.chipsList.length === 0) {\n                this.moreIcon.nativeElement.focus();\n            } else {\n                this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n            }\n        } else {\n            if (!this.isMoreIconHidden()) {\n                this.moreIcon.nativeElement.focus();\n            } else {\n                this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__remove`).focus();\n            }\n        }\n    }\n\n    private isColumnRightVisible(columnIndex: number): boolean {\n        if (this.filteringService.areAllColumnsInView) {\n            return true;\n        }\n        let currentColumnRight = 0;\n        for (let index = 0; index < this.filteringService.unpinnedColumns.length; index++) {\n            currentColumnRight += parseInt(this.filteringService.unpinnedColumns[index].width, 10);\n            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {\n                break;\n            }\n        }\n        const width = this.filteringService.displayContainerWidth + this.filteringService.displayContainerScrollLeft;\n        return currentColumnRight <= width;\n    }\n\n    private isColumnLeftVisible(columnIndex: number): boolean {\n        if (this.filteringService.areAllColumnsInView) {\n            return true;\n        }\n        let currentColumnLeft = 0;\n        for (let index = 0; index < this.filteringService.unpinnedColumns.length; index++) {\n            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {\n                break;\n            }\n            currentColumnLeft += parseInt(this.filteringService.unpinnedColumns[index].width, 10);\n        }\n        return currentColumnLeft >= this.filteringService.displayContainerScrollLeft;\n    }\n}\n","import {\n    Component,\n    HostBinding,\n    Input,\n    ViewChild,\n    QueryList,\n    ViewChildren,\n    forwardRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    DoCheck,\n    ElementRef,\n    HostListener\n} from '@angular/core';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxColumnResizingService } from '../resizing/resizing.service';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridFilteringCellComponent } from '../filtering/base/grid-filtering-cell.component';\nimport { isIE } from '../../core/utils';\nimport { GridType } from '../common/grid.interface';\n\nconst Z_INDEX = 9999;\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header-group',\n    templateUrl: './grid-header-group.component.html'\n})\nexport class IgxGridHeaderGroupComponent implements DoCheck {\n\n    @HostBinding('style.-ms-grid-row-span')\n    get gridRowSpan(): number {\n        return this.column.gridRowSpan;\n    }\n\n    @HostBinding('style.-ms-grid-column-span')\n    get gridColumnSpan(): number {\n        return this.column.gridColumnSpan;\n    }\n\n\n    @HostBinding('style.grid-row-end')\n    get rowEnd(): number {\n        return this.column.rowEnd;\n    }\n\n    @HostBinding('style.grid-column-end')\n    get colEnd(): number {\n        return this.column.colEnd;\n    }\n\n    @HostBinding('style.-ms-grid-row')\n    @HostBinding('style.grid-row-start')\n    get rowStart(): number {\n        return this.column.rowStart;\n    }\n\n    @HostBinding('style.-ms-grid-column')\n    @HostBinding('style.grid-column-start')\n    get colStart(): number {\n        return this.column.colStart;\n    }\n\n    /**\n     * Gets the column of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @Input()\n    public column: IgxColumnComponent;\n\n    /**\n     * Gets the `id` of the grid in which the header group is stored.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridHeaderComponent)\n    public headerCell: IgxGridHeaderComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridFilteringCellComponent)\n    public filterCell: IgxGridFilteringCellComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(forwardRef(() => IgxGridHeaderGroupComponent), { read: IgxGridHeaderGroupComponent })\n    public children: QueryList<IgxGridHeaderGroupComponent>;\n\n    /**\n     * Gets the width of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get width() {\n        return this.grid.getHeaderGroupWidth(this.column);\n    }\n\n    /**\n     * Gets the style classes of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__thead-item',\n            this.column.headerGroupClasses\n        ];\n\n        const classList = {\n            'igx-grid__th--pinned': this.isPinned,\n            'igx-grid__th--pinned-last': this.isLastPinned,\n            'igx-grid__drag-col-header': this.isHeaderDragged,\n            'igx-grid__th--filtering': this.isFiltered\n        };\n\n        for (const className of Object.keys(classList)) {\n            if (classList[className]) {\n                defaultClasses.push(className);\n            }\n        }\n        return defaultClasses.join(' ');\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.z-index')\n    get zIndex() {\n        if (!this.column.pinned) {\n            return null;\n        }\n        return Z_INDEX - this.grid.pinnedColumns.indexOf(this.column);\n    }\n\n    /**\n     * Gets the grid of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets whether the header group belongs to a column that is filtered.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isFiltered(): boolean {\n        return this.filteringService.filteredColumn === this.column;\n    }\n\n    /**\n     * Gets whether the header group is stored in the last column in the pinned area.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isLastPinned(): boolean {\n        return !this.grid.hasColumnLayouts ? this.column.isLastPinned : false;\n    }\n\n    @HostBinding('style.display')\n    get groupDisplayStyle(): string {\n        return this.grid.hasColumnLayouts && this.column.children && !isIE() ? 'flex' : '';\n    }\n\n    /**\n     * Gets whether the header group is stored in a pinned column.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isPinned(): boolean {\n        return this.column.pinned;\n    }\n\n    /**\n     * Gets whether the header group belongs to a column that is moved.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isHeaderDragged(): boolean {\n        return this.grid.draggedColumn ===  this.column;\n    }\n\n    /**\n     * @hidden\n     */\n    get hasLastPinnedChildColumn(): boolean {\n        return this.column.allChildren.some(child => child.isLastPinned);\n    }\n\n    /**\n     * @hidden\n     */\n    get height() {\n        return this.element.nativeElement.getBoundingClientRect().height;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event): void {\n        // hack for preventing text selection in IE and Edge while dragging the resizer\n        event.preventDefault();\n    }\n\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    constructor(private cdr: ChangeDetectorRef,\n                public gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n                public element: ElementRef,\n                public colResizingService: IgxColumnResizingService,\n                public filteringService: IgxFilteringService) { }\n}\n","import { Injectable} from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\n\n/** @hidden */\n@Injectable()\nexport class IgxGridSummaryService {\n    protected summaryCacheMap: Map<string, Map<string, any[]>> = new Map<string, Map<string, IgxSummaryResult[]>>();\n    public grid;\n    public rootSummaryID = 'igxGridRootSummary';\n    public summaryHeight = 0;\n    public maxSummariesLenght = 0;\n    public groupingExpressions = [];\n    public retriggerRootPipe = 0;\n    public deleteOperation = false;\n\n    public recalculateSummaries() {\n        this.resetSummaryHeight();\n        this.grid.notifyChanges(true);\n    }\n\n    public clearSummaryCache(args?) {\n        if (!this.summaryCacheMap.size) { return; }\n        if (!args) {\n            this.summaryCacheMap.clear();\n            if (this.grid && this.grid.rootSummariesEnabled) {\n                this.retriggerRootPipe++;\n            }\n            return;\n        }\n        if (args.data) {\n            const rowID = this.grid.primaryKey ? args.data[this.grid.primaryKey] : args.data;\n            this.removeSummaries(rowID);\n        }\n        if (args.rowID !== undefined && args.rowID !== null) {\n            let columnName = args.cellID ? this.grid.columnList.find(col => col.index === args.cellID.columnID).field : undefined;\n            if (columnName && this.grid.rowEditable) { return; }\n\n            const isGroupedColumn = this.grid.groupingExpressions &&\n                    this.grid.groupingExpressions.map(expr => expr.fieldName).indexOf(columnName) !== -1;\n            if (columnName && isGroupedColumn ) {\n                columnName = undefined;\n            }\n            this.removeSummaries(args.rowID, columnName);\n        }\n    }\n\n    public removeSummaries(rowID, columnName?) {\n        this.deleteSummaryCache(this.rootSummaryID, columnName);\n        if (this.summaryCacheMap.size === 1 && this.summaryCacheMap.has(this.rootSummaryID)) { return; }\n        if (this.isTreeGrid) {\n            if (this.grid.transactions.enabled && this.deleteOperation) {\n                this.deleteOperation = false;\n                // TODO: this.removeChildRowSummaries(rowID, columnName);\n                this.summaryCacheMap.clear();\n                return;\n            }\n            this.removeAllTreeGridSummaries(rowID, columnName);\n        } else if (this.isHierarchicalGrid) {\n            if (this.grid.transactions.enabled && this.deleteOperation) {\n                this.deleteOperation = false;\n                this.summaryCacheMap.clear();\n            }\n        } else {\n           const summaryIds = this.getSummaryID(rowID, this.grid.groupingExpressions);\n           summaryIds.forEach(id => {\n               this.deleteSummaryCache(id, columnName);\n           });\n        }\n    }\n\n    public removeSummariesCachePerColumn(columnName) {\n        this.summaryCacheMap.forEach((cache) => {\n            if (cache.get(columnName)) {\n                cache.delete(columnName);\n            }\n        });\n        if (this.grid.rootSummariesEnabled) {  this.retriggerRootPipe++; }\n    }\n\n    public calcMaxSummaryHeight() {\n        if (this.summaryHeight) {\n            return this.summaryHeight;\n        }\n        if (!this.grid.data) {return this.summaryHeight = 0; }\n        let maxSummaryLength = 0;\n        this.grid.columnList.filter((col) => col.hasSummary && !col.hidden).forEach((column) => {\n            const getCurrentSummaryColumn = column.summaries.operate([], [], column.field).length;\n            if (getCurrentSummaryColumn) {\n                if (maxSummaryLength < getCurrentSummaryColumn) {\n                    maxSummaryLength = getCurrentSummaryColumn;\n                }\n            }\n        });\n        this.maxSummariesLenght = maxSummaryLength;\n        this.summaryHeight =  maxSummaryLength * this.grid.defaultSummaryHeight;\n        return this.summaryHeight;\n    }\n\n    public calculateSummaries(rowID, data) {\n        let rowSummaries = this.summaryCacheMap.get(rowID);\n        if (!rowSummaries) {\n            rowSummaries = new Map<string, IgxSummaryResult[]>();\n            this.summaryCacheMap.set(rowID, rowSummaries);\n        }\n        if (!this.hasSummarizedColumns || !data) {return rowSummaries; }\n        this.grid.columnList.filter(col => col.hasSummary).forEach((column) => {\n            if (!rowSummaries.get(column.field)) {\n                rowSummaries.set(column.field,\n                    column.summaries.operate(data.map(r => r[column.field]), data, column.field));\n            }\n        });\n        return rowSummaries;\n    }\n\n    public resetSummaryHeight() {\n        this.summaryHeight = 0;\n        (this.grid as any)._summaryPipeTrigger++;\n        if (this.grid.rootSummariesEnabled) {\n            this.retriggerRootPipe++;\n        }\n    }\n\n    public updateSummaryCache(groupingArgs) {\n        if (this.summaryCacheMap.size === 0 || !this.hasSummarizedColumns) { return; }\n        if (this.groupingExpressions.length === 0) {\n            this.groupingExpressions = groupingArgs.expressions.map(record => record.fieldName);\n            return;\n        }\n        if (groupingArgs.length === 0) {\n            this.groupingExpressions = [];\n            this.clearSummaryCache();\n            return;\n        }\n        this.compareGroupingExpressions(this.groupingExpressions, groupingArgs);\n        this.groupingExpressions = groupingArgs.expressions.map(record => record.fieldName);\n    }\n\n    public get hasSummarizedColumns(): boolean {\n        const summarizedColumns = this.grid.columnList.filter(col => col.hasSummary && !col.hidden);\n        return summarizedColumns.length > 0;\n    }\n\n    private deleteSummaryCache(id, columnName) {\n        if (this.summaryCacheMap.get(id)) {\n            const filteringApplied = columnName && this.grid.filteringExpressionsTree &&\n                    this.grid.filteringExpressionsTree.filteringOperands.map((expr) => expr.fieldName).indexOf(columnName) !== -1;\n            if (columnName && this.summaryCacheMap.get(id).get(columnName) && !filteringApplied) {\n                this.summaryCacheMap.get(id).delete(columnName);\n            } else {\n                this.summaryCacheMap.delete(id);\n            }\n            if (id === this.rootSummaryID && this.grid.rootSummariesEnabled) {\n                this.retriggerRootPipe++;\n            }\n        }\n    }\n\n    private getSummaryID(rowID, groupingExpressions) {\n        if (groupingExpressions.length === 0) { return []; }\n        const summaryIDs = [];\n        let data = this.grid.data;\n        if (this.grid.transactions.enabled) {\n            data = DataUtil.mergeTransactions(\n                cloneArray(this.grid.data),\n                this.grid.transactions.getAggregatedChanges(true),\n                this.grid.primaryKey\n            );\n        }\n        const rowData = this.grid.primaryKey ? data.find(rec => rec[this.grid.primaryKey] === rowID) : rowID;\n        let id = '{ ';\n        groupingExpressions.forEach(expr => {\n            id += `'${expr.fieldName}': '${rowData[expr.fieldName]}'`;\n                summaryIDs.push(id.concat(' }'));\n                id += ', ';\n        });\n        return summaryIDs;\n    }\n\n    private removeAllTreeGridSummaries(rowID, columnName?) {\n        let row = this.grid.records.get(rowID);\n        if (!row) { return; }\n        row = row.children ? row : row.parent;\n        while (row) {\n            rowID = row.rowID;\n            this.deleteSummaryCache(rowID, columnName);\n            row = row.parent;\n        }\n    }\n\n    // TODO: remove only deleted rows\n    private removeChildRowSummaries(rowID, columnName?) {\n    }\n\n    private compareGroupingExpressions(current, groupingArgs) {\n        const newExpressions = groupingArgs.expressions.map(record => record.fieldName);\n        const removedCols = groupingArgs.ungroupedColumns;\n        if (current.length <= newExpressions.length) {\n            const newExpr = newExpressions.slice(0, current.length).toString();\n            if (current.toString() !== newExpr) {\n                this.clearSummaryCache();\n            }\n        } else {\n            const currExpr = current.slice(0, newExpressions.length).toString();\n            if (currExpr !== newExpressions.toString()) {\n                this.clearSummaryCache();\n                return;\n            }\n            removedCols.map(col => col.field).forEach(colName => {\n                this.summaryCacheMap.forEach((cache, id) => {\n                   if (id.indexOf(colName) !== -1) {\n                       this.summaryCacheMap.delete(id);\n                   }});\n            });\n        }\n    }\n\n    private get isTreeGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-tree-grid';\n    }\n\n    private get isHierarchicalGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';\n    }\n\n}\n","import { Component, Input, HostBinding, HostListener, ChangeDetectionStrategy, ElementRef } from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { ISelectionNode } from '../selection/selection.service';\nimport { SUPPORTED_KEYS } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary-cell',\n    templateUrl: './summary-cell.component.html'\n})\nexport class IgxSummaryCellComponent {\n\n    @Input()\n    public summaryResults: IgxSummaryResult[];\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public firstCellIndentation = 0;\n\n    @Input()\n    public hasSummary = false;\n\n    @Input()\n    public density;\n\n    constructor(private element: ElementRef) {\n    }\n\n    @Input()\n    @HostBinding('attr.data-rowIndex')\n    public rowIndex: number;\n\n    @HostBinding('attr.data-visibleIndex')\n    get visibleColumnIndex(): number {\n        return this.column.visibleIndex;\n    }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('attr.aria-describedby')\n    public get describeby() {\n        return `Summary_${this.column.field}`;\n    }\n\n    @HostBinding('class.igx-grid-summary--active')\n    public focused: boolean;\n\n    @HostListener('focus')\n    public onFocus() {\n        this.focused = true;\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.focused = false;\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.rowIndex,\n            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,\n            isSummaryRow: true\n        };\n    }\n\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        // TODO: Refactor\n        const key = event.key.toLowerCase();\n        const ctrl = event.ctrlKey;\n        const shift = event.shiftKey;\n\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n        const args = { targetType: 'summaryCell', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        event.preventDefault();\n\n        if (!this.isKeySupportedInCell(key, ctrl)) { return; }\n\n        this.grid.selectionService.keyboardState.shift = shift && !(key === 'tab');\n        const row = this.getRowElementByIndex(this.rowIndex);\n        switch (key) {\n            case 'tab':\n                if (shift) {\n                    this.grid.navigation.performShiftTabKey(row, this.selectionNode);\n                    break;\n                }\n                this.grid.navigation.performTab(row, this.selectionNode);\n                break;\n            case 'arrowleft':\n            case 'home':\n            case 'left':\n                if (ctrl || key === 'home') {\n                    this.grid.navigation.onKeydownHome(this.rowIndex, true);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, this.selectionNode);\n                break;\n            case 'end':\n            case 'arrowright':\n            case 'right':\n                if (ctrl || key === 'end') {\n                    this.grid.navigation.onKeydownEnd(this.rowIndex, true);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowRight(this.nativeElement, this.selectionNode);\n                break;\n            case 'arrowup':\n            case 'up':\n                    this.grid.navigation.navigateUp(row, this.selectionNode);\n                break;\n            case 'arrowdown':\n            case 'down':\n                    this.grid.navigation.navigateDown(row, this.selectionNode);\n                break;\n        }\n    }\n\n    get width() {\n        return this.column.getCellWidth();\n    }\n\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    get columnDatatype(): DataType {\n        return this.column.dataType;\n    }\n\n    get itemHeight() {\n        return this.column.grid.defaultSummaryHeight;\n    }\n\n    /**\n    * @hidden\n    */\n    public get grid() {\n        return (this.column.grid as any);\n    }\n\n    private getRowElementByIndex(rowIndex) {\n        const summaryRows = this.grid.summariesRowList.toArray();\n        return summaryRows.find((sr) => sr.dataRowIndex === rowIndex).nativeElement;\n    }\n\n    private isKeySupportedInCell(key, ctrl) {\n        if (ctrl) {\n           return ['arrowup', 'arrowdown', 'up', 'down', 'end', 'home'].indexOf(key) === -1;\n        }\n        return ['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright', 'home', 'end', 'tab'].indexOf(key) !== -1;\n    }\n\n    public translateSummary(summary: IgxSummaryResult): string {\n        return this.grid.resourceStrings[`igx_grid_summary_${summary.key}`] || summary.label;\n    }\n}\n","import {\n    Component,\n    Input,\n    ViewChildren,\n    QueryList,\n    HostBinding,\n    ViewChild,\n    ElementRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    DoCheck\n} from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { IgxSummaryCellComponent } from './summary-cell.component';\nimport { IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { GridType } from '../common/grid.interface';\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary-row',\n    templateUrl: './summary-row.component.html',\n    providers: [IgxForOfSyncService]\n})\nexport class IgxSummaryRowComponent implements DoCheck  {\n\n    @Input()\n    public summaries: Map<string, IgxSummaryResult[]>;\n\n    @Input()\n    public gridID;\n\n    @Input()\n    public index: number;\n\n    @Input()\n    public firstCellIndentation = -1;\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    get minHeight() {\n        return this.grid.summaryService.calcMaxSummaryHeight() - 1;\n    }\n\n    @ViewChildren(IgxSummaryCellComponent, { read: IgxSummaryCellComponent })\n    public summaryCells: QueryList<IgxSummaryCellComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n                public element: ElementRef,\n                public cdr: ChangeDetectorRef) {}\n\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    public get grid() {\n        return this.gridAPI.grid;\n    }\n\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    public getColumnSummaries(columnName) {\n        if (!this.summaries.get(columnName)) {\n            return [];\n        }\n        return this.summaries.get(columnName);\n\n    }\n\n    /**\n     * @hidden\n     */\n    public get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { IgxColumnComponent } from '../columns/column.component';\n\n/**\n * @hidden\n * @internal\n */\nexport enum DropPosition {\n    BeforeDropTarget,\n    AfterDropTarget,\n    None\n}\n\n\n/**\n * @hidden\n * @internal\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxColumnMovingService {\n    private _icon: any;\n    private _column: IgxColumnComponent;\n\n    public cancelDrop: boolean;\n    public isColumnMoving: boolean;\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n    set column(val: IgxColumnComponent) {\n        if (val) {\n            this._column = val;\n        }\n    }\n\n    get icon(): any {\n        return this._icon;\n    }\n    set icon(val: any) {\n        if (val) {\n            this._icon = val;\n        }\n    }\n}\n","import {\n    Directive,\n    ElementRef,\n    Inject,\n    Input,\n    NgZone,\n    Output,\n    OnInit,\n    OnDestroy,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { Subject, fromEvent, animationFrameScheduler, interval } from 'rxjs';\nimport { map, switchMap, takeUntil, throttle } from 'rxjs/operators';\n\n/**\n * @hidden\n * @internal\n */\n@Directive({\n    selector: '[igxResizer]'\n})\nexport class IgxColumnResizerDirective implements OnInit, OnDestroy {\n\n    @Input()\n    public restrictHResizeMin: number = Number.MIN_SAFE_INTEGER;\n\n    @Input()\n    public restrictHResizeMax: number = Number.MAX_SAFE_INTEGER;\n\n    @Output()\n    public resizeEnd = new Subject<any>();\n\n    @Output()\n    public resizeStart = new Subject<any>();\n\n    @Output()\n    public resize = new Subject<any>();\n\n    private _left;\n    private _destroy = new Subject<boolean>();\n\n    constructor(public element: ElementRef, @Inject(DOCUMENT) public document, public zone: NgZone) {\n\n        this.resizeStart.pipe(\n            map((event) => event.clientX),\n            takeUntil(this._destroy),\n            switchMap((offset) => this.resize.pipe(\n                map((event) => event.clientX - offset),\n                takeUntil(this.resizeEnd),\n                takeUntil(this._destroy)\n            ))\n        ).subscribe((pos) => {\n\n            const left = this._left + pos;\n\n            const min = this._left - this.restrictHResizeMin;\n            const max = this._left + this.restrictHResizeMax;\n\n            this.left = left < min ? min : left;\n\n            if (left > max) {\n                this.left = max;\n            }\n        });\n\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            fromEvent(this.document.defaultView, 'mousemove').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy)\n            ).subscribe((res) => this.onMousemove(res));\n\n            fromEvent(this.document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onMouseup(res));\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    public set left(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.left = val + 'px');\n    }\n\n    public set top(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.top = val + 'px');\n    }\n\n    onMouseup(event) {\n        this.resizeEnd.next(event);\n        this.resizeEnd.complete();\n    }\n\n    onMousedown(event) {\n        event.preventDefault();\n        const parent = this.element.nativeElement.parentElement.parentElement;\n\n        this.left = this._left = event.clientX - parent.getBoundingClientRect().left;\n        this.top = event.target.getBoundingClientRect().top - parent.getBoundingClientRect().top;\n\n        this.resizeStart.next(event);\n    }\n\n    onMousemove(event) {\n        event.preventDefault();\n        this.resize.next(event);\n    }\n}\n","import { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';\nimport { IgxColumnResizingService } from './resizing.service';\nimport { IgxColumnResizerDirective } from './resizer.directive';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-column-resizer',\n    templateUrl: './resizer.component.html'\n})\nexport class IgxGridColumnResizerComponent {\n    constructor(public colResizingService: IgxColumnResizingService) { }\n\n    @ViewChild(IgxColumnResizerDirective, { static: true })\n    public resizer: IgxColumnResizerDirective;\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    QueryList,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    ChangeDetectionStrategy,\n    ViewRef\n} from '@angular/core';\nimport { DataType, DataUtil } from '../../../data-operations/data-util';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { IgxDropDownComponent, ISelectionEventArgs } from '../../../drop-down/index';\nimport { IFilteringOperation } from '../../../data-operations/filtering-condition';\nimport { FilteringLogic, IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { HorizontalAlignment, VerticalAlignment, OverlaySettings } from '../../../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../../../services/overlay/position/connected-positioning-strategy';\nimport { IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../../chips';\nimport { ExpressionUI } from '../grid-filtering.service';\nimport { IgxDropDownItemComponent } from '../../../drop-down/drop-down-item.component';\nimport { IgxFilteringService } from '../grid-filtering.service';\nimport { KEYS, isEdge } from '../../../core/utils';\nimport { AbsoluteScrollStrategy } from '../../../services/overlay/scroll';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-row',\n    templateUrl: './grid-filtering-row.component.html'\n})\nexport class IgxGridFilteringRowComponent implements AfterViewInit {\n\n    private _positionSettings = {\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _conditionsOverlaySettings: OverlaySettings = {\n        excludePositionTarget: true,\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private _operatorsOverlaySettings: OverlaySettings = {\n        excludePositionTarget: true,\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private chipsAreaWidth: number;\n    private chipAreaScrollOffset = 0;\n    private _column = null;\n    private isKeyPressed = false;\n    private isComposing = false;\n    private _cancelChipClick = false;\n\n    public showArrows: boolean;\n    public expression: IFilteringExpression;\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    set column(val) {\n        if (this._column) {\n            this.expressionsList.forEach(exp => exp.isSelected = false);\n        }\n        if (val) {\n            this._column = val;\n\n            this.expressionsList = this.filteringService.getExpressions(this._column.field);\n            this.resetExpression();\n\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    @Input()\n    get value(): any {\n        return this.expression ? this.expression.searchVal : null;\n    }\n\n    set value(val) {\n        if (!val && val !== 0) {\n            this.expression.searchVal = null;\n            this.showHideArrowButtons();\n        } else {\n            this.expression.searchVal = DataUtil.parseValue(this.column.dataType, val);\n            if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n                this.addExpression(true);\n            }\n        }\n\n        this.filter();\n    }\n\n    @ViewChild('defaultFilterUI', { read: TemplateRef, static: true })\n    protected defaultFilterUI: TemplateRef<any>;\n\n    @ViewChild('defaultDateUI', { read: TemplateRef, static: true })\n    protected defaultDateUI: TemplateRef<any>;\n\n    @ViewChild('input', { read: ElementRef })\n    protected input: ElementRef;\n\n    @ViewChild('inputGroupConditions', { read: IgxDropDownComponent, static: true })\n    protected dropDownConditions: IgxDropDownComponent;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent, static: true })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChildren('operators', { read: IgxDropDownComponent })\n    protected dropDownOperators: QueryList<IgxDropDownComponent>;\n\n    @ViewChild('inputGroup', { read: ElementRef })\n    protected inputGroup: ElementRef;\n\n    @ViewChild('inputGroupPrefix', { read: ElementRef })\n    protected inputGroupPrefix: ElementRef;\n\n    @ViewChild('container', { static: true })\n    protected container: ElementRef;\n\n    @ViewChild('operand')\n    protected operand: ElementRef;\n\n    @ViewChild('closeButton', { static: true })\n    public closeButton: ElementRef;\n\n    @HostBinding('class.igx-grid__filtering-row')\n    public cssClass = 'igx-grid__filtering-row';\n\n    constructor(public filteringService: IgxFilteringService, public element: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    ngAfterViewInit() {\n        this._conditionsOverlaySettings.outlet = this.column.grid.outletDirective;\n        this._operatorsOverlaySettings.outlet = this.column.grid.outletDirective;\n\n        const selectedItem = this.expressionsList.find(expr => expr.isSelected === true);\n        if (selectedItem) {\n            this.expression = selectedItem.expression;\n        }\n\n        this.input.nativeElement.focus();\n    }\n\n    @HostListener('keydown.shift.tab', ['$event'])\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeydown(event) {\n        event.stopPropagation();\n        if (document.activeElement === this.closeButton.nativeElement && !event.shiftKey) {\n            this.filteringService.grid.navigation.navigateFirstCellIfPossible(event);\n        }\n    }\n\n    @HostListener('keydown.esc', ['$event'])\n    public onEscKeydown(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.close();\n    }\n\n    get disabled(): boolean {\n        return !(this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0);\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.defaultDateUI;\n        }\n\n        return this.defaultFilterUI;\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.String:\n            case DataType.Boolean:\n                return 'text';\n            case DataType.Number:\n                return 'number';\n        }\n    }\n\n    get conditions(): any {\n        return this.column.filters.conditionList();\n    }\n\n    get isUnaryCondition(): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.isUnary;\n        } else {\n            return true;\n        }\n    }\n\n    get placeholder(): string {\n        if (this.expression.condition && this.expression.condition.isUnary) {\n            return this.filteringService.getChipLabel(this.expression);\n        } else if (this.column.dataType === DataType.Date) {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_date_placeholder;\n        } else if (this.column.dataType === DataType.Boolean) {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_boolean_placeholder;\n        } else {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_placeholder;\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input group's prefix.\n     */\n    public onPrefixKeyDown(event: KeyboardEvent) {\n        if ((event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) && this.dropDownConditions.collapsed) {\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n            event.stopImmediatePropagation();\n        } else if (event.key === KEYS.TAB) {\n            if (event.shiftKey) {\n                event.preventDefault();\n                event.stopPropagation();\n            } else if (!this.dropDownConditions.collapsed) {\n                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n            }\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input.\n     */\n    public onInputKeyDown(event: KeyboardEvent) {\n        this.isKeyPressed = true;\n\n        if (this.column.dataType === DataType.Boolean) {\n            if (event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) {\n                this.inputGroupPrefix.nativeElement.focus();\n                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n                event.stopPropagation();\n                return;\n            }\n        }\n\n        if (event.key === KEYS.ENTER) {\n            if (this.isComposing) {\n                return;\n            }\n            this.commitInput();\n        } else if (event.altKey && (event.key === KEYS.DOWN_ARROW || event.key === KEYS.DOWN_ARROW_IE)) {\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        } else if (event.key === KEYS.ESCAPE || event.key === KEYS.ESCAPE_IE) {\n            event.preventDefault();\n            this.close();\n        }\n        event.stopPropagation();\n    }\n\n    /**\n     * Event handler for keyup on the input.\n     */\n    public onInputKeyUp(eventArgs) {\n        this.isKeyPressed = false;\n    }\n\n    /**\n     * Event handler for input on the input.\n     */\n    public onInput(eventArgs) {\n        // The 'iskeyPressed' flag is needed for a case in IE, because the input event is fired on focus and for some reason,\n        // when you have a japanese character as a placeholder, on init the value here is empty string .\n        if (isEdge() || this.isKeyPressed || eventArgs.target.value) {\n            this.value = eventArgs.target.value;\n        }\n    }\n\n    /**\n     * Event handler for compositionstart on the input.\n     */\n    public onCompositionStart() {\n        this.isComposing = true;\n    }\n\n    /**\n     * Event handler for compositionend on the input.\n     */\n    public onCompositionEnd() {\n        this.isComposing = false;\n    }\n\n    /**\n     * Event handler for input click event.\n     */\n    public onInputClick() {\n        if (this.column.dataType === DataType.Boolean && this.dropDownConditions.collapsed) {\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        }\n    }\n\n    /**\n     * Event handler for datepicker's close.\n     */\n    public datePickerClose() {\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Returns the filtering operation condition for a given value.\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    /**\n     * Returns the translated condition name for a given value.\n     */\n    public translateCondition(value: string): string {\n        return this.filteringService.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    /**\n     * Returns the icon name of the current condition.\n     */\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expression.condition === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else {\n            return this.expression.condition.iconName;\n        }\n    }\n\n    /**\n     * Returns whether a given condition is selected in dropdown.\n     */\n    public isConditionSelected(conditionName: string): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.name === conditionName;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Clears the current filtering.\n     */\n    public clearFiltering() {\n        this.filteringService.clearFilter(this.column.field);\n        this.resetExpression();\n        if (this.input) {\n            this.input.nativeElement.focus();\n        }\n        this.cdr.detectChanges();\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /**\n     * Commits the value of the input.\n     */\n    public commitInput() {\n        const selectedItem = this.expressionsList.filter(ex => ex.isSelected === true);\n        selectedItem.forEach(e => e.isSelected = false);\n\n        let indexToDeselect = -1;\n        for (let index = 0; index < this.expressionsList.length; index++) {\n            const expression = this.expressionsList[index].expression;\n            if (expression.searchVal === null && !expression.condition.isUnary) {\n                indexToDeselect = index;\n            }\n        }\n        if (indexToDeselect !== -1) {\n            this.removeExpression(indexToDeselect, this.expression);\n        }\n        this.resetExpression();\n        this.scrollChipsWhenAddingExpression();\n    }\n\n    /**\n     * Clears the value of the input.\n     */\n    public clearInput() {\n        this.value = null;\n    }\n\n    /**\n     * Event handler for keydown on clear button.\n     */\n    public onClearKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            this.clearInput();\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Event handler for click on clear button.\n     */\n    public onClearClick() {\n        this.clearInput();\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Event handler for keydown on commit button.\n     */\n    public onCommitKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            this.commitInput();\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Event handler for click on commit button.\n     */\n    public onCommitClick() {\n        this.commitInput();\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Event handler for focusout on the input group.\n     */\n    public onInputGroupFocusout() {\n        if (!this.value && this.value !== 0 &&\n            this.expression.condition && !this.expression.condition.isUnary) {\n            return;\n        }\n        requestAnimationFrame(() => {\n            const focusedElement = document.activeElement;\n            if (focusedElement.className === 'igx-chip__remove') {\n                return;\n            }\n            if (!(focusedElement && this.inputGroup.nativeElement.contains(focusedElement))\n                && this.dropDownConditions.collapsed) {\n                this.commitInput();\n            }\n        });\n    }\n\n    /**\n     * Closes the filtering edit row.\n     */\n    public close() {\n        if (this.expressionsList.length === 1 &&\n            this.expressionsList[0].expression.searchVal === null &&\n            this.expressionsList[0].expression.condition.isUnary === false) {\n            this.filteringService.getExpressions(this.column.field).pop();\n        } else {\n            this.expressionsList.forEach((item) => {\n                if (item.expression.searchVal === null && !item.expression.condition.isUnary) {\n                    this.filteringService.removeExpression(this.column.field, this.expressionsList.indexOf(item));\n                }\n            });\n        }\n\n        this.filteringService.isFilterRowVisible = false;\n\n        this.filteringService.updateFilteringCell(this.column);\n        this.filteringService.focusFilterCellChip(this.column, true);\n\n        this.filteringService.filteredColumn = null;\n        this.filteringService.selectedExpression = null;\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /*\n    * noop\n    */\n    public noop() { }\n\n    /**\n     *  Event handler for date picker's selection.\n     */\n    public onDateSelected(value: Date) {\n        this.value = value;\n        this.commitInput();\n    }\n\n    /**\n     * Opens the conditions dropdown.\n     */\n    public toggleConditionsDropDown(target: any) {\n        this._conditionsOverlaySettings.positionStrategy.settings.target = target;\n        this.dropDownConditions.toggle(this._conditionsOverlaySettings);\n    }\n\n    /**\n     * Opens the logic operators dropdown.\n     */\n    public toggleOperatorsDropDown(eventArgs, index) {\n        this._operatorsOverlaySettings.positionStrategy.settings.target = eventArgs.target.parentElement;\n        this.dropDownOperators.toArray()[index].toggle(this._operatorsOverlaySettings);\n    }\n\n    /**\n     * Event handler for change event in conditions dropdown.\n     */\n    public onConditionsChanged(eventArgs) {\n        const value = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n        this.expression.condition = this.getCondition(value);\n        if (this.expression.condition.isUnary) {\n            // update grid's filtering on the next cycle to ensure the drop-down is closed\n            // if the drop-down is not closed this event handler will be invoked multiple times\n            requestAnimationFrame(() => this.unaryConditionChangedCallback());\n        } else {\n            requestAnimationFrame(() => this.conditionChangedCallback());\n        }\n\n        if (this.input) {\n            // Add requestAnimationFrame becasue of an issue in IE, where you are still able to write in the input,\n            // if it has been focused and then set to readonly.\n            requestAnimationFrame(() => this.input.nativeElement.focus());\n        }\n    }\n\n\n    public onChipPointerdown(args, chip: IgxChipComponent) {\n        const activeElement = document.activeElement;\n        this._cancelChipClick = chip.selected && activeElement &&\n            this.inputGroup.nativeElement.contains(activeElement);\n    }\n\n    public onChipClick(args, item: ExpressionUI) {\n        if (this._cancelChipClick) {\n            return;\n        }\n\n        this._cancelChipClick = false;\n\n        this.expressionsList.forEach(ex => ex.isSelected = false);\n\n        this.toggleChip(item);\n    }\n\n    public toggleChip(item: ExpressionUI) {\n        item.isSelected = !item.isSelected;\n        if (item.isSelected) {\n            this.expression = item.expression;\n\n            if (this.input) {\n                this.input.nativeElement.focus();\n            }\n        }\n    }\n\n    /**\n     * Event handler for chip keydown event.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, item: ExpressionUI) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n\n            this.toggleChip(item);\n        }\n    }\n\n    /**\n     * Scrolls the first chip into view if the tab key is pressed on the left arrow.\n     */\n    public onLeftArrowKeyDown(event) {\n        if (event.key === KEYS.TAB) {\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    /**\n     * Event handler for chip removed event.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove, item.expression);\n\n        this.scrollChipsOnRemove();\n    }\n\n    /**\n     * Event handler for logic operator changed event.\n     */\n    public onLogicOperatorChanged(eventArgs: ISelectionEventArgs, expression: ExpressionUI) {\n        if (eventArgs.oldSelection) {\n            expression.afterOperator = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n            this.expressionsList[this.expressionsList.indexOf(expression) + 1].beforeOperator = expression.afterOperator;\n\n            // update grid's filtering on the next cycle to ensure the drop-down is closed\n            // if the drop-down is not closed this event handler will be invoked multiple times\n            requestAnimationFrame(() => this.filter());\n        }\n    }\n\n    /**\n     * Scrolls the chips into the chip area when left or right arrows are pressed.\n     */\n    public scrollChipsOnArrowPress(arrowPosition: string) {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        if (arrowPosition === 'right') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.right)) {\n                    count++;\n                }\n            }\n\n            if (count < chipAraeChildren.length) {\n                this.chipAreaScrollOffset -= Math.ceil(chipAraeChildren[count].getBoundingClientRect().right) -\n                    Math.ceil(containerRect.right) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n\n        if (arrowPosition === 'left') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {\n                    count++;\n                }\n            }\n\n            if (count > 0) {\n                this.chipAreaScrollOffset += Math.ceil(containerRect.left) -\n                    Math.ceil(chipAraeChildren[count - 1].getBoundingClientRect().left) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n    }\n\n    private showHideArrowButtons() {\n        requestAnimationFrame(() => {\n            if (this.filteringService.isFilterRowVisible) {\n                const containerWidth = this.container.nativeElement.getBoundingClientRect().width;\n                this.chipsAreaWidth = this.chipsArea.element.nativeElement.getBoundingClientRect().width;\n\n                this.showArrows = this.chipsAreaWidth >= containerWidth && this.isColumnFiltered;\n\n                // TODO: revise the cdr.detectChanges() usage here\n                if (!(this.cdr as ViewRef).destroyed) {\n                this.cdr.detectChanges(); }\n            }\n        });\n    }\n\n    private addExpression(isSelected: boolean) {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = this.expression;\n        exprUI.beforeOperator = this.expressionsList.length > 0 ? FilteringLogic.And : null;\n        exprUI.isSelected = isSelected;\n\n        this.expressionsList.push(exprUI);\n\n        const length = this.expressionsList.length;\n        if (this.expressionsList[length - 2]) {\n            this.expressionsList[length - 2].afterOperator = this.expressionsList[length - 1].beforeOperator;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private removeExpression(indexToRemove: number, expression: IFilteringExpression) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.filter();\n\n        if (this.expression === expression) {\n            this.resetExpression();\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private resetExpression() {\n        this.expression = {\n            fieldName: this.column.field,\n            condition: null,\n            searchVal: null,\n            ignoreCase: this.column.filteringIgnoreCase\n        };\n\n        if (this.column.dataType !== DataType.Boolean) {\n            this.expression.condition = this.getCondition(this.conditions[0]);\n        }\n\n        if (this.column.dataType === DataType.Date && this.input) {\n            this.input.nativeElement.value = null;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private scrollChipsWhenAddingExpression() {\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        if (!chipAraeChildren || chipAraeChildren.length === 0) {\n            return;\n        }\n\n        const containerRectRight = Math.ceil(this.container.nativeElement.getBoundingClientRect().right);\n\n        const lastChipRectRight = Math.ceil(chipAraeChildren[chipAraeChildren.length - 1].getBoundingClientRect().right);\n        if (lastChipRectRight >= containerRectRight) {\n            this.chipAreaScrollOffset -= lastChipRectRight - containerRectRight;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    /**\n     * @hidden\n     * Resets the chips area\n     * @memberof IgxGridFilteringRowComponent\n     */\n    public resetChipsArea() {\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n        this.showHideArrowButtons();\n    }\n\n    private transform(offset: number) {\n        requestAnimationFrame(() => {\n            this.chipsArea.element.nativeElement.style.transform = `translate(${offset}px)`;\n        });\n    }\n\n    private scrollChipsOnRemove() {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        for (let index = 0; index < chipAraeChildren.length; index++) {\n            if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.left)) {\n                count++;\n            }\n        }\n\n        if (count <= 2) {\n            this.chipAreaScrollOffset = 0;\n        } else {\n            const dif = chipAraeChildren[count].id === 'chip' ? count - 2 : count - 1;\n            this.chipAreaScrollOffset += Math.ceil(containerRect.left) - Math.ceil(chipAraeChildren[dif].getBoundingClientRect().left) + 1;\n        }\n\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    private conditionChangedCallback() {\n        if (!!this.expression.searchVal || this.expression.searchVal === 0) {\n            this.filter();\n        } else if (this.value) {\n            this.value = null;\n        }\n    }\n\n    private unaryConditionChangedCallback() {\n        if (this.value) {\n            this.value = null;\n        }\n        if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n            this.addExpression(true);\n        }\n        this.filter();\n    }\n\n    private filter() {\n        this.filteringService.filterInternal(this.column.field);\n    }\n\n    private get isColumnFiltered() {\n        return this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { IgxGridBaseDirective } from './grid-base.directive';\nimport { first } from 'rxjs/operators';\nimport { IgxColumnComponent } from './columns/column.component';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { ISelectionNode } from './selection/selection.service';\n\n\nexport interface IStartNavigationCell {\n    rowStart: number;\n    colStart: number;\n    direction: NavigationDirection;\n}\n\nexport enum NavigationDirection {\n    horizontal = 'horizontal',\n    vertical = 'vertical'\n}\n\n\n/** @hidden */\n@Injectable()\nexport class IgxGridMRLNavigationService extends IgxGridNavigationService {\n\n    private startNavigationCell: IStartNavigationCell;\n\n    public grid: IgxGridBaseDirective;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public setStartNavigationCell(colStart: number, rowStart: number, dir: NavigationDirection) {\n        this.startNavigationCell = {\n            colStart: colStart,\n            rowStart: rowStart,\n            direction: dir\n        };\n    }\n\n    private applyNavigationCell(colStart: number, rowStart: number, navDirection: NavigationDirection): number {\n        const oppositeDir = navDirection === NavigationDirection.vertical ?\n            NavigationDirection.horizontal : NavigationDirection.vertical;\n        if (this.startNavigationCell && this.startNavigationCell.direction !== navDirection) {\n            this.startNavigationCell.direction = oppositeDir;\n        } else {\n            this.setStartNavigationCell(colStart, rowStart, oppositeDir);\n        }\n\n        return navDirection === NavigationDirection.vertical ?\n            this.startNavigationCell.colStart : this.startNavigationCell.rowStart;\n    }\n\n    public navigateUp(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusCellUpFromLayout(rowElement, selectedNode);\n    }\n\n    public navigateDown(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusCellDownFromLayout(rowElement, selectedNode);\n    }\n\n    public isColumnRightEdgeVisible(visibleColumnIndex: number): boolean {\n        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === visibleColumnIndex);\n        const forOfDir =  this.grid.headerContainer;\n        const horizontalScroll = forOfDir.getScroll();\n        if (!horizontalScroll.clientWidth || (column && column.pinned)) {\n            return true;\n        } else if (column) {\n            if (this.isParentColumnFullyVisible(column)) { return true; }\n            const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);\n            return this.displayContainerWidth >= scrollPos.rightScroll - this.displayContainerScrollLeft &&\n            this.displayContainerScrollLeft <= scrollPos.leftScroll;\n        }\n        return false;\n    }\n    private isParentColumnFullyVisible(parent: IgxColumnComponent): boolean {\n        const forOfDir = this.grid.dataRowList.length > 0 ? this.grid.dataRowList.first.virtDirRow : this.grid.headerContainer;\n        const horizontalScroll = forOfDir.getScroll();\n        if (!horizontalScroll.clientWidth || parent.pinned) { return true; }\n        const index = forOfDir.igxForOf.indexOf(parent);\n        return this.displayContainerWidth >= forOfDir.getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft &&\n            this.displayContainerScrollLeft <= forOfDir.getColumnScrollLeft(index);\n    }\n\n    public isColumnLeftEdgeVisible(visibleColumnIndex: number): boolean {\n        const forOfDir = this.grid.headerContainer;\n        const horizontalScroll = forOfDir.getScroll();\n        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === visibleColumnIndex);\n        if (!horizontalScroll.clientWidth || column.pinned) {\n            return true;\n        }\n        if (this.isParentColumnFullyVisible(column)) { return true; }\n        const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);\n        return this.displayContainerScrollLeft <= scrollPos.leftScroll;\n    }\n\n    public onKeydownArrowRight(element: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusNextCellFromLayout(element, selectedNode);\n    }\n\n    public onKeydownArrowLeft(element: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusPrevCellFromLayout(element, selectedNode);\n    }\n    public get gridOrderedColumns(): IgxColumnComponent[] {\n        return [...this.grid.pinnedColumns, ...this.grid.unpinnedColumns].filter(c => !c.columnGroup)\n        .sort((a, b) => a.visibleIndex - b.visibleIndex);\n    }\n\n    public performTab(currentRowEl: HTMLElement, selectedNode: ISelectionNode) {\n        const visibleColumnIndex = selectedNode.layout ? selectedNode.layout.columnVisibleIndex : 0;\n        const nextElementColumn = this.grid.columns.find(x => !x.columnGroup && x.visibleIndex === visibleColumnIndex + 1);\n        const rowIndex = selectedNode.row;\n        const row = this.grid.getRowByIndex(rowIndex);\n        this._moveFocusToCell(currentRowEl, nextElementColumn, row, selectedNode, 'next');\n        if (nextElementColumn) {\n            this.setStartNavigationCell(nextElementColumn.colStart, nextElementColumn.rowStart, null);\n        }\n    }\n\n    protected _moveFocusToCell(currentRowEl: HTMLElement, nextElementColumn, row, selectedNode, dir) {\n        if (nextElementColumn && row.cells) {\n            let nextCell = row.cells.find(currCell => currCell.column === nextElementColumn);\n            const isVisible = this.isColumnRightEdgeVisible(nextElementColumn.visibleIndex);\n            if (!nextCell || !isVisible) {\n                this.grid.nativeElement.focus({ preventScroll: true });\n                const cb = () => {\n                    nextCell = row.cells.find(currCell => currCell.column === nextElementColumn);\n                    if (this.grid.rowEditable && this.isRowInEditMode(row.index)) {\n                        if (dir === 'next') {\n                            this.moveNextEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                        } else {\n                            this.movePreviousEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                        }\n                        return;\n                    }\n                    this._focusCell(nextCell.nativeElement);\n                };\n                this.performHorizontalScrollToCell(row.index, nextElementColumn.visibleIndex, false, cb);\n            } else {\n                if (this.grid.rowEditable && this.isRowInEditMode(row.index)) {\n                    if (dir === 'next') {\n                        this.moveNextEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                    } else {\n                        this.movePreviousEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                    }\n                    return;\n                }\n                this._focusCell(nextCell.nativeElement);\n            }\n        } else {\n            // end of layout reached\n            if (this.isRowInEditMode(row.index)) {\n                //  TODO: make gridAPI visible for internal use and remove cast to any\n                (this.grid as any).gridAPI.submit_value();\n                if (dir === 'next') {\n                    this.grid.rowEditTabs.first.element.nativeElement.focus();\n                } else {\n                    this.grid.rowEditTabs.last.element.nativeElement.focus();\n                }\n                return;\n            }\n            if (dir === 'next') {\n                super.navigateDown(currentRowEl, {row: row.index, column: 0});\n            } else {\n                 let lastVisibleIndex = 0;\n                this.grid.unpinnedColumns.forEach((col) => {\n                    lastVisibleIndex = Math.max(lastVisibleIndex, col.visibleIndex);\n                });\n                super.navigateUp(currentRowEl, {row: row.index, column: lastVisibleIndex});\n            }\n        }\n    }\n\n    public performShiftTabKey(currentRowEl: HTMLElement, selectedNode: ISelectionNode) {\n        const visibleColumnIndex = selectedNode.layout ? selectedNode.layout.columnVisibleIndex : 0;\n        const rowIndex = selectedNode.row;\n        const row = this.grid.getRowByIndex(rowIndex);\n        const prevElementColumn =\n         this.grid.columns.find(x => !x.columnGroup && x.visibleIndex === visibleColumnIndex - 1 && !x.hidden);\n         this._moveFocusToCell(currentRowEl, prevElementColumn, row, selectedNode, 'prev');\n        if (prevElementColumn) {\n            this.setStartNavigationCell(prevElementColumn.colStart, prevElementColumn.rowStart, null);\n        }\n    }\n\n    private focusCellUpFromLayout(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        const isNonDataRow = rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row' || this._isDetailRecordAt(selectedNode.row);\n        const currentRowStart = selectedNode.layout ?  selectedNode.layout.rowStart : 1;\n        const currentColStart = this.applyNavigationCell(selectedNode.layout ? selectedNode.layout.colStart : 1,\n            currentRowStart,\n            NavigationDirection.vertical);\n        const parentIndex = selectedNode.column;\n        const columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        let movePrev;\n        // check if element up is from the same layout\n        let upperElementColumn = columnLayout.children.find(c =>\n            (c.rowEnd === currentRowStart || c.rowStart + c.gridRowSpan === currentRowStart)  &&\n            c.colStart <= currentColStart &&\n            (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n        if (isNonDataRow || !upperElementColumn) {\n            // no prev row in current row layout, go to next row last rowstart\n            const layoutRowEnd = this.grid.multiRowLayoutRowSize + 1;\n            upperElementColumn = columnLayout.children.find(c =>\n                (c.rowEnd === layoutRowEnd || c.rowStart + c.gridRowSpan === layoutRowEnd) &&\n                c.colStart <= currentColStart &&\n                (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n            movePrev = true;\n        }\n        const rowIndex = movePrev ? selectedNode.row - 1 : selectedNode.row;\n        if (rowIndex < 0) {\n            // end of rows reached.\n            return;\n        }\n        let prevRow;\n        const cb = () => {\n            prevRow = this.grid.getRowByIndex(rowIndex);\n            if (prevRow && prevRow.cells) {\n                this._focusCell(upperElementColumn.cells.find((c) => c.rowIndex === prevRow.index).nativeElement);\n            } else if (prevRow) {\n                prevRow.nativeElement.focus({ preventScroll: true });\n            } else {\n                const prevElem = this.getRowByIndex(rowIndex, '') as any;\n                prevElem.focus({ preventScroll: true });\n            }\n        };\n        if (this.shouldPerformVerticalScroll(rowIndex, upperElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n                this.performVerticalScrollToCell(rowIndex, upperElementColumn.visibleIndex, cb);\n        } else {\n            cb();\n        }\n    }\n\n    private focusCellDownFromLayout(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        const isNonDataRow = rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row' || this._isDetailRecordAt(selectedNode.row);\n        const parentIndex = selectedNode.column;\n        const columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        const currentRowEnd = selectedNode.layout ? selectedNode.layout.rowEnd || selectedNode.layout.rowStart + 1 : 2;\n        const currentColStart = this.applyNavigationCell(selectedNode.layout ? selectedNode.layout.colStart : 1,\n            selectedNode.layout ? selectedNode.layout.rowStart : 1,\n            NavigationDirection.vertical);\n        let moveNext;\n        // check if element down is from the same layout\n        let nextElementColumn = columnLayout.children.find(c => c.rowStart === currentRowEnd &&\n            c.colStart <= currentColStart &&\n            (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n        if (isNonDataRow || !nextElementColumn) {\n            // no next row in current row layout, go to next row first rowstart\n            nextElementColumn = columnLayout.children.find(c => c.rowStart === 1 &&\n                c.colStart <= currentColStart &&\n                (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n            moveNext = true;\n        }\n        const rowIndex = moveNext ? selectedNode.row + 1 : selectedNode.row;\n        if (rowIndex > this.grid.dataView.length - 1) {\n            // end of rows reached.\n            return;\n        }\n        let nextRow;\n        const cb = () => {\n            nextRow = this.grid.getRowByIndex(rowIndex);\n            if (nextRow && nextRow.cells) {\n                this._focusCell(nextElementColumn.cells.find((c) => c.rowIndex === nextRow.index).nativeElement);\n            } else if (nextRow) {\n                nextRow.nativeElement.focus({ preventScroll: true });\n            } else {\n                const nextElem = this.getRowByIndex(rowIndex, '') as any;\n                nextElem.focus({ preventScroll: true });\n            }\n        };\n        if (this.shouldPerformVerticalScroll(rowIndex, nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n                this.performVerticalScrollToCell(rowIndex, nextElementColumn.visibleIndex, cb);\n        } else {\n            cb();\n        }\n    }\n\n    private focusNextCellFromLayout(cellElement: HTMLElement, selectedNode: ISelectionNode) {\n        const parentIndex = selectedNode.column;\n        let columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        const currentColEnd = selectedNode.layout.colEnd || selectedNode.layout.colStart + 1;\n        const currentRowStart = this.applyNavigationCell(selectedNode.layout.colStart,\n            selectedNode.layout.rowStart,\n            NavigationDirection.horizontal);\n        const rowIndex = selectedNode.row;\n        // check if next element is from the same layout\n        let nextElementColumn = columnLayout.children.find(c => c.colStart === currentColEnd &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        if (!nextElementColumn) {\n            // no next column in current layout, search for next layout\n            columnLayout = this.grid.columns.find(c => c.columnLayout && !c.hidden && c.visibleIndex === columnLayout.visibleIndex + 1);\n            if (!columnLayout) {\n                // reached the end\n                return null;\n            }\n            // next element is from the next layout\n            nextElementColumn = columnLayout.children.find(c => c.colStart === 1 &&\n                c.rowStart <= currentRowStart &&\n                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        }\n        const cb = () => {\n            const nextElement = nextElementColumn.cells.find((c) => c.rowIndex === rowIndex).nativeElement;\n           this._focusCell(nextElement);\n        };\n        if (!this.isColumnRightEdgeVisible(nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);\n        } else {\n            cb();\n        }\n    }\n\n    private focusPrevCellFromLayout(cellElement: HTMLElement, selectedNode: ISelectionNode) {\n        const parentIndex = selectedNode.column;\n        let columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        const currentColStart = selectedNode.layout.colStart;\n        const currentRowStart = this.applyNavigationCell(currentColStart,\n            selectedNode.layout.rowStart,\n            NavigationDirection.horizontal);\n        const rowIndex = selectedNode.row;\n\n        // check previous element is from the same layout\n        let prevElementColumn = columnLayout.children\n        .find(c => (c.colEnd === currentColStart || c.colStart + c.gridColumnSpan === currentColStart ) &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        if (!prevElementColumn) {\n            // no prev column in current layout, seacrh for prev layout\n            columnLayout = this.grid.columns.find(c => c.columnLayout && !c.hidden && c.visibleIndex === columnLayout.visibleIndex - 1);\n            if (!columnLayout) {\n                // reached the end\n                return null;\n            }\n            const layoutSize = columnLayout.getInitialChildColumnSizes(columnLayout.children).length;\n            // first element is from the next layout\n            prevElementColumn = columnLayout.children\n            .find(c => (c.colEnd === layoutSize + 1 || c.colStart + c.gridColumnSpan === layoutSize + 1) &&\n                c.rowStart <= currentRowStart &&\n                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        }\n\n        const cb = () => {\n            const prevElement = prevElementColumn.cells.find((c) => c.rowIndex === rowIndex).nativeElement;\n            this._focusCell(prevElement);\n        };\n        if (!this.isColumnLeftEdgeVisible(prevElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.performHorizontalScrollToCell(rowIndex, prevElementColumn.visibleIndex, false, cb);\n        } else {\n            cb();\n        }\n    }\n\n    public onKeydownEnd(rowIndex: number, isSummary: boolean = false, cellRowStart?: number) {\n        const layouts = this.grid.columns.filter(c => c.columnLayout && !c.hidden).sort((a, b) => a.visibleIndex - b.visibleIndex);\n        const lastLayout = layouts[layouts.length - 1];\n        const lastLayoutChildren = lastLayout.children;\n        const layoutSize =  lastLayout.getInitialChildColumnSizes(lastLayoutChildren).length;\n        const currentRowStart = this.applyNavigationCell(\n            this.startNavigationCell ? this.startNavigationCell.colStart : 1,\n            cellRowStart || this.grid.multiRowLayoutRowSize,\n            NavigationDirection.horizontal);\n        const nextElementColumn = lastLayout.children.find(c =>\n            (c.colEnd === layoutSize + 1 || c.colStart + c.gridColumnSpan === layoutSize + 1) &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        const indexInLayout = lastLayoutChildren.toArray().indexOf(nextElementColumn);\n\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n\n        if (!this.isColumnRightEdgeVisible(nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            const cb = () => {\n                const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n                const cell = allBlocks[allBlocks.length - 1].children[indexInLayout];\n                this._focusCell(cell);\n            };\n            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);\n            return;\n        } else {\n            const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n            const cell =  allBlocks[allBlocks.length - 1].children[indexInLayout];\n            this._focusCell(cell);\n        }\n    }\n\n    public onKeydownHome(rowIndex: number, isSummary: boolean = false, cellRowStart: number = 1) {\n        const firstLayout = this.grid.columns.filter(c => c.columnLayout && !c.hidden)[0];\n        const lastLayoutChildren = firstLayout.children.toArray();\n        const currentRowStart = this.applyNavigationCell(\n            this.startNavigationCell ? this.startNavigationCell.colStart : 1,\n            cellRowStart,\n            NavigationDirection.horizontal);\n        const nextElementColumn = firstLayout.children.find(c =>\n            c.colStart === 1 &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        const indexInLayout = lastLayoutChildren.indexOf(nextElementColumn);\n\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n\n        if (!this.isColumnLeftEdgeVisible(nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n           const cb = () => {\n                const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n                const cell = allBlocks[0].children[indexInLayout];\n                this._focusCell(cell);\n            };\n            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);\n            return;\n        } else {\n            const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n            const cell =  allBlocks[0].children[indexInLayout];\n            this._focusCell(cell);\n        }\n    }\n\n    protected getColumnLayoutSelector(): string {\n        return '.igx-grid__mrl-block';\n    }\n\n    protected getChildColumnScrollPositions(visibleColIndex: number): { leftScroll: number, rightScroll: number } {\n        const forOfDir = this.grid.dataRowList.length > 0 ? this.grid.dataRowList.first.virtDirRow : this.grid.headerContainer;\n        const targetCol: IgxColumnComponent = this.getColunmByVisibleIndex(visibleColIndex);\n        const parent = targetCol.parent;\n        const parentVIndex = forOfDir.igxForOf.indexOf(parent);\n        let leftScroll = forOfDir.getColumnScrollLeft(parentVIndex), rightScroll = 0;\n        // caculate offset from parent based on target column colStart and colEnd and the resolved child column sizes.\n        const childSizes = parent.getFilledChildColumnSizes(parent.children);\n        const colStart = targetCol.colStart || 1;\n        const colEnd = targetCol.colEnd || colStart + 1;\n        for (let i = 1; i < colStart; i++) {\n            leftScroll += parseInt(childSizes[i - 1], 10);\n        }\n        rightScroll += leftScroll;\n        for (let j = colStart; j < colEnd; j++) {\n            rightScroll +=  parseInt(childSizes[j - 1], 10);\n        }\n        return {leftScroll, rightScroll};\n    }\n\n    protected getColunmByVisibleIndex(visibleColIndex: number): IgxColumnComponent {\n        visibleColIndex = visibleColIndex < 0 ? 0 : visibleColIndex;\n        return this.grid.columnList.find((col) => !col.columnLayout && col.visibleIndex === visibleColIndex);\n    }\n\n    public shouldPerformVerticalScroll(rowIndex: number, visibleColumnIndex: number): boolean {\n        if (this._isGroupRecordAt(rowIndex) || this._isDetailRecordAt(rowIndex)) {\n            return super.shouldPerformVerticalScroll(rowIndex, visibleColumnIndex);\n       }\n        if (!super.shouldPerformVerticalScroll(rowIndex, visibleColumnIndex)) {return false; }\n       const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)\n           .concat(this.grid.rowList.toArray()).find(r => r.index === rowIndex);\n       const scrollTop =  Math.abs(this.grid.verticalScrollContainer.getScroll().scrollTop);\n       const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n       const scrollPos = this.getVerticalScrollPositions(rowIndex, visibleColumnIndex);\n       if (!targetRow || targetRow.nativeElement.offsetTop + scrollPos.topOffset < Math.abs(this.verticalDCTopOffset)\n           || containerHeight && containerHeight < scrollPos.rowBottom - scrollTop) {\n           return true;\n       } else {\n           return false;\n       }\n   }\n\n   get verticalDCTopOffset(): number {\n        return parseInt(this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n    }\n\n    private _isGroupRecordAt(rowIndex: number) {\n        const record = this.grid.dataView[rowIndex];\n        return record.records && record.records.length;\n    }\n    private _isDetailRecordAt(rowIndex: number) {\n        const record = this.grid.dataView[rowIndex];\n        return this.grid.isDetailRecord(record);\n    }\n\n    public performVerticalScrollToCell(rowIndex: number, visibleColumnIndex: number, cb?: () => void) {\n        if (this._isGroupRecordAt(rowIndex) || this._isDetailRecordAt(rowIndex)) {\n            return super.performVerticalScrollToCell(rowIndex, visibleColumnIndex, cb);\n        }\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const scrollTop = Math.abs(this.grid.verticalScrollContainer.getScroll().scrollTop);\n        const scrollPos = this.getVerticalScrollPositions(rowIndex, visibleColumnIndex);\n        const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)\n            .concat(this.grid.rowList.toArray()).find(r => r.index === rowIndex);\n        const isPrevious =  (scrollTop > scrollPos.rowTop) && (!targetRow ||\n                targetRow.nativeElement.offsetTop + scrollPos.topOffset < Math.abs(this.verticalDCTopOffset));\n        const scrollAmount = isPrevious ? scrollPos.rowTop : Math.abs(scrollTop + containerHeight - scrollPos.rowBottom);\n\n        this.grid.verticalScrollContainer.onChunkLoad\n        .pipe(first()).subscribe(() => {\n            cb();\n        });\n\n        if (isPrevious) {\n            this.grid.verticalScrollContainer.scrollPosition = scrollAmount;\n        } else {\n            this.grid.verticalScrollContainer.addScrollTop(scrollAmount);\n        }\n    }\n\n    public getVerticalScrollPositions(rowIndex: number, visibleColIndex: number): { rowTop: number, rowBottom: number, topOffset: number } {\n        const targetCol: IgxColumnComponent = this.getColunmByVisibleIndex(visibleColIndex);\n        const topOffset = (targetCol.rowStart - 1)  * this.grid.defaultRowHeight;\n        const rowTop = this.grid.verticalScrollContainer.sizesCache[rowIndex] + topOffset;\n        const rowBottom = rowTop + (this.grid.defaultRowHeight * targetCol.gridRowSpan);\n        return { rowTop, rowBottom, topOffset };\n    }\n\n    public performHorizontalScrollToCell(\n        rowIndex: number, visibleColumnIndex: number, isSummary: boolean = false, cb?: () => void) {\n        const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);\n        const hScroll = this.horizontalScroll(rowIndex);\n        this.grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(() => {\n                if (cb) {\n                    cb();\n                } else {\n                    this._focusCell(this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary));\n                }\n        });\n        const isPrevItem =  hScroll.getScroll().scrollLeft > scrollPos.leftScroll;\n        const containerSize = parseInt(hScroll.igxForContainerSize, 10);\n        const nextScroll = isPrevItem ? scrollPos.leftScroll : scrollPos.rightScroll - containerSize;\n        hScroll.scrollPosition = nextScroll;\n    }\n\n    protected _focusCell(cellElem: HTMLElement) {\n        // in case of variable row heights in mrl grid make sure cell is really in view after it has been rendered.\n        const gridBoundingClientRect = this.grid.tbody.nativeElement.getBoundingClientRect();\n        const diffTop = cellElem.getBoundingClientRect().top - gridBoundingClientRect.top;\n        const diffBottom = cellElem.getBoundingClientRect().bottom - gridBoundingClientRect.bottom;\n\n        if (diffTop < 0) {\n            // cell is above grid top - not visible\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    cellElem.focus({ preventScroll: true });\n            });\n            this.grid.verticalScrollContainer.addScrollTop(diffTop);\n        } else if (diffBottom > 0) {\n            // cell is below grid bottom - not visible\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    cellElem.focus({ preventScroll: true });\n            });\n            this.grid.verticalScrollContainer.addScrollTop(diffBottom);\n        }  else {\n            // cell is visible\n            cellElem.focus({ preventScroll: true });\n        }\n    }\n\n    public goToFirstCell() {\n        this.startNavigationCell = null;\n        super.goToFirstCell();\n    }\n\n    public goToLastCell() {\n        this.startNavigationCell = null;\n        super.goToLastCell();\n    }\n}\n","import { Directive, OnDestroy, Input, ElementRef, ViewContainerRef, NgZone, Renderer2, ChangeDetectorRef } from '@angular/core';\nimport { IgxDragDirective } from '../../directives/drag-drop/drag-drop.directive';\nimport { Subscription, fromEvent } from 'rxjs';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { KEYS } from '../../core/utils';\nimport { IgxColumnMovingService } from './moving.service';\n\n\n/**\n * @hidden\n * @internal\n */\n@Directive({\n    selector: '[igxColumnMovingDrag]',\n\n})\nexport class IgxColumnMovingDragDirective extends IgxDragDirective implements OnDestroy {\n\n    @Input('igxColumnMovingDrag')\n    set data(val) {\n        this._column = val;\n    }\n\n    get column() {\n        return this._column;\n    }\n\n    get draggable(): boolean {\n        return this.column && (this.column.movable || (this.column.groupable && !this.column.columnGroup));\n    }\n\n    public get icon(): HTMLElement {\n        return this.cms.icon;\n    }\n\n    private subscription$: Subscription;\n    private _column: IgxColumnComponent;\n    private _ghostClass = 'igx-grid__drag-ghost-image';\n    private ghostImgIconClass = 'igx-grid__drag-ghost-image-icon';\n    private ghostImgIconGroupClass = 'igx-grid__drag-ghost-image-icon-group';\n\n    constructor(\n        public element: ElementRef<HTMLElement>,\n        public viewContainer: ViewContainerRef,\n        public zone: NgZone,\n        public renderer: Renderer2,\n        public cdr: ChangeDetectorRef,\n        private cms: IgxColumnMovingService,\n    ) {\n        super(cdr, element, viewContainer, zone, renderer);\n    }\n\n    public ngOnDestroy() {\n        this._unsubscribe();\n    }\n\n    public onEscape(event) {\n        this.cms.cancelDrop = true;\n        this.onPointerUp(event);\n    }\n\n    public onPointerDown(event) {\n        if (!this.draggable || event.target.getAttribute('draggable') === 'false') {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._removeOnDestroy = false;\n        this.cms.column = this.column;\n        this.ghostClass = this._ghostClass;\n\n        super.onPointerDown(event);\n\n        this.cms.isColumnMoving = true;\n        this.column.grid.cdr.detectChanges();\n\n        const args = {\n            source: this.column\n        };\n        this.column.grid.onColumnMovingStart.emit(args);\n\n        this.subscription$ = fromEvent(this.column.grid.document.defaultView, 'keydown').subscribe((ev: KeyboardEvent) => {\n            if (ev.key === KEYS.ESCAPE || ev.key === KEYS.ESCAPE_IE) {\n                this.onEscape(ev);\n            }\n        });\n    }\n\n    public onPointerMove(event) {\n        event.preventDefault();\n        super.onPointerMove(event);\n\n        if (this._dragStarted && this.ghostElement && !this.column.grid.draggedColumn) {\n            this.column.grid.draggedColumn = this.column;\n            this.column.grid.cdr.detectChanges();\n        }\n\n        if (this.cms.isColumnMoving) {\n            const args = {\n                source: this.column,\n                cancel: false\n            };\n            this.column.grid.onColumnMoving.emit(args);\n\n            if (args.cancel) {\n                this.onEscape(event);\n            }\n        }\n    }\n\n    public onPointerUp(event) {\n        // Run it explicitly inside the zone because sometimes onPointerUp executes after the code below.\n        this.zone.run(() => {\n            super.onPointerUp(event);\n\n            this.cms.isColumnMoving = false;\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        });\n\n        this._unsubscribe();\n    }\n\n    protected createGhost(pageX, pageY) {\n        super.createGhost(pageX, pageY);\n\n        this.ghostElement.style.height = null;\n        this.ghostElement.style.minWidth = null;\n        this.ghostElement.style.flexBasis = null;\n        this.ghostElement.style.position = null;\n\n        const icon = document.createElement('i');\n        const text = document.createTextNode('block');\n        icon.appendChild(text);\n\n        icon.classList.add('material-icons');\n        this.cms.icon = icon;\n\n        if (!this.column.columnGroup) {\n            this.renderer.addClass(icon, this.ghostImgIconClass);\n\n            this.ghostElement.insertBefore(icon, this.ghostElement.firstElementChild);\n\n            this.ghostLeft = this._ghostStartX = pageX - ((this.ghostElement.getBoundingClientRect().width / 3) * 2);\n            this.ghostTop = this._ghostStartY = pageY - ((this.ghostElement.getBoundingClientRect().height / 3) * 2);\n        } else {\n            this.ghostElement.insertBefore(icon, this.ghostElement.childNodes[0]);\n\n            this.renderer.addClass(icon, this.ghostImgIconGroupClass);\n            this.ghostElement.children[0].style.paddingLeft = '0px';\n\n            this.ghostLeft = this._ghostStartX = pageX - ((this.ghostElement.getBoundingClientRect().width / 3) * 2);\n            this.ghostTop = this._ghostStartY = pageY - ((this.ghostElement.getBoundingClientRect().height / 3) * 2);\n        }\n    }\n\n    private _unsubscribe() {\n        if (this.subscription$) {\n            this.subscription$.unsubscribe();\n            this.subscription$ = null;\n        }\n    }\n}\n","import { Directive, ElementRef, Renderer2, NgZone, HostBinding, TemplateRef } from '@angular/core';\nimport { IgxDropDirective } from '../../directives/drag-drop/drag-drop.directive';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxGridComponent } from './grid.component';\nimport { SortingDirection } from '../../data-operations/sorting-expression.interface';\nimport { IgxColumnMovingDragDirective } from '../moving/moving.drag.directive';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupByRow]'\n})\nexport class IgxGroupByRowTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGridDetail]'\n})\nexport class IgxGridDetailTemplateDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowExpandedIndicator]'\n})\nexport class IgxRowExpandedIndicatorDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowCollapsedIndicator]'\n})\nexport class IgxRowCollapsedIndicatorDirective {\n}\n\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHeaderExpandedIndicator]'\n})\nexport class IgxHeaderExpandIndicatorDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHeaderCollapsedIndicator]'\n})\nexport class IgxHeaderCollapseIndicatorDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupAreaDrop]'\n})\nexport class IgxGroupAreaDropDirective extends IgxDropDirective {\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone) {\n        super(elementRef, renderer, zone);\n    }\n\n    @HostBinding('class.igx-drop-area--hover')\n    public hovered = false;\n\n\n    public onDragEnter(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        if (!this.columnBelongsToGrid(column)) {\n            return;\n        }\n        const grid = <IgxGridComponent>column.grid;\n        const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n        if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {\n            drag.icon.innerText = 'group_work';\n            this.hovered = true;\n        } else {\n            drag.icon.innerText = 'block';\n            this.hovered = false;\n        }\n    }\n\n    public onDragLeave(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        if (!this.columnBelongsToGrid(column)) {\n            return;\n        }\n        event.detail.owner.icon.innerText = 'block';\n        this.hovered = false;\n    }\n\n    public onDragDrop(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        if (drag instanceof IgxColumnMovingDragDirective) {\n            const column: IgxColumnComponent = drag.column;\n            if (!this.columnBelongsToGrid(column)) {\n                return;\n            }\n            const grid = <IgxGridComponent>column.grid;\n            const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n            if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {\n                grid.groupBy({ fieldName: column.field, dir: SortingDirection.Asc, ignoreCase: column.sortingIgnoreCase,\n                    strategy: column.sortStrategy, groupingComparer: column.groupingComparer });\n            }\n        }\n    }\n\n    private closestParentByAttr(elem, attr) {\n        return elem.hasAttribute(attr) ?\n            elem :\n            this.closestParentByAttr(elem.parentElement, attr);\n    }\n\n    private columnBelongsToGrid(column) {\n        const elem = this.elementRef.nativeElement;\n        const closestGridID = this.closestParentByAttr(elem, 'igxGroupAreaDrop').getAttribute('gridId');\n        if (!column) {\n            return false;\n        } else {\n            const grid = <IgxGridComponent>column.grid;\n            if (!grid || grid.id !== closestGridID) {\n                return false;\n            }\n            return true;\n        }\n    }\n}\n","import {\n    Component, Input, ViewChild, ChangeDetectorRef, ViewChildren, QueryList, ElementRef, AfterViewInit, OnDestroy, HostBinding\n} from '@angular/core';\nimport { VerticalAlignment, HorizontalAlignment, Point, OverlaySettings } from '../../../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../../../services/overlay/position/connected-positioning-strategy';\nimport { IgxOverlayService } from '../../../services/overlay/overlay';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { IgxChipComponent } from '../../../chips/chip.component';\nimport { IgxSelectComponent } from '../../../select/select.component';\nimport { IDragStartEventArgs, IDragBaseEventArgs } from '../../../directives/drag-drop/drag-drop.directive';\nimport { CloseScrollStrategy } from '../../../services/overlay/scroll/close-scroll-strategy';\nimport { IgxToggleDirective, IgxOverlayOutletDirective } from '../../../directives/toggle/toggle.directive';\nimport { IButtonGroupEventArgs } from '../../../buttonGroup/buttonGroup.component';\nimport { takeUntil, first } from 'rxjs/operators';\nimport { Subject, Subscription } from 'rxjs';\nimport { KEYS } from '../../../core/utils';\nimport { AbsoluteScrollStrategy, AutoPositionStrategy } from '../../../services/index';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { GridType } from '../../common/grid.interface';\nimport { DataUtil } from './../../../data-operations/data-util';\n\n/**\n *@hidden\n */\nclass ExpressionItem {\n    constructor(parent?: ExpressionGroupItem) {\n        this.parent = parent;\n    }\n    parent: ExpressionGroupItem;\n    selected: boolean;\n}\n\n/**\n *@hidden\n */\nclass ExpressionGroupItem extends ExpressionItem {\n    constructor(operator: FilteringLogic, parent?: ExpressionGroupItem) {\n        super(parent);\n        this.operator = operator;\n        this.children = [];\n    }\n    operator: FilteringLogic;\n    children: ExpressionItem[];\n}\n\n/**\n *@hidden\n */\nclass ExpressionOperandItem extends ExpressionItem {\n    constructor(expression: IFilteringExpression, parent: ExpressionGroupItem) {\n        super(parent);\n        this.expression = expression;\n    }\n    expression: IFilteringExpression;\n    inEditMode: boolean;\n    inAddMode: boolean;\n    hovered: boolean;\n    columnHeader: string;\n}\n\n/**\n * A component used for presenting advanced filtering UI for a Grid.\n * It is used internally in the Grid, but could also be hosted in a container outside of it.\n *\n * Example:\n * ```html\n * <igx-advanced-filtering-dialog\n *     [grid]=\"grid1\">\n * </igx-advanced-filtering-dialog>\n * ```\n */\n@Component({\n    selector: 'igx-advanced-filtering-dialog',\n    templateUrl: './advanced-filtering-dialog.component.html'\n})\nexport class IgxAdvancedFilteringDialogComponent implements AfterViewInit, OnDestroy {\n    /**\n     * @hidden @internal\n     */\n    public inline = true;\n    /**\n     * @hidden @internal\n     */\n    public rootGroup: ExpressionGroupItem;\n\n    /**\n     * @hidden @internal\n     */\n    public selectedExpressions: ExpressionOperandItem[] = [];\n\n    /**\n     * @hidden @internal\n     */\n    public selectedGroups: ExpressionGroupItem[] = [];\n\n    /**\n     * @hidden @internal\n     */\n    public currentGroup: ExpressionGroupItem;\n\n    /**\n     * @hidden @internal\n     */\n    public editedExpression: ExpressionOperandItem;\n\n    /**\n     * @hidden @internal\n     */\n    public addModeExpression: ExpressionOperandItem;\n\n    /**\n     * @hidden @internal\n     */\n    public contextualGroup: ExpressionGroupItem;\n\n    /**\n     * @hidden @internal\n     */\n    public filteringLogics;\n\n    /**\n     * @hidden @internal\n     */\n    public selectedCondition: string;\n\n    /**\n     * @hidden @internal\n     */\n    public searchValue: any;\n\n    private _positionSettings = {\n        horizontalStartPoint: HorizontalAlignment.Right,\n        verticalStartPoint: VerticalAlignment.Top\n    };\n    private _overlaySettings: OverlaySettings = {\n        closeOnOutsideClick: false,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),\n        scrollStrategy: new CloseScrollStrategy()\n    };\n\n    /**\n     * @hidden @internal\n     */\n    public columnSelectOverlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false,\n        excludePositionTarget: true\n    };\n\n    /**\n     * @hidden @internal\n     */\n    public conditionSelectOverlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false,\n        excludePositionTarget: true\n    };\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('columnSelect', { read: IgxSelectComponent })\n    public columnSelect: IgxSelectComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('conditionSelect', { read: IgxSelectComponent })\n    public conditionSelect: IgxSelectComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('searchValueInput', { read: ElementRef })\n    public searchValueInput: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('addRootAndGroupButton', { read: ElementRef })\n    public addRootAndGroupButton: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('addConditionButton', { read: ElementRef })\n    public addConditionButton: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('editingInputsContainer', { read: ElementRef })\n    public set editingInputsContainer(value: ElementRef) {\n        if ((value && !this._editingInputsContainer) ||\n            (value && this._editingInputsContainer && this._editingInputsContainer.nativeElement !== value.nativeElement)) {\n            requestAnimationFrame(() => {\n                this.scrollElementIntoView(value.nativeElement);\n            });\n        }\n\n        this._editingInputsContainer = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get editingInputsContainer(): ElementRef {\n        return this._editingInputsContainer;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('addModeContainer', { read: ElementRef })\n    public set addModeContainer(value: ElementRef) {\n        if ((value && !this._addModeContainer) ||\n            (value && this._addModeContainer && this._addModeContainer.nativeElement !== value.nativeElement)) {\n            requestAnimationFrame(() => {\n                this.scrollElementIntoView(value.nativeElement);\n            });\n        }\n\n        this._addModeContainer = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get addModeContainer(): ElementRef {\n        return this._addModeContainer;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('currentGroupButtonsContainer', { read: ElementRef })\n    public set currentGroupButtonsContainer(value: ElementRef) {\n        if ((value && !this._currentGroupButtonsContainer) ||\n            (value && this._currentGroupButtonsContainer && this._currentGroupButtonsContainer.nativeElement !== value.nativeElement)) {\n            requestAnimationFrame(() => {\n                this.scrollElementIntoView(value.nativeElement);\n            });\n        }\n\n        this._currentGroupButtonsContainer = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get currentGroupButtonsContainer(): ElementRef {\n        return this._currentGroupButtonsContainer;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxToggleDirective)\n    public contextMenuToggle: IgxToggleDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChildren(IgxChipComponent)\n    public chips: QueryList<IgxChipComponent>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('expressionsContainer')\n    protected expressionsContainer: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('overlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    public overlayOutlet: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('style.display')\n    display = 'block';\n\n    private destroy$ = new Subject<any>();\n    private _overlayComponentId: string;\n    private _overlayService: IgxOverlayService;\n    private _selectedColumn: IgxColumnComponent;\n    private _clickTimer;\n    private _dblClickDelay = 200;\n    private _preventChipClick = false;\n    private _editingInputsContainer: ElementRef;\n    private _addModeContainer: ElementRef;\n    private _currentGroupButtonsContainer: ElementRef;\n    private _grid: GridType;\n    private _filteringChange: Subscription;\n\n    constructor(public cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterViewInit(): void {\n        this._overlaySettings.outlet = this.overlayOutlet;\n        this.columnSelectOverlaySettings.outlet = this.overlayOutlet;\n        this.conditionSelectOverlaySettings.outlet = this.overlayOutlet;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get displayDensity() {\n        return this.grid.displayDensity;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get selectedColumn(): IgxColumnComponent {\n        return this._selectedColumn;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set selectedColumn(value: IgxColumnComponent) {\n        const oldValue = this._selectedColumn;\n\n        if (this._selectedColumn !== value) {\n            this._selectedColumn = value;\n            if (oldValue && this._selectedColumn && this._selectedColumn.dataType !== oldValue.dataType) {\n                this.selectedCondition = null;\n                this.searchValue = null;\n                this.cdr.detectChanges();\n            }\n        }\n    }\n\n    /**\n     * An @Input property that sets the grid.\n     */\n    @Input()\n    set grid(grid: GridType) {\n        this._grid = grid;\n\n        if (this._filteringChange) {\n            this._filteringChange.unsubscribe();\n        }\n\n        if (this._grid) {\n            this._grid.filteringService.registerSVGIcons();\n\n            this._filteringChange = this._grid.advancedFilteringExpressionsTreeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.init();\n            });\n\n            this.init();\n        }\n    }\n\n    /**\n     * Returns the grid.\n     */\n    get grid(): GridType {\n        return this._grid;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get filterableColumns(): IgxColumnComponent[] {\n        return this.grid.columns.filter((col) => !col.columnGroup && col.filterable);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public dragStart(dragArgs: IDragStartEventArgs) {\n        if (!this._overlayComponentId) {\n            dragArgs.cancel = true;\n            return;\n        }\n\n        if (!this.contextMenuToggle.collapsed) {\n            this.contextMenuToggle.element.style.display = 'none';\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public dragEnd(dragArgs: IDragBaseEventArgs) {\n        if (!this.contextMenuToggle.collapsed) {\n            this.calculateContextMenuTarget();\n            this.contextMenuToggle.reposition();\n            this.contextMenuToggle.element.style.display = '';\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onDragMove(e) {\n        const deltaX = e.nextPageX - e.pageX;\n        const deltaY = e.nextPageY - e.pageY;\n        e.cancel = true;\n        this._overlayService.setOffset(this._overlayComponentId, deltaX, deltaY);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public addCondition(parent: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.cancelOperandAdd();\n\n        const operandItem = new ExpressionOperandItem({\n            fieldName: null,\n            condition: null,\n            ignoreCase: true,\n            searchVal: null\n        }, parent);\n\n        if (afterExpression) {\n            const index = parent.children.indexOf(afterExpression);\n            parent.children.splice(index + 1, 0, operandItem);\n        } else {\n            parent.children.push(operandItem);\n        }\n\n        this.enterExpressionEdit(operandItem);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public addAndGroup(parent?: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.addGroup(FilteringLogic.And, parent, afterExpression);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public addOrGroup(parent?: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.addGroup(FilteringLogic.Or, parent, afterExpression);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public endGroup(groupItem: ExpressionGroupItem) {\n        this.currentGroup = groupItem.parent;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public commitOperandEdit() {\n        if (this.editedExpression) {\n            this.editedExpression.expression.fieldName = this.selectedColumn.field;\n            this.editedExpression.expression.condition = this.selectedColumn.filters.condition(this.selectedCondition);\n            this.editedExpression.expression.searchVal = DataUtil.parseValue(this.selectedColumn.dataType, this.searchValue);\n            this.editedExpression.columnHeader = this.selectedColumn.header;\n\n            this.editedExpression.inEditMode = false;\n            this.editedExpression = null;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public cancelOperandAdd() {\n        if (this.addModeExpression) {\n            this.addModeExpression.inAddMode = false;\n            this.addModeExpression = null;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public cancelOperandEdit() {\n        if (this.editedExpression) {\n            this.editedExpression.inEditMode = false;\n\n            if (!this.editedExpression.expression.fieldName) {\n                this.deleteItem(this.editedExpression);\n            }\n\n            this.editedExpression = null;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public operandCanBeCommitted(): boolean {\n        return this.selectedColumn && this.selectedCondition &&\n            (!!this.searchValue || this.selectedColumn.filters.condition(this.selectedCondition).isUnary);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public exitOperandEdit() {\n        if (!this.editedExpression) {\n            return;\n        }\n\n        if (this.operandCanBeCommitted()) {\n            this.commitOperandEdit();\n        } else {\n            this.cancelOperandEdit();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isExpressionGroup(expression: ExpressionItem): boolean {\n        return expression instanceof ExpressionGroupItem;\n    }\n\n    private addGroup(operator: FilteringLogic, parent?: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.cancelOperandAdd();\n\n        const groupItem = new ExpressionGroupItem(operator, parent);\n\n        if (parent) {\n            if (afterExpression) {\n                const index = parent.children.indexOf(afterExpression);\n                parent.children.splice(index + 1, 0, groupItem);\n            } else {\n                parent.children.push(groupItem);\n            }\n        } else {\n            this.rootGroup = groupItem;\n        }\n\n        this.addCondition(groupItem);\n        this.currentGroup = groupItem;\n    }\n\n    private createExpressionGroupItem(expressionTree: IFilteringExpressionsTree, parent?: ExpressionGroupItem): ExpressionGroupItem {\n        let groupItem: ExpressionGroupItem;\n        if (expressionTree) {\n            groupItem = new ExpressionGroupItem(expressionTree.operator, parent);\n\n            for (const expr of expressionTree.filteringOperands) {\n                if (expr instanceof FilteringExpressionsTree) {\n                    groupItem.children.push(this.createExpressionGroupItem(expr, groupItem));\n                } else {\n                    const filteringExpr = expr as IFilteringExpression;\n                    const exprCopy: IFilteringExpression = {\n                        fieldName: filteringExpr.fieldName,\n                        condition: filteringExpr.condition,\n                        searchVal: filteringExpr.searchVal,\n                        ignoreCase: filteringExpr.ignoreCase\n                    };\n                    const operandItem = new ExpressionOperandItem(exprCopy, groupItem);\n                    const column = this.grid.getColumnByName(filteringExpr.fieldName);\n                    operandItem.columnHeader = column.header;\n                    groupItem.children.push(operandItem);\n                }\n            }\n        }\n\n        return groupItem;\n    }\n\n    private createExpressionsTreeFromGroupItem(groupItem: ExpressionGroupItem): FilteringExpressionsTree {\n        if (!groupItem) {\n            return null;\n        }\n\n        const expressionsTree = new FilteringExpressionsTree(groupItem.operator);\n\n        for (const item of groupItem.children) {\n            if (item instanceof ExpressionGroupItem) {\n                const subTree = this.createExpressionsTreeFromGroupItem((item as ExpressionGroupItem));\n                expressionsTree.filteringOperands.push(subTree);\n            } else {\n                expressionsTree.filteringOperands.push((item as ExpressionOperandItem).expression);\n            }\n        }\n\n        return expressionsTree;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onChipRemove(expressionItem: ExpressionItem) {\n        this.deleteItem(expressionItem);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onChipClick(expressionItem: ExpressionOperandItem) {\n        this._clickTimer = setTimeout(() => {\n            if (!this._preventChipClick) {\n                this.onToggleExpression(expressionItem);\n            }\n            this._preventChipClick = false;\n        }, this._dblClickDelay);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onChipDblClick(expressionItem: ExpressionOperandItem) {\n        clearTimeout(this._clickTimer);\n        this._preventChipClick = true;\n        this.enterExpressionEdit(expressionItem);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public enterExpressionEdit(expressionItem: ExpressionOperandItem) {\n        this.clearSelection();\n        this.exitOperandEdit();\n        this.cancelOperandAdd();\n\n        if (this.editedExpression) {\n            this.editedExpression.inEditMode = false;\n        }\n\n        expressionItem.hovered = false;\n\n        this.selectedColumn = expressionItem.expression.fieldName ?\n            this.grid.getColumnByName(expressionItem.expression.fieldName) : null;\n        this.selectedCondition = expressionItem.expression.condition ?\n            expressionItem.expression.condition.name : null;\n        this.searchValue = expressionItem.expression.searchVal;\n\n        expressionItem.inEditMode = true;\n        this.editedExpression = expressionItem;\n\n        this.cdr.detectChanges();\n\n        this.columnSelectOverlaySettings.positionStrategy = new AutoPositionStrategy({ target: this.columnSelect.element });\n        this.conditionSelectOverlaySettings.positionStrategy = new AutoPositionStrategy({ target: this.conditionSelect.element });\n\n        if (!this.selectedColumn) {\n            this.columnSelect.input.nativeElement.focus();\n        } else if (this.selectedColumn.filters.condition(this.selectedCondition).isUnary) {\n            this.conditionSelect.input.nativeElement.focus();\n        } else {\n            this.searchValueInput.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public clearSelection() {\n        for (const group of this.selectedGroups) {\n            group.selected = false;\n        }\n        this.selectedGroups = [];\n\n        for (const expr of this.selectedExpressions) {\n            expr.selected = false;\n        }\n        this.selectedExpressions = [];\n\n        this.toggleContextMenu();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public enterExpressionAdd(expressionItem: ExpressionOperandItem) {\n        this.clearSelection();\n        this.exitOperandEdit();\n\n        if (this.addModeExpression) {\n            this.addModeExpression.inAddMode = false;\n        }\n\n        expressionItem.inAddMode = true;\n        this.addModeExpression = expressionItem;\n        if (expressionItem.selected) {\n            this.toggleExpression(expressionItem);\n        }\n    }\n\n    private onToggleExpression(expressionItem: ExpressionOperandItem) {\n        this.exitOperandEdit();\n        this.toggleExpression(expressionItem);\n\n        this.toggleContextMenu();\n    }\n\n    private toggleExpression(expressionItem: ExpressionOperandItem) {\n        expressionItem.selected = !expressionItem.selected;\n\n        if (expressionItem.selected) {\n            this.selectedExpressions.push(expressionItem);\n        } else {\n            const index = this.selectedExpressions.indexOf(expressionItem);\n            this.selectedExpressions.splice(index, 1);\n            this.deselectParentRecursive(expressionItem);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public contextMenuClosed() {\n        this.contextualGroup = null;\n    }\n\n    private toggleContextMenu() {\n        const contextualGroup = this.findSingleSelectedGroup();\n\n        if (contextualGroup || this.selectedExpressions.length > 1) {\n            this.contextualGroup = contextualGroup;\n\n            if (contextualGroup) {\n                this.filteringLogics = [\n                    {\n                        label: this.grid.resourceStrings.igx_grid_filter_operator_and,\n                        selected: contextualGroup.operator === FilteringLogic.And\n                    },\n                    {\n                        label: this.grid.resourceStrings.igx_grid_filter_operator_or,\n                        selected: contextualGroup.operator === FilteringLogic.Or\n                    }\n                ];\n            }\n        } else if (this.contextMenuToggle) {\n            this.contextMenuToggle.close();\n        }\n    }\n\n    private findSingleSelectedGroup(): ExpressionGroupItem {\n        for (const group of this.selectedGroups) {\n            const containsAllSelectedExpressions = this.selectedExpressions.every(op => this.isInsideGroup(op, group));\n\n            if (containsAllSelectedExpressions) {\n                return group;\n            }\n        }\n\n        return null;\n    }\n\n    private isInsideGroup(item: ExpressionItem, group: ExpressionGroupItem): boolean {\n        if (!item) {\n            return false;\n        }\n\n        if (item.parent === group) {\n            return true;\n        }\n\n        return this.isInsideGroup(item.parent, group);\n    }\n\n    private deleteItem(expressionItem: ExpressionItem) {\n        if (!expressionItem.parent) {\n            this.rootGroup = null;\n            this.currentGroup = null;\n            return;\n        }\n\n        if (expressionItem === this.currentGroup) {\n            this.currentGroup = this.currentGroup.parent;\n        }\n\n        const children = expressionItem.parent.children;\n        const index = children.indexOf(expressionItem);\n        children.splice(index, 1);\n\n        if (!children.length) {\n            this.deleteItem(expressionItem.parent);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onKeyDown(eventArgs: KeyboardEvent) {\n        eventArgs.stopPropagation();\n        if (!this.contextMenuToggle.collapsed &&\n            (eventArgs.key === KEYS.ESCAPE || eventArgs.key === KEYS.ESCAPE_IE)) {\n            this.clearSelection();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public createAndGroup() {\n        this.createGroup(FilteringLogic.And);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public createOrGroup() {\n        this.createGroup(FilteringLogic.Or);\n    }\n\n    private createGroup(operator: FilteringLogic) {\n        const chips = this.chips.toArray();\n        const minIndex = this.selectedExpressions.reduce((i, e) => Math.min(i, chips.findIndex(c => c.data === e)), Number.MAX_VALUE);\n        const firstExpression = chips[minIndex].data;\n\n        const parent = firstExpression.parent;\n        const groupItem = new ExpressionGroupItem(operator, parent);\n\n        const index = parent.children.indexOf(firstExpression);\n        parent.children.splice(index, 0, groupItem);\n\n        for (const expr of this.selectedExpressions) {\n            this.deleteItem(expr);\n            groupItem.children.push(expr);\n            expr.parent = groupItem;\n        }\n\n        this.clearSelection();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public deleteFilters() {\n        for (const expr of this.selectedExpressions) {\n            this.deleteItem(expr);\n        }\n\n        this.clearSelection();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onGroupClick(groupItem: ExpressionGroupItem) {\n        this.toggleGroup(groupItem);\n    }\n\n    private toggleGroup(groupItem: ExpressionGroupItem) {\n        this.exitOperandEdit();\n        if (groupItem.children && groupItem.children.length) {\n            this.toggleGroupRecursive(groupItem, !groupItem.selected);\n            if (!groupItem.selected) {\n                this.deselectParentRecursive(groupItem);\n            }\n            this.toggleContextMenu();\n        }\n    }\n\n    private toggleGroupRecursive(groupItem: ExpressionGroupItem, selected: boolean) {\n        if (groupItem.selected !== selected) {\n            groupItem.selected = selected;\n\n            if (groupItem.selected) {\n                this.selectedGroups.push(groupItem);\n            } else {\n                const index = this.selectedGroups.indexOf(groupItem);\n                this.selectedGroups.splice(index, 1);\n            }\n        }\n\n        for (const expr of groupItem.children) {\n            if (expr instanceof ExpressionGroupItem) {\n                this.toggleGroupRecursive(expr, selected);\n            } else {\n                const operandExpression = expr as ExpressionOperandItem;\n                if (operandExpression.selected !== selected) {\n                    this.toggleExpression(operandExpression);\n                }\n            }\n        }\n    }\n\n    private deselectParentRecursive(expressionItem: ExpressionItem) {\n        const parent = expressionItem.parent;\n        if (parent) {\n            if (parent.selected) {\n                parent.selected = false;\n                const index = this.selectedGroups.indexOf(parent);\n                this.selectedGroups.splice(index, 1);\n            }\n            this.deselectParentRecursive(parent);\n        }\n    }\n\n    private calculateContextMenuTarget() {\n        const containerRect = this.expressionsContainer.nativeElement.getBoundingClientRect();\n        const chips = this.chips.filter(c => this.selectedExpressions.indexOf(c.data) !== -1);\n        let minTop = chips.reduce((t, c) =>\n            Math.min(t, c.elementRef.nativeElement.getBoundingClientRect().top), Number.MAX_VALUE);\n        minTop = Math.max(containerRect.top, minTop);\n        minTop = Math.min(containerRect.bottom, minTop);\n        let maxRight = chips.reduce((r, c) =>\n            Math.max(r, c.elementRef.nativeElement.getBoundingClientRect().right), 0);\n        maxRight = Math.max(maxRight, containerRect.left);\n        maxRight = Math.min(maxRight, containerRect.right);\n        this._overlaySettings.positionStrategy.settings.target = new Point(maxRight, minTop);\n    }\n\n    private scrollElementIntoView(target: HTMLElement) {\n        const container = this.expressionsContainer.nativeElement;\n        const targetOffset = target.offsetTop - container.offsetTop;\n        const delta = 10;\n\n        if (container.scrollTop + delta > targetOffset) {\n            container.scrollTop = targetOffset - delta;\n        } else if (container.scrollTop + container.clientHeight < targetOffset + target.offsetHeight + delta) {\n            container.scrollTop = targetOffset + target.offsetHeight + delta - container.clientHeight;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ungroup() {\n        const selectedGroup = this.contextualGroup;\n        const parent = selectedGroup.parent;\n        if (parent) {\n            const index = parent.children.indexOf(selectedGroup);\n            parent.children.splice(index, 1, ...selectedGroup.children);\n\n            for (const expr of selectedGroup.children) {\n                expr.parent = parent;\n            }\n        }\n\n        this.clearSelection();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public deleteGroup() {\n        const selectedGroup = this.contextualGroup;\n        const parent = selectedGroup.parent;\n        if (parent) {\n            const index = parent.children.indexOf(selectedGroup);\n            parent.children.splice(index, 1);\n        } else {\n            this.rootGroup = null;\n        }\n\n        this.clearSelection();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public selectFilteringLogic(event: IButtonGroupEventArgs) {\n        this.contextualGroup.operator = event.index as FilteringLogic;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getConditionFriendlyName(name: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${name}`] || name;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isDate(value: any) {\n        return value instanceof Date;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onExpressionsScrolled() {\n        if (!this.contextMenuToggle.collapsed) {\n            this.calculateContextMenuTarget();\n            this.contextMenuToggle.reposition();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public invokeClick(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            (eventArgs.currentTarget as HTMLElement).click();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onOutletPointerDown(event) {\n        // This prevents closing the select's dropdown when clicking the scroll\n        event.preventDefault();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getConditionList(): string[] {\n        return this.selectedColumn ? this.selectedColumn.filters.conditionList() : [];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public initialize(grid: GridType, overlayService: IgxOverlayService,\n        overlayComponentId: string) {\n        this.inline = false;\n        this.grid = grid;\n        this._overlayService = overlayService;\n        this._overlayComponentId = overlayComponentId;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public setAddButtonFocus() {\n        if (this.addRootAndGroupButton) {\n            this.addRootAndGroupButton.nativeElement.focus();\n        } else if (this.addConditionButton) {\n            this.addConditionButton.nativeElement.focus();\n        }\n    }\n\n    private init() {\n        this.clearSelection();\n        this.cancelOperandAdd();\n        this.cancelOperandEdit();\n        this.rootGroup = this.createExpressionGroupItem(this.grid.advancedFilteringExpressionsTree);\n        this.currentGroup = this.rootGroup;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public context(expression: ExpressionItem, afterExpression?: ExpressionItem) {\n        return {\n            $implicit: expression,\n            afterExpression\n        };\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onClearButtonClick() {\n        this.grid.advancedFilteringExpressionsTree = null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public closeDialog() {\n        if (this._overlayComponentId) {\n            this._overlayService.hide(this._overlayComponentId);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public applyChanges() {\n        this.exitOperandEdit();\n        this.grid.advancedFilteringExpressionsTree = this.createExpressionsTreeFromGroupItem(this.rootGroup);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public cancelChanges() {\n        if (!this._overlayComponentId) {\n            this.init();\n        }\n        this.closeDialog();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onApplyButtonClick() {\n        this.applyChanges();\n        this.closeDialog();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onChipSelectionEnd() {\n        const contextualGroup = this.findSingleSelectedGroup();\n        if (contextualGroup || this.selectedExpressions.length > 1) {\n            this.contextualGroup = contextualGroup;\n            this.calculateContextMenuTarget();\n            if (this.contextMenuToggle.collapsed) {\n                this.contextMenuToggle.open(this._overlaySettings);\n            } else {\n                this.contextMenuToggle.reposition();\n            }\n        }\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n/**\n * @hidden\n * @internal\n */\n@Directive({\n    selector: '[igxRowSelector]'\n})\nexport class IgxRowSelectorDirective {\n    constructor(public templateRef: TemplateRef<any>) { }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Directive({\n    selector: '[igxHeadSelector]'\n})\nexport class IgxHeadSelectorDirective {\n    constructor(public templateRef: TemplateRef<any>) { }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n/**\n * The IgxGridToolbarCustomContentDirective directive is used to mark an 'ng-template' (with\n * the 'igxToolbarCustomContent' selector) defined in the IgxGrid which is used to provide\n * custom content for cener part of the IgxGridToolbar.\n */\n@Directive({\n    selector: '[igxToolbarCustomContent]'\n})\nexport class IgxGridToolbarCustomContentDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChildren,\n    ChangeDetectionStrategy,\n    Input,\n    forwardRef,\n    QueryList,\n    TemplateRef,\n    Output,\n    EventEmitter\n} from '@angular/core';\n\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridCellComponent } from '../cell.component';\nimport { flatten } from '../../core/utils';\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(() => IgxColumnGroupComponent) }],\n    selector: 'igx-column-group',\n    template: ``\n})\nexport class IgxColumnGroupComponent extends IgxColumnComponent implements AfterContentInit {\n\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent })\n    children = new QueryList<IgxColumnComponent>();\n\n    /**\n     * Set if the column group is collapsible.\n     * Default value is `false`\n     * ```html\n     *  <igx-column-group [collapsible] = \"true\"></igx-column-group>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public set collapsible(value: boolean) {\n        this._collapsible = value;\n        this.collapsibleChange.emit(this._collapsible);\n        if (this.children && !this.hidden) {\n            if (this._collapsible) {\n                this.setExpandCollapseState();\n            } else {\n                this.children.forEach(child => child.hidden = false);\n            }\n        }\n    }\n    public get collapsible() {\n        return this._collapsible && this.checkCollapsibleState();\n    }\n\n    /**\n     * Set whether the group is expanded or collapsed initially.\n     * Applied only if the collapsible property is set to `true`\n     * Default value is `true`\n     * ```html\n     *  const state = false\n     *  <igx-column-group [(expand)] = \"state\"></igx-column-group>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public set expanded(value: boolean) {\n        this._expanded = value;\n        this.expandedChange.emit(this._expanded);\n        if (!this.collapsible) { return; }\n        if (!this.hidden && this.children) {\n            this.setExpandCollapseState();\n        }\n    }\n    public get expanded() {\n        return this._expanded;\n    }\n\n    /**\n     * Gets the column group `summaries`.\n     * ```typescript\n     * let columnGroupSummaries = this.columnGroup.summaries;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column group `summaries`.\n     * ```typescript\n     * this.columnGroup.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set summaries(classRef: any) { }\n    /**\n     * Sets/gets whether the column group is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.columnGroup.searchable;\n     * ```\n     * ```html\n     *  <igx-column-group [searchable] = \"false\"></igx-column-group>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column group `filters`.\n     * ```typescript\n     * let columnGroupFilters = this.columnGroup.filters;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get filters(): any {\n        return this._filters;\n    }\n    /**\n     * Sets the column group `filters`.\n     * ```typescript\n     * this.columnGroup.filters = IgxStringFilteringOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set filters(classRef: any) { }\n\n    /**\n     * Returns a reference to the body template.\n     * ```typescript\n     * let bodyTemplate = this.columnGroup.bodyTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set bodyTemplate(template: TemplateRef<any>) { }\n\n    /**\n     * Allows you to define a custom template for expand/collapse indicator\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get collapsibleIndicatorTemplate(): TemplateRef<any> {\n        return this._collapseIndicatorTemplate;\n    }\n    set collapsibleIndicatorTemplate(template: TemplateRef<any>) {\n        this._collapseIndicatorTemplate = template;\n    }\n\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.columnGroup.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) { }\n    /**\n     * Gets the column group cells.\n     * ```typescript\n     * let columnCells = this.columnGroup.cells;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return [];\n    }\n    /**\n     * Gets whether the column group is hidden.\n     * ```typescript\n     * let isHidden = this.columnGroup.hidden;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get hidden() {\n        return this.allChildren.every(c => c.hidden);\n    }\n    /**\n     * Sets the column group hidden property.\n     * ```html\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     *\n     * Two-way data binding\n     * ```html\n     * <igx-column [(hidden)] = \"model.columns[0].isHidden\"></igx-column>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.hiddenChange.emit(this._hidden);\n        if (this._hidden || !this.collapsible) {\n            this.children.forEach(child => child.hidden = this._hidden);\n        } else {\n            this.children.forEach(c =>  {\n                if (c.visibleWhenCollapsed === undefined) {c.hidden = false; return; }\n                c.hidden = this.expanded ? c.visibleWhenCollapsed : !c.visibleWhenCollapsed;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public hiddenChange = new EventEmitter<boolean>();\n\n    /**\n     *@hidden\n     */\n    ngAfterContentInit() {\n        /*\n            @ContentChildren with descendants still returns the `parent`\n            component in the query list.\n        */\n        if (this.headTemplate && this.headTemplate.length) {\n            this._headerTemplate = this.headTemplate.toArray()[0].template;\n        }\n        if (this.collapseIndicatorTemplate) {\n            this._collapseIndicatorTemplate = this.collapseIndicatorTemplate.template;\n        }\n        // currently only ivy fixes the issue, we have to slice only if the first child is group\n        if (this.children.first === this) {\n            this.children.reset(this.children.toArray().slice(1));\n        }\n        this.children.forEach(child => {\n            child.parent = this;\n        });\n        if (this.collapsible) {\n            this.setExpandCollapseState();\n        }\n    }\n\n    /**\n     * Returns the children columns collection.\n     * ```typescript\n     * let columns =  this.columnGroup.allChildren;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return flatten(this.children.toArray());\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let isColumnGroup =  this.columnGroup.columnGroup\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get columnGroup() {\n        return true;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnLayout` for multi-row layout.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnLayout() {\n        return false;\n    }\n    /**\n     * Gets the width of the column group.\n     * ```typescript\n     * let columnGroupWidth = this.columnGroup.width;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get width() {\n        let isChildrenWidthInPercent = false, width;\n        width = `${this.children.reduce((acc, val) => {\n            if (val.hidden) {\n                return acc;\n            }\n            if (typeof val.width === 'string' && val.width.indexOf('%') !== -1) {\n                isChildrenWidthInPercent = true;\n                return acc + parseInt(val.width, 10);\n            }\n            return acc + parseInt(val.calcWidth, 10);\n        }, 0)}`;\n        return isChildrenWidthInPercent ? width + '%' : width + 'px';\n    }\n\n    set width(val) { }\n\n    // constructor(public gridAPI: GridBaseAPIService<IgxGridBaseDirective & IGridDataBindable>, public cdr: ChangeDetectorRef) {\n    //     // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n    //     super(gridAPI, cdr);\n    // }\n}\n","import { Directive, Input, OnDestroy, NgModule, TemplateRef } from '@angular/core';\nimport { IgxDragDirective } from '../directives/drag-drop/drag-drop.directive';\nimport { KEYS } from '../core/utils';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { IgxRowDirective, IgxGridBaseDirective } from './grid';\nimport { IRowDragStartEventArgs, IRowDragEndEventArgs } from './common/events';\nimport { GridType } from './common/grid.interface';\nimport { IgxHierarchicalRowComponent } from './hierarchical-grid/hierarchical-row.component';\n\n\nconst ghostBackgroundClass = 'igx-grid__tr--ghost';\nconst gridCellClass = 'igx-grid__td';\nconst rowSelectedClass = 'igx-grid__tr--selected';\nconst cellSelectedClass = 'igx-grid__td--selected';\nconst cellActiveClass = 'igx-grid__td--active';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowDrag]'\n})\nexport class IgxRowDragDirective extends IgxDragDirective implements OnDestroy {\n    private row: IgxRowDirective<IgxGridBaseDirective & GridType>;\n    private subscription$: Subscription;\n    private _rowDragStarted = false;\n\n    @Input('igxRowDrag')\n    set data(val) {\n        this.row = val;\n    }\n\n    get data() {\n        return this.row;\n    }\n\n    public onPointerDown(event) {\n        event.preventDefault();\n        this._rowDragStarted = false;\n        this._removeOnDestroy = false;\n        super.onPointerDown(event);\n    }\n\n    public onPointerMove(event) {\n        super.onPointerMove(event);\n        if (this._dragStarted && !this._rowDragStarted) {\n            this._rowDragStarted = true;\n            const args: IRowDragStartEventArgs = {\n                dragDirective: this,\n                dragData: this.row,\n                cancel: false,\n                owner: this.row.grid\n            };\n\n            this.row.grid.onRowDragStart.emit(args);\n            if (args.cancel) {\n                this.ghostElement.parentNode.removeChild(this.ghostElement);\n                this.ghostElement = null;\n                this._dragStarted = false;\n                this._clicked = false;\n                return;\n            }\n            this.row.dragging = true;\n            this.row.grid.rowDragging = true;\n            this.row.grid.markForCheck();\n\n            this.subscription$ = fromEvent(this.row.grid.document.defaultView, 'keydown').subscribe((ev: KeyboardEvent) => {\n                if (ev.key === KEYS.ESCAPE || ev.key === KEYS.ESCAPE_IE) {\n                    this._lastDropArea = false;\n                    this.onPointerUp(event);\n                }\n            });\n        }\n    }\n\n    public onPointerUp(event) {\n\n        if (!this._clicked) {\n            return;\n        }\n\n        const args: IRowDragEndEventArgs = {\n            dragDirective: this,\n            dragData: this.row,\n            animation: false,\n            owner: this.row.grid\n        };\n        this.zone.run(() => {\n            this.row.grid.onRowDragEnd.emit(args);\n        });\n\n        const dropArea = this._lastDropArea;\n        super.onPointerUp(event);\n        if (!dropArea && this.ghostElement) {\n            this.ghostElement.addEventListener('transitionend', this.transitionEndEvent, false);\n        }   else {\n            this.endDragging();\n        }\n    }\n\n    protected createGhost(pageX, pageY) {\n        this.row.grid.endEdit(true);\n        this.row.grid.markForCheck();\n        this.ghostContext = {\n            $implicit: this.row.rowData,\n            data: this.row.rowData,\n            grid: this.row.grid\n        };\n        super.createGhost(pageX, pageY, this.row.nativeElement);\n\n        // check if there is an expander icon and create the ghost at the corresponding position\n        if (this.isHierarchicalGrid) {\n            const row = this.row as IgxHierarchicalRowComponent;\n            if (row.expander) {\n                const expanderWidth = row.expander.nativeElement.getBoundingClientRect().width;\n                this._ghostHostX += expanderWidth;\n            }\n        }\n\n        const ghost = this.ghostElement;\n\n        const gridRect = this.row.grid.nativeElement.getBoundingClientRect();\n        const rowRect = this.row.nativeElement.getBoundingClientRect();\n        ghost.style.overflow = 'hidden';\n        ghost.style.width = gridRect.width + 'px';\n        ghost.style.height = rowRect.height + 'px';\n\n        this.renderer.addClass(ghost, ghostBackgroundClass);\n        this.renderer.removeClass(ghost, rowSelectedClass);\n\n        const ghostCells = ghost.getElementsByClassName(gridCellClass);\n        for (let index = 0; index < ghostCells.length; index++) {\n            this.renderer.removeClass(ghostCells[index], cellSelectedClass);\n            this.renderer.removeClass(ghostCells[index], cellActiveClass);\n        }\n    }\n\n    private _unsubscribe() {\n        if (this.subscription$ && !this.subscription$.closed) {\n            this.subscription$.unsubscribe();\n        }\n    }\n\n    private endDragging() {\n        this.onTransitionEnd(null);\n        this.row.dragging = false;\n        this.row.grid.rowDragging = false;\n        this.row.grid.markForCheck();\n        this._unsubscribe();\n    }\n\n    private transitionEndEvent = (evt?) => {\n        if (this.ghostElement) {\n            this.ghostElement.removeEventListener('transitionend', this.transitionEndEvent, false);\n        }\n        this.endDragging();\n    }\n\n    private get isHierarchicalGrid() {\n        return this.row.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxDragIndicatorIcon]'\n})\n\nexport class IgxDragIndicatorIconDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowDragGhost]'\n})\n\nexport class IgxRowDragGhostDirective  {\n    constructor(public templateRef: TemplateRef<any>) { }\n}\n\n@NgModule({\n    declarations: [IgxRowDragDirective, IgxDragIndicatorIconDirective, IgxRowDragGhostDirective],\n    entryComponents: [],\n    exports: [IgxRowDragDirective, IgxDragIndicatorIconDirective, IgxRowDragGhostDirective],\n    imports: []\n})\n\nexport class IgxRowDragModule {\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    ContentChildren,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    IterableChangeRecord,\n    IterableDiffers,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    ViewContainerRef,\n    InjectionToken,\n    Optional,\n    DoCheck,\n    Directive\n} from '@angular/core';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { Subject, combineLatest, pipe } from 'rxjs';\nimport { takeUntil, first, filter, throttleTime, map } from 'rxjs/operators';\nimport { cloneArray, isEdge, isNavigationKey, flatten, mergeObjects, isIE } from '../core/utils';\nimport { DataType } from '../data-operations/data-util';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { IGroupByRecord } from '../data-operations/groupby-record.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IForOfState, IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport {\n    AbsoluteScrollStrategy,\n    HorizontalAlignment,\n    VerticalAlignment,\n    IgxOverlayService,\n    OverlaySettings,\n    PositionSettings,\n    ConnectedPositioningStrategy,\n    ContainerPositionStrategy\n} from '../services/index';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IColumnVisibilityChangedEventArgs } from './hiding/column-hiding-item.directive';\nimport { ISummaryExpression } from './summaries/grid-summary';\nimport { RowEditPositionStrategy } from './grid.common';\nimport { IgxGridToolbarComponent } from './toolbar/grid-toolbar.component';\nimport { IgxRowDirective } from './row.directive';\nimport { IgxGridHeaderComponent } from './headers/grid-header.component';\nimport { IgxOverlayOutletDirective, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport {\n    FilteringExpressionsTree, IFilteringExpressionsTree, FilteringExpressionsTreeType\n} from '../data-operations/filtering-expressions-tree';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { Transaction, TransactionType, TransactionService, State } from '../services/index';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditTabStopDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditActionsDirective\n} from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';\nimport { IgxGridRowComponent } from './grid';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { IgxGridFilteringCellComponent } from './filtering/base/grid-filtering-cell.component';\nimport { WatchChanges } from './watch-changes';\nimport { IgxGridHeaderGroupComponent } from './headers/grid-header-group.component';\nimport { IGridResourceStrings } from '../core/i18n/grid-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { IgxGridSummaryService } from './summaries/grid-summary.service';\nimport { IgxSummaryRowComponent } from './summaries/summary-row.component';\nimport {\n    IgxGridSelectionService,\n    GridSelectionRange,\n    IgxGridCRUDService,\n    IgxRow,\n    IgxCell,\n    isChromium\n} from './selection/selection.service';\nimport { DragScrollDirection } from './selection/drag-select.directive';\nimport { ICachedViewLoadedEventArgs, IgxTemplateOutletDirective } from '../directives/template-outlet/template_outlet.directive';\nimport { IgxExcelStyleLoadingValuesTemplateDirective } from './filtering/excel-style/excel-style-search.component';\nimport {\n    IgxExcelStyleSortingTemplateDirective,\n    IgxExcelStylePinningTemplateDirective,\n    IgxExcelStyleHidingTemplateDirective,\n    IgxExcelStyleMovingTemplateDirective\n} from './filtering/excel-style/grid.excel-style-filtering.component';\nimport { IgxGridColumnResizerComponent } from './resizing/resizer.component';\nimport { IgxGridFilteringRowComponent } from './filtering/base/grid-filtering-row.component';\nimport { CharSeparatedValueData } from '../services/csv/char-separated-value-data';\nimport { IgxColumnResizingService } from './resizing/resizing.service';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { IFilteringStrategy } from '../data-operations/filtering-strategy';\nimport { IgxRowExpandedIndicatorDirective, IgxRowCollapsedIndicatorDirective,\n     IgxHeaderExpandIndicatorDirective, IgxHeaderCollapseIndicatorDirective } from './grid/grid.directives';\nimport { GridKeydownTargetType, GridSelectionMode, GridSummaryPosition, GridSummaryCalculationMode, FilterMode } from './common/enums';\nimport {\n    IGridCellEventArgs,\n    IRowSelectionEventArgs,\n    IPinColumnEventArgs,\n    IGridEditEventArgs,\n    IPageEventArgs,\n    IRowDataEventArgs,\n    IColumnResizeEventArgs,\n    IColumnMovingStartEventArgs,\n    IColumnMovingEventArgs,\n    IColumnMovingEndEventArgs,\n    IGridKeydownEventArgs,\n    IRowDragStartEventArgs,\n    IRowDragEndEventArgs,\n    IGridClipboardEvent,\n    IGridToolbarExportEventArgs,\n    ISearchInfo,\n    ICellPosition,\n    IRowToggleEventArgs\n} from './common/events';\nimport { IgxAdvancedFilteringDialogComponent } from './filtering/advanced-filtering/advanced-filtering-dialog.component';\nimport { GridType } from './common/grid.interface';\nimport { IgxDecimalPipeComponent, IgxDatePipeComponent } from './common/pipes';\nimport { DropPosition } from './moving/moving.service';\nimport { IgxHeadSelectorDirective, IgxRowSelectorDirective } from './selection/row-selectors';\nimport { IgxGridToolbarCustomContentDirective } from './toolbar/toolbar.directive';\nimport { IgxColumnComponent } from './columns/column.component';\nimport { IgxColumnGroupComponent } from './columns/column-group.component';\nimport { IGridSortingStrategy } from '../data-operations/sorting-strategy';\nimport { IgxRowDragGhostDirective, IgxDragIndicatorIconDirective  } from './row-drag.directive';\n\nconst MINIMUM_COLUMN_WIDTH = 136;\nconst FILTER_ROW_HEIGHT = 50;\n\n// By default row editing overlay outlet is inside grid body so that overlay is hidden below grid header when scrolling.\n// In cases when grid has 1-2 rows there isn't enough space in grid body and row editing overlay should be shown above header.\n// Default row editing overlay height is higher then row height that is why the case is valid also for row with 2 rows.\n// More accurate calculation is not possible, cause row editing overlay is still not shown and we don't know its height,\n// but in the same time we need to set row editing overlay outlet before opening the overlay itself.\nconst MIN_ROW_EDITING_COUNT_THRESHOLD = 2;\n\nexport const IgxGridTransaction = new InjectionToken<string>('IgxGridTransaction');\n\n\n\n@Directive({\n    selector: '[igxGridBaseComponent]'\n})\nexport class IgxGridBaseDirective extends DisplayDensityBase implements\n    OnInit, DoCheck, OnDestroy, AfterContentInit, AfterViewInit {\n    private _scrollWidth: number;\n    private _customDragIndicatorIconTemplate: TemplateRef<any>;\n    protected _init = true;\n    private _cdrRequests = false;\n    protected _cdrRequestRepaint = false;\n\n    public get scrollWidth() {\n        return this._scrollWidth;\n    }\n\n    private _resourceStrings = CurrentResourceStrings.GridResStrings;\n    private _emptyGridMessage = null;\n    private _emptyFilteredGridMessage = null;\n    private _isLoading = false;\n    private _locale = null;\n    public _destroyed = false;\n    private overlayIDs = [];\n    private _filteringStrategy: IFilteringStrategy;\n    private _sortingStrategy: IGridSortingStrategy;\n\n    private _hostWidth;\n    private _advancedFilteringOverlayId: string;\n    private _advancedFilteringPositionSettings: PositionSettings = {\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalDirection: HorizontalAlignment.Center,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle\n    };\n\n    private _advancedFilteringOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: false,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._advancedFilteringPositionSettings),\n    };\n\n\n    /**\n    * @hidden @internal\n    */\n    @ViewChild('defaultExpandedTemplate', { read: TemplateRef, static: true })\n    protected defaultExpandedTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden @internal\n    */\n    @ViewChild('defaultCollapsedTemplate', { read: TemplateRef, static: true })\n    protected defaultCollapsedTemplate: TemplateRef<any>;\n\n\n    /**\n     * Gets/Sets the resource strings.\n     * @remarks\n     * By default it uses EN resources.\n    */\n    @Input()\n    set resourceStrings(value: IGridResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    get resourceStrings(): IGridResourceStrings {\n        return this._resourceStrings;\n    }\n\n    /**\n     * Gets/Sets whether to autogenerate the columns.\n     * @remarks\n     * The default value is false. When set to true, it will override all columns declared through code or in markup.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public autoGenerate = false;\n\n    /**\n    * @hidden @internal\n    */\n    public id: string;\n\n    /**\n     * Gets/Sets a custom template when empty.\n     * @example\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [emptyGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public emptyGridTemplate: TemplateRef<any>;\n\n    /**\n     * Gets/Sets a custom template when loading.\n     * @example\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [loadingGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public loadingGridTemplate: TemplateRef<any>;\n\n\n    /**\n     * Gets/Sets the filtering logic of the `IgxGridComponent`.\n     * @remarks\n     * The default is AND.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [filteringLogic]=\"filtering\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    public get filteringLogic() {\n        return this._filteringExpressionsTree.operator;\n    }\n\n    public set filteringLogic(value: FilteringLogic) {\n        this._filteringExpressionsTree.operator = value;\n    }\n\n    /**\n     * Gets/Sets the filtering state.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(filteringExpressionsTree)]=\"model.filteringExpressions\"></igx-grid>\n     * ```\n     * @remarks\n     * Supports two-way binding.\n     */\n    @WatchChanges()\n    @Input()\n    get filteringExpressionsTree() {\n        return this._filteringExpressionsTree;\n    }\n\n    set filteringExpressionsTree(value) {\n        if (value && value instanceof FilteringExpressionsTree) {\n            const val = (value as FilteringExpressionsTree);\n            for (let index = 0; index < val.filteringOperands.length; index++) {\n                if (!(val.filteringOperands[index] instanceof FilteringExpressionsTree)) {\n                    const newExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And, val.filteringOperands[index].fieldName);\n                    newExpressionsTree.filteringOperands.push(val.filteringOperands[index] as IFilteringExpression);\n                    val.filteringOperands[index] = newExpressionsTree;\n                }\n            }\n\n            value.type = FilteringExpressionsTreeType.Regular;\n            this._filteringExpressionsTree = value;\n            this._filteringPipeTrigger++;\n            this.filteringExpressionsTreeChange.emit(this._filteringExpressionsTree);\n\n            if (this.filteringService.isFilteringExpressionsTreeEmpty(this._filteringExpressionsTree) &&\n                !this.advancedFilteringExpressionsTree) {\n                this.filteredData = null;\n            }\n\n            this.filteringService.refreshExpressions();\n            this.selectionService.clearHeaderCBState();\n            this.summaryService.clearSummaryCache();\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * Emitted after filtering is performed.\n     * @remarks\n     * Returns the filtering expressions tree of the column for which filtering was performed.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"\n     *              (filteringExpressionsTreeChange)=\"filteringExprTreeChange($event)\"></igx-grid>\n     * ```\n    */\n    @Output()\n    public filteringExpressionsTreeChange = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Emitted after advanced filtering is performed.\n     * @remarks\n     * Returns the advanced filtering expressions tree.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"\n     *           (advancedFilteringExpressionsTreeChange)=\"advancedFilteringExprTreeChange($event)\"></igx-grid>\n     * ```\n    */\n    @Output()\n    public advancedFilteringExpressionsTreeChange = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Gets/Sets the advanced filtering state.\n     * @example\n     * ```typescript\n     * let advancedFilteringExpressionsTree = this.grid.advancedFilteringExpressionsTree;\n     * this.grid.advancedFilteringExpressionsTree = logic;\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    get advancedFilteringExpressionsTree() {\n        return this._advancedFilteringExpressionsTree;\n    }\n\n    set advancedFilteringExpressionsTree(value) {\n        if (value && value instanceof FilteringExpressionsTree) {\n            value.type = FilteringExpressionsTreeType.Advanced;\n            this._advancedFilteringExpressionsTree = value;\n            this._filteringPipeTrigger++;\n        } else {\n            this._advancedFilteringExpressionsTree = null;\n        }\n        this.advancedFilteringExpressionsTreeChange.emit(this._advancedFilteringExpressionsTree);\n\n        if (this.filteringService.isFilteringExpressionsTreeEmpty(this._advancedFilteringExpressionsTree) &&\n            !this.advancedFilteringExpressionsTree) {\n            this.filteredData = null;\n        }\n\n        this.selectionService.clearHeaderCBState();\n        this.summaryService.clearSummaryCache();\n        this.notifyChanges();\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.onFilteringDone.emit(this._advancedFilteringExpressionsTree));\n    }\n\n    /**\n     * Gets/Sets the locale.\n     * @remarks\n     * If not set, returns browser's language.\n     */\n    @Input()\n    get locale(): string {\n        if (this._locale) {\n            return this._locale;\n        } else {\n            return 'en';\n        }\n    }\n\n    set locale(value) {\n        this._locale = value;\n    }\n\n    /**\n     * Gets/Sets whether the paging feature is enabled.\n     * @remarks\n     * The default state is disabled (false).\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [paging]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    get paging(): boolean {\n        return this._paging;\n    }\n\n    set paging(value: boolean) {\n        this._paging = value;\n        this._pipeTrigger++;\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Gets/Sets the current page index.\n    *@example\n    * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [(page)]=\"model.page\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @remarks\n     * Supports two-way binding.\n     */\n    @Input()\n    get page(): number {\n        return this._page;\n    }\n\n    set page(val: number) {\n        if (val === this._page || val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n        this.selectionService.clear(true);\n        this.onPagingDone.emit({ previous: this._page, current: val });\n        this._page = val;\n        this.pageChange.emit(this._page);\n        this.navigateTo(0);\n        this.notifyChanges();\n    }\n\n    /**\n     *@hidden @internal\n     */\n    @Output()\n    public pageChange = new EventEmitter<number>();\n\n    /**\n     * Gets/Sets the number of visible items per page.\n     * @remarks\n     * The default is 15.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [(perPage)]=\"model.perPage\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    get perPage(): number {\n        return this._perPage;\n    }\n\n    set perPage(val: number) {\n        if (val < 0) {\n            return;\n        }\n        this.selectionService.clear(true);\n        this._perPage = val;\n        this.perPageChange.emit(this._perPage);\n        this.page = 0;\n        this.endEdit(true);\n        this.notifyChanges();\n    }\n\n    /**\n     *@hidden @internal\n     */\n    @Output()\n    public perPageChange = new EventEmitter<number>();\n\n    /**\n     * Gets/Sets a custom `ng-template` for the pagination UI of the grid.\n     * @example\n     * ```html\n     * <igx-grid #grid [paging]=\"true\" [myTemplate]=\"myTemplate\" [height]=\"'305px'\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public paginationTemplate: TemplateRef<any>;\n\n    /**\n     * Gets/Sets whether the column hiding UI is enabled.\n     * @remarks\n     * By default it is disabled (false). In order for the UI to work, you need to enable the toolbar as shown in the example below.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [showToolbar]=\"true\" [columnHiding]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    get columnHiding() {\n        return this._columnHiding;\n    }\n\n    set columnHiding(value) {\n        if (this._columnHiding !== value) {\n            this._columnHiding = value;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    @DeprecateProperty('rowSelectable property is deprecated. Use rowSelection property instead.')\n    @WatchChanges()\n    @Input()\n    get rowSelectable(): boolean {\n        return this.isRowSelectable;\n    }\n\n    set rowSelectable(val: boolean) {\n        this.rowSelection = val ? GridSelectionMode.multiple : GridSelectionMode.none;\n    }\n\n    /**\n     * Gets/Sets if the row selectors are hidden.\n     * @remarks\n     *  By default row selectors are shown\n    */\n    @WatchChanges()\n    @Input()\n    get hideRowSelectors() {\n        return this._hideRowSelectors;\n    }\n\n    set hideRowSelectors(value: boolean) {\n        this._hideRowSelectors = value;\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Gets/Sets whether rows can be moved.\n     * @example\n     * ```html\n     * <igx-grid #grid [rowDraggable]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    get rowDraggable(): boolean {\n        return this._rowDrag && this.hasVisibleColumns;\n    }\n\n\n    set rowDraggable(val: boolean) {\n        this._rowDrag = val;\n        this.notifyChanges(true);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public rowDragging = false;\n\n\n    /**\n    * Gets/Sets whether the rows are editable.\n    * @remarks\n    * By default it is set to false.\n    * @example\n    * ```html\n    * <igx-grid #grid [showToolbar]=\"true\" [rowEditable]=\"true\" [primaryKey]=\"'ProductID'\" [columnHiding]=\"true\"></igx-grid>\n    * ```\n    */\n    @WatchChanges()\n    @Input()\n    get rowEditable(): boolean {\n        return this._rowEditable;\n    }\n\n    set rowEditable(val: boolean) {\n        if (!this._init) {\n            this.refreshGridState();\n        }\n        this._rowEditable = val;\n        this.notifyChanges();\n    }\n\n    /**\n     * Gets/Sets the height.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @HostBinding('style.height')\n    @Input()\n    public get height() {\n        return this._height;\n    }\n\n    public set height(value: string) {\n        if (this._height !== value) {\n            this._height = value;\n            this.nativeElement.style.height = value;\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * @hidden @internal\n    */\n    @HostBinding('style.width')\n    get hostWidth() {\n        return this._width || this._hostWidth;\n    }\n    /**\n     * Gets/Sets the width of the grid.\n     * @example\n     * ```typescript\n     * let gridWidth = this.grid.width;\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    get width() {\n        return this._width;\n    }\n\n    set width(value) {\n        if (this._width !== value) {\n            this._width = value;\n            this.nativeElement.style.width = value;\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Gets the width of the header.\n     * @example\n     * ```html\n     * let gridHeaderWidth = this.grid.headerWidth;\n     * ```\n     */\n    get headerWidth() {\n        return parseInt(this.width, 10) - 17;\n    }\n\n    /**\n     * Gets/Sets the styling classes applied to all even `IgxGridRowComponent`s in the grid.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-even-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public evenRowCSS = 'igx-grid__tr--even';\n\n    /**\n     * Gets/Sets the styling classes applied to all odd `IgxGridRowComponent`s in the grid.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-odd-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public oddRowCSS = 'igx-grid__tr--odd';\n\n    /**\n     * Gets/Sets the row height.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [rowHeight]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    public get rowHeight() {\n        return this._rowHeight ? this._rowHeight : this.defaultRowHeight;\n    }\n\n    public set rowHeight(value) {\n        this._rowHeight = parseInt(value, 10);\n    }\n\n    /**\n     * Gets/Sets the default width of the columns.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [columnWidth]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    public get columnWidth(): string {\n        return this._columnWidth;\n    }\n    public set columnWidth(value: string) {\n        this._columnWidth = value;\n        this.columnWidthSetByUser = true;\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Gets/Sets the primary key.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [primaryKey]=\"'ProductID'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    public primaryKey;\n\n    /**\n     * Get/Sets the message displayed when there are no records.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    set emptyGridMessage(value: string) {\n        this._emptyGridMessage = value;\n    }\n    get emptyGridMessage(): string {\n        return this._emptyGridMessage || this.resourceStrings.igx_grid_emptyGrid_message;\n    }\n\n    /**\n     * Gets/Sets whether the grid is going to show a loading indicator.\n     *@example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [isLoading]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    set isLoading(value: boolean) {\n        if (this._isLoading !== value) {\n            this._isLoading = value;\n            this.evaluateLoadingState();\n        }\n        Promise.resolve().then(() => {\n            // wait for the current detection cycle to end before triggering a new one.\n            this.notifyChanges();\n        });\n    }\n\n    get isLoading(): boolean {\n        return this._isLoading;\n    }\n\n    /**\n     * Gets/Sets whether the columns should be auto-generated once again after the initialization of the grid\n     * @remarks\n     * This will allow to bind the grid to remote data and having auto-generated columns at the same time.\n     * Note that after generating the columns, this property would be disabled to avoid re-creating\n     * columns each time a new data is assigned.\n     * @example\n     * ```typescript\n     *  this.grid.shouldGenerate = true;\n     * ```\n     */\n    public shouldGenerate: boolean;\n\n    /**\n     * Gets/Sets the message displayed when there are no records and the grid is filtered.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    set emptyFilteredGridMessage(value: string) {\n        this._emptyFilteredGridMessage = value;\n    }\n\n    get emptyFilteredGridMessage(): string {\n        return this._emptyFilteredGridMessage || this.resourceStrings.igx_grid_emptyFilteredGrid_message;\n    }\n\n    /**\n     * Gets/Sets the title to be displayed in the built-in column hiding UI.\n     * @example\n     * ```html\n     * <igx-grid [showToolbar]=\"true\" [columnHiding]=\"true\" columnHidingTitle=\"Column Hiding\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public columnHidingTitle = '';\n\n    /**\n     * Gets/Sets if the built-in column pinning UI should be shown in the toolbar.\n     * @example\n    * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    get columnPinning() {\n        return this._columnPinning;\n    }\n    set columnPinning(value) {\n        if (this._columnPinning !== value) {\n            this._columnPinning = value;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Gets/Sets the title to be displayed in the UI of the column pinning.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [columnPinningTitle]=\"'Column Hiding'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public columnPinningTitle = '';\n\n    /**\n     * Gets/Sets if the filtering is enabled.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [allowFiltering]=\"true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    get allowFiltering() {\n        return this._allowFiltering;\n    }\n\n    set allowFiltering(value) {\n        if (this._allowFiltering !== value) {\n            this._allowFiltering = value;\n            this.filteringService.registerSVGIcons();\n\n            if (!this._init) {\n                this.calcGridHeadRow();\n            }\n\n            this.filteringService.isFilterRowVisible = false;\n            this.filteringService.filteredColumn = null;\n\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Gets/Sets a value indicating whether the advanced filtering is enabled.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [allowAdvancedFiltering]=\"true\" [showToolbar]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    get allowAdvancedFiltering() {\n        return this._allowAdvancedFiltering;\n    }\n\n    set allowAdvancedFiltering(value) {\n        if (this._allowAdvancedFiltering !== value) {\n            this._allowAdvancedFiltering = value;\n            this.filteringService.registerSVGIcons();\n\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Gets/Sets the filter mode.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [filterMode]=\"'quickFilter'\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @remarks\n     * By default it's set to FilterMode.quickFilter.\n     */\n    @Input()\n    get filterMode() {\n        return this._filterMode;\n    }\n\n    set filterMode(value) {\n        this._filterMode = value;\n\n        if (this.filteringService.isFilterRowVisible) {\n            this.filteringRow.close();\n        }\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Gets/Sets the summary position.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryPosition=\"top\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @remarks\n     * By default it is bottom.\n     */\n    @Input()\n    get summaryPosition() {\n        return this._summaryPosition;\n    }\n\n    set summaryPosition(value) {\n        this._summaryPosition = value;\n        this.notifyChanges();\n    }\n\n    /**\n     * Gets/Sets the summary calculation mode.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryCalculationMode=\"rootLevelOnly\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @remarks\n     * By default it is rootAndChildLevels which means the summaries are calculated for the root level and each child level.\n     */\n    @Input()\n    get summaryCalculationMode() {\n        return this._summaryCalculationMode;\n    }\n\n    set summaryCalculationMode(value) {\n        this._summaryCalculationMode = value;\n        if (!this._init) {\n            this.endEdit(true);\n            this.summaryService.resetSummaryHeight();\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Gets/Sets the filtering strategy of the grid.\n     * @example\n     * ```html\n     *  <igx-grid #grid [data]=\"localData\" [filterStrategy]=\"filterStrategy\"></igx-grid>\n     * ```\n     */\n    @Input()\n    get filterStrategy(): IFilteringStrategy {\n        return this._filteringStrategy;\n    }\n\n    set filterStrategy(classRef: IFilteringStrategy) {\n        this._filteringStrategy = classRef;\n    }\n\n    /**\n     * Gets/Sets the sorting strategy of the grid.\n     * @example\n     * ```html\n     *  <igx-grid #grid [data]=\"localData\" [sortStrategy]=\"sortStrategy\"></igx-grid>\n     * ```\n     */\n    @Input()\n    get sortStrategy(): IGridSortingStrategy {\n        return this._sortingStrategy;\n    }\n\n    set sortStrategy(value: IGridSortingStrategy) {\n        this._sortingStrategy = value;\n    }\n\n    /**\n     * Gets/Sets a unique values strategy used by the Excel Style Filtering\n     * @remarks\n     * Provides a callback for loading unique column values on demand.\n     * If this property is provided, the unique values it generates will be used by the Excel Style Filtering.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"localData\" [filterMode]=\"'excelStyleFilter'\" [uniqueColumnValuesStrategy]=\"columnValuesStrategy\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public uniqueColumnValuesStrategy: (column: IgxColumnComponent,\n                                        filteringExpressionsTree: IFilteringExpressionsTree,\n                                        done: (values: any[]) => void) => void;\n\n    /**\n     * Emitted when `IgxGridCellComponent` is clicked.\n     * @remarks\n     * Returns the `IgxGridCellComponent`.\n     * @example\n     * ```html\n     * <igx-grid #grid (onCellClick)=\"onCellClick($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onCellClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxGridCellComponent` is selected.\n     * @remarks\n     *  Returns the `IgxGridCellComponent`.\n     * @example\n     * ```html\n     * <igx-grid #grid (onSelection)=\"onCellSelect($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     *  Emitted when `IgxGridRowComponent` is selected.\n     * @example\n     * ```html\n     * <igx-grid #grid (onRowSelectionChange)=\"onCellClickChange($event)\" [data]=\"localData\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onRowSelectionChange = new EventEmitter<IRowSelectionEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is pinned.\n     * @remarks\n     * The index that the column is inserted at may be changed through the `insertAtIndex` property.\n     * @example\n     * ```typescript\n     * public columnPinning(event) {\n     *     if (event.column.field === \"Name\") {\n     *       event.insertAtIndex = 0;\n     *     }\n     * }\n     * ```\n     */\n    @Output()\n    public onColumnPinning = new EventEmitter<IPinColumnEventArgs>();\n\n    /**\n     * Emitted when editing and **not** submitting the value.\n     * @remarks\n     * (e.g. `Esc` key was pressed)\n     * This event is cancelable.\n     *@example\n     * ```html\n     * <igx-grid #grid3 (onCellEditCancel)=\"editCancel($event)\" [data]=\"data\" [primaryKey]=\"'ProductID'\">\n     * </igx-grid>\n     * ```\n     */\n    @Output()\n    public onCellEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * Emitted when cell enters edit mode.\n     * @remarks\n     * This event is cancelable.\n     *@example\n     * ```html\n     * <igx-grid #grid3 (onCellEditEnter)=\"editStart($event)\" [data]=\"data\" [primaryKey]=\"'ProductID'\">\n     * </igx-grid>\n     * ```\n     */\n    @Output()\n    public onCellEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * Emitted when cell has been edited.\n     * @remarks\n     * Event is fired after editing is completed, when the cell is exiting edit mode.\n     * This event is cancelable.\n     * @example\n     * ```html\n     * <igx-grid #grid3 (onCellEdit)=\"editDone($event)\" [data]=\"data\" [primaryKey]=\"'ProductID'\">\n     * </igx-grid>\n     * ```\n     */\n    @Output()\n    public onCellEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * Emitted when a row enters edit mode.\n     * @remarks\n     * Emitted when [rowEditable]=\"true\".\n     * This event is cancelable.\n     *@example\n     * ```html\n     * <igx-grid #grid3 (onRowEditEnter)=\"editStart($event)\" [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     * </igx-grid>\n     * ```\n     */\n    @Output()\n    public onRowEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * Emitted when exiting edit mode for a row.\n     * @remarks\n     * Emitted when [rowEditable]=\"true\" & `endEdit(true)` is called.\n     * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,\n     * performing paging operation, column resizing, pinning, moving or hitting  `Done`\n     * button inside of the rowEditingOverlay, or hitting the `Enter` key while editing a cell.\n     * This event is cancelable.\n     *@example\n     * ```html\n     * <igx-grid #grid3 (onRowEdit)=\"editDone($event)\" [data]=\"data\" [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     * </igx-grid>\n     * ```\n     */\n    @Output()\n    public onRowEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * Emitted when row editing is canceled.\n     * @remarks\n     * Emits when [rowEditable]=\"true\" & `endEdit(false)` is called.\n     * Emitted when changing hitting `Esc` key during cell editing and when click on the `Cancel` button\n     * in the row editing overlay.\n     * This event is cancelable.\n     *@example\n     * ```html\n     * <igx-grid #grid3 (onRowEditCancel)=\"editCancel($event)\" [data]=\"data\" [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     * </igx-grid>\n     * ```\n     */\n    @Output()\n    public onRowEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * Emitted when a column is initialized.\n     * @remarks\n     * Returns the column object.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [onColumnInit]=\"initColumns($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onColumnInit = new EventEmitter<IgxColumnComponent>();\n\n    /**\n     * Emitted when sorting is performed through the UI.\n     * @remarks\n     * Returns the sorting expression.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onSortingDone)=\"sortingDone($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onSortingDone = new EventEmitter<ISortingExpression | Array<ISortingExpression>>();\n\n    /**\n     * Emitted when filtering is performed through the UI.\n     * @remarks\n     * Returns the filtering expressions tree of the column for which filtering was performed.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onFilteringDone)=\"filteringDone($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onFilteringDone = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Emitted when paging is performed.\n     * @remarks\n     * Returns an object consisting of the previous and next pages.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onPagingDone)=\"pagingDone($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onPagingDone = new EventEmitter<IPageEventArgs>();\n\n    /**\n     * Emitted when a row added through the API.\n     * @remarks\n     * Returns the data for the new `IgxGridRowComponent` object.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowAdded)=\"rowAdded($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onRowAdded = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when a row is deleted through API.\n     * @remarks\n     * Returns an `IRowDataEventArgs` object.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowDeleted)=\"rowDeleted($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onRowDeleted = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when a new chunk of data is loaded from virtualization.\n     * @example\n     * ```typescript\n     *  <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onDataPreLoad)='handleDataPreloadEvent()'></igx-grid>\n     * ```\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * Emitted when column is resized.\n     * @remarks\n     * Returns the `IgxColumnComponent` object's old and new width.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onColumnResized)=\"resizing($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onColumnResized = new EventEmitter<IColumnResizeEventArgs>();\n\n    /**\n     * Emitted when a cell is right clicked.\n     * @remarks\n     * Returns the `IgxGridCellComponent` object.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onContextMenu)=\"contextMenu($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onContextMenu = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when a cell is double clicked.\n     * @remarks\n     * Returns the `IgxGridCellComponent` object.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onDoubleClick)=\"dblClick($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onDoubleClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when column visibility is changed.\n     * @remarks\n     * Args: { column: any, newValue: boolean }\n     * @example\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnVisibilityChanged)=\"visibilityChanged($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n\n    /**\n     * Emitted when column moving starts.\n     * @remarks\n     * Returns the moved `IgxColumnComponent` object.\n     * @example\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingStart)=\"movingStart($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onColumnMovingStart = new EventEmitter<IColumnMovingStartEventArgs>();\n\n    /**\n     * Emitted during the column moving operation.\n     * @remarks\n     * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.\n     * @example\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMoving)=\"moving($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onColumnMoving = new EventEmitter<IColumnMovingEventArgs>();\n\n    /**\n     * Emitted when column moving ends.\n     * @remarks\n     * Returns the source and target `IgxColumnComponent` objects.\n     * @example\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingEnd)=\"movingEnds($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onColumnMovingEnd = new EventEmitter<IColumnMovingEndEventArgs>();\n\n    /**\n     * Emitted when keydown is triggered over element inside grid's body.\n     * @remarks\n     * This event is fired only if the key combination is supported in the grid.\n     * Return the target type, target object and the original event. This event is cancelable.\n     * @example\n     * ```html\n     *  <igx-grid (onGridKeydown)=\"customKeydown($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onGridKeydown = new EventEmitter<IGridKeydownEventArgs>();\n\n    /**\n     * Emitted when start dragging a row.\n     * @remarks\n     * Return the dragged row.\n     */\n    @Output()\n    public onRowDragStart = new EventEmitter<IRowDragStartEventArgs>();\n\n    /**\n     * Emitted when dropping a row.\n     * @remarks\n     * Return the dropped row.\n     */\n    @Output()\n    public onRowDragEnd = new EventEmitter<IRowDragEndEventArgs>();\n\n    /**\n     * Emitted when a copy operation is executed.\n     * @remarks\n     * Fired only if copy behavior is enabled through the [`clipboardOptions`]{@link IgxGridBaseDirective#clipboardOptions}.\n     */\n    @Output()\n    onGridCopy = new EventEmitter<IGridClipboardEvent>();\n\n    /**\n     *@hidden @internal\n     */\n    @Output()\n    public expansionStatesChange = new EventEmitter<Map<any, boolean>>();\n\n    /**\n     * Emitted when the expanded state of a row gets changed.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"employeeData\" (onRowToggle)=\"rowToggle($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onRowToggle = new EventEmitter<IRowToggleEventArgs>();\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxGridColumnResizerComponent)\n    public resizeLine: IgxGridColumnResizerComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('loadingOverlay', { static: true })\n    public loadingOverlay: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('igxLoadingOverlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    public loadingOutlet: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: true })\n    public columnList: QueryList<IgxColumnComponent> = new QueryList<IgxColumnComponent>();\n\n    /**\n     *@hidden @internal\n     */\n    @ContentChild(IgxExcelStyleSortingTemplateDirective, { read: IgxExcelStyleSortingTemplateDirective })\n    public excelStyleSortingTemplateDirective: IgxExcelStyleSortingTemplateDirective;\n\n    /**\n     *@hidden @internal\n     */\n    @ContentChild(IgxExcelStyleMovingTemplateDirective, { read: IgxExcelStyleMovingTemplateDirective })\n    public excelStyleMovingTemplateDirective: IgxExcelStyleMovingTemplateDirective;\n\n    /**\n     *@hidden @internal\n     */\n    @ContentChild(IgxExcelStyleHidingTemplateDirective, { read: IgxExcelStyleHidingTemplateDirective })\n    public excelStyleHidingTemplateDirective: IgxExcelStyleHidingTemplateDirective;\n\n    /**\n     *@hidden @internal\n     */\n    @ContentChild(IgxExcelStylePinningTemplateDirective, { read: IgxExcelStylePinningTemplateDirective })\n    public excelStylePinningTemplateDirective: IgxExcelStylePinningTemplateDirective;\n\n    /**\n     *@hidden @internal\n     */\n    @ContentChild(IgxExcelStyleLoadingValuesTemplateDirective, { read: IgxExcelStyleLoadingValuesTemplateDirective, static: true })\n    public excelStyleLoadingValuesTemplateDirective: IgxExcelStyleLoadingValuesTemplateDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChildren(IgxGridHeaderGroupComponent, { read: IgxGridHeaderGroupComponent })\n    public headerGroups: QueryList<IgxGridHeaderGroupComponent>;\n\n    /**\n     * A list of all `IgxGridHeaderGroupComponent`.\n     * @example\n     * ```typescript\n     * const headerGroupsList = this.grid.headerGroupsList;\n     * ```\n     */\n    get headerGroupsList(): IgxGridHeaderGroupComponent[] {\n        return this.headerGroups ? flatten(this.headerGroups.toArray()) : [];\n    }\n\n    /**\n     * A list of all `IgxGridHeaderComponent`.\n     * @example\n     * ```typescript\n     * const headers = this.grid.headerCellList;\n     * ```\n     */\n    get headerCellList(): IgxGridHeaderComponent[] {\n        return this.headerGroupsList.map((headerGroup) => headerGroup.headerCell).filter((headerCell) => headerCell);\n    }\n\n    /**\n     * A list of all `IgxGridFilteringCellComponent`.\n     * @example\n     * ```typescript\n     * const filterCells = this.grid.filterCellList;\n     * ```\n     */\n    get filterCellList(): IgxGridFilteringCellComponent[] {\n        return this.headerGroupsList.map((headerGroup) => headerGroup.filterCell).filter((filterCell) => filterCell);\n    }\n\n    @ViewChildren('row')\n    private _rowList: QueryList<IgxGridRowComponent>;\n\n    @ViewChildren('summaryRow', { read: IgxSummaryRowComponent })\n    protected _summaryRowList: QueryList<IgxSummaryRowComponent>;\n\n    /**\n     * @hidden @internal\n    */\n    public get summariesRowList() {\n        const res = new QueryList<any>();\n        if (!this._summaryRowList) {\n            return res;\n        }\n        const sumList = this._summaryRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(sumList);\n        return res;\n    }\n\n    /**\n     * A list of `IgxGridRowComponent`.\n     * @example\n     * ```typescript\n     * const rowList = this.grid.rowList;\n     * ```\n     */\n    public get rowList() {\n        const res = new QueryList<any>();\n        if (!this._rowList) {\n            return res;\n        }\n        const rList = this._rowList\n            .filter((item) => {\n                return item.element.nativeElement.parentElement !== null;\n            })\n            .sort((a, b) => {\n                return a.index - b.index;\n            });\n        res.reset(rList);\n        return res;\n    }\n\n    @ViewChildren(IgxRowDirective, { read: IgxRowDirective })\n    private _dataRowList: QueryList<IgxRowDirective<IgxGridBaseDirective>>;\n\n    /**\n     * A list of currently rendered `IgxGridRowComponent`'s.\n     * @example\n     * ```typescript\n     * const dataList = this.grid.dataRowList;\n     * ```\n     */\n    public get dataRowList(): QueryList<IgxRowDirective<IgxGridBaseDirective>> {\n        const res = new QueryList<IgxRowDirective<IgxGridBaseDirective>>();\n        if (!this._dataRowList) {\n            return res;\n        }\n        const rList = this._dataRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        }).sort((a, b) => {\n            return a.index - b.index;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * A template reference for the template when the filtered grid is empty.\n     * @example\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n     */\n    @ViewChild('emptyFilteredGrid', { read: TemplateRef, static: true })\n    public emptyFilteredGridTemplate: TemplateRef<any>;\n\n    /**\n     * A template reference for the template when the grid is empty.\n     * @example\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n     */\n    @ViewChild('defaultEmptyGrid', { read: TemplateRef, static: true })\n    public emptyGridDefaultTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n    */\n    @ViewChild('defaultLoadingGrid', { read: TemplateRef, static: true })\n    public loadingGridDefaultTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('scrollContainer', { read: IgxGridForOfDirective, static: true })\n    public parentVirtDir: IgxGridForOfDirective<any>;\n\n    /**\n     * Returns the template which will be used by the toolbar to show custom content.\n     * @example\n     * ```typescript\n     * let customContentTemplate = this.grid.toolbarCustomContentTemplate;\n     * ```\n    */\n    public get toolbarCustomContentTemplate(): IgxGridToolbarCustomContentDirective {\n        return this.toolbarCustomContentTemplates.first;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxGridToolbarCustomContentDirective, { read: IgxGridToolbarCustomContentDirective, descendants: false })\n    public toolbarCustomContentTemplates: QueryList<IgxGridToolbarCustomContentDirective>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get headSelectorTemplate(): TemplateRef<IgxHeadSelectorDirective> {\n        if (this.headSelectorsTemplates && this.headSelectorsTemplates.first) {\n            return this.headSelectorsTemplates.first.templateRef;\n        }\n\n        return null;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxHeadSelectorDirective, { read: IgxHeadSelectorDirective, descendants: false })\n    public headSelectorsTemplates: QueryList<IgxHeadSelectorDirective>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get rowSelectorTemplate(): TemplateRef<IgxRowSelectorDirective> {\n        if (this.rowSelectorsTemplates && this.rowSelectorsTemplates.first) {\n            return this.rowSelectorsTemplates.first.templateRef;\n        }\n\n        return null;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxRowSelectorDirective, { read: IgxRowSelectorDirective, descendants: false })\n    public rowSelectorsTemplates: QueryList<IgxRowSelectorDirective>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxRowDragGhostDirective, { read: TemplateRef, descendants: false })\n    public dragGhostCustomTemplates: QueryList<TemplateRef<any>>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('verticalScrollContainer', { read: IgxGridForOfDirective, static: true })\n    public verticalScrollContainer: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('verticalScrollHolder', { read: IgxGridForOfDirective, static: true })\n    public verticalScroll: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('scr', { read: ElementRef, static: true })\n    public scr: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('footer', { read: ElementRef })\n    public footer: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('hContainer', { read: IgxGridForOfDirective, static: true })\n    public headerContainer: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('headerSelectorContainer')\n    public headerSelectorContainer: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('headerDragContainer')\n    public headerDragContainer: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('headerGroupContainer')\n    public headerGroupContainer: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('filteringRow', { read: IgxGridFilteringRowComponent })\n    public filteringRow: IgxGridFilteringRowComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('theadRow', { static: true })\n    public theadRow: ElementRef;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('tbody', { static: true })\n    public tbody: ElementRef;\n\n    /**\n     * @hidden @internal\n    */\n    @ViewChild('tfoot', { static: true })\n    public tfoot: ElementRef;\n\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('igxFilteringOverlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    protected _outletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden @internal\n     */\n    public get outletDirective() {\n        return this._outletDirective;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('igxRowEditingOverlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    public rowEditingOutletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden @internal\n    */\n    @ViewChildren(IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective })\n    public tmpOutlets: QueryList<any> = new QueryList<any>();\n\n\n    /**\n     * @hidden @internal\n    */\n    public get rowOutletDirective() {\n        return this.rowEditingOutletDirective;\n    }\n\n    /**\n     * @hidden @internal\n    */\n    public get parentRowOutletDirective() {\n        return this.outletDirective;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef, static: true })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n    */\n    @ViewChild('defaultRowEditTemplate', { read: TemplateRef, static: true })\n    private defaultRowEditTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n    */\n    @ContentChild(IgxRowEditTemplateDirective, { read: TemplateRef })\n    public rowEditCustom: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    public get rowEditContainer(): TemplateRef<any> {\n        return this.rowEditCustom ? this.rowEditCustom : this.defaultRowEditTemplate;\n    }\n    /**\n     * @hidden @internal\n     */\n    @ContentChild(IgxRowEditTextDirective, { read: TemplateRef })\n    public rowEditText: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ContentChild(IgxRowEditActionsDirective, { read: TemplateRef })\n    public rowEditActions: TemplateRef<any>;\n\n\n    /**\n    * The custom template, if any, that should be used when rendering a row expand indicator.\n    */\n   @ContentChild(IgxRowExpandedIndicatorDirective, { read: TemplateRef })\n   public rowExpandedIndicatorTemplate: TemplateRef<any> = null;\n\n   /**\n   * The custom template, if any, that should be used when rendering a row collapse indicator.\n   */\n   @ContentChild(IgxRowCollapsedIndicatorDirective, { read: TemplateRef })\n   public rowCollapsedIndicatorTemplate: TemplateRef<any> = null;\n\n    /**\n    * The custom template, if any, that should be used when rendering a header expand indicator.\n    */\n   @ContentChild(IgxHeaderExpandIndicatorDirective, { read: TemplateRef })\n   public headerExpandIndicatorTemplate: TemplateRef<any> = null;\n\n   /**\n   * The custom template, if any, that should be used when rendering a header collapse indicator.\n   */\n   @ContentChild(IgxHeaderCollapseIndicatorDirective, { read: TemplateRef })\n   public headerCollapseIndicatorTemplate: TemplateRef<any> = null;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxDragIndicatorIconDirective, { read: TemplateRef, descendants: false })\n    public dragIndicatorIconTemplates: QueryList<TemplateRef<any>>;\n\n    /**\n    * The custom template, if any, that should be used when rendering the row drag indicator icon\n    */\n    public get dragIndicatorIconTemplate(): TemplateRef<any> {\n        return this._customDragIndicatorIconTemplate || this.dragIndicatorIconTemplates.first;\n    }\n\n    public set dragIndicatorIconTemplate(val: TemplateRef<any>) {\n        this._customDragIndicatorIconTemplate = val;\n    }\n\n    /**\n     * @hidden @internal\n    */\n    public get rowInEditMode(): IgxRowDirective<IgxGridBaseDirective & GridType> {\n        const editRowState = this.crudService.row;\n        return editRowState !== null ? this.rowList.find(e => e.rowID === editRowState.id) : null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get firstEditableColumnIndex(): number {\n        const index = this.navigation.gridOrderedColumns.findIndex(e => e.editable);\n        return index !== -1 ? index : null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get lastEditableColumnIndex(): number {\n        const orderedColumns = this.navigation.gridOrderedColumns;\n        const index = orderedColumns.reverse().findIndex(e => e.editable);\n        return index !== -1 ? orderedColumns.length - 1 - index : null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsDEFAULT: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden @internal\n     */\n    @ContentChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsCUSTOM: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden @internal\n     * TODO: Nav service logic doesn't handle 0 results from this querylist\n     */\n    public get rowEditTabs(): QueryList<IgxRowEditTabStopDirective> {\n        return this.rowEditTabsCUSTOM.length ? this.rowEditTabsCUSTOM : this.rowEditTabsDEFAULT;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxToggleDirective)\n    public rowEditingOverlay: IgxToggleDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        return this.getComponentDensityClass('igx-grid');\n    }\n\n    get bannerClass(): string {\n        const position = this.rowEditPositioningStrategy.isTop ? 'igx-banner__border-top' : 'igx-banner__border-bottom';\n        return `${this.getComponentDensityClass('igx-banner')} ${position}`;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.role')\n    public hostRole = 'grid';\n\n    /**\n     * @hidden @internal\n     */\n    get pipeTrigger(): number {\n        return this._pipeTrigger;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get filteringPipeTrigger(): number {\n        return this._filteringPipeTrigger;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get summaryPipeTrigger(): number {\n        return this._summaryPipeTrigger;\n    }\n\n    /**\n     * Gets/Sets the sorting state.\n     * @remarks\n     * Supports two-way data binding.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(sortingExpressions)]=\"model.sortingExpressions\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    get sortingExpressions(): ISortingExpression[] {\n        return this._sortingExpressions;\n    }\n\n    set sortingExpressions(value: ISortingExpression[]) {\n        this._sortingExpressions = cloneArray(value);\n        this.sortingExpressionsChange.emit(this._sortingExpressions);\n        this.notifyChanges();\n    }\n\n    /**\n     * Emitted before sorting is performed.\n     * @remarks\n     * Returns the sorting expressions.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (sortingExpressionsChange)=\"sortingExprChange($event)\"></igx-grid>\n     * ```\n    */\n    @Output()\n    public sortingExpressionsChange = new EventEmitter<ISortingExpression[]>();\n\n    /**\n     * @hidden @internal\n     */\n    get maxLevelHeaderDepth() {\n        if (this._maxLevelHeaderDepth === null) {\n            this._maxLevelHeaderDepth = this.hasColumnLayouts ?\n                this.columnList.reduce((acc, col) => Math.max(acc, col.rowStart), 0) :\n                this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        }\n        return this._maxLevelHeaderDepth;\n    }\n\n    /**\n     * Gets the number of hidden columns.\n     * @example\n     * ```typescript\n     * const hiddenCol = this.grid.hiddenColumnsCount;\n     * ``\n     */\n    get hiddenColumnsCount() {\n        return this.columnList.filter((col) => col.columnGroup === false && col.hidden === true).length;\n    }\n\n    /**\n     * Gets/Sets the text to be displayed inside the toggle button.\n     * @remarks\n     * Used for the built-in column hiding UI of the`IgxColumnComponent`.\n     * @example\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" [hiddenColumnsText]=\"'Hidden Columns'\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    get hiddenColumnsText() {\n        return this._hiddenColumnsText;\n    }\n\n    set hiddenColumnsText(value) {\n        this._hiddenColumnsText = value;\n\n    }\n\n    /**\n     * Gets/Sets the text to be displayed inside the toggle button.\n     * @remarks\n     * Used for the built-in column pinning UI of the`IgxColumnComponent`.\n     * @example\n     * ```html\n     * <igx-grid [pinnedColumnsText]=\"'PinnedCols Text\" [data]=\"data\" [width]=\"'100%'\" [height]=\"'500px'\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    get pinnedColumnsText() {\n        return this._pinnedColumnsText;\n    }\n    set pinnedColumnsText(value) {\n        this._pinnedColumnsText = value;\n    }\n\n    /**\n     * Get transactions service for the grid.\n     */\n    get transactions(): TransactionService<Transaction, State> {\n        return this._transactions;\n    }\n\n    /**\n     * @hidden @internal\n    */\n    public columnsWithNoSetWidths = null;\n\n    /* Toolbar related definitions */\n    private _showToolbar = false;\n    private _exportExcel = false;\n    private _exportCsv = false;\n    private _toolbarTitle: string = null;\n    private _exportText: string = null;\n    private _exportExcelText: string = null;\n    private _exportCsvText: string = null;\n    private _rowEditable = false;\n    private _currentRowState: any;\n    private _filteredSortedData = null;\n    /**\n     * @hidden @internal\n    */\n    public get currentRowState(): any {\n        return this._currentRowState;\n    }\n\n    /**\n     * Provides access to the `IgxToolbarComponent`.\n     * @example\n     * ```typescript\n     * const gridToolbar = this.grid.toolbar;\n     * ```\n     */\n    @ViewChild('toolbar', { read: IgxGridToolbarComponent })\n    public toolbar: IgxGridToolbarComponent = null;\n\n    @ViewChild('toolbar', { read: ElementRef })\n    private toolbarHtml: ElementRef = null;\n\n    /**\n     * Gets/Sets whether the toolbar is shown.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" ></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    public get showToolbar(): boolean {\n        return this._showToolbar;\n    }\n    public set showToolbar(newValue: boolean) {\n        if (this._showToolbar !== newValue) {\n            this._showToolbar = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Gets/Sets the toolbar's title.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [toolbarTitle]=\"'My Grid'\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    public get toolbarTitle(): string {\n        return this._toolbarTitle;\n    }\n\n    public set toolbarTitle(newValue: string) {\n        if (this._toolbarTitle !== newValue) {\n            this._toolbarTitle = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Gets/Sets whether exporting to MS Excel is enabled or disabled.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    public get exportExcel(): boolean {\n        return this.getExportExcel();\n    }\n\n    public set exportExcel(newValue: boolean) {\n        if (this._exportExcel !== newValue) {\n            this._exportExcel = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Gets/Sets whether the option for exporting to CSV is enabled or disabled.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    public get exportCsv(): boolean {\n        return this.getExportCsv();\n    }\n    public set exportCsv(newValue: boolean) {\n        if (this._exportCsv !== newValue) {\n            this._exportCsv = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Gets/Sets the textual content for the main export button.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    public get exportText(): string {\n        return this._exportText;\n    }\n\n    public set exportText(newValue: string) {\n        if (this._exportText !== newValue) {\n            this._exportText = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Gets/Sets the textual content for the MS Excel export button.\n     * ```html\n     * <igx-grid [exportExcelText]=\"'My Excel Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    public get exportExcelText(): string {\n        return this._exportExcelText;\n    }\n    public set exportExcelText(newValue: string) {\n        if (this._exportExcelText !== newValue) {\n            this._exportExcelText = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Gets/Sets the textual content for the CSV export button.\n     * @example\n     * ```html\n     * <igx-grid [exportCsvText]=\"'My Csv Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n     */\n    @WatchChanges()\n    @Input()\n    public get exportCsvText(): string {\n        return this._exportCsvText;\n    }\n    public set exportCsvText(newValue: string) {\n        if (this._exportCsvText !== newValue) {\n            this._exportCsvText = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Controls the copy behavior of the grid.\n     */\n    @Input()\n    clipboardOptions = {\n        /**\n         * Enables/disables the copy behavior\n         */\n        enabled: true,\n        /**\n         * Include the columns headers in the clipboard output.\n         */\n        copyHeaders: true,\n        /**\n         * Apply the columns formatters (if any) on the data in the clipboard output.\n         */\n        copyFormatters: true,\n        /**\n         * The separator used for formatting the copy output. Defaults to `\\t`.\n         */\n        separator: '\\t'\n    };\n\n    /**\n     * Gets/Sets cell selection mode.\n     * @remarks\n     * By default the cell selection mode is multiple\n     * @param selectionMode: GridSelectionMode\n    */\n    @WatchChanges()\n    @Input()\n    get cellSelection() {\n        return this._cellSelectionMode;\n    }\n\n    set cellSelection(selectionMode:  GridSelectionMode) {\n        this._cellSelectionMode = selectionMode;\n        if (this.gridAPI.grid) {\n            this.selectionService.clear(true);\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * Gets/Sets row selection mode\n     * @remarks\n     * By default the row selection mode is none\n     * @param selectionMode: GridSelectionMode\n    */\n    @WatchChanges()\n    @Input()\n    get rowSelection() {\n        return this._rowSelectionMode;\n    }\n\n\n    set rowSelection(selectionMode:  GridSelectionMode) {\n        this._rowSelectionMode = selectionMode;\n        if (this.gridAPI.grid && this.columnList) {\n            this.selectionService.clearAllSelectedRows();\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public rowEditMessage;\n\n    /**\n     * Emitted when an export process is initiated by the user.\n     * @example\n     * ```typescript\n     * toolbarExporting(event: IGridToolbarExportEventArgs){\n     *     const toolbarExporting = event;\n     * }\n     * ```\n     */\n    @Output()\n    public onToolbarExporting = new EventEmitter<IGridToolbarExportEventArgs>();\n\n    /* End of toolbar related definitions */\n\n    /**\n     * Emitted when making a range selection.\n     * @remarks\n     * Range selection can be made either through drag selection or through keyboard selection.\n     */\n    @Output()\n    onRangeSelection = new EventEmitter<GridSelectionRange>();\n\n    /**\n     * @hidden @internal\n     */\n    public pagingState;\n    /**\n     * @hidden @internal\n     */\n    public calcWidth: number;\n    /**\n     * @hidden @internal\n     */\n    public calcHeight = 0;\n    /**\n     * @hidden @internal\n     */\n    public tfootHeight: number;\n    /**\n     * @hidden @internal\n     */\n    public chipsGoupingExpressions = [];\n    /**\n     * @hidden @internal\n     */\n    public summariesHeight: number;\n\n    /**\n     * @hidden @internal\n     */\n    public draggedColumn: IgxColumnComponent;\n\n\n    /**\n     * @hidden @internal\n     */\n    public disableTransitions = false;\n\n    /**\n     * @hidden @internal\n     */\n    public lastSearchInfo: ISearchInfo = {\n        searchText: '',\n        caseSensitive: false,\n        exactMatch: false,\n        activeMatchIndex: 0,\n        matchInfoCache: []\n    };\n\n    /**\n     * @hidden @internal\n     */\n    public columnWidthSetByUser = false;\n\n    data: any[];\n    filteredData: any[];\n\n    /**\n     * @hidden\n     */\n    protected destroy$ = new Subject<any>();\n\n    /**\n     * @hidden\n     */\n    protected _perPage = 15;\n    /**\n     * @hidden\n     */\n    protected _page = 0;\n    /**\n     * @hidden\n     */\n    protected _paging = false;\n    /**\n     * @hidden\n     */\n    protected _hideRowSelectors = false;\n    /**\n     * @hidden\n     */\n    protected _rowDrag = false;\n    /**\n     * @hidden\n     */\n    protected _pipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _filteringPipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _summaryPipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _columns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _pinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _unpinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _filteringExpressionsTree: IFilteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n    /**\n     * @hidden\n     */\n    protected _advancedFilteringExpressionsTree: IFilteringExpressionsTree;\n    /**\n     * @hidden\n     */\n    protected _sortingExpressions: Array<ISortingExpression> = [];\n    /**\n     * @hidden\n     */\n    protected _maxLevelHeaderDepth = null;\n    /**\n     * @hidden\n     */\n    protected _columnHiding = false;\n    /**\n     * @hidden\n     */\n    protected _columnPinning = false;\n\n\n    /**\n     * @hidden\n     */\n    protected _hasVisibleColumns;\n    protected _allowFiltering = false;\n    protected _allowAdvancedFiltering = false;\n    protected _filterMode = FilterMode.quickFilter;\n\n    protected observer: ResizeObserver = new ResizeObserver(() => {});\n\n    protected resizeNotify = new Subject();\n\n\n    private columnListDiffer;\n    private _hiddenColumnsText = '';\n    private _pinnedColumnsText = '';\n    private _height = '100%';\n    private _width = '100%';\n    private _rowHeight;\n    protected _baseFontSize: number;\n    private _horizontalForOfs: Array<IgxGridForOfDirective<any>> = [];\n    private _multiRowLayoutRowSize = 1;\n    protected _loadingId;\n    protected _expansionStates: Map<any, boolean> = new Map<any, boolean>();\n    protected _defaultExpandState = false;\n    // Caches\n    private _totalWidth = NaN;\n    private _pinnedVisible = [];\n    private _unpinnedVisible = [];\n    private _pinnedWidth = NaN;\n    private _unpinnedWidth = NaN;\n    private _visibleColumns = [];\n    private _columnGroups = false;\n    private _autoGeneratedCols = [];\n    protected _headerFeaturesWidth = NaN;\n\n    private _columnWidth: string;\n\n    protected _defaultTargetRecordNumber = 10;\n\n    private _summaryPosition = GridSummaryPosition.bottom;\n    private _summaryCalculationMode = GridSummaryCalculationMode.rootAndChildLevels;\n    private _cellSelectionMode = GridSelectionMode.multiple;\n    private _rowSelectionMode = GridSelectionMode.none;\n\n    private rowEditPositioningStrategy = new RowEditPositionStrategy({\n        horizontalDirection: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom,\n        closeAnimation: null\n    });\n\n    private rowEditSettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false,\n        outlet: this.rowOutletDirective,\n        positionStrategy: this.rowEditPositioningStrategy\n    };\n\n    private verticalScrollHandler = (event) => {\n        this.verticalScrollContainer.onScroll(event);\n        if (isEdge()) { this.wheelHandler(false); }\n        this.disableTransitions = true;\n\n        this.zone.run(() => {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.verticalScrollContainer.onChunkLoad.emit(this.verticalScrollContainer.state);\n            });\n\n            if (this.rowEditable) {\n                this.changeRowEditingOverlayStateOnScroll(this.rowInEditMode);\n            }\n        });\n        this.disableTransitions = false;\n\n        this.hideOverlays();\n    }\n\n    private horizontalScrollHandler = (event) => {\n        const scrollLeft = event.target.scrollLeft;\n        if (isEdge()) { this.wheelHandler(true); }\n        this.headerContainer.onHScroll(scrollLeft);\n        this._horizontalForOfs.forEach(vfor => vfor.onHScroll(scrollLeft));\n        this.cdr.markForCheck();\n\n        this.zone.run(() => {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.parentVirtDir.onChunkLoad.emit(this.headerContainer.state);\n            });\n        });\n\n        this.hideOverlays();\n    }\n\n    /**\n    * @hidden\n    * @internal\n    */\n    public isDetailRecord(rec) {\n        return false;\n    }\n\n    /**\n    * @hidden\n    * @internal\n    */\n    public isGroupByRecord(rec) {\n        return false;\n    }\n\n    /**\n    * @hidden\n    * @internal\n    */\n    public get hasDetails() {\n        return false;\n    }\n\n    /**\n     * Returns the state of the grid virtualization.\n     * @remarks\n     * Includes the start index and how many records are rendered.\n     * @example\n     * ```typescript\n     * const gridVirtState = this.grid1.virtualizationState;\n     * ```\n     */\n    get virtualizationState() {\n        return this.verticalScrollContainer.state;\n    }\n\n    /**\n     * @hidden\n     */\n    set virtualizationState(state) {\n        this.verticalScrollContainer.state = state;\n    }\n\n    /**\n    * @hidden\n    * @internal\n    */\n    public hideOverlays() {\n        this.overlayIDs.forEach(overlayID => {\n            this.overlayService.hide(overlayID);\n            this.overlayService.onClosed.pipe(\n                filter(o => o.id === overlayID),\n                takeUntil(this.destroy$)).subscribe(() => {\n                    this.nativeElement.focus();\n                });\n        });\n    }\n\n    private keydownHandler = (event) => {\n        const key = event.key.toLowerCase();\n        if ((isNavigationKey(key) && event.keyCode !== 32) || key === 'tab' || key === 'pagedown' || key === 'pageup') {\n            event.preventDefault();\n            if (key === 'pagedown') {\n                this.verticalScrollContainer.scrollNextPage();\n                this.nativeElement.focus();\n            } else if (key === 'pageup') {\n                this.verticalScrollContainer.scrollPrevPage();\n                this.nativeElement.focus();\n            }\n        }\n    }\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        public crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        protected gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n        @Inject(IgxGridTransaction) protected _transactions: TransactionService<Transaction, State>,\n        private elementRef: ElementRef,\n        private zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        public cdr: ChangeDetectorRef,\n        protected resolver: ComponentFactoryResolver,\n        protected differs: IterableDiffers,\n        protected viewRef: ViewContainerRef,\n        public navigation: IgxGridNavigationService,\n        public filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n            this.cdr.detach();\n    }\n\n    _setupServices() {\n        this.gridAPI.grid = this;\n        this.crudService.grid = this;\n        this.selectionService.grid = this;\n        this.navigation.grid = this;\n        this.filteringService.grid = this;\n        this.summaryService.grid = this;\n    }\n\n    _setupListeners() {\n        const destructor = takeUntil<any>(this.destroy$);\n\n        this.onRowAdded.pipe(destructor).subscribe(args => this.refreshGridState(args));\n        this.onRowDeleted.pipe(destructor).subscribe(args => {\n            this.summaryService.deleteOperation = true;\n            this.summaryService.clearSummaryCache(args);\n        });\n\n        this.transactions.onStateUpdate.pipe(destructor).subscribe(() => {\n            this.selectionService.clearHeaderCBState();\n            this.summaryService.clearSummaryCache();\n            this._pipeTrigger++;\n            this.notifyChanges();\n            if (this.transactions.getAggregatedChanges(false).length === 0) {\n                // Needs better check, calling 'transactions.clear()' will also trigger this\n                if (this.gridAPI.atInexistingPage()) {\n                    this.page--;\n                }\n            }\n        });\n\n        this.resizeNotify.pipe(destructor, filter(() => !this._init), throttleTime(100))\n            .subscribe(() => {\n                this.zone.run(() => {\n                    this.notifyChanges(true);\n                });\n            });\n\n        this.onPagingDone.pipe(destructor).subscribe(() => {\n            this.endEdit(true);\n            this.selectionService.clear(true);\n        });\n\n        this.onColumnMoving.pipe(destructor).subscribe(() => this.endEdit(true));\n        this.onColumnResized.pipe(destructor).subscribe(() => this.endEdit(true));\n\n        this.overlayService.onOpening.pipe(destructor).subscribe((event) => {\n            if (this._advancedFilteringOverlayId === event.id) {\n                const instance = event.componentRef.instance as IgxAdvancedFilteringDialogComponent;\n                if (instance) {\n                    instance.initialize(this, this.overlayService, event.id);\n                }\n            }\n        });\n\n        this.overlayService.onOpened.pipe(destructor).subscribe((event) => {\n            // do not hide the advanced filtering overlay on scroll\n            if (this._advancedFilteringOverlayId === event.id) {\n                const instance = event.componentRef.instance as IgxAdvancedFilteringDialogComponent;\n                if (instance) {\n                    instance.setAddButtonFocus();\n                }\n                return;\n            }\n\n            if (this.overlayService.getOverlayById(event.id).settings.outlet === this.outletDirective &&\n                this.overlayIDs.indexOf(event.id) < 0) {\n                this.overlayIDs.push(event.id);\n            }\n        });\n\n        this.overlayService.onClosed.pipe(destructor, filter(() => !this._init)).subscribe((event) => {\n            if (this._advancedFilteringOverlayId === event.id) {\n                this._advancedFilteringOverlayId = null;\n                return;\n            }\n\n            const ind = this.overlayIDs.indexOf(event.id);\n            if (ind !== -1) {\n                this.overlayIDs.splice(ind, 1);\n            }\n        });\n\n        this.verticalScrollContainer.onDataChanging.pipe(destructor, filter(() => !this._init)).subscribe(($event) => {\n            const shouldRecalcSize = this.isPercentHeight &&\n             ( !this.calcHeight || this.calcHeight === this.getDataBasedBodyHeight() ||\n              this.calcHeight === this.renderedRowHeight * this._defaultTargetRecordNumber);\n            if (shouldRecalcSize) {\n                this.calculateGridHeight();\n                $event.containerSize = this.calcHeight;\n            }\n            this.evaluateLoadingState();\n        });\n\n        this.verticalScrollContainer.onScrollbarVisibilityChanged.pipe(destructor, filter(() => !this._init)).subscribe(() => {\n            // called to recalc all widths that may have changes as a result of\n            // the vert. scrollbar showing/hiding\n            this.notifyChanges(true);\n        });\n\n        this.verticalScrollContainer.onContentSizeChange.pipe(destructor, filter(() => !this._init)).subscribe(($event) => {\n            this.calculateGridSizes(false);\n        });\n\n        this.onDensityChanged.pipe(destructor).subscribe(() => {\n            this._headerFeaturesWidth = NaN;\n            this.summaryService.summaryHeight = 0;\n            this.endEdit(true);\n            this.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n        this._setupServices();\n        this._setupListeners();\n        this.columnListDiffer = this.differs.find([]).create(null);\n        this.calcWidth = this.width && this.width.indexOf('%') === -1 ? parseInt(this.width, 10) : 0;\n        this.shouldGenerate = this.autoGenerate;\n        this._scrollWidth = this.getScrollWidth();\n    }\n\n    protected setupColumns() {\n        if (this.autoGenerate) {\n            this.autogenerateColumns();\n        }\n\n        this.initColumns(this.columnList, (col: IgxColumnComponent) => this.onColumnInit.emit(col));\n        this.columnListDiffer.diff(this.columnList);\n\n        this.columnList.changes\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((change: QueryList<IgxColumnComponent>) => { this.onColumnsChanged(change); });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetColumnsCaches() {\n        this.columnList.forEach(column => column.resetCaches());\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetForOfCache() {\n        const firstVirtRow = this.dataRowList.first;\n        if (firstVirtRow) {\n            if (this._cdrRequests) {\n                firstVirtRow.virtDirRow.cdr.detectChanges();\n            }\n            firstVirtRow.virtDirRow.assumeMaster();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetColumnCollections() {\n        this._visibleColumns.length = 0;\n        this._pinnedVisible.length = 0;\n        this._unpinnedVisible.length = 0;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCachedWidths() {\n        this._unpinnedWidth = NaN;\n        this._pinnedWidth = NaN;\n        this._totalWidth = NaN;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCaches(recalcFeatureWidth = true) {\n        if (recalcFeatureWidth) {\n            this._headerFeaturesWidth = NaN;\n        }\n        this.resetForOfCache();\n        this.resetColumnsCaches();\n        this.resetColumnCollections();\n        this.resetCachedWidths();\n        this.hasVisibleColumns = undefined;\n        this._columnGroups = this.columnList.some(col => col.columnGroup);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        this.setupColumns();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public _setupRowObservers() {\n        const elementFilter = (item: IgxRowDirective<any> | IgxSummaryRowComponent) => this.isDefined(item.nativeElement.parentElement);\n        const extractForOfs = pipe(map((collection: any[]) => collection.filter(elementFilter).map(item => item.virtDirRow)));\n        const rowListObserver = extractForOfs(this._dataRowList.changes);\n        const summaryRowObserver = extractForOfs(this._summaryRowList.changes);\n        const resetHorizontalForOfs = () => {\n            this._horizontalForOfs = [\n                ...this._dataRowList.filter(elementFilter).map(item => item.virtDirRow),\n                ...this._summaryRowList.filter(elementFilter).map(item => item.virtDirRow)\n            ];\n        };\n        rowListObserver.pipe(takeUntil(this.destroy$)).subscribe(resetHorizontalForOfs);\n        summaryRowObserver.pipe(takeUntil(this.destroy$)).subscribe(resetHorizontalForOfs);\n        resetHorizontalForOfs();\n    }\n\n    /**\n     * @hidden @internal\n    */\n    public _zoneBegoneListeners() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.addEventListener('keydown', this.keydownHandler);\n            this.verticalScrollContainer.getScroll().addEventListener('scroll', this.verticalScrollHandler);\n            this.headerContainer.getScroll().addEventListener('scroll', this.horizontalScrollHandler);\n\n            this.observer = new ResizeObserver(() => this.resizeNotify.next());\n            this.observer.observe(this.nativeElement);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this.initPinning();\n        this.calculateGridSizes();\n        this._init = false;\n        this.cdr.reattach();\n        this._setupRowObservers();\n        this._zoneBegoneListeners();\n\n        const vertScrDC = this.verticalScrollContainer.displayContainer;\n        vertScrDC.addEventListener('scroll', this.scrollHandler);\n        vertScrDC.addEventListener('wheel', () => this.wheelHandler());\n\n    }\n\n    /**\n     * @hidden @internal\n    */\n    public notifyChanges(repaint = false) {\n        this._cdrRequests = true;\n        this._cdrRequestRepaint = repaint;\n        this.cdr.markForCheck();\n    }\n\n    protected resetNotifyChanges() {\n        this._cdrRequestRepaint = false;\n        this._cdrRequests = false;\n    }\n\n    /**\n     * @hidden @internal\n    */\n    public ngDoCheck() {\n        super.ngDoCheck();\n        if (this._init) {\n            return;\n        }\n\n        if (this._cdrRequestRepaint) {\n            this.resetNotifyChanges();\n            this.calculateGridSizes();\n            this.refreshSearch(true);\n            return;\n        }\n\n        if (this._cdrRequests) {\n            this.resetNotifyChanges();\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n    */\n    public getDragGhostCustomTemplate() {\n        if (this.dragGhostCustomTemplates && this.dragGhostCustomTemplates.first) {\n            return this.dragGhostCustomTemplates.first;\n        }\n\n        return null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.tmpOutlets.forEach((tmplOutlet) => {\n            tmplOutlet.cleanCache();\n        });\n\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this._destroyed = true;\n\n        if (this._advancedFilteringOverlayId) {\n            this.overlayService.hide(this._advancedFilteringOverlayId);\n        }\n\n        this.zone.runOutsideAngular(() => {\n            this.observer.disconnect();\n            this.nativeElement.removeEventListener('keydown', this.keydownHandler);\n            this.verticalScrollContainer.getScroll().removeEventListener('scroll', this.verticalScrollHandler);\n            this.headerContainer.getScroll().removeEventListener('scroll', this.horizontalScrollHandler);\n            const vertScrDC = this.verticalScrollContainer.displayContainer;\n            vertScrDC.removeEventListener('scroll', this.scrollHandler);\n            vertScrDC.removeEventListener('wheel', () => this.wheelHandler());\n        });\n    }\n\n    /**\n     * @hidden @internal\n    */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /**\n     * Toggles the specified column's visibility.\n     * @example\n     * ```typescript\n     * this.grid1.toggleColumnVisibility({\n     *       column: this.grid1.columns[0],\n     *       newValue: true\n     * });\n     * ```\n     */\n    public toggleColumnVisibility(args: IColumnVisibilityChangedEventArgs) {\n        const col = args.column ? this.columnList.find((c) => c === args.column) : undefined;\n\n        if (!col) {\n            return;\n        }\n\n        col.hidden = args.newValue;\n        this.onColumnVisibilityChanged.emit(args);\n    }\n\n    /**\n     * Gets/Sets a list of key-value pairs [row ID, expansion state].\n     * @remarks\n     * Includes only states that differ from the default one.\n     * Supports two-way binding.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"data\" [(expansionStates)]=\"model.expansionStates\">\n     * </igx-grid>\n     * ```\n     */\n    @Input()\n    public get expansionStates() {\n        return this._expansionStates;\n    }\n\n    public set expansionStates(value) {\n        this._expansionStates = new Map<any, boolean>(value);\n        this.expansionStatesChange.emit(this._expansionStates);\n        if (this.gridAPI.grid) {\n            this.cdr.detectChanges();\n        }\n    }\n\n   /**\n     * Expands all rows.\n     * @example\n     * ```typescript\n     * this.grid.expandAll();\n     * ```\n    */\n    public expandAll() {\n        this._defaultExpandState = true;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n   /**\n     * Collapses all rows.\n     * @example\n     * ```typescript\n     * this.grid.collapseAll();\n     * ```\n    */\n    public collapseAll() {\n        this._defaultExpandState = false;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Expands the row by its id.\n     * @remarks\n     * ID is either the primaryKey value or the data record instance.\n     * @example\n     * ```typescript\n     * this.grid.expandRow(rowID);\n     * ```\n     * @param rowID The row id - primaryKey value or the data record instance.\n     */\n    public expandRow(rowID: any) {\n        this.gridAPI.set_row_expansion_state(rowID, true);\n    }\n\n    /**\n     * Collapses the row by its id.\n     * @remarks\n     * ID is either the primaryKey value or the data record instance.\n     * @example\n     * ```typescript\n     * this.grid.collapseRow(rowID);\n     * ```\n     * @param rowID The row id - primaryKey value or the data record instance.\n    */\n    public collapseRow(rowID: any) {\n        this.gridAPI.set_row_expansion_state(rowID, false);\n    }\n\n\n    /**\n     * Toggles the row by its id.\n     * @remarks\n     * ID is either the primaryKey value or the data record instance.\n     * @example\n     * ```typescript\n     * this.grid.toggleRow(rowID);\n     * ```\n     * @param rowID The row id - primaryKey value or the data record instance.\n    */\n    public toggleRow(rowID: any) {\n        const rec = this.gridAPI.get_rec_by_id(rowID);\n        const state = this.gridAPI.get_row_expansion_state(rec);\n        this.gridAPI.set_row_expansion_state(rowID, !state);\n    }\n\n    /**\n     * @hidden\n     * @internal\n    */\n    public getDefaultExpandState(rec: any) {\n        return this._defaultExpandState;\n    }\n\n    /**\n     * Gets the native element.\n     * @example\n     * ```typescript\n     * const nativeEl = this.grid.nativeElement.\n     * ```\n     */\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected get outlet() {\n        return this.outletDirective;\n    }\n\n    /**\n     * Gets the default row height.\n     * @example\n     * ```typescript\n     * const rowHeigh = this.grid.defaultRowHeight;\n     * ```\n     */\n    get defaultRowHeight(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 40;\n            case DisplayDensity.compact:\n                return 32;\n            default:\n                return 50;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get defaultSummaryHeight(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 30;\n            case DisplayDensity.compact:\n                return 24;\n            default:\n                return 36;\n        }\n    }\n\n    /**\n     * Returns the `IgxGridHeaderGroupComponent`'s minimum allowed width.\n     * @remarks\n     * Used internally for restricting header group component width.\n     * The values below depend on the header cell default right/left padding values.\n     */\n    get defaultHeaderGroupMinWidth(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 32;\n            case DisplayDensity.compact:\n                return 24;\n            default:\n                return 48;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public paginatorClassName(): string {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 'igx-paginator--cosy';\n            case DisplayDensity.compact:\n                return 'igx-paginator--compact';\n            default:\n                return 'igx-paginator';\n        }\n    }\n\n    /**\n     * Gets the current width of the container for the pinned `IgxColumnComponent`s.\n     * @example\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth;\n     * ```\n     */\n    get pinnedWidth() {\n        if (!isNaN(this._pinnedWidth)) { return this._pinnedWidth; }\n        this._pinnedWidth = this.getPinnedWidth();\n        return this._pinnedWidth;\n    }\n\n    /**\n     * Gets the current width of the container for the unpinned `IgxColumnComponent`s.\n     * @example\n     * ```typescript\n     * const unpinnedWidth = this.grid.getUnpinnedWidth;\n     * ```\n     */\n    get unpinnedWidth() {\n        if (!isNaN(this._unpinnedWidth)) { return this._unpinnedWidth; }\n        this._unpinnedWidth = this.getUnpinnedWidth();\n        return this._unpinnedWidth;\n    }\n\n    /**\n     * @hidden @internal\n    */\n    get isHorizontalScrollHidden() {\n        const diff = this.unpinnedWidth - this.totalWidth;\n        return this.width === null || diff >= 0;\n    }\n\n    /**\n     * @hidden @internal\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     */\n    public featureColumnsWidth(expander?: ElementRef) {\n        if (Number.isNaN(this._headerFeaturesWidth)) {\n            const rowSelectArea = this.headerSelectorContainer ?\n                this.headerSelectorContainer.nativeElement.getBoundingClientRect().width : 0;\n            const rowDragArea = this.rowDraggable && this.headerDragContainer ?\n                this.headerDragContainer.nativeElement.getBoundingClientRect().width : 0;\n            const groupableArea = this.headerGroupContainer ?\n                this.headerGroupContainer.nativeElement.getBoundingClientRect().width : 0;\n            const expanderWidth = expander ? expander.nativeElement.getBoundingClientRect().width : 0;\n            this._headerFeaturesWidth = rowSelectArea + rowDragArea + groupableArea + expanderWidth;\n        }\n        return this._headerFeaturesWidth;\n    }\n\n    /**\n     * @hidden @internal\n    */\n    get summariesMargin() {\n        return this.featureColumnsWidth();\n    }\n\n    /**\n     * Gets an array of `IgxColumnComponent`s.\n     * @example\n     * ```typescript\n     * const colums = this.grid.columns.\n     * ```\n     */\n    get columns(): IgxColumnComponent[] {\n        return this._columns;\n    }\n\n    /**\n     * Gets an array of the pinned `IgxColumnComponent`s.\n     * @example\n     * ```typescript\n     * const pinnedColumns = this.grid.pinnedColumns.\n     * ```\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        if (this._pinnedVisible.length) {\n            return this._pinnedVisible;\n        }\n        this._pinnedVisible = this._pinnedColumns.filter(col => !col.hidden);\n        return this._pinnedVisible;\n    }\n\n    /**\n     * Gets an array of unpinned `IgxColumnComponent`s.\n     * @example\n     * ```typescript\n     * const unpinnedColumns = this.grid.unpinnedColumns.\n     * ```\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        if (this._unpinnedVisible.length) {\n            return this._unpinnedVisible;\n        }\n        this._unpinnedVisible = this._unpinnedColumns.filter((col) => !col.hidden);\n        return this._unpinnedVisible;\n    }\n\n    /**\n     * Gets the `width` to be set on `IgxGridHeaderGroupComponent`.\n     */\n    public getHeaderGroupWidth(column: IgxColumnComponent): string {\n        if (this.hasColumnLayouts) {\n            return '';\n        }\n        const colWidth = column.width;\n        const minWidth = this.defaultHeaderGroupMinWidth;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (!isPercentageWidth && parseInt(colWidth, 10) < minWidth) {\n            return minWidth + 'px';\n        }\n\n        return colWidth;\n    }\n\n    /**\n     * Returns the `IgxColumnComponent` by field name.\n     * @example\n     * ```typescript\n     * const myCol = this.grid1.getColumnByName(\"ID\");\n     * ```\n     * @param name\n    */\n    public getColumnByName(name: string): IgxColumnComponent {\n        return this.columnList.find((col) => col.field === name);\n    }\n\n    /**\n     * Returns the `IgxRowDirective` by index.\n     * @example\n     * ```typescript\n     * const myRow = this.grid1.getRowByIndex(1);\n     * ```\n     * @param index\n    */\n    public getRowByIndex(index: number): IgxRowDirective<IgxGridBaseDirective & GridType> {\n        return this.gridAPI.get_row_by_index(index);\n    }\n\n    /**\n     * Returns `IgxGridRowComponent` object by the specified primary key .\n     * @remarks\n     * Requires that the `primaryKey` property is set.\n     * @example\n     * ```typescript\n     * const myRow = this.grid1.getRowByKey(\"cell5\");\n     * ```\n     * @param keyValue\n    */\n    public getRowByKey(keyValue: any): IgxRowDirective<IgxGridBaseDirective & GridType> {\n        return this.gridAPI.get_row_by_key(keyValue);\n    }\n\n    /**\n     * Returns an array of visible `IgxColumnComponent`s.\n     * @example\n     * ```typescript\n     * const visibleColumns = this.grid.visibleColumns.\n     * ```\n     */\n    get visibleColumns(): IgxColumnComponent[] {\n        if (this._visibleColumns.length) {\n            return this._visibleColumns;\n        }\n        this._visibleColumns = this.columnList.filter(c => !c.hidden);\n        return this._visibleColumns;\n    }\n\n    /**\n     * Returns the `IgxGridCellComponent` that matches the conditions.\n     * @example\n     * ```typescript\n     * const myCell = this.grid1.getCellByColumn(2,\"UnitPrice\");\n     * ```\n     * @param rowIndex\n     * @param columnField\n    */\n    public getCellByColumn(rowIndex: number, columnField: string): IgxGridCellComponent {\n        const columnId = this.columnList.map((column) => column.field).indexOf(columnField);\n        if (columnId !== -1) {\n            return this.gridAPI.get_cell_by_index(rowIndex, columnId);\n        }\n    }\n\n    /**\n     * Returns an `IgxGridCellComponent` object by the specified primary key and column field.\n     * @remarks\n     * Requires that the primaryKey property is set.\n     * @example\n     * ```typescript\n     * grid.getCellByKey(1, 'index');\n     * ```\n     * @param rowSelector match any rowID\n     * @param columnField\n    */\n    public getCellByKey(rowSelector: any, columnField: string): IgxGridCellComponent {\n        return this.gridAPI.get_cell_by_key(rowSelector, columnField);\n    }\n\n    /**\n     * Gets the total number of pages.\n     * @example\n     * ```typescript\n     * const totalPages = this.grid.totalPages;\n     * ```\n     */\n    get totalPages(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countPages;\n        }\n        return -1;\n    }\n\n    /**\n     * Gets if the current page is the first page.\n     * @example\n     * ```typescript\n     * const firstPage = this.grid.isFirstPage;\n     * ```\n     */\n    get isFirstPage(): boolean {\n        return this.page === 0;\n    }\n\n    /**\n     * Goes to the next page, if the grid is not already at the last page.\n     * @example\n     * ```typescript\n     * this.grid1.nextPage();\n     * ```\n     */\n    public nextPage(): void {\n        if (!this.isLastPage) {\n            this.page += 1;\n        }\n    }\n\n    /**\n     * Goes to the previous page, if the grid is not already at the first page.\n     * @example\n     * ```typescript\n     * this.grid1.previousPage();\n     * ```\n     */\n    public previousPage(): void {\n        if (!this.isFirstPage) {\n            this.page -= 1;\n        }\n    }\n\n    /**\n     * Returns the total number of records.\n     * @remarks\n     * Only functions when paging is enabled.\n     * @example\n     * ```typescript\n     * const totalRecords = this.grid.totalRecords;\n     * ```\n     */\n    get totalRecords(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countRecords;\n        }\n    }\n\n    /**\n     * Returns if the current page is the last page.\n     * @example\n     * ```typescript\n     * const lastPage = this.grid.isLastPage;\n     * ```\n     */\n    get isLastPage(): boolean {\n        return this.page + 1 >= this.totalPages;\n    }\n\n    /**\n     * Returns the total width of the `IgxGridComponent`.\n     * @example\n     * ```typescript\n     * const gridWidth = this.grid.totalWidth;\n     * ```\n     */\n    get totalWidth(): number {\n        if (!isNaN(this._totalWidth)) { return this._totalWidth; }\n        // Take only top level columns\n        const cols = this.visibleColumns.filter(col => col.level === 0 && !col.pinned);\n        let totalWidth = 0;\n        let i = 0;\n        for (i; i < cols.length; i++) {\n            totalWidth += parseInt(cols[i].calcWidth, 10) || 0;\n        }\n        this._totalWidth = totalWidth;\n        return totalWidth;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get showRowSelectors(): boolean {\n        return this.isRowSelectable  && this.hasVisibleColumns && !this.hideRowSelectors;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get showDragIcons(): boolean {\n        return this.rowDraggable && this.columns.length > this.hiddenColumnsCount;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _moveColumns(from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const list = this.columnList.toArray();\n        const fromIndex = list.indexOf(from);\n        let toIndex = list.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n            if (toIndex < 0) {\n                toIndex = 0;\n            }\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        list.splice(toIndex, 0, ...list.splice(fromIndex, 1));\n        const newList = this._resetColumnList(list);\n        this.columnList.reset(newList);\n        this.columnList.notifyOnChanges();\n        this._columns = this.columnList.toArray();\n    }\n\n    /**\n     * @hidden\n     */\n    protected _resetColumnList(list?) {\n        if (!list) {\n            list = this.columnList.toArray();\n        }\n        let newList = [];\n        list.filter(c => c.level === 0).forEach(p => {\n            newList.push(p);\n            if (p.columnGroup) {\n                newList = newList.concat(p.allChildren);\n            }\n        });\n        return newList;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _reorderColumns(from: IgxColumnComponent, to: IgxColumnComponent, position: DropPosition, columnCollection: any[]) {\n        let dropIndex = columnCollection.indexOf(to);\n\n        if (to.columnGroup) {\n            dropIndex += to.allChildren.length;\n        }\n\n        if (position === DropPosition.BeforeDropTarget) {\n            dropIndex--;\n        }\n\n        if (position === DropPosition.AfterDropTarget) {\n            dropIndex++;\n        }\n\n        columnCollection.splice(dropIndex, 0, ...columnCollection.splice(columnCollection.indexOf(from), 1));\n    }\n    /**\n     * @hidden\n     */\n    protected _moveChildColumns(parent: IgxColumnComponent, from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const buffer = parent.children.toArray();\n        const fromIndex = buffer.indexOf(from);\n        let toIndex = buffer.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        buffer.splice(toIndex, 0, ...buffer.splice(fromIndex, 1));\n        parent.children.reset(buffer);\n    }\n    /**\n     * Moves a column to the specified drop target.\n     * @example\n     * ```typescript\n     * grid.moveColumn(compName, persDetails);\n     * ```\n\t  */\n    public moveColumn(column: IgxColumnComponent, dropTarget: IgxColumnComponent, pos: DropPosition = DropPosition.None) {\n\n        let position = pos;\n        const fromIndex = column.visibleIndex;\n        const toIndex = dropTarget.visibleIndex;\n\n        if (pos === DropPosition.BeforeDropTarget && fromIndex < toIndex) {\n            position = DropPosition.BeforeDropTarget;\n        } else if (pos === DropPosition.AfterDropTarget && fromIndex > toIndex) {\n            position = DropPosition.AfterDropTarget;\n        } else {\n            position = DropPosition.None;\n        }\n\n\n        if ((column.level !== dropTarget.level) ||\n            (column.topLevelParent !== dropTarget.topLevelParent)) {\n            return;\n        }\n\n        this.endEdit(true);\n        if (column.level) {\n            this._moveChildColumns(column.parent, column, dropTarget, position);\n        }\n\n        if (dropTarget.pinned && column.pinned) {\n            this._reorderColumns(column, dropTarget, position, this._pinnedColumns);\n        }\n\n        if (dropTarget.pinned && !column.pinned) {\n            column.pin();\n            this._reorderColumns(column, dropTarget, position, this._pinnedColumns);\n\n        }\n\n        if (!dropTarget.pinned && column.pinned) {\n            column.unpin();\n            let list = [];\n\n            if (this.pinnedColumns.indexOf(column) === -1 && this.pinnedColumns.indexOf(dropTarget) === -1) {\n                list = this._unpinnedColumns;\n            } else {\n                list = this._pinnedColumns;\n            }\n\n            const fi = list.indexOf(column);\n            const ti = list.indexOf(dropTarget);\n\n            if (pos === DropPosition.BeforeDropTarget && fi < ti) {\n                position = DropPosition.BeforeDropTarget;\n            } else if (pos === DropPosition.AfterDropTarget && fi > ti) {\n                position = DropPosition.AfterDropTarget;\n            } else {\n                position = DropPosition.None;\n            }\n        }\n\n        if (!dropTarget.pinned) {\n            this._reorderColumns(column, dropTarget, position, this._unpinnedColumns);\n        }\n\n        this._moveColumns(column, dropTarget, position);\n        this.notifyChanges();\n        if (this.hasColumnLayouts) {\n            this.columns.filter(x => x.columnLayout).forEach(x => x.populateVisibleIndexes());\n        }\n\n        const args = {\n            source: column,\n            target: dropTarget\n        };\n\n        this.onColumnMovingEnd.emit(args);\n    }\n\n    /**\n     * Goes to the desired page index.\n     * @example\n     * ```typescript\n     * this.grid1.paginate(1);\n     * ```\n     * @param val\n    */\n    public paginate(val: number): void {\n        if (val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n\n        this.page = val;\n    }\n\n    /**\n     * Manually marks the `IgxGridComponent` for change detection.\n     * @example\n     * ```typescript\n     * this.grid1.markForCheck();\n     * ```\n     */\n    public markForCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Creates a new `IgxGridRowComponent` and adds the data record to the end of the data source.\n     * @example\n     * ```typescript\n     * this.grid1.addRow(record);\n     * ```\n     * @param data\n    */\n    public addRow(data: any): void {\n        // commit pending states prior to adding a row\n        this.endEdit(true);\n        this.gridAPI.addRowToData(data);\n\n        this.onRowAdded.emit({ data });\n        this._pipeTrigger++;\n        this.notifyChanges();\n    }\n\n    /**\n     * Removes the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * @remarks\n     * Requires that the `primaryKey` property is set.\n     * The method accept rowSelector as a parameter, which is the rowID.\n     * @example\n     * ```typescript\n     * this.grid1.deleteRow(0);\n     * ```\n     * @param rowSelector\n    */\n    public deleteRow(rowSelector: any): void {\n        if (this.primaryKey !== undefined && this.primaryKey !== null) {\n            this.deleteRowById(rowSelector);\n        }\n    }\n\n    /** @hidden */\n    public deleteRowById(rowId: any) {\n        this.gridAPI.deleteRowById(rowId);\n    }\n\n    /**\n     * @hidden\n     */\n    protected deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        if (index !== -1) {\n            if (this.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                this.transactions.add(transaction, this.data[index]);\n            } else {\n                this.data.splice(index, 1);\n            }\n        } else {\n            const state: State = this.transactions.getState(rowID);\n            this.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * @remarks\n     * Requires that the `primaryKey` property is set.\n     * @example\n     * ```typescript\n     * this.gridWithPK.updateCell('Updated', 1, 'ProductName');\n     * ```\n     * @param value the new value which is to be set.\n     * @param rowSelector corresponds to rowID.\n     * @param column corresponds to column field.\n    */\n    public updateCell(value: any, rowSelector: any, column: string): void {\n        if (this.isDefined(this.primaryKey)) {\n            const col = this.columnList.toArray().find(c => c.field === column);\n            if (col) {\n                // Simplify\n                const rowData = this.gridAPI.getRowData(rowSelector);\n                const index = this.gridAPI.get_row_index_in_data(rowSelector);\n                // If row passed is invalid\n                if (index < 0) {\n                    return;\n                }\n                const id = {\n                    rowID: rowSelector,\n                    columnID: col.index,\n                    rowIndex: index\n                };\n\n                const cell = new IgxCell(id, index, col, rowData[col.field], rowData[col.field], rowData);\n                const args = this.gridAPI.update_cell(cell, value);\n\n                if (this.crudService.cell && this.crudService.sameCell(cell)) {\n                    if (args.cancel) {\n                        return;\n                    }\n                    this.gridAPI.escape_editMode();\n                }\n                this.cdr.detectChanges();\n            }\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent`\n     * @remarks\n     * The row is specified by\n     * rowSelector parameter and the data source record with the passed value.\n     * This method will apply requested update only if primary key is specified in the grid.\n     * @example\n     * ```typescript\n     * grid.updateRow({\n     *       ProductID: 1, ProductName: 'Spearmint', InStock: true, UnitsInStock: 1, OrderDate: new Date('2005-03-21')\n     *   }, 1);\n     * ```\n     * @param value\n     * @param rowSelector correspond to rowID\n    */\n    public updateRow(value: any, rowSelector: any): void {\n        if (this.isDefined(this.primaryKey)) {\n            const editableCell = this.crudService.cell;\n            if (editableCell && editableCell.id.rowID === rowSelector) {\n                this.gridAPI.escape_editMode();\n            }\n            const row = new IgxRow(rowSelector, -1, this.gridAPI.getRowData(rowSelector));\n            this.gridAPI.update_row(row, value);\n\n            // TODO: fix for #5934 and probably break for #5763\n            // consider adding of third optional boolean parameter in updateRow.\n            // If developer set this parameter to true we should call notifyChanges(true), and\n            // vise-versa if developer set it to false we should call notifyChanges(false).\n            // The parameter should default to false\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * Sort a single `IgxColumnComponent`.\n     * @remarks\n     * Sort the `IgxGridComponent`'s `IgxColumnComponent` based on the provided array of sorting expressions.\n     * @example\n     * ```typescript\n     * this.grid.sort({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * ```\n     */\n    public sort(expression: ISortingExpression | Array<ISortingExpression>): void {\n        this.endEdit(false);\n        if (expression instanceof Array) {\n            this.gridAPI.sort_multiple(expression);\n        } else {\n            this.gridAPI.sort(expression);\n        }\n        requestAnimationFrame(() => this.onSortingDone.emit(expression));\n    }\n\n    /**\n     * Filters a single `IgxColumnComponent`.\n     * @example\n     * ```typescript\n     * public filter(term) {\n     *      this.grid.filter(\"ProductName\", term, IgxStringFilteringOperand.instance().condition(\"contains\"));\n     * }\n     * ```\n     * @param name\n     * @param value\n     * @param conditionOrExpressionTree\n     * @param ignoreCase\n    */\n    public filter(name: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        this.filteringService.filter(name, value, conditionOrExpressionTree, ignoreCase);\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     * @example\n     * ```typescript\n     * grid.filterGlobal('some', IgxStringFilteringOperand.instance().condition('contains'));\n     * ```\n     * @param value\n     * @param condition\n     * @param ignoreCase\n    */\n    public filterGlobal(value: any, condition, ignoreCase?) {\n        this.filteringService.filterGlobal(value, condition, ignoreCase);\n    }\n\n    /**\n     * Enables summaries for the specified column and applies your customSummary.\n     * @remarks\n     * If you do not provide the customSummary, then the default summary for the column data type will be applied.\n     * @example\n     * ```typescript\n     * grid.enableSummaries([{ fieldName: 'ProductName' }, { fieldName: 'ID' }]);\n     * ```\n     * Enable summaries for the listed columns.\n     * @example\n     * ```typescript\n     * grid.enableSummaries('ProductName');\n     * ```\n     * @param rest\n    */\n    public enableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._multipleSummaries(rest[0], true);\n        } else {\n            this._summaries(rest[0], true, rest[1]);\n        }\n    }\n\n    /**\n     * Disable summaries for the specified column.\n     * @example\n     * ```typescript\n     * grid.disableSummaries('ProductName');\n     * ```\n     *@remarks\n     * Disable summaries for the listed columns.\n     *@example\n     * ```typescript\n     * grid.disableSummaries([{ fieldName: 'ProductName' }]);\n     * ```\n     */\n    public disableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._disableMultipleSummaries(rest[0]);\n        } else {\n            this._summaries(rest[0], false);\n        }\n    }\n\n    /**\n     * If name is provided, clears the filtering state of the corresponding `IgxColumnComponent`.\n     *@remarks\n     Otherwise clears the filtering state of all `IgxColumnComponent`s.\n     *@example\n     * ```typescript\n     * this.grid.clearFilter();\n     * ```\n     * @param name\n    */\n    public clearFilter(name?: string) {\n        this.filteringService.clearFilter(name);\n    }\n\n    /**\n     * If name is provided, clears the sorting state of the corresponding `IgxColumnComponent`.\n     * @remarks\n     * otherwise clears the sorting state of all `IgxColumnComponent`.\n     * @example\n     * ```typescript\n     * this.grid.clearSort();\n     * ```\n     * @param name\n    */\n    public clearSort(name?: string) {\n        if (!name) {\n            this.sortingExpressions = [];\n            return;\n        }\n        if (!this.gridAPI.get_column_by_name(name)) {\n            return;\n        }\n        this.gridAPI.clear_sort(name);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public refreshGridState(args?) {\n        this.endEdit(true);\n        this.selectionService.clearHeaderCBState();\n        this.summaryService.clearSummaryCache(args);\n    }\n\n    // TODO: We have return values here. Move them to event args ??\n\n    /**\n     * Pins a column by field name.\n     * @remarks\n     * Returns whether the operation is successful.\n     * @example\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n    */\n    public pinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.pin(index);\n    }\n\n    /**\n     * Unpins a column by field name. Returns whether the operation is successful.\n     * @example\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n    */\n    public unpinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.unpin(index);\n    }\n\n\n    /**\n     * Recalculates grid width/height dimensions.\n     * @remarks\n     * Should be run when changing DOM elements dimentions manually that affect the grid's size.\n     * @example\n     * ```typescript\n     * this.grid.reflow();\n     * ```\n     */\n    public reflow() {\n        this.calculateGridSizes();\n    }\n\n    /**\n     * Finds the next occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * @remarks\n     * Returns how many times the grid contains the string.\n     * @example\n     * ```typescript\n     * this.grid.findNext(\"financial\");\n     * ```\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value  (defaults to false).\n    */\n    public findNext(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, 1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Finds the previous occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * @remarks\n     * Returns how many times the grid contains the string.\n     * @example\n     * ```typescript\n     * this.grid.findPrev(\"financial\");\n     * ```\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value (defaults to false).\n    */\n    public findPrev(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, -1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Reapplies the existing search.\n     * @remarks\n     * Returns how many times the grid contains the last search.\n     * @example\n     * ```typescript\n     * this.grid.refreshSearch();\n     * ```\n     * @param updateActiveInfo\n    */\n    public refreshSearch(updateActiveInfo?: boolean): number {\n        if (this.lastSearchInfo.searchText) {\n            this.rebuildMatchCache();\n\n            if (updateActiveInfo) {\n                const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.id);\n                this.lastSearchInfo.matchInfoCache.forEach((match, i) => {\n                    if (match.column === activeInfo.column &&\n                        match.row === activeInfo.row &&\n                        match.index === activeInfo.index) {\n                        this.lastSearchInfo.activeMatchIndex = i;\n                    }\n                });\n            }\n\n            return this.find(this.lastSearchInfo.searchText, 0, this.lastSearchInfo.caseSensitive, this.lastSearchInfo.exactMatch, false);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Removes all the highlights in the cell.\n     * @example\n     * ```typescript\n     * this.grid.clearSearch();\n     * ```\n     */\n    public clearSearch() {\n        this.lastSearchInfo = {\n            searchText: '',\n            caseSensitive: false,\n            exactMatch: false,\n            activeMatchIndex: 0,\n            matchInfoCache: []\n        };\n\n        this.rowList.forEach((row) => {\n            if (row.cells) {\n                row.cells.forEach((c) => {\n                    c.clearHighlight();\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has sortable columns.\n     * @example\n     * ```typescript\n     * const sortableGrid = this.grid.hasSortableColumns;\n     * ```\n     */\n    get hasSortableColumns(): boolean {\n        return this.columnList.some((col) => col.sortable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has editable columns.\n     * @example\n     * ```typescript\n     * const editableGrid = this.grid.hasEditableColumns;\n     * ```\n     */\n    get hasEditableColumns(): boolean {\n        return this.columnList.some((col) => col.editable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has fiterable columns.\n     * @example\n     * ```typescript\n     * const filterableGrid = this.grid.hasFilterableColumns;\n     * ```\n     */\n    get hasFilterableColumns(): boolean {\n        return this.columnList.some((col) => col.filterable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has summarized columns.\n     * @example\n     * ```typescript\n     * const summarizedGrid = this.grid.hasSummarizedColumns;\n     * ```\n     */\n    get hasSummarizedColumns(): boolean {\n        return this.summaryService.hasSummarizedColumns;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get rootSummariesEnabled(): boolean {\n        return this.summaryCalculationMode !== GridSummaryCalculationMode.childLevelsOnly;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get hasVisibleColumns(): boolean {\n        if (this._hasVisibleColumns === undefined) {\n            return this.columnList ? this.columnList.some(c => !c.hidden) : false;\n        }\n        return this._hasVisibleColumns;\n    }\n\n    set hasVisibleColumns(value) {\n        this._hasVisibleColumns = value;\n    }\n    /**\n     * Returns if the `IgxGridComponent` has moveable columns.\n     * @example\n     * ```typescript\n     * const movableGrid = this.grid.hasMovableColumns;\n     * ```\n     */\n    get hasMovableColumns(): boolean {\n        return this.columnList && this.columnList.some((col) => col.movable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has column groups.\n     * @example\n     * ```typescript\n     * const groupGrid = this.grid.hasColumnGroups;\n     * ```\n     */\n    get hasColumnGroups(): boolean {\n        return this._columnGroups;\n    }\n    /**\n     * Returns if the `IgxGridComponent` has column layouts for multi-row layout definition.\n     * @example\n     * ```typescript\n     * const layoutGrid = this.grid.hasColumnLayouts;\n     * ```\n     */\n    public get hasColumnLayouts() {\n        return !!this.columnList.some(col => col.columnLayout);\n    }\n\n    /**\n     * Returns an array of the selected `IgxGridCellComponent`s.\n     * @example\n     * ```typescript\n     * const selectedCells = this.grid.selectedCells;\n     * ```\n     */\n    get selectedCells(): IgxGridCellComponent[] | any[] {\n        if (this.dataRowList) {\n            return this.dataRowList.map((row) => row.cells.filter((cell) => cell.selected))\n                .reduce((a, b) => a.concat(b), []);\n        }\n        return [];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get multiRowLayoutRowSize() {\n        return this._multiRowLayoutRowSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get rowBasedHeight() {\n        return this.dataLength * this.rowHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get isPercentWidth() {\n        return this.width && this.width.indexOf('%') !== -1;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isPercentHeight() {\n        return this._height && this._height.indexOf('%') !== -1;\n    }\n\n    /**\n     * @hidden\n     * Sets columns defaultWidth property\n     */\n    protected _derivePossibleWidth() {\n        if (!this.columnWidthSetByUser) {\n            this._columnWidth = this.width !== null ? this.getPossibleColumnWidth() : MINIMUM_COLUMN_WIDTH + 'px';\n        }\n        this.columnList.forEach((column: IgxColumnComponent) => {\n            if (this.hasColumnLayouts && parseInt(this._columnWidth, 10)) {\n                const columnWidthCombined = parseInt(this._columnWidth, 10) * (column.colEnd ? column.colEnd - column.colStart : 1);\n                column.defaultWidth = columnWidthCombined + 'px';\n            } else {\n                column.defaultWidth = this._columnWidth;\n                column.resetCaches();\n            }\n        });\n        this.resetCachedWidths();\n    }\n\n    /**\n     * @hidden\n     */\n    protected get defaultTargetBodyHeight(): number {\n        const allItems = this.dataLength;\n        return this.renderedRowHeight * Math.min(this._defaultTargetRecordNumber,\n            this.paging ? Math.min(allItems, this.perPage) : allItems);\n    }\n\n    /**\n     * @hidden @internal\n     * The rowHeight input is bound to min-height css prop of rows that adds a 1px border in all cases\n     */\n    public get renderedRowHeight(): number {\n        return this.rowHeight + 1;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected calcGridHeadRow() {\n        if (this.maxLevelHeaderDepth) {\n            this._baseFontSize = parseFloat(getComputedStyle(this.document.documentElement).getPropertyValue('font-size'));\n            let minSize = (this.maxLevelHeaderDepth + 1) * this.defaultRowHeight / this._baseFontSize;\n            if (this._allowFiltering && this._filterMode === FilterMode.quickFilter) {\n                minSize += (FILTER_ROW_HEIGHT + 1) / this._baseFontSize;\n            }\n            this.theadRow.nativeElement.style.minHeight = `${minSize}rem`;\n        }\n    }\n\n    /**\n     * @hidden\n     * Sets TBODY height i.e. this.calcHeight\n     */\n    protected calculateGridHeight() {\n        this.calcGridHeadRow();\n        this.summariesHeight = 0;\n        if (this.hasSummarizedColumns && this.rootSummariesEnabled) {\n            this.summariesHeight = this.summaryService.calcMaxSummaryHeight();\n        }\n\n        this.calcHeight = this._calculateGridBodyHeight();\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getToolbarHeight(): number {\n        let toolbarHeight = 0;\n        if (this.showToolbar && this.toolbarHtml != null) {\n            toolbarHeight = this.toolbarHtml.nativeElement.firstElementChild ?\n                this.toolbarHtml.nativeElement.offsetHeight : 0;\n        }\n        return toolbarHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getPagingHeight(): number {\n        let pagingHeight = 0;\n        if (this.paging && this.footer) {\n            pagingHeight = this.footer.nativeElement.firstElementChild ?\n                this.footer.nativeElement.offsetHeight : 0;\n        }\n        return pagingHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getFilterCellHeight(): number {\n        const headerGroupNativeEl = (this.headerGroupsList.length !== 0) ?\n                                        this.headerGroupsList[0].element.nativeElement : null;\n        const filterCellNativeEl = (headerGroupNativeEl) ?\n                                    headerGroupNativeEl.querySelector('igx-grid-filtering-cell') : null;\n        return (filterCellNativeEl) ? filterCellNativeEl.offsetHeight : 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calculateGridBodyHeight(): number {\n        if (!this._height) {\n            return null;\n        }\n\n        const actualTheadRow = (!this.allowFiltering || (this.allowFiltering && this.filterMode !== FilterMode.quickFilter)) ?\n                                 this.theadRow.nativeElement.offsetHeight - this.getFilterCellHeight() :\n                                 this.theadRow.nativeElement.offsetHeight;\n        const footerHeight = this.summariesHeight || this.tfoot.nativeElement.offsetHeight - this.tfoot.nativeElement.clientHeight;\n        const toolbarHeight = this.getToolbarHeight();\n        const pagingHeight = this.getPagingHeight();\n        const groupAreaHeight = this.getGroupAreaHeight();\n        const renderedHeight = toolbarHeight + actualTheadRow +\n            footerHeight + pagingHeight + groupAreaHeight +\n            this.scr.nativeElement.clientHeight;\n\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('height');\n        let gridHeight = 0;\n\n        if (this.isPercentHeight) {\n            const autoSize = this._shouldAutoSize(renderedHeight);\n            if (autoSize || computed.indexOf('%') !== -1) {\n                const bodyHeight = this.getDataBasedBodyHeight();\n                return bodyHeight > 0 ? bodyHeight : null;\n            }\n            gridHeight = parseInt(computed, 10);\n        } else {\n            gridHeight = parseInt(this._height, 10);\n        }\n        const height = Math.abs(gridHeight - renderedHeight);\n\n        if (height === 0 || isNaN(gridHeight)) {\n            const bodyHeight = this.defaultTargetBodyHeight;\n            return bodyHeight > 0 ? bodyHeight : null;\n        }\n        return height;\n    }\n\n    protected checkContainerSizeChange() {\n        const origHeight = this.nativeElement.parentElement.offsetHeight;\n        this.nativeElement.style.display = 'none';\n        const height = this.nativeElement.parentElement.offsetHeight;\n        this.nativeElement.style.display = '';\n        return origHeight !== height;\n    }\n\n    protected _shouldAutoSize(renderedHeight) {\n        this.tbody.nativeElement.style.display = 'none';\n        let res = !this.nativeElement.parentElement ||\n        this.nativeElement.parentElement.clientHeight === 0 ||\n        this.nativeElement.parentElement.clientHeight === renderedHeight;\n        if (!isChromium()) {\n            // If grid causes the parent container to extend (for example when container is flex)\n            // we should always auto-size since the actual size of the container will continuously change as the grid renders elements.\n           res = this.checkContainerSizeChange();\n        }\n        this.tbody.nativeElement.style.display = '';\n        return res;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get outerWidth() {\n        return this.hasVerticalSroll() ? this.calcWidth + this.scrollWidth : this.calcWidth;\n    }\n\n    /**\n     * @hidden @internal\n     * Gets the visible content height that includes header + tbody + footer.\n     */\n    public getVisibleContentHeight() {\n        let height = this.theadRow.nativeElement.clientHeight + this.tbody.nativeElement.clientHeight;\n        if (this.hasSummarizedColumns) {\n            height += this.tfoot.nativeElement.clientHeight;\n        }\n        return height;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getPossibleColumnWidth(baseWidth: number = null) {\n        let computedWidth;\n        if (baseWidth !== null) {\n            computedWidth = baseWidth;\n        } else {\n            computedWidth = this.calcWidth ||\n                parseInt(this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width'), 10);\n        }\n\n        computedWidth -= this.featureColumnsWidth();\n\n        const visibleChildColumns = this.visibleColumns.filter(c => !c.columnGroup);\n\n\n        // Column layouts related\n        let visibleCols = [];\n        const columnBlocks = this.visibleColumns.filter(c => c.columnGroup);\n        const colsPerBlock = columnBlocks.map(block => block.getInitialChildColumnSizes(block.children));\n        const combinedBlocksSize = colsPerBlock.reduce((acc, item) => acc + item.length, 0);\n        colsPerBlock.forEach(blockCols => visibleCols = visibleCols.concat(blockCols));\n        //\n\n        const columnsWithSetWidths = this.hasColumnLayouts ?\n            visibleCols.filter(c => c.widthSetByUser) :\n            visibleChildColumns.filter(c => c.widthSetByUser);\n\n        const columnsToSize = this.hasColumnLayouts ?\n            combinedBlocksSize - columnsWithSetWidths.length :\n            visibleChildColumns.length - columnsWithSetWidths.length;\n        const sumExistingWidths = columnsWithSetWidths\n            .reduce((prev, curr) => {\n                const colWidth = curr.width;\n                const widthValue = parseInt(colWidth, 10);\n                const currWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1 ?\n                    widthValue / 100 * computedWidth :\n                    widthValue;\n                return prev + currWidth;\n            }, 0);\n\n        // When all columns are hidden, return 0px width\n        if (!sumExistingWidths && !columnsToSize) {\n            return '0px';\n        }\n\n        const columnWidth = Math.floor(!Number.isFinite(sumExistingWidths) ?\n            Math.max(computedWidth / columnsToSize, MINIMUM_COLUMN_WIDTH) :\n            Math.max((computedWidth - sumExistingWidths) / columnsToSize, MINIMUM_COLUMN_WIDTH));\n\n            return columnWidth + 'px';\n        }\n\n    /**\n     * @hidden\n     * Sets grid width i.e. this.calcWidth\n     */\n    protected calculateGridWidth() {\n        let width;\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width');\n\n        if (this.isPercentWidth) {\n            /* width in %*/\n            width = computed.indexOf('%') === -1 ? parseInt(computed, 10) : null;\n        } else {\n            width = parseInt(this.width, 10);\n        }\n\n        if (!width && this.nativeElement) {\n            width = this.nativeElement.offsetWidth;\n        }\n\n\n        if (this.width === null || !width) {\n            width = this.getColumnWidthSum();\n        }\n\n        if (this.hasVerticalSroll() && this.width !== null) {\n            width -= this.scrollWidth;\n        }\n        if ((Number.isFinite(width) || width === null) && width !== this.calcWidth) {\n            this.calcWidth = width;\n        }\n        this._derivePossibleWidth();\n    }\n\n    private getColumnWidthSum(): number {\n        let colSum = 0;\n        const  cols = this.hasColumnLayouts ?\n         this.visibleColumns.filter(x => x.columnLayout) : this.visibleColumns.filter(x => !x.columnGroup);\n        cols.forEach((item) => {\n            const isWidthInPercent = item.width && typeof item.width === 'string' && item.width.indexOf('%') !== -1;\n            if (isWidthInPercent) {\n                item.width = item.calcWidth || MINIMUM_COLUMN_WIDTH + 'px';\n            }\n            colSum +=  parseInt((item.width || item.defaultWidth), 10) || MINIMUM_COLUMN_WIDTH;\n        });\n        if (!colSum) {\n            return null;\n        }\n        this.cdr.detectChanges();\n        colSum += this.featureColumnsWidth();\n        return colSum;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public hasVerticalSroll() {\n        if (this._init) { return false; }\n        const isScrollable = this.verticalScrollContainer ? this.verticalScrollContainer.isScrollable() : false;\n        return !!(this.calcWidth && this.dataView &&\n            this.dataView.length > 0 &&\n            isScrollable);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected getDataBasedBodyHeight(): number {\n        return !this.data || (this.data.length < this._defaultTargetRecordNumber) ?\n            0 : this.defaultTargetBodyHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>) {\n        const diff = this.columnListDiffer.diff(change);\n        if (this.autoGenerate && this.columnList.length === 0 && this._autoGeneratedCols.length > 0) {\n            // In Ivy if there are nested conditional templates the content children are re-evaluated\n            // hence autogenerated columns are cleared and need to be reset.\n            this.columnList.reset(this._autoGeneratedCols);\n            return;\n        }\n        if (diff) {\n            let added = false;\n            let removed = false;\n\n            this.initColumns(this.columnList);\n\n\n            diff.forEachAddedItem((record: IterableChangeRecord<IgxColumnComponent>) => {\n                this.onColumnInit.emit(record.item);\n                added = true;\n            });\n\n            diff.forEachRemovedItem((record: IterableChangeRecord<IgxColumnComponent | IgxColumnGroupComponent>) => {\n                const isColumnGroup = record.item instanceof IgxColumnGroupComponent;\n                if (!isColumnGroup) {\n                    // Clear Grouping\n                    this.gridAPI.clear_groupby(record.item.field);\n\n                    // Clear Filtering\n                    this.gridAPI.clear_filter(record.item.field);\n\n                    // Close filter row\n                    if ( this.filteringService.isFilterRowVisible\n                        && this.filteringService.filteredColumn\n                        && this.filteringService.filteredColumn.field === record.item.field) {\n                        this.filteringRow.close();\n                    }\n\n                    // Clear Sorting\n                    this.gridAPI.clear_sort(record.item.field);\n                }\n                removed = true;\n            });\n\n            this.resetCaches();\n\n            if (added || removed) {\n                this.summaryService.clearSummaryCache();\n                Promise.resolve().then(() => {\n                    // `onColumnsChanged` can be executed midway a current detectChange cycle and markForCheck will be ignored then.\n                    // This ensures that we will wait for the current cycle to end so we can trigger a new one and ngDoCheck to fire.\n                    this.notifyChanges(true);\n                });\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected calculateGridSizes(recalcFeatureWidth = true) {\n        /*\n            TODO: (R.K.) This layered lasagne should be refactored\n            ASAP. The reason I have to reset the caches so many times is because\n            after teach `detectChanges` call they are filled with invalid\n            state. Of course all of this happens midway through the grid\n            sizing process which of course, uses values from the caches, thus resulting\n            in a broken layout.\n        */\n        this.resetCaches(recalcFeatureWidth);\n        this.cdr.detectChanges();\n        const hasScroll = this.hasVerticalSroll();\n        this.calculateGridWidth();\n        this.resetCaches(recalcFeatureWidth);\n        this.cdr.detectChanges();\n        this.calculateGridHeight();\n\n        if (this.rowEditable) {\n            this.repositionRowEditingOverlay(this.rowInEditMode);\n        }\n\n        if (this.filteringService.isFilterRowVisible) {\n            this.filteringRow.resetChipsArea();\n        }\n\n        this.cdr.detectChanges();\n        // in case scrollbar has appeared recalc to size correctly.\n        if (hasScroll !== this.hasVerticalSroll()) {\n            this.calculateGridWidth();\n            this.cdr.detectChanges();\n        }\n        if (this.zone.isStable) {\n            this.zone.run(() => {\n                this._applyWidthHostBinding();\n                this.cdr.detectChanges();\n            });\n        } else {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.zone.run(() => {\n                    this._applyWidthHostBinding();\n                });\n            });\n        }\n        this.resetCaches(recalcFeatureWidth);\n    }\n\n    private _applyWidthHostBinding() {\n        let width = this._width;\n        if (width === null) {\n            let currentWidth = this.calcWidth;\n            if (this.hasVerticalSroll()) {\n                currentWidth += this.scrollWidth;\n            }\n            width = currentWidth + 'px';\n            this.resetCaches();\n        }\n        this._hostWidth = width;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Gets calculated width of the pinned area.\n     * @example\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth();\n     * ```\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n    */\n    public getPinnedWidth(takeHidden = false) {\n        const fc = takeHidden ? this._pinnedColumns : this.pinnedColumns;\n        let sum = 0;\n        for (const col of fc) {\n            if (col.level === 0) {\n                sum += parseInt(col.calcWidth, 10);\n            }\n        }\n        sum += this.featureColumnsWidth();\n\n        return sum;\n    }\n\n    /**\n     * @hidden\n     * Gets calculated width of the unpinned area\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n    */\n    protected getUnpinnedWidth(takeHidden = false) {\n        let width = this.isPercentWidth ?\n            this.calcWidth :\n            parseInt(this.width, 10) ||  parseInt(this.hostWidth, 10) || this.calcWidth;\n        if (this.hasVerticalSroll() && !this.isPercentWidth) {\n            width -= this.scrollWidth;\n        }\n        return width - this.getPinnedWidth(takeHidden);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _summaries(fieldName: string, hasSummary: boolean, summaryOperand?: any) {\n        const column = this.gridAPI.get_column_by_name(fieldName);\n        if (column) {\n            column.hasSummary = hasSummary;\n            if (summaryOperand) {\n                if (this.rootSummariesEnabled) { this.summaryService.retriggerRootPipe++; }\n                column.summaries = summaryOperand;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _multipleSummaries(expressions: ISummaryExpression[], hasSummary: boolean) {\n        expressions.forEach((element) => {\n            this._summaries(element.fieldName, hasSummary, element.customSummary);\n        });\n    }\n    /**\n     * @hidden\n     */\n    protected _disableMultipleSummaries(expressions) {\n        expressions.forEach((column) => {\n            const columnName = column && column.fieldName ? column.fieldName : column;\n            this._summaries(columnName, false);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveDataTypes(rec) {\n        if (typeof rec === 'number') {\n            return DataType.Number;\n        } else if (typeof rec === 'boolean') {\n            return DataType.Boolean;\n        } else if (typeof rec === 'object' && rec instanceof Date) {\n            return DataType.Date;\n        }\n        return DataType.String;\n    }\n\n    private getScrollWidth() {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.width = '100px';\n        style.height = '100px';\n        style.position = 'absolute';\n        style.top = '-10000px';\n        style.top = '-10000px';\n        style.overflow = 'scroll';\n        document.body.appendChild(div);\n        const scrollWidth = div.offsetWidth - div.clientWidth;\n        document.body.removeChild(div);\n        return scrollWidth;\n    }\n\n    /**\n     * @hidden\n     */\n    protected autogenerateColumns() {\n        const data = this.gridAPI.get_data();\n        const factory = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const fields = this.generateDataFields(data);\n        const columns = [];\n\n        fields.forEach((field) => {\n            const ref = factory.create(this.viewRef.injector);\n            ref.instance.field = field;\n            ref.instance.dataType = this.resolveDataTypes(data[0][field]);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n        this._autoGeneratedCols = columns;\n\n        this.columnList.reset(columns);\n        if (data && data.length > 0) {\n            this.shouldGenerate = false;\n        }\n    }\n\n    protected generateDataFields(data: any[]): string[] {\n        return Object.keys(data && data.length !== 0 ? data[0] : []);\n    }\n\n    /**\n     * @hidden\n     */\n    onlyTopLevel(arr) {\n        return arr.filter(c => c.level === 0);\n    }\n\n    /**\n     * @hidden\n     */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        this._columnGroups = this.columnList.some(col => col.columnGroup);\n        if (this.hasColumnLayouts) {\n            // Set overall row layout size\n            this.columnList.forEach((col) => {\n                if (col.columnLayout) {\n                    const layoutSize = col.children ?\n                        col.children.reduce((acc, val) => Math.max(val.rowStart + val.gridRowSpan - 1, acc), 1) :\n                        1;\n                    this._multiRowLayoutRowSize = Math.max(layoutSize, this._multiRowLayoutRowSize);\n                }\n            });\n        }\n        if (this.hasColumnLayouts && this.hasColumnGroups) {\n            // invalid configuration - multi-row and column groups\n            // remove column groups\n            const columnLayoutColumns = this.columnList.filter((col) => col.columnLayout || col.columnLayoutChild);\n            this.columnList.reset(columnLayoutColumns);\n        }\n        this._maxLevelHeaderDepth = null;\n        this._columns = this.columnList.toArray();\n        collection.forEach((column: IgxColumnComponent) => {\n            column.defaultWidth = this.columnWidthSetByUser ? this._columnWidth : column.defaultWidth ? column.defaultWidth : '';\n\n            if (cb) {\n                cb(column);\n            }\n        });\n\n        this.reinitPinStates();\n\n        if (this.hasColumnLayouts) {\n            collection.forEach((column: IgxColumnComponent) => {\n                column.populateVisibleIndexes();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected reinitPinStates() {\n        this._pinnedColumns = (this.hasColumnGroups) ? this.columnList.filter((c) => c.pinned) :\n            this.columnList.filter((c) => c.pinned).sort((a, b) => this._pinnedColumns.indexOf(a) - this._pinnedColumns.indexOf(b));\n        this._unpinnedColumns = this.hasColumnGroups ? this.columnList.filter((c) => !c.pinned) :\n        this.columnList.filter((c) => !c.pinned)\n        .sort((a, b) => this._unpinnedColumns.indexOf(a) - this._unpinnedColumns.indexOf(b));\n    }\n\n    /**\n     * @hidden @internal\n    */\n    public isColumnGrouped(fieldName: string): boolean {\n        return false;\n    }\n\n    /**\n     * @hidden @internal\n    */\n    public onHeaderSelectorClick(event) {\n        if (!this.isMultiRowSelectionEnabled) { return; }\n        this.selectionService.areAllRowSelected() ?\n            this.selectionService.clearRowSelection(event) : this.selectionService.selectAllRows(event);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get headSelectorBaseAriaLabel() {\n        if (this._filteringExpressionsTree.filteringOperands.length > 0) {\n            return this.selectionService.areAllRowSelected() ? 'Deselect all filtered' : 'Select all filtered';\n        }\n\n        return this.selectionService.areAllRowSelected() ? 'Deselect all' : 'Select all';\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get totalRowsCountAfterFilter() {\n        if (this.data) {\n            return this.selectionService.allData.length;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Returns the currently transformed paged/filtered/sorted/grouped data, displayed in the grid.\n     * @example\n     * ```typescript\n     *      const dataView = this.grid.dataView;\n     * ```\n     */\n    get dataView(): any[] {\n        return this.verticalScrollContainer.igxForOf;\n    }\n\n    /**\n     * Get current selection state.\n     * @example\n     * Returns an array with selected rows' IDs (primaryKey or rowData)\n     * ```typescript\n     * const selectedRows = this.grid.selectedRows();\n     * ```\n     */\n    public selectedRows(): any[] {\n        return this.selectionService.getSelectedRows();\n    }\n\n    /**\n     * Select specified rows by ID.\n     * @example\n     * ```typescript\n     * this.grid.selectRows([1,2,5], true);\n     * ```\n     * @param rowIDs\n     * @param clearCurrentSelection if true clears the current selection\n    */\n    public selectRows(rowIDs: any[], clearCurrentSelection?: boolean) {\n        this.selectionService.selectRowsWithNoEvent(rowIDs, clearCurrentSelection);\n        this.notifyChanges();\n    }\n\n    /**\n     * Deselect specified rows by ID.\n     * @example\n     * ```typescript\n     * this.grid.deselectRows([1,2,5]);\n     * ```\n     * @param rowIDs\n    */\n    public deselectRows(rowIDs: any[]) {\n        this.selectionService.deselectRowsWithNoEvent(rowIDs);\n        this.notifyChanges();\n    }\n\n    /**\n     * Selects all rows\n     * @remarks\n     * By default if filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     * If you set the parameter onlyFilterData to false that will select all rows in the grid exept deleted rows.\n     * @example\n     * ```typescript\n     * this.grid.selectAllRows();\n     * this.grid.selectAllRows(false);\n     * ```\n     * @param onlyFilterData\n     */\n    public selectAllRows(onlyFilterData = true) {\n        const data = onlyFilterData && this.filteredData ? this.filteredData : this.gridAPI.get_all_data(true);\n        const rowIDs = this.selectionService.getRowIDs(data).filter(rID => !this.gridAPI.row_deleted_transaction(rID));\n        this.selectRows(rowIDs);\n    }\n\n    /**\n     * Deselects all rows\n     * @remarks\n     * By default if filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     * If you set the parameter onlyFilterData to false that will select all rows in the grid exept deleted rows.\n     * @example\n     * ```typescript\n     * this.grid.deselectAllRows();\n     * ```\n     * @param onlyFilterData\n     */\n    public deselectAllRows(onlyFilterData = true) {\n        if (onlyFilterData && this.filteredData && this.filteredData.length > 0) {\n            this.deselectRows(this.selectionService.getRowIDs(this.filteredData));\n        } else {\n            this.selectionService.clearAllSelectedRows();\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public clearCellSelection(): void {\n        this.selectionService.clear(true);\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden @internal\n    */\n    public dragScroll(dir: DragScrollDirection): void {\n        const scrollDelta = 48;\n        const horizontal = this.headerContainer.getScroll();\n        const vertical = this.verticalScrollContainer.getScroll();\n        switch (dir) {\n            case DragScrollDirection.LEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                break;\n            case DragScrollDirection.RIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                break;\n            case DragScrollDirection.TOP:\n                vertical.scrollTop -= scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOM:\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOMLEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOMRIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.TOPLEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                vertical.scrollTop -= scrollDelta;\n                break;\n            case DragScrollDirection.TOPRIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                vertical.scrollTop -= scrollDelta;\n                break;\n            default:\n                return;\n        }\n        this.wheelHandler();\n    }\n\n    /**\n     * @hidden @internal\n    */\n    public isDefined(arg: any): boolean {\n        return arg !== undefined && arg !== null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public selectRange(arg: GridSelectionRange | GridSelectionRange[] | null | undefined): void {\n        if (!this.isDefined(arg)) {\n            this.clearCellSelection();\n            return;\n        }\n        if (arg instanceof Array) {\n            arg.forEach(range => this.setSelection(range));\n        } else {\n            this.setSelection(arg);\n        }\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden @internal\n    */\n    public columnToVisibleIndex(field: string | number): number {\n        const visibleColumns = this.visibleColumns;\n        if (typeof field === 'number') {\n            return field;\n        }\n        return visibleColumns.find(column => column.field === field).visibleIndex;\n    }\n\n    /**\n     * @hidden @internal\n    */\n    public setSelection(range: GridSelectionRange): void {\n        const startNode = { row: range.rowStart, column: this.columnToVisibleIndex(range.columnStart) };\n        const endNode = { row: range.rowEnd, column: this.columnToVisibleIndex(range.columnEnd) };\n\n        this.selectionService.pointerState.node = startNode;\n        this.selectionService.selectRange(endNode, this.selectionService.pointerState);\n        this.selectionService.addRangeMeta(endNode, this.selectionService.pointerState);\n        this.selectionService.initPointerState();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    getSelectedRanges(): GridSelectionRange[] {\n        return this.selectionService.ranges;\n    }\n\n\n    protected extractDataFromSelection(source: any[], formatters = false, headers = false): any[] {\n        let columnsArray: IgxColumnComponent[];\n        let record = {};\n        const selectedData = [];\n        const activeEl = this.selectionService.activeElement;\n\n        const selectionMap = Array.from(this.selectionService.selection)\n            .filter((tuple) => tuple[0] < source.length);\n\n        if (this.cellSelection === GridSelectionMode.single && activeEl) {\n            selectionMap.push([activeEl.row, new Set<number>().add(activeEl.column)]);\n        }\n\n        for (const [row, set] of selectionMap) {\n            if (!source[row] || source[row].detailsData !== undefined) {\n                continue;\n            }\n            const temp = Array.from(set);\n            for (const each of temp) {\n                columnsArray = this.getSelectableColumnsAt(each);\n                columnsArray.forEach((col) => {\n                    if (col) {\n                        const key = headers ? col.header || col.field : col.field;\n                        record[key] = formatters && col.formatter ? col.formatter(source[row][col.field])\n                            : source[row][col.field];\n                    }\n                });\n            }\n            if (Object.keys(record).length) {\n                selectedData.push(record);\n            }\n            record = {};\n        }\n        return selectedData;\n    }\n\n    protected getSelectableColumnsAt(index) {\n        if (this.hasColumnLayouts) {\n            const visibleLayoutColumns = this.visibleColumns\n                .filter(col => col.columnLayout)\n                .sort((a, b) => a.visibleIndex - b.visibleIndex);\n            const colLayout = visibleLayoutColumns[index];\n            return colLayout ? colLayout.children.toArray() : [];\n        } else {\n            const visibleColumns = this.visibleColumns\n                .filter(col => !col.columnGroup)\n                .sort((a, b) => a.visibleIndex - b.visibleIndex);\n            return [visibleColumns[index]];\n        }\n    }\n\n    /**\n     *\n     * Returns an array of the current cell selection in the form of `[{ column.field: cell.value }, ...]`.\n     * @remarks\n     * If `formatters` is enabled, the cell value will be formatted by its respective column formatter (if any).\n     * If `headers` is enabled, it will use the column header (if any) instead of the column field.\n     */\n    public getSelectedData(formatters = false, headers = false) {\n        const source = this.dataView;\n        return this.extractDataFromSelection(source, formatters, headers);\n    }\n\n    /**\n     * @hidden @internal\n    */\n    public scrollHandler = (event) => {\n        this.headerContainer.scrollPosition += event.target.scrollLeft;\n        this.verticalScrollContainer.scrollPosition += event.target.scrollTop;\n        event.target.scrollLeft = 0;\n        event.target.scrollTop = 0;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    copyHandlerIE() {\n        if (isIE()) {\n            this.copyHandler(null, true);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public copyHandler(event, ie11 = false) {\n        if (!this.clipboardOptions.enabled || this.crudService.inEditMode) {\n            return;\n        }\n\n        const data = this.getSelectedData(this.clipboardOptions.copyFormatters, this.clipboardOptions.copyHeaders);\n        const ev = { data, cancel: false } as IGridClipboardEvent;\n        this.onGridCopy.emit(ev);\n\n        if (ev.cancel) {\n            return;\n        }\n\n        const transformer = new CharSeparatedValueData(ev.data, this.clipboardOptions.separator);\n        let result = transformer.prepareData();\n\n        if (!this.clipboardOptions.copyHeaders) {\n            result = result.substring(result.indexOf('\\n') + 1);\n        }\n\n        if (ie11) {\n            (window as any).clipboardData.setData('Text', result);\n            return;\n        }\n\n        event.preventDefault();\n\n        /* Necessary for the hiearachical case but will probably have to\n           change how getSelectedData is propagated in the hiearachical grid\n        */\n        event.stopPropagation();\n        event.clipboardData.setData('text/plain', result);\n    }\n\n    /**Navigates to a posution in the grid based on provided `rowindex` and `visibleColumnIndex`.\n     * @remarks\n     * Also can execute a custom logic over the target element,\n     * through a callback function that accepts { targetType: GridKeydownTargetType, target: Object }\n     * @example\n     * ```typescript\n     *  this.grid.navigateTo(10, 3, (args) => { args.target.nativeElement.focus(); });\n     * ```\n     */\n    public navigateTo(rowIndex: number, visibleColIndex = -1, cb: Function = null) {\n        if (rowIndex < 0 || rowIndex > this.dataView.length - 1\n            || (visibleColIndex !== -1 && this.columnList.map(col => col.visibleIndex).indexOf(visibleColIndex) === -1)) {\n            return;\n        }\n        this.wheelHandler();\n        if (this.dataView.slice(rowIndex, rowIndex + 1).find(rec => rec.expression || rec.childGridsData)) {\n            visibleColIndex = -1;\n        }\n        const shouldScrollVertically = this.navigation.shouldPerformVerticalScroll(rowIndex, visibleColIndex);\n        const shouldScrollHorizontally = visibleColIndex !== -1 && !this.navigation.isColumnFullyVisible(visibleColIndex);\n        if (shouldScrollVertically) {\n            this.navigation.performVerticalScrollToCell(rowIndex, visibleColIndex,\n                () => { this.navigateTo(rowIndex, visibleColIndex, cb); });\n        } else if (shouldScrollHorizontally) {\n            this.navigation.performHorizontalScrollToCell(rowIndex, visibleColIndex, false,\n                     () => { this.navigateTo(rowIndex, visibleColIndex, cb); });\n        } else {\n            this.executeCallback(rowIndex, visibleColIndex, cb);\n        }\n    }\n\n    /**\n    * Returns `ICellPosition` which defines the next cell,\n    * according to the current position, that match specific criteria.\n    * @remarks\n    * You can pass callback function as a third parameter of `getPreviousCell` method.\n    * The callback function accepts IgxColumnComponent as a param\n    * @example\n    * ```typescript\n    *  const nextEditableCellPosition = this.grid.getNextCell(0, 3, (column) => column.editable);\n    * ```\n    */\n    public getNextCell(currRowIndex: number, curVisibleColIndex: number,\n        callback: (IgxColumnComponent) => boolean = null): ICellPosition {\n        const columns = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);\n\n        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n        }\n        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => a - b) :\n            columns.map(editCol => editCol.visibleIndex).sort((a, b) => a - b);\n        const nextCellIndex = colIndexes.find(index => index > curVisibleColIndex);\n        if (this.dataView.slice(currRowIndex, currRowIndex + 1)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData) && nextCellIndex !== undefined) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: nextCellIndex };\n        } else {\n            if (colIndexes.length === 0 || this.getNextDataRowIndex(currRowIndex) === currRowIndex) {\n                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n            } else {\n                return { rowIndex: this.getNextDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };\n            }\n        }\n    }\n\n    /**\n    * Returns `ICellPosition` which defines the previous cell,\n    * according to the current position, that match specific criteria.\n    * @remarks\n    * You can pass callback function as a third parameter of `getPreviousCell` method.\n    * The callback function accepts IgxColumnComponent as a param\n    * @example\n    * ```typescript\n    *  const previousEditableCellPosition = this.grid.getPreviousCell(0, 3, (column) => column.editable);\n    * ```\n    */\n    public getPreviousCell(currRowIndex: number, curVisibleColIndex: number,\n        callback: (IgxColumnComponent) => boolean = null): ICellPosition {\n        const columns = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);\n\n        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n        }\n        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => b - a) :\n            columns.map(editCol => editCol.visibleIndex).sort((a, b) => b - a);\n        const prevCellIndex = colIndexes.find(index => index < curVisibleColIndex);\n        if (this.dataView.slice(currRowIndex, currRowIndex + 1)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData) && prevCellIndex !== undefined) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: prevCellIndex };\n        } else {\n            if (colIndexes.length === 0 || this.getPrevDataRowIndex(currRowIndex) === currRowIndex) {\n                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n            } else {\n                return { rowIndex: this.getPrevDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };\n            }\n        }\n    }\n\n    private executeCallback(rowIndex, visibleColIndex = -1, cb: Function = null) {\n        if (!cb) { return; }\n        let targetType, target;\n        const row = this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).find(r => r.index === rowIndex);\n        if (!row) { return; }\n        switch (row.nativeElement.tagName.toLowerCase()) {\n            case 'igx-grid-groupby-row':\n                targetType = GridKeydownTargetType.groupRow;\n                target = row;\n                break;\n            case 'igx-grid-summary-row':\n                targetType = GridKeydownTargetType.summaryCell;\n                target = visibleColIndex !== -1 ?\n                    row.summaryCells.find(c => c.visibleColumnIndex === visibleColIndex) : row.summaryCells.first;\n                break;\n            case 'igx-child-grid-row':\n                targetType = GridKeydownTargetType.hierarchicalRow;\n                target = row;\n                break;\n            default:\n                targetType = GridKeydownTargetType.dataCell;\n                target = visibleColIndex !== -1 ? row.cells.find(c => c.visibleColumnIndex === visibleColIndex) : row.cells.first;\n                break;\n        }\n        const args = { targetType: targetType, target: target };\n        cb(args);\n    }\n\n    private getPrevDataRowIndex(currentRowIndex): number {\n        if (currentRowIndex <= 0) { return currentRowIndex; }\n\n        const prevRow = this.dataView.slice(0, currentRowIndex).reverse()\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData);\n        return prevRow ? this.dataView.indexOf(prevRow) : currentRowIndex;\n    }\n\n    private getNextDataRowIndex(currentRowIndex): number {\n        if (currentRowIndex === this.dataView.length) { return currentRowIndex; }\n\n        const nextRow = this.dataView.slice(currentRowIndex + 1, this.dataView.length)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData);\n        return nextRow ? this.dataView.indexOf(nextRow) : currentRowIndex;\n    }\n\n    private isValidPosition(rowIndex, colIndex): boolean {\n        const rows = this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).length;\n        const cols = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0 && !col.hidden).length;\n        if (rows < 1 || cols < 1) { return false; }\n        if (rowIndex > -1 && rowIndex < this.dataView.length &&\n            colIndex > - 1 && colIndex < cols) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public wheelHandler = (isScroll = false) => {\n        if (this.document.activeElement &&\n            // tslint:disable-next-line:no-bitwise\n            (this.document.activeElement.compareDocumentPosition(this.tbody.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS ||\n            // tslint:disable-next-line:no-bitwise\n            (this.document.activeElement.\n                compareDocumentPosition(this.tfoot.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS && isScroll))) {\n            (this.document.activeElement as HTMLElement).blur();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public trackColumnChanges(index, col) {\n        return col.field + col._calcWidth;\n    }\n\n    private find(text: string, increment: number, caseSensitive?: boolean, exactMatch?: boolean, scroll?: boolean) {\n        if (!this.rowList) {\n            return 0;\n        }\n\n        this.endEdit(false);\n\n        if (!text) {\n            this.clearSearch();\n            return 0;\n        }\n\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n        let rebuildCache = false;\n\n        if (this.lastSearchInfo.searchText !== text ||\n            this.lastSearchInfo.caseSensitive !== caseSensitiveResolved ||\n            this.lastSearchInfo.exactMatch !== exactMatchResolved) {\n            this.lastSearchInfo = {\n                searchText: text,\n                activeMatchIndex: 0,\n                caseSensitive: caseSensitiveResolved,\n                exactMatch: exactMatchResolved,\n                matchInfoCache: []\n            };\n\n            rebuildCache = true;\n        } else {\n            this.lastSearchInfo.activeMatchIndex += increment;\n        }\n\n        if (rebuildCache) {\n            this.rowList.forEach((row) => {\n                if (row.cells) {\n                    row.cells.forEach((c) => {\n                        c.highlightText(text, caseSensitiveResolved, exactMatchResolved);\n                    });\n                }\n            });\n\n            this.rebuildMatchCache();\n        }\n\n        if (this.lastSearchInfo.activeMatchIndex >= this.lastSearchInfo.matchInfoCache.length) {\n            this.lastSearchInfo.activeMatchIndex = 0;\n        } else if (this.lastSearchInfo.activeMatchIndex < 0) {\n            this.lastSearchInfo.activeMatchIndex = this.lastSearchInfo.matchInfoCache.length - 1;\n        }\n\n        if (this.lastSearchInfo.matchInfoCache.length) {\n            const matchInfo = this.lastSearchInfo.matchInfoCache[this.lastSearchInfo.activeMatchIndex];\n            this.lastSearchInfo = { ...this.lastSearchInfo };\n\n            if (scroll !== false) {\n                this.scrollTo(matchInfo.row, matchInfo.column);\n            }\n\n            IgxTextHighlightDirective.setActiveHighlight(this.id, {\n                column: matchInfo.column,\n                row: matchInfo.row,\n                index: matchInfo.index,\n            });\n\n        } else {\n            IgxTextHighlightDirective.clearActiveHighlight(this.id);\n        }\n\n        return this.lastSearchInfo.matchInfoCache.length;\n    }\n\n    /**\n     * Returns an array containing the filtered sorted data.\n     * @example\n     * ```typescript\n     * const filteredSortedData = this.grid1.filteredSortedData;\n     * ```\n    */\n    get filteredSortedData(): any[] {\n        return this._filteredSortedData;\n    }\n    set filteredSortedData(value: any[]) {\n        this._filteredSortedData = value;\n        this.refreshSearch(true);\n    }\n\n    /**\n     * @hidden\n     */\n    protected initPinning() {\n        let currentPinnedWidth = 0;\n        const pinnedColumns = [];\n        const unpinnedColumns = [];\n\n        this.calculateGridWidth();\n        this.resetCaches();\n        // When a column is a group or is inside a group, pin all related.\n        this._pinnedColumns.forEach(col => {\n            if (col.parent) {\n                col.parent.pinned = true;\n            }\n            if (col.columnGroup) {\n                col.children.forEach(child => child.pinned = true);\n            }\n        });\n\n        // Make sure we don't exceed unpinned area min width and get pinned and unpinned col collections.\n        // We take into account top level columns (top level groups and non groups).\n        // If top level is unpinned the pinning handles all children to be unpinned as well.\n        for (let i = 0; i < this._columns.length; i++) {\n            if (this._columns[i].pinned && !this._columns[i].parent) {\n                // Pinned column. Check if with it the unpinned min width is exceeded.\n                const colWidth = parseInt(this._columns[i].width, 10);\n                currentPinnedWidth += colWidth;\n                pinnedColumns.push(this._columns[i]);\n            } else if (this._columns[i].pinned && this._columns[i].parent) {\n                if (this._columns[i].topLevelParent.pinned) {\n                    pinnedColumns.push(this._columns[i]);\n                } else {\n                    this._columns[i].pinned = false;\n                    unpinnedColumns.push(this._columns[i]);\n                }\n            } else {\n                unpinnedColumns.push(this._columns[i]);\n            }\n        }\n\n        // Assign the applicaple collections.\n        this._pinnedColumns = pinnedColumns;\n        this._unpinnedColumns = unpinnedColumns;\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number, inCollection = this.filteredSortedData): void {\n        let delayScrolling = false;\n\n        if (this.paging && typeof (row) !== 'number') {\n            const rowIndex = inCollection.indexOf(row);\n            const page = Math.floor(rowIndex / this.perPage);\n\n            if (this.page !== page) {\n                delayScrolling = true;\n                this.page = page;\n            }\n        }\n\n        if (delayScrolling) {\n            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {\n                this.scrollDirective(this.verticalScrollContainer,\n                    typeof (row) === 'number' ? row : this.dataView.indexOf(row));\n            });\n        } else {\n            this.scrollDirective(this.verticalScrollContainer,\n                typeof (row) === 'number' ? row : this.dataView.indexOf(row));\n        }\n\n        this.scrollToHorizontally(column);\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollToHorizontally(column: any | number) {\n        let columnIndex = typeof column === 'number' ? column : this.getColumnByName(column).visibleIndex;\n        const scrollRow = this.rowList.find(r => r.virtDirRow);\n        const virtDir = scrollRow ? scrollRow.virtDirRow : null;\n        if (this.pinnedColumns.length) {\n            if (columnIndex >= this.pinnedColumns.length) {\n                columnIndex -= this.pinnedColumns.length;\n                this.scrollDirective(virtDir, columnIndex);\n            }\n        } else {\n            this.scrollDirective(virtDir, columnIndex);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollDirective(directive: IgxGridForOfDirective<any>, goal: number): void {\n        if (!directive) {\n            return;\n        }\n        directive.scrollTo(goal);\n    }\n\n    private rebuildMatchCache() {\n        this.lastSearchInfo.matchInfoCache = [];\n\n        const caseSensitive = this.lastSearchInfo.caseSensitive;\n        const exactMatch = this.lastSearchInfo.exactMatch;\n        const searchText = caseSensitive ? this.lastSearchInfo.searchText : this.lastSearchInfo.searchText.toLowerCase();\n        const data = this.filteredSortedData;\n        const columnItems = this.visibleColumns.filter((c) => !c.columnGroup).sort((c1, c2) => c1.visibleIndex - c2.visibleIndex);\n\n        const numberPipe = new IgxDecimalPipeComponent(this.locale);\n        const datePipe = new IgxDatePipeComponent(this.locale);\n        data.forEach((dataRow) => {\n            columnItems.forEach((c) => {\n                const value = c.formatter ? c.formatter(dataRow[c.field]) :\n                    c.dataType === 'number' ? numberPipe.transform(dataRow[c.field], this.locale) :\n                        c.dataType === 'date' ? datePipe.transform(dataRow[c.field], this.locale)\n                            : dataRow[c.field];\n                if (value !== undefined && value !== null && c.searchable) {\n                    let searchValue = caseSensitive ? String(value) : String(value).toLowerCase();\n\n                    if (exactMatch) {\n                        if (searchValue === searchText) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: dataRow,\n                                column: c.field,\n                                index: 0,\n                            });\n                        }\n                    } else {\n                        let occurenceIndex = 0;\n                        let searchIndex = searchValue.indexOf(searchText);\n\n                        while (searchIndex !== -1) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: dataRow,\n                                column: c.field,\n                                index: occurenceIndex++,\n                            });\n\n                            searchValue = searchValue.substring(searchIndex + searchText.length);\n                            searchIndex = searchValue.indexOf(searchText);\n                        }\n                    }\n                }\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public isExpandedGroup(_group: IGroupByRecord): boolean {\n        return undefined;\n    }\n\n    protected changeRowEditingOverlayStateOnScroll(row: IgxRowDirective<IgxGridBaseDirective & GridType>) {\n        if (!this.rowEditable || !this.rowEditingOverlay || this.rowEditingOverlay.collapsed) {\n            return;\n        }\n        if (!row) {\n            this.toggleRowEditingOverlay(false);\n        } else {\n            this.repositionRowEditingOverlay(row);\n        }\n    }\n\n    /**\n     * Should be called when data and/or isLoading input changes so that the overlay can be\n     * hidden/shown based on the current value of shouldOverlayLoading\n     */\n    protected evaluateLoadingState() {\n        if (this.shouldOverlayLoading) {\n            // a new overlay should be shown\n            const overlaySettings: OverlaySettings = {\n                outlet: this.loadingOutlet,\n                closeOnOutsideClick: false,\n                positionStrategy: new ContainerPositionStrategy()\n            };\n            if (!this._loadingId) {\n                this._loadingId = this.overlayService.attach(this.loadingOverlay, overlaySettings);\n                this.overlayService.show(this._loadingId, overlaySettings);\n            }\n        } else {\n            if (this._loadingId) {\n                this.overlayService.hide(this._loadingId);\n                this._loadingId = null;\n            }\n        }\n    }\n\n    /**\n     * @hidden @internal\n    */\n    openRowOverlay(id) {\n        this.configureRowEditingOverlay(id, this.rowList.length <= MIN_ROW_EDITING_COUNT_THRESHOLD);\n\n        this.rowEditingOverlay.open(this.rowEditSettings);\n        this.rowEditPositioningStrategy.isTopInitialPosition = this.rowEditPositioningStrategy.isTop;\n        this.rowEditingOverlay.element.addEventListener('wheel', this.rowEditingWheelHandler);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public closeRowEditingOverlay() {\n        this.rowEditingOverlay.element.removeEventListener('wheel', this.rowEditingWheelHandler);\n        this.rowEditPositioningStrategy.isTopInitialPosition = null;\n        this.rowEditingOverlay.close();\n        this.rowEditingOverlay.element.parentElement.style.display = '';\n    }\n\n    /**\n     * @hidden @internal\n    */\n    public toggleRowEditingOverlay(show) {\n        const rowStyle = this.rowEditingOverlay.element.style;\n        if (show) {\n            rowStyle.display = 'block';\n        } else {\n            rowStyle.display = 'none';\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public repositionRowEditingOverlay(row: IgxRowDirective<IgxGridBaseDirective & GridType>) {\n        if (row && !this.rowEditingOverlay.collapsed) {\n            const rowStyle = this.rowEditingOverlay.element.parentElement.style;\n            if (row) {\n                rowStyle.display = '';\n                this.configureRowEditingOverlay(row.rowID);\n                this.rowEditingOverlay.reposition();\n            } else {\n                rowStyle.display = 'none';\n            }\n        }\n    }\n\n    private configureRowEditingOverlay(rowID: any, useOuter = false) {\n        this.rowEditSettings.outlet = useOuter ? this.parentRowOutletDirective : this.rowOutletDirective;\n        this.rowEditPositioningStrategy.settings.container = this.tbody.nativeElement;\n        const targetRow = this.gridAPI.get_row_by_key(rowID);\n        if (!targetRow) {\n            return;\n        }\n        this.rowEditPositioningStrategy.settings.target = targetRow.element.nativeElement;\n        this.toggleRowEditingOverlay(true);\n    }\n\n    /**\n     * @hidden @internal\n    */\n    public get rowChangesCount() {\n        if (!this.crudService.row) {\n            return 0;\n        }\n        const rowChanges = this.transactions.getAggregatedValue(this.crudService.row.id, false);\n        return rowChanges ? Object.keys(rowChanges).length : 0;\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.gridAPI.get_all_data()[rowIndex], value);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    endRowTransaction(commit: boolean, row: IgxRow) {\n        row.newData = this.transactions.getAggregatedValue(row.id, true);\n\n        let args = row.createEditEventArgs();\n\n        if (!commit) {\n            this.onRowEditCancel.emit(args);\n            this.transactions.endPending(false);\n        } else {\n            args = this.gridAPI.update_row(row, row.newData);\n        }\n        if (args.cancel) {\n            this.transactions.startPending();\n            return;\n        }\n        this.crudService.endRowEdit();\n        this.closeRowEditingOverlay();\n    }\n\n    /**\n     * @hidden @internal\n    */\n    public gridOutletKeyboardHandler(event) {\n        // TODO: This should be removed after grid keyboard refactoring\n        // call stopPropagation for keydown event for the outlet not to propagate event to the grid\n        event.stopPropagation();\n    }\n\n    // TODO: Refactor\n    /**\n     * Finishes the row transactions on the current row.\n     * @remarks\n     * If `commit === true`, passes them from the pending state to the data (or transaction service)\n     * @example\n     * ```html\n     * <button igxButton (click)=\"grid.endEdit(true)\">Commit Row</button>\n     * ```\n     * @param commit\n     */\n    public endEdit(commit = true, event?: Event) {\n        const row = this.crudService.row;\n        const cell = this.crudService.cell;\n\n        // TODO: Merge the crudService with wht BaseAPI service\n        if (!row && !cell) { return; }\n\n        commit ? this.gridAPI.submit_value() : this.gridAPI.escape_editMode();\n\n        if (!this.rowEditable || this.rowEditingOverlay && this.rowEditingOverlay.collapsed || !row) {\n            return;\n        }\n\n        this.endRowTransaction(commit, row);\n\n        const activeCell = this.selectionService.activeElement;\n        if (event && activeCell) {\n            const rowIndex = activeCell.row;\n            const visibleColIndex = activeCell.layout ? activeCell.layout.columnVisibleIndex : activeCell.column;\n            this.navigateTo(rowIndex, visibleColIndex, (c) => {\n                if (c.targetType === GridKeydownTargetType.dataCell && c.target) {\n                    c.target.nativeElement.focus();\n                }\n            });\n        }\n    }\n    /**\n     * @hidden\n     */\n    private rowEditingWheelHandler = (event: WheelEvent) => {\n        if (event.deltaY > 0) {\n            this.verticalScrollContainer.scrollNext();\n        } else {\n            this.verticalScrollContainer.scrollPrev();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get dataWithAddedInTransactionRows() {\n        const result = <any>cloneArray(this.gridAPI.get_all_data());\n        if (this.transactions.enabled) {\n            result.push(...this.transactions.getAggregatedChanges(true)\n                .filter(t => t.type === TransactionType.ADD)\n                .map(t => t.newValue));\n        }\n\n        return result;\n    }\n\n    /**\n     * @hidden @internal\n    */\n    public get dataLength() {\n        return this.transactions.enabled ? this.dataWithAddedInTransactionRows.length : this.gridAPI.get_all_data().length;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public hasHorizontalScroll() {\n        return this.totalWidth - this.unpinnedWidth > 0;\n    }\n\n    protected _restoreVirtState(row) {\n        // check virtualization state of data record added from cache\n        // in case state is no longer valid - update it.\n        const rowForOf = row.virtDirRow;\n        const gridScrLeft = rowForOf.getScroll().scrollLeft;\n        const left = -parseInt(rowForOf.dc.instance._viewContainer.element.nativeElement.style.left, 10);\n        const actualScrollLeft = left + rowForOf.getColumnScrollLeft(rowForOf.state.startIndex);\n        if (gridScrLeft !== actualScrollLeft) {\n            rowForOf.onHScroll(gridScrLeft);\n            rowForOf.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportExcel(): boolean {\n        return this._exportExcel;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportCsv(): boolean {\n        return this._exportCsv;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    get shouldOverlayLoading(): boolean {\n        return this.isLoading && this.data && this.data.length > 0;\n    }\n\n    /**\n     * @hidden @internal\n    */\n    public isSummaryRow(rowData): boolean {\n        return rowData.summaries && (rowData.summaries instanceof Map);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isMultiRowSelectionEnabled(): boolean {\n        return this.rowSelection === GridSelectionMode.multiple;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isRowSelectable(): boolean {\n        return this.rowSelection !== GridSelectionMode.none;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isCellSelectable() {\n        return this.cellSelection !== GridSelectionMode.none;\n    }\n\n    /**\n     * @hidden @internal\n    */\n    public viewDetachHandler(args: ICachedViewLoadedEventArgs) {\n        const context = args.view.context;\n        if (context['templateID'] === 'dataRow') {\n            // some browsers (like FireFox and Edge) do not trigger onBlur when the focused element is detached from DOM\n            // hence we need to trigger it manually when cell is detached.\n            const row = this.getRowByIndex(context.index);\n            const focusedCell = row && row.cells ? row.cells.find(x => x.focused) : false;\n            if (focusedCell) {\n                focusedCell.onBlur();\n            }\n        }\n    }\n\n    /**\n     * @hidden @internal\n    */\n    public cachedViewLoaded(args: ICachedViewLoadedEventArgs) {\n        if (this.hasHorizontalScroll()) {\n            const tmplId = args.context.templateID;\n            const index = args.context.index;\n            args.view.detectChanges();\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                const row = tmplId === 'dataRow' ? this.getRowByIndex(index) : null;\n                const summaryRow = tmplId === 'summaryRow' ? this.summariesRowList.find((sr) => sr.dataRowIndex === index) : null;\n                if (row && row instanceof IgxRowDirective) {\n                    this._restoreVirtState(row);\n                } else if (summaryRow) {\n                    this._restoreVirtState(summaryRow);\n                }\n            });\n        }\n    }\n\n    /**\n     * Opens the advanced filtering dialog.\n     */\n    public openAdvancedFilteringDialog() {\n        if (!this._advancedFilteringOverlayId) {\n            this._advancedFilteringOverlaySettings.positionStrategy.settings.target =\n                (this as any).rootGrid ? (this as any).rootGrid.nativeElement : this.nativeElement;\n            this._advancedFilteringOverlaySettings.outlet = this.outletDirective;\n\n            this._advancedFilteringOverlayId = this.overlayService.attach(\n                IgxAdvancedFilteringDialogComponent,\n                this._advancedFilteringOverlaySettings,\n                {\n                    injector: this.viewRef.injector,\n                    componentFactoryResolver: this.resolver\n                });\n            this.overlayService.show(this._advancedFilteringOverlayId, this._advancedFilteringOverlaySettings);\n        }\n    }\n\n    /**\n     * Closes the advanced filtering dialog.\n     * @param applyChanges indicates whether the changes should be applied\n     */\n    public closeAdvancedFilteringDialog(applyChanges: boolean) {\n        if (this._advancedFilteringOverlayId) {\n            const advancedFilteringOverlay = this.overlayService.getOverlayById(this._advancedFilteringOverlayId);\n            const advancedFilteringDialog = advancedFilteringOverlay.componentRef.instance as IgxAdvancedFilteringDialogComponent;\n\n            if (applyChanges) {\n                advancedFilteringDialog.applyChanges();\n            }\n            advancedFilteringDialog.closeDialog();\n        }\n    }\n}\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class IgxGridAPIService extends GridBaseAPIService<IgxGridComponent> {\n\n    public groupBy(expression: IGroupingExpression): void {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n        this.prepare_sorting_expression([sortingState, groupingState], expression);\n        this.grid.groupingExpressions = groupingState;\n        this.arrange_sorting_expressions();\n    }\n\n    public groupBy_multiple(expressions: IGroupingExpression[]): void {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        for (const each of expressions) {\n            this.prepare_sorting_expression([sortingState, groupingState], each);\n        }\n\n        this.grid.groupingExpressions = groupingState;\n        this.arrange_sorting_expressions();\n    }\n\n    public clear_groupby(name?: string | Array<string>) {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        if (name) {\n            const names = typeof name === 'string' ? [ name ] : name;\n            const groupedCols = groupingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            const newSortingExpr = sortingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            this.grid.groupingExpressions = groupedCols;\n            this.grid.sortingExpressions = newSortingExpr;\n            names.forEach((colName) => {\n                const grExprIndex = groupingState.findIndex((exp) => exp.fieldName === colName);\n                const grpExpandState = this.grid.groupingExpansionState;\n                /* remove expansion states related to the cleared group\n                and all with deeper hierarchy than the cleared group */\n                this.grid.groupingExpansionState = grpExpandState\n                    .filter((val) => {\n                        return val.hierarchy && val.hierarchy.length <= grExprIndex;\n                    });\n            });\n        } else {\n            // clear all\n            this.grid.groupingExpressions = [];\n            this.grid.groupingExpansionState = [];\n            for (const grExpr of groupingState) {\n                const sortExprIndex = sortingState.findIndex((exp) => exp.fieldName === grExpr.fieldName);\n                if (sortExprIndex > -1) {\n                    sortingState.splice(sortExprIndex, 1);\n                }\n            }\n            this.grid.sortingExpressions = sortingState;\n        }\n    }\n\n    public groupBy_get_expanded_for_group(groupRow: IGroupByRecord): IGroupByExpandState {\n        const grState = this.grid.groupingExpansionState;\n        const hierarchy = DataUtil.getHierarchy(groupRow);\n        return grState.find((state) =>\n            DataUtil.isHierarchyMatch(state.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy));\n    }\n\n    public groupBy_is_row_in_group(groupRow: IGroupByRecord, rowID): boolean {\n        const grid = this.grid;\n        let rowInGroup = false;\n        groupRow.records.forEach(row => {\n            if (grid.primaryKey ? row[grid.primaryKey] === rowID : row === rowID) {\n                rowInGroup = true;\n            }\n        });\n        return rowInGroup;\n    }\n\n    public groupBy_toggle_group(groupRow: IGroupByRecord) {\n        const grid = this.grid;\n        if (grid.crudService.isInEditMode) {\n            grid.endEdit(true);\n        }\n\n        const expansionState = grid.groupingExpansionState;\n        const state: IGroupByExpandState = this.groupBy_get_expanded_for_group(groupRow);\n        if (state) {\n            state.expanded = !state.expanded;\n        } else {\n            expansionState.push({\n                expanded: !grid.groupsExpanded,\n                hierarchy: DataUtil.getHierarchy(groupRow)\n            });\n        }\n        this.grid.groupingExpansionState = [...expansionState];\n        if (grid.rowEditable) {\n            grid.repositionRowEditingOverlay(grid.rowInEditMode);\n        }\n    }\n\n    public groupBy_fully_expand_group(groupRow: IGroupByRecord) {\n        const state: IGroupByExpandState = this.groupBy_get_expanded_for_group(groupRow);\n        const expanded = state ? state.expanded : this.grid.groupsExpanded;\n        if (!expanded) {\n            this.groupBy_toggle_group(groupRow);\n        }\n        if (groupRow.groupParent) {\n            this.groupBy_fully_expand_group(groupRow.groupParent);\n        }\n    }\n\n    protected remove_grouping_expression(fieldName) {\n        const groupingExpressions = this.grid.groupingExpressions;\n        const index = groupingExpressions.findIndex((expr) => expr.fieldName === fieldName);\n        if (index !== -1) {\n            groupingExpressions.splice(index, 1);\n        }\n    }\n\n    public arrange_sorting_expressions() {\n        const groupingState = this.grid.groupingExpressions;\n        this.grid.sortingExpressions.sort((a, b) => {\n            const groupExprA = groupingState.find((expr) => expr.fieldName === a.fieldName);\n            const groupExprB = groupingState.find((expr) => expr.fieldName === b.fieldName);\n            if (groupExprA && groupExprB) {\n                return groupingState.indexOf(groupExprA) > groupingState.indexOf(groupExprB) ? 1 : -1;\n            } else if (groupExprA) {\n                return -1;\n            } else if (groupExprB) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n    }\n\n    public get_groupBy_record_id(gRow: IGroupByRecord): string {\n        let recordId = '{ ';\n        const hierrarchy = DataUtil.getHierarchy(gRow);\n\n        for (let i = 0; i < hierrarchy.length; i++) {\n            const groupByKey = hierrarchy[i];\n            recordId += `'${groupByKey.fieldName}': '${groupByKey.value}'`;\n\n            if (i < hierrarchy.length - 1) {\n                recordId += ', ';\n            }\n        }\n        recordId += ' }';\n\n        return recordId;\n    }\n\n}\n","import {\n    Component, ChangeDetectionStrategy, Input, Output, EventEmitter, ContentChild, ViewChildren,\n    QueryList, ViewChild, ElementRef, TemplateRef, DoCheck, AfterContentInit, HostBinding, forwardRef, OnInit, AfterViewInit, HostListener\n} from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { cloneArray, IBaseEventArgs } from '../../core/utils';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IgxGroupByRowTemplateDirective, IgxGridDetailTemplateDirective } from './grid.directives';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IBaseChipEventArgs, IChipClickEventArgs, IChipKeyDownEventArgs } from '../../chips/chip.component';\nimport { IChipsAreaReorderEventArgs } from '../../chips/chips-area.component';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { takeUntil, first } from 'rxjs/operators';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { IgxColumnResizingService } from '../resizing/resizing.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { IgxDragIndicatorIconDirective } from '../row-drag.directive';\nimport { IgxGridMRLNavigationService } from '../grid-mrl-navigation.service';\nimport { IgxRowIslandAPIService } from '../hierarchical-grid/row-island-api.service';\nimport { FilterMode } from '../common/enums';\nimport { GridType } from '../common/grid.interface';\nimport { DeprecateMethod } from '../../core/deprecateDecorators';\n\nlet NEXT_ID = 0;\n\nexport interface IGroupingDoneEventArgs extends IBaseEventArgs {\n    expressions: Array<ISortingExpression> | ISortingExpression;\n    groupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n    ungroupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n}\n\n/**\n * Grid provides a way to present and manipulate tabular data.\n *@igxModule IgxGridModule\n *@igxGroup Grids & Lists\n *@igxKeywords grid, table\n *@igxTheme igx-grid-theme\n *@remarks\n * The Ignite UI Grid is used for presenting and manipulating tabular data in the simplest way possible.  Once data\n * has been bound, it can be manipulated through filtering, sorting & editing operations.\n *@example\n * ```html\n * <igx-grid [data]=\"employeeData\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    providers: [\n        IgxGridNavigationService,\n        IgxGridSummaryService,\n        IgxGridSelectionService,\n        IgxGridCRUDService,\n        { provide: GridBaseAPIService, useClass: IgxGridAPIService },\n        { provide: IgxGridBaseDirective, useExisting: forwardRef(() => IgxGridComponent) },\n        IgxFilteringService,\n        IgxColumnResizingService,\n        IgxForOfSyncService,\n        IgxForOfScrollSyncService,\n        IgxRowIslandAPIService\n    ],\n    selector: 'igx-grid',\n    templateUrl: './grid.component.html'\n})\nexport class IgxGridComponent extends IgxGridBaseDirective implements GridType, OnInit, DoCheck, AfterContentInit, AfterViewInit {\n    private _id = `igx-grid-${NEXT_ID++}`;\n    /**\n     * @hidden @internal\n     */\n    public groupingResult: any[];\n\n    /**\n     * @hidden @internal\n     */\n    public groupingMetadata: any[];\n\n    /**\n     * @hidden @internal\n     */\n    public groupingFlatResult: any[];\n    /**\n     * @hidden\n     */\n    protected _groupingExpressions: IGroupingExpression[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupingExpandState: IGroupByExpandState[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupRowTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected _groupAreaTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected groupingDiffer;\n    private _data;\n    private _hideGroupedColumns = false;\n    private _dropAreaMessage = null;\n\n    /**\n     * Gets/Sets the value of the `id` attribute.\n     * @remarks\n     * If not provided it will be automatically generated.\n     * @example\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * Gets/Sets the array of data that populates the `IgxGridComponent`.\n     * @example\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n    */\n    @Input()\n    public get data(): any[] {\n        return this._data;\n    }\n\n    public set data(value: any[]) {\n        this._data = value || [];\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Gets/Sets an array of objects containing the filtered data.\n     * @example\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * this.grid.filteredData = [...];\n     * ```\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    set filteredData(value) {\n        this._filteredData = value;\n    }\n\n    /**\n     * Gets/Sets the total number of records in the data source.\n     * @remarks\n     * This property is required for remote grid virtualization to function when it is bound to remote data.\n     * @example\n     * ```typescript\n     * const itemCount = this.grid1.totalItemCount;\n     * this.grid1.totalItemCount = 55;\n     * ```\n     */\n    set totalItemCount(count) {\n        this.verticalScrollContainer.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    get totalItemCount() {\n        return this.verticalScrollContainer.totalItemCount;\n    }\n\n    private get _gridAPI(): IgxGridAPIService {\n        return this.gridAPI as IgxGridAPIService;\n    }\n    private _filteredData = null;\n\n    private childDetailTemplates: Map<any, any> = new Map();\n\n    /**\n     * Gets/Sets the group by state.\n     * @example\n     * ```typescript\n     * let groupByState = this.grid.groupingExpressions;\n     * this.grid.groupingExpressions = [...];\n     * ```\n     * @remarks\n     * Supports two-way data binding.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(groupingExpressions)]=\"model.groupingExpressions\"></igx-grid>\n     * ```\n     */\n    @Input()\n    get groupingExpressions(): IGroupingExpression[] {\n        return this._groupingExpressions;\n    }\n\n    set groupingExpressions(value: IGroupingExpression[]) {\n        if (value && value.length > 10) {\n            throw Error('Maximum amount of grouped columns is 10.');\n        }\n        const oldExpressions: IGroupingExpression[] = this.groupingExpressions;\n        const newExpressions: IGroupingExpression[] = value;\n        this._groupingExpressions = cloneArray(value);\n        this.groupingExpressionsChange.emit(this._groupingExpressions);\n        this.chipsGoupingExpressions = cloneArray(value);\n        if (this._gridAPI.grid) {\n            /* grouping should work in conjunction with sorting\n            and without overriding separate sorting expressions */\n            this._applyGrouping();\n            this._gridAPI.arrange_sorting_expressions();\n            this.notifyChanges();\n        } else {\n            // setter called before grid is registered in grid API service\n            this.sortingExpressions.unshift.apply(this.sortingExpressions, this._groupingExpressions);\n        }\n        if (!this._init && JSON.stringify(oldExpressions) !== JSON.stringify(newExpressions) && this.columnList) {\n            const groupedCols: IgxColumnComponent[] = [];\n            const ungroupedCols: IgxColumnComponent[] = [];\n            const groupedColsArr = newExpressions.filter((obj) => {\n                return !oldExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            groupedColsArr.forEach((elem) => {\n                groupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            const ungroupedColsArr = oldExpressions.filter((obj) => {\n                return !newExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            ungroupedColsArr.forEach((elem) => {\n                ungroupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            this.notifyChanges();\n            const groupingDoneArgs: IGroupingDoneEventArgs = {\n                expressions: newExpressions,\n                groupedColumns: groupedCols,\n                ungroupedColumns: ungroupedCols\n            };\n            this.onGroupingDone.emit(groupingDoneArgs);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public groupingExpressionsChange = new EventEmitter<IGroupingExpression[]>();\n\n    /**\n     * Gets/Sets a list of expansion states for group rows.\n     * @remarks\n     * Includes only states that differ from the default one (controlled through groupsExpanded and states that the user has changed.\n     * Contains the expansion state (expanded: boolean) and the unique identifier for the group row (Array).\n     * Supports two-way data binding.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(groupingExpansionState)]=\"model.groupingExpansionState\"></igx-grid>\n     * ```\n     */\n    @Input()\n    get groupingExpansionState() {\n        return this._groupingExpandState;\n    }\n\n    set groupingExpansionState(value) {\n        if (value !== this._groupingExpandState) {\n            this.groupingExpansionStateChange.emit(value);\n        }\n        this._groupingExpandState = value;\n        if (this.gridAPI.grid) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n    *@hidden @internal\n    */\n    @Output()\n    public groupingExpansionStateChange = new EventEmitter<IGroupByExpandState[]>();\n\n    /**\n     * Gets/Sets whether created groups are rendered expanded or collapsed.\n     * @remarks\n     * The default rendered state is expanded.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [groupsExpanded]=\"false\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public groupsExpanded = true;\n\n    /**\n     * Gets the hierarchical representation of the group by records.\n     * @example\n     * ```typescript\n     * let groupRecords = this.grid.groupsRecords;\n     * ```\n     */\n    public groupsRecords: IGroupByRecord[] = [];\n\n    /**\n     * Gets/Sets whether the grouped columns should be hidden.\n     * @remarks\n     * The default value is \"false\"\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [hideGroupedColumns]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Input()\n    public get hideGroupedColumns() {\n        return this._hideGroupedColumns;\n    }\n\n    public set hideGroupedColumns(value: boolean) {\n        if (value) {\n            this.groupingDiffer = this.differs.find(this.groupingExpressions).create();\n        } else {\n            this.groupingDiffer = null;\n        }\n        if (this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(value);\n        }\n\n        this._hideGroupedColumns = value;\n    }\n\n    /**\n     * Gets/Sets the message displayed inside the GroupBy drop area where columns can be dragged on.\n     * @remarks\n     * The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * @example\n     * ```html\n     * <igx-grid dropAreaMessage=\"Drop here to group!\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     * ```\n     */\n    @Input()\n    set dropAreaMessage(value: string) {\n        this._dropAreaMessage = value;\n        this.notifyChanges();\n    }\n\n    get dropAreaMessage(): string {\n        return this._dropAreaMessage || this.resourceStrings.igx_grid_groupByArea_message;\n    }\n\n    /**\n     * Gets/Sets the template that will be rendered as a GroupBy drop area.\n     *@remarks\n     * The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * @example\n     * ```html\n     * <igx-grid [dropAreaTemplate]=\"dropAreaRef\">\n     * </igx-grid>\n     * <ng-template #myDropArea>\n     *      <span> Custom drop area! </span>\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public dropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * Emitted when columns are grouped/ungrouped.\n     * @remarks\n     * The `onGroupingDone` event would be raised only once if several columns get grouped at once by calling\n     * the `groupBy()` or `clearGrouping()` API methods and passing an array as an argument.\n     * The event arguments provide the `expressions`, `groupedColumns` and `ungroupedColumns` properties, which contain\n     * the `ISortingExpression` and the `IgxColumnComponent` related to the grouping/ungrouping operation.\n     * Please note that `groupedColumns` and `ungroupedColumns` show only the **newly** changed columns (affected by the **last**\n     * grouping/ungrouping operation), not all columns which are currently grouped/ungrouped.\n     * columns.\n     * @example\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onGroupingDone)=\"groupingDone($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onGroupingDone = new EventEmitter<IGroupingDoneEventArgs>();\n\n    /**\n     * @hidden @internal\n     */\n    @ContentChild(IgxGroupByRowTemplateDirective, { read: IgxGroupByRowTemplateDirective })\n    protected groupTemplate: IgxGroupByRowTemplateDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @ContentChild(IgxGridDetailTemplateDirective, { read: IgxGridDetailTemplateDirective, static: false })\n    protected gridDetailsTemplate: IgxGridDetailTemplateDirective;\n\n    @ViewChildren(IgxGridGroupByRowComponent, { read: IgxGridGroupByRowComponent })\n    private _groupsRowList: QueryList<IgxGridGroupByRowComponent>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('defaultDropArea', { read: TemplateRef, static: true })\n    public defaultDropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * Gets the list of group rows.\n     * @example\n     * ```typescript\n     * const groupList = this.grid.groupsRowList;\n     * ```\n     */\n    public get groupsRowList() {\n        const res = new QueryList<any>();\n        if (!this._groupsRowList) {\n            return res;\n        }\n        const rList = this._groupsRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        }).sort((item1, item2) => item1.index - item2.index);\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * @hidden @internal\n    */\n    @ViewChild('groupArea')\n    public groupArea: ElementRef;\n    /**\n    * @hidden @internal\n    */\n    @ViewChild('record_template', { read: TemplateRef, static: true })\n    protected recordTemplate: TemplateRef<any>;\n\n    @ViewChild('detail_template_container', { read: TemplateRef, static: true })\n    protected detailTemplateContainer: TemplateRef<any>;\n\n    /**\n    * @hidden @internal\n    */\n    @ContentChild(IgxGridDetailTemplateDirective, { read: TemplateRef, static: false })\n    public detailTemplate: TemplateRef<any> = null;\n\n    @ViewChild('group_template', { read: TemplateRef, static: true })\n    protected defaultGroupTemplate: TemplateRef<any>;\n\n    @ViewChild('summary_template', { read: TemplateRef, static: true })\n    protected summaryTemplate: TemplateRef<any>;\n\n\n\n\n    /**\n     *@hidden @internal\n     */\n    @Output()\n    private _focusIn = new  EventEmitter<any>();\n    @HostListener('focusin') onFocusIn() {\n        this._focusIn.emit();\n    }\n\n    /**\n     *@hidden @internal\n    */\n    public getDetailsContext(rowData, index) {\n        return {\n            $implicit: rowData,\n            index: index\n        };\n    }\n\n    /**\n    *@hidden @internal\n    */\n    public preventContainerScroll(evt) {\n        if (evt.target.scrollTop !== 0 && this.hasDetails) {\n            const activeElem = document.activeElement;\n            this.verticalScrollContainer.addScrollTop(evt.target.scrollTop);\n            evt.target.scrollTop = 0;\n            this.verticalScrollContainer.onChunkLoad.pipe(first()).subscribe(() => {\n                const active = this.selectionService.activeElement;\n                const currRow = (this.navigation as any).getRowByIndex(active.row, '');\n                // check if the focused element was a child of the details view\n                if (this.isDetailRecord(active.row) && currRow && currRow.contains(activeElem)) {\n                    // Some browsers (like Edge/IE) lose focus after scrolling even when the element was in the DOM.\n                    (activeElem as any).focus({ preventScroll: true });\n                    return;\n                }\n                const nextCellTarget = this.navigation.getCellElementByVisibleIndex(active.row, active.column);\n                const nextRowTarget = (this.navigation as any).getRowByIndex(active.row + 1, '');\n                if (nextCellTarget) {\n                    nextCellTarget.focus({ preventScroll: true });\n                } else if (nextRowTarget) {\n                    nextRowTarget.focus({ preventScroll: true });\n                }\n            });\n        }\n    }\n\n    /**\n    *@hidden @internal\n    */\n    public trackChanges(index, rec) {\n        if (rec.detailsData !== undefined) {\n            return rec.detailsData;\n        }\n        return rec;\n    }\n\n    /**\n    *@hidden @internal\n    */\n    public detailsViewFocused(container, rowIndex) {\n        this.selectionService.activeElement = {\n            row: rowIndex,\n            column: this.selectionService.activeElement ? this.selectionService.activeElement.column : 0\n        };\n    }\n\n    /**\n    *@hidden @internal\n    */\n    public detailsKeyboardHandler(event, rowIndex, container) {\n        const colIndex = this.selectionService.activeElement ? this.selectionService.activeElement.column : 0;\n        const shift = event.shiftKey;\n        const ctrl = event.ctrlKey;\n        const key = event.key.toLowerCase();\n        const target = event.target;\n        if (key === 'tab') {\n            event.stopPropagation();\n            const lastColIndex = this.unpinnedColumns[this.unpinnedColumns.length - 1].visibleIndex;\n            if (shift && target === container) {\n                // shift + tab from details to data row\n                event.preventDefault();\n                this.navigateTo(rowIndex - 1, lastColIndex,\n                    (args) => args.target.nativeElement.focus());\n            } else if (!shift) {\n                // when the next element is focused via tab check if it is an element outside the details view\n                // if so we have exited the details view and focus should move to the first cell in the next row\n                this._focusIn.pipe(first()).subscribe(() => {\n                    if (!container.contains(document.activeElement)) {\n                      this.navigation.performTab(container, {row: rowIndex, column: lastColIndex});\n                    }\n                });\n            }\n        } else if (key === 'arrowup' && !ctrl && target === container) {\n            this.navigation.navigateUp(container, {row: rowIndex, column: colIndex});\n        } else if (key === 'arrowup' && ctrl && target === container) {\n            this.navigation.navigateTop(colIndex);\n        } else if (key === 'arrowdown' && !ctrl && target === container) {\n            this.navigation.navigateDown(container, {row: rowIndex, column: colIndex});\n        } else if (key === 'arrowdown' && ctrl && target === container) {\n            this.navigation.navigateBottom(colIndex);\n        }\n    }\n\n\n    /**\n    *@hidden @internal\n    */\n    public get hasDetails() {\n        return !!this.gridDetailsTemplate;\n    }\n\n    /**\n    * @hidden @internal\n    */\n   public getRowTemplate(rowData) {\n        if (this.isGroupByRecord(rowData)) {\n            return this.defaultGroupTemplate;\n        } else if (this.isSummaryRow(rowData)) {\n            return this.summaryTemplate;\n        }  else if (this.hasDetails && this.isDetailRecord(rowData)) {\n                return this.detailTemplateContainer;\n        } else {\n            return this.recordTemplate;\n        }\n   }\n\n    /**\n    * @hidden @internal\n    */\n   public isDetailRecord(record) {\n    return record.detailsData !== undefined;\n   }\n    /**\n     * @hidden @internal\n     */\n    get groupAreaHostClass(): string {\n        return this.getComponentDensityClass('igx-drop-area');\n    }\n\n    /**\n     * Gets/Sets the template reference for the group row.\n     * @example\n     * ```\n     * const groupRowTemplate = this.grid.groupRowTemplate;\n     * this.grid.groupRowTemplate = myRowTemplate;\n     * ```\n     */\n    get groupRowTemplate(): TemplateRef<any> {\n        return this._groupRowTemplate;\n    }\n\n    set groupRowTemplate(template: TemplateRef<any>) {\n        this._groupRowTemplate = template;\n        this.notifyChanges();\n    }\n\n\n    /**\n     * Gets/Sets the template reference of the `IgxGridComponent`'s group area.\n     * @example\n     * ```typescript\n     * const groupAreaTemplate = this.grid.groupAreaTemplate;\n     * this.grid.groupAreaTemplate = myAreaTemplate.\n     * ```\n     */\n    get groupAreaTemplate(): TemplateRef<any> {\n        return this._groupAreaTemplate;\n    }\n\n    set groupAreaTemplate(template: TemplateRef<any>) {\n        this._groupAreaTemplate = template;\n        this.notifyChanges();\n    }\n\n    /**\n     * Groups by a new `IgxColumnComponent` based on the provided expression, or modifies an existing one.\n     * @remarks\n     * Also allows for multiple columns to be grouped at once if an array of `ISortingExpression` is passed.\n     * The onGroupingDone event would get raised only **once** if this method gets called multiple times with the same arguments.\n     * @example\n     * ```typescript\n     * this.grid.groupBy({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * this.grid.groupBy([\n            { fieldName: name1, dir: SortingDirection.Asc, ignoreCase: false },\n            { fieldName: name2, dir: SortingDirection.Desc, ignoreCase: true },\n            { fieldName: name3, dir: SortingDirection.Desc, ignoreCase: false }\n        ]);\n     * ```\n     */\n    public groupBy(expression: IGroupingExpression | Array<IGroupingExpression>): void {\n        if (this.checkIfNoColumnField(expression)) {\n            return;\n        }\n        this.endEdit(true);\n        if (expression instanceof Array) {\n            this._gridAPI.groupBy_multiple(expression);\n        } else {\n            this._gridAPI.groupBy(expression);\n        }\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Clears grouping for particular column, array of columns or all columns.\n     * @remarks\n     * Clears all grouping in the grid, if no parameter is passed.\n     * If a parameter is provided, clears grouping for a particular column or an array of columns.\n     * @example\n     * ```typescript\n     * this.grid.clearGrouping(); //clears all grouping\n     * this.grid.clearGrouping(\"ID\"); //ungroups a single column\n     * this.grid.clearGrouping([\"ID\", \"Column1\", \"Column2\"]); //ungroups multiple columns\n     * ```\n     *@param name Name of column or array of column names to be ungrouped.\n     */\n    public clearGrouping(name?: string | Array<string>): void {\n        this._gridAPI.clear_groupby(name);\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Returns if a group is expanded or not.\n     * @param group The group record.\n     * @example\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const expandedGroup = this.grid.isExpandedGroup(this.groupRow);\n     * ```\n     */\n    public isExpandedGroup(group: IGroupByRecord): boolean {\n        const state: IGroupByExpandState = this._getStateForGroupRow(group);\n        return state ? state.expanded : this.groupsExpanded;\n    }\n\n    /**\n     * Toggles the expansion state of a group.\n     * @param groupRow The group record to toggle.\n     * @example\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const toggleExpGroup = this.grid.toggleGroup(this.groupRow);\n     * ```\n     */\n    public toggleGroup(groupRow: IGroupByRecord) {\n        this._toggleGroup(groupRow);\n        this.notifyChanges();\n    }\n\n    /**\n     * Expands the specified group and all of its parent groups.\n     * @param groupRow The group record to fully expand.\n     * @example\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * this.grid.fullyExpandGroup(this.groupRow);\n     * ```\n     */\n    public fullyExpandGroup(groupRow: IGroupByRecord) {\n        this._fullyExpandGroup(groupRow);\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isGroupByRecord(record: any): boolean {\n        // return record.records instance of GroupedRecords fails under Webpack\n        return record.records && record.records.length;\n    }\n\n    /**\n     * Toggles the expansion state of all group rows recursively.\n     * @example\n     * ```typescript\n     * this.grid.toggleAllGroupRows;\n     * ```\n     */\n    public toggleAllGroupRows() {\n        this.groupingExpansionState = [];\n        this.groupsExpanded = !this.groupsExpanded;\n        this.notifyChanges();\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has groupable columns.\n     * @example\n     * ```typescript\n     * const groupableGrid = this.grid.hasGroupableColumns;\n     * ```\n     */\n    get hasGroupableColumns(): boolean {\n        return this.columnList.some((col) => col.groupable && !col.columnGroup);\n    }\n\n    private _setGroupColsVisibility(value) {\n        if (this.columnList.length > 0 && !this.hasColumnLayouts) {\n            this.groupingExpressions.forEach((expr) => {\n                const col = this.getColumnByName(expr.fieldName);\n                col.hidden = value;\n            });\n        }\n    }\n\n    /**\n     * Gets if the grid's group by drop area is visible.\n     * @example\n     * ```typescript\n     * const dropVisible = this.grid.dropAreaVisible;\n     * ```\n     */\n    public get dropAreaVisible(): boolean {\n        return (this.draggedColumn && this.draggedColumn.groupable) ||\n            !this.chipsGoupingExpressions.length;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected _getStateForGroupRow(groupRow: IGroupByRecord): IGroupByExpandState {\n        return this._gridAPI.groupBy_get_expanded_for_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _toggleGroup(groupRow: IGroupByRecord) {\n        this._gridAPI.groupBy_toggle_group(groupRow);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected _fullyExpandGroup(groupRow: IGroupByRecord) {\n        this._gridAPI.groupBy_fully_expand_group(groupRow);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected _applyGrouping() {\n        this._gridAPI.sort_multiple(this._groupingExpressions);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isColumnGrouped(fieldName: string): boolean {\n        return this.groupingExpressions.find(exp => exp.fieldName === fieldName) ? true : false;\n    }\n\n    /**\n    * @hidden @internal\n    */\n    public getContext(rowData, rowIndex): any {\n        if (this.isDetailRecord(rowData)) {\n            const cachedData = this.childDetailTemplates.get(rowData.detailsData);\n            const rowID = this.primaryKey ? rowData.detailsData[this.primaryKey] : this.data.indexOf(rowData.detailsData);\n            if (cachedData) {\n                const view = cachedData.view;\n                const tmlpOutlet = cachedData.owner;\n                return {\n                    $implicit: rowData.detailsData,\n                    moveView: view,\n                    owner: tmlpOutlet,\n                    index: this.dataView.indexOf(rowData),\n                    templateID: 'detailRow-' + rowID\n                };\n            } else {\n                // child rows contain unique grids, hence should have unique templates\n                return {\n                    $implicit: rowData.detailsData,\n                    templateID: 'detailRow-' + rowID,\n                    index: this.dataView.indexOf(rowData)\n                };\n            }\n        }\n        return {\n            $implicit: rowData,\n            index: rowIndex,\n            templateID: this.isGroupByRecord(rowData) ? 'groupRow' : this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow'\n        };\n    }\n\n     /**\n     * @hidden @internal\n     */\n    public viewCreatedHandler(args) {\n        if (args.context.templateID.indexOf('detailRow') !== -1) {\n            this.childDetailTemplates.set(args.context.$implicit, args);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public viewMovedHandler(args) {\n        if (args.context.templateID.indexOf('detailRow') !== -1) {\n            // view was moved, update owner in cache\n            const key = args.context.$implicit;\n            const cachedData = this.childDetailTemplates.get(key);\n            cachedData.owner = args.owner;\n        }\n    }\n\n\n    /**\n    * @hidden @internal\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onChipRemoved(event: IBaseChipEventArgs) {\n        this.clearGrouping(event.owner.id);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public chipsOrderChanged(event: IChipsAreaReorderEventArgs) {\n        const newGrouping = [];\n        for (let i = 0; i < event.chipsArray.length; i++) {\n            const expr = this.groupingExpressions.filter((item) => {\n                return item.fieldName === event.chipsArray[i].id;\n            })[0];\n\n            if (!this.getColumnByName(expr.fieldName).groupable) {\n                // disallow changing order if there are columns with groupable: false\n                return;\n            }\n            newGrouping.push(expr);\n        }\n        this.groupingExpansionState = [];\n        this.chipsGoupingExpressions = newGrouping;\n\n        if (event.originalEvent instanceof KeyboardEvent) {\n            // When reordered using keyboard navigation, we don't have `onMoveEnd` event.\n            this.groupingExpressions = this.chipsGoupingExpressions;\n        }\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public chipsMovingEnded() {\n        this.groupingExpressions = this.chipsGoupingExpressions;\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onChipClicked(event: IChipClickEventArgs) {\n        const sortingExpr = this.sortingExpressions;\n        const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n        columnExpr.dir = 3 - columnExpr.dir;\n        this.sort(columnExpr);\n        this.notifyChanges();\n    }\n\n    /**\n     *@hidden @internal\n     */\n    public onChipKeyDown(event: IChipKeyDownEventArgs) {\n        if (event.originalEvent.key === ' ' || event.originalEvent.key === 'Spacebar' || event.originalEvent.key === 'Enter') {\n            const sortingExpr = this.sortingExpressions;\n            const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n            columnExpr.dir = 3 - columnExpr.dir;\n            this.sort(columnExpr);\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected get defaultTargetBodyHeight(): number {\n        const allItems = this.totalItemCount || this.dataLength;\n        return this.renderedRowHeight * Math.min(this._defaultTargetRecordNumber,\n            this.paging ? Math.min(allItems, this.perPage) : allItems);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected getGroupAreaHeight(): number {\n        return this.groupArea ? this.groupArea.nativeElement.offsetHeight : 0;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        if (this.groupingExpressions && this.groupingExpressions.length\n            && typeof(row) !== 'number') {\n            const rowIndex = this.groupingResult.indexOf(row);\n            const groupByRecord = this.groupingMetadata[rowIndex];\n            if (groupByRecord) {\n                this._fullyExpandGroup(groupByRecord);\n            }\n        }\n\n        super.scrollTo(row, column, this.groupingFlatResult);\n    }\n\n    /**\n    * @hidden @internal\n    */\n    public get dropAreaTemplateResolved(): TemplateRef<any> {\n        if (this.dropAreaTemplate) {\n            return this.dropAreaTemplate;\n        } else {\n            return this.defaultDropAreaTemplate;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getGroupByChipTitle(expression: IGroupingExpression): string {\n        const column = this.getColumnByName(expression.fieldName);\n        return (column && column.header) || expression.fieldName;\n    }\n    /**\n     * @hidden @internal\n     */\n    public get iconTemplate() {\n        if (this.groupsExpanded) {\n            return this.headerExpandIndicatorTemplate || this.defaultExpandedTemplate;\n        } else {\n            return this.headerCollapseIndicatorTemplate || this.defaultCollapsedTemplate;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getColumnGroupable(fieldName: string): boolean {\n        const column = this.getColumnByName(fieldName);\n        return column && column.groupable;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterContentInit() {\n        super.ngAfterContentInit();\n        if (this.allowFiltering && this.hasColumnLayouts) {\n            this.filterMode = FilterMode.excelStyleFilter;\n        }\n        if (this.groupTemplate) {\n            this._groupRowTemplate = this.groupTemplate.template;\n        }\n\n        if (this.hideGroupedColumns && this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(this.hideGroupedColumns);\n        }\n        this._setupNavigationService();\n    }\n\n    /**\n    * @hidden @internal\n    */\n    public ngAfterViewInit() {\n        super.ngAfterViewInit();\n        this.verticalScrollContainer.onBeforeViewDestroyed.pipe(takeUntil(this.destroy$)).subscribe((view) => {\n            const rowData = view.context.$implicit;\n            if (this.isDetailRecord(rowData)) {\n                const cachedData = this.childDetailTemplates.get(rowData.detailsData);\n                if (cachedData) {\n                    const tmlpOutlet = cachedData.owner;\n                    tmlpOutlet._viewContainerRef.detach(0);\n                }\n            }\n        });\n    }\n\n    /**\n    * @hidden @internal\n    */\n    public ngOnInit() {\n        super.ngOnInit();\n        this.onGroupingDone.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.endEdit(true);\n            this.summaryService.updateSummaryCache(args);\n            this._headerFeaturesWidth = NaN;\n        });\n    }\n\n    /**\n    * @hidden @internal\n    */\n    public ngDoCheck(): void {\n        if (this.groupingDiffer && this.columnList && !this.hasColumnLayouts) {\n            const changes = this.groupingDiffer.diff(this.groupingExpressions);\n            if (changes && this.columnList.length > 0) {\n                changes.forEachAddedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = true;\n                });\n                changes.forEachRemovedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = false;\n                });\n            }\n        }\n        super.ngDoCheck();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getSelectedData(formatters = false, headers = false): any[] {\n        if (this.groupingExpressions.length) {\n            const source = [];\n\n            const process = (record) => {\n                if (record.expression || record.summaries) {\n                    source.push(null);\n                    return;\n                }\n                source.push(record);\n\n            };\n\n            this.dataView.forEach(process);\n            return this.extractDataFromSelection(source, formatters, headers);\n        } else {\n            return super.getSelectedData(formatters, headers);\n        }\n    }\n\n    private _setupNavigationService() {\n        if (this.hasColumnLayouts) {\n            this.navigation = new IgxGridMRLNavigationService();\n            this.navigation.grid = this;\n        }\n    }\n\n    private checkIfNoColumnField(expression: IGroupingExpression | Array<IGroupingExpression> | any): boolean {\n        if (expression instanceof Array) {\n            for (const singleExpression of expression) {\n                if (!singleExpression.fieldName) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        return !expression.fieldName;\n    }\n\n}\n","import { Directive, Optional, Input, NgModule, Host, ComponentFactoryResolver, ViewContainerRef } from '@angular/core';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { IgxColumnComponent } from './columns/column.component';\nimport { IGroupingExpression } from '../data-operations/grouping-expression.interface';\nimport { IPagingState } from '../data-operations/paging-state.interface';\nimport { DataType } from '../data-operations/data-util';\nimport { IgxBooleanFilteringOperand, IgxNumberFilteringOperand, IgxDateFilteringOperand,\n    IgxStringFilteringOperand, IFilteringOperation} from '../data-operations/filtering-condition';\nimport { GridSelectionRange } from './selection/selection.service';\nimport { IGroupByExpandState } from '../data-operations/groupby-expand-state.interface';\nimport { IGroupingState } from '../data-operations/groupby-state.interface';\nimport { IgxGridComponent } from './grid/grid.component';\n\nexport interface IGridState {\n    columns?: IColumnState[];\n    filtering?: IFilteringExpressionsTree;\n    advancedFiltering?: IFilteringExpressionsTree;\n    paging?: IPagingState;\n    sorting?: ISortingExpression[];\n    groupBy?: IGroupingState;\n    cellSelection?: GridSelectionRange[];\n    rowSelection?: any[];\n}\n\nexport interface IGridStateOptions {\n    columns?: boolean;\n    filtering?: boolean;\n    advancedFiltering?: boolean;\n    sorting?: boolean;\n    groupBy?: boolean;\n    paging?: boolean;\n    cellSelection?: boolean;\n    rowSelection?: boolean;\n}\n\nexport interface IColumnState {\n    pinned: boolean;\n    sortable: boolean;\n    filterable: boolean;\n    editable: boolean;\n    sortingIgnoreCase: boolean;\n    filteringIgnoreCase: boolean;\n    headerClasses: string;\n    headerGroupClasses: string;\n    maxWidth: string;\n    groupable: boolean;\n    movable: boolean;\n    hidden: boolean;\n    dataType: DataType;\n    hasSummary: boolean;\n    field: string;\n    width: any;\n    header: string;\n    resizable: boolean;\n    searchable: boolean;\n}\n\nconst COLUMNS = 'columns';\nconst FILTERING = 'filtering';\nconst ADVANCED_FILTERING = 'advancedFiltering';\nconst SORTING = 'sorting';\nconst GROUPBY = 'groupBy';\nconst PAGING = 'paging';\nconst ROW_SELECTION = 'rowSelection';\nconst CELL_SELECTION = 'cellSelection';\n\n@Directive({\n    selector: '[igxGridState]'\n})\nexport class IgxGridStateDirective {\n\n    private _options: IGridStateOptions = {\n        columns: true,\n        filtering: true,\n        advancedFiltering: true,\n        sorting: true,\n        groupBy: true,\n        paging: true,\n        cellSelection: true,\n        rowSelection: true\n    };\n\n    private state: IGridState;\n\n    /**\n     *  An object with options determining if a certain feature state should be saved.\n     *\n     * ```html\n     * <igx-grid [igxGridState]=\"options\"></igx-grid>\n     * ```\n     * ```typescript\n     * public options = {selection: false, advancedFiltering: false};\n     * ```\n     */\n    @Input('igxGridState')\n    public get options(): IGridStateOptions {\n       return this._options;\n    }\n\n    public set options(value: IGridStateOptions) {\n        Object.assign(this._options, value);\n    }\n\n    /**\n     * @hidden\n     */\n    constructor(\n        @Host() @Optional() private grid: IgxGridComponent,\n        private resolver: ComponentFactoryResolver,\n        protected viewRef: ViewContainerRef) { }\n\n    /**\n     * Gets the state of a feature or states of all grid features, unless a certain feature is disabled through the `options` property.\n     * @param `serialize` determines whether the returned object will be serialized to JSON string. Default value is false.\n     * @param `feature` string or array of strings determining the features which state to retrieve. If skipped, returns all.\n     * @returns Returns the serialized to JSON string IGridState object, or the non-serialized IGridState object.\n     * ```html\n     * <igx-grid [igxGridState]=\"options\"></igx-grid>\n     * ```\n     * ```typescript\n     * @ViewChild(IgxGridStateDirective, { static: true }) public state;\n     * let state =  this.state.getState();\n     * ```\n     */\n    public getState(serialize = true, feature?: string | string[]): IGridState | string  {\n        let state: IGridState | string;\n        if (feature) {\n            state = {};\n            if (Array.isArray(feature)) {\n                feature.forEach(f => {\n                    state = Object.assign(state, this.getGridFeature(f));\n                });\n            } else {\n                state = this.getGridFeature(feature);\n            }\n        } else {\n            state = this.getAllGridFeatures();\n        }\n        if (serialize) {\n            state = JSON.stringify(state, this.stringifyCallback);\n            return state as string;\n        } else {\n            return state as IGridState;\n        }\n    }\n\n    /**\n     * Restores grid features' state based on the IGridState object passed as an argument.\n     * @param IGridState object to restore state from.\n     * @returns\n     * ```html\n     * <igx-grid [igxGridState]=\"options\"></igx-grid>\n     * ```\n     * ```typescript\n     * @ViewChild(IgxGridStateDirective, { static: true }) public state;\n     * this.state.setState(gridState);\n     * ```\n     */\n    public setState(state: IGridState | string) {\n        if (typeof state === 'string') {\n            state = JSON.parse(state);\n        }\n        this.state = state as IGridState;\n        this.restoreGridState();\n        this.grid.cdr.detectChanges();\n    }\n\n    /**\n     * The method that calls corresponding methods to restore feature from this.state object.\n     */\n    private restoreGridState() {\n        for (const key of Object.keys(this.state)) {\n            if (this.state[key]) {\n                this.restoreFeature(key, this.state[key]);\n            }\n        }\n    }\n\n    /**\n     * Restores the state of a feature.\n     */\n    private restoreFeature(feature: string, state: IColumnState[] | IPagingState | ISortingExpression[] |\n        IGroupingState | FilteringExpressionsTree | GridSelectionRange[] | any[]) {\n        switch (feature) {\n            case COLUMNS: {\n               this.restoreColumns(state as IColumnState[]);\n               break;\n            }\n            case FILTERING: {\n                this.restoreFiltering(state as FilteringExpressionsTree);\n                break;\n            }\n            case ADVANCED_FILTERING: {\n                this.restoreAdvancedFiltering(state as FilteringExpressionsTree);\n                break;\n            }\n            case SORTING: {\n                this.restoreSorting(state as ISortingExpression[]);\n                break;\n             }\n             case GROUPBY: {\n                this.restoreGroupBy(state as IGroupingState);\n                break;\n             }\n             case PAGING: {\n                this.restorePaging(state as IPagingState);\n                break;\n              }\n              case ROW_SELECTION: {\n                this.restoreRowSelection(state as any[]);\n                break;\n              }\n              case CELL_SELECTION: {\n                this.restoreCellSelection(state as GridSelectionRange[]);\n                break;\n              }\n         }\n    }\n\n    /**\n     * Returns an object containing all grid features state.\n     */\n    private getAllGridFeatures(): IGridState {\n        let gridState: IGridState = {};\n\n        for (const key of Object.keys(this.options)) {\n            if (this.options[key]) {\n                const feature = this.getGridFeature(key);\n                gridState =  Object.assign(gridState, feature);\n            }\n        }\n\n        gridState = Object.assign({}, gridState);\n        return gridState;\n    }\n\n    /**\n     * Restores an object containing the state for a grid feature.\n     * `serialize` param determines whether the returned object will be serialized to a JSON string. Default value is false.,\n     */\n    private getGridFeature(feature: string): IGridState {\n        const state: IGridState = {};\n        switch (feature) {\n            case COLUMNS: {\n               Object.assign(state, this.getColumns());\n               break;\n            }\n            case FILTERING: {\n                Object.assign(state, this.getFiltering());\n                break;\n            }\n            case ADVANCED_FILTERING: {\n                Object.assign(state, this.getAdvancedFiltering());\n                break;\n            }\n            case SORTING: {\n                Object.assign(state, this.getSorting());\n                break;\n             }\n             case GROUPBY: {\n                Object.assign(state, this.getGroupBy());\n                break;\n             }\n             case PAGING: {\n                Object.assign(state, this.getPaging());\n                break;\n              }\n              case ROW_SELECTION: {\n                Object.assign(state, this.getRowSelection());\n                break;\n              }\n              case CELL_SELECTION: {\n                Object.assign(state, this.getCellSelection());\n                break;\n              }\n         }\n         return state;\n    }\n\n    /**\n     * Helper method that creates a new array with the current grid columns.\n     */\n    private getColumns(): IGridState {\n        const gridColumns: IColumnState[] = this.grid.columns.sort(this.sortByVisibleIndex).map((c) => {\n            return {\n                pinned: c.pinned,\n                sortable: c.sortable,\n                filterable: c.filterable,\n                editable: c.editable,\n                sortingIgnoreCase: c.sortingIgnoreCase,\n                filteringIgnoreCase: c.filteringIgnoreCase,\n                headerClasses: c.headerClasses,\n                headerGroupClasses: c.headerGroupClasses,\n                maxWidth: c.maxWidth,\n                groupable: c.groupable,\n                movable: c.movable,\n                hidden: c.hidden,\n                dataType: c.dataType,\n                hasSummary: c.hasSummary,\n                field: c.field,\n                width: c.width,\n                header: c.header,\n                resizable: c.resizable,\n                searchable: c.searchable\n            };\n        });\n        return { columns: gridColumns };\n    }\n\n    private getFiltering(): IGridState {\n        const filteringState = this.grid.filteringExpressionsTree;\n        return { filtering: filteringState };\n    }\n\n    private getAdvancedFiltering(): IGridState {\n        const advancedFiltering = this.grid.advancedFilteringExpressionsTree;\n        return { advancedFiltering: advancedFiltering };\n    }\n\n    private getPaging(): IGridState {\n        const pagingState = this.grid.pagingState;\n        return { paging: pagingState };\n    }\n\n    private getSorting(): IGridState {\n        const sortingState = this.grid.sortingExpressions;\n        sortingState.forEach(s => {\n            delete s.strategy;\n        });\n        return { sorting: sortingState };\n    }\n\n    private getGroupBy(): IGridState {\n        const groupingExpressions = this.grid.groupingExpressions;\n        groupingExpressions.forEach(expr => {\n            delete expr.strategy;\n        });\n        const expansionState = this.grid.groupingExpansionState;\n        const groupsExpanded = this.grid.groupsExpanded;\n\n        return { groupBy: { expressions: groupingExpressions, expansion: expansionState, defaultExpanded: groupsExpanded}  };\n    }\n\n    private getRowSelection(): IGridState {\n        const selection = this.grid.selectedRows();\n        return { rowSelection: selection };\n    }\n\n    private getCellSelection(): IGridState {\n        const selection = this.grid.getSelectedRanges().map(range => {\n            return { rowStart: range.rowStart, rowEnd: range.rowEnd, columnStart: range.columnStart, columnEnd: range.columnEnd };\n        });\n        return { cellSelection: selection };\n    }\n\n    /**\n     * Restores the grid columns by modifying the `columnList` collection of the grid.\n     */\n    private restoreColumns(columnsState: IColumnState[]): void {\n        const newColumns = [];\n        const factory = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        columnsState.forEach((colState) => {\n            const ref = factory.create(this.viewRef.injector);\n            Object.assign(ref.instance, colState);\n            ref.changeDetectorRef.detectChanges();\n            newColumns.push(ref.instance);\n        });\n\n        this.grid.columnList.reset(newColumns);\n        this.grid.columnList.notifyOnChanges();\n    }\n\n    private sortByVisibleIndex(colA: IgxColumnComponent, colB: IgxColumnComponent) {\n          const a = colA.visibleIndex, b = colB.visibleIndex;\n          return a > b ? 1 : a < b ? -1 : 0;\n    }\n\n    /**\n     * Restores the grid filtering state, i.e. sets the `filteringExpressionsTree` property value.\n     */\n    private restoreFiltering(state: FilteringExpressionsTree) {\n        const filterTree = this.createExpressionsTreeFromObject(state);\n        this.grid.filteringExpressionsTree = filterTree as FilteringExpressionsTree;\n    }\n\n    /**\n     * Restores the grid advanced filtering state, i.e. sets the `advancedFilteringExpressionsTree` property value.\n     */\n    private restoreAdvancedFiltering(state: FilteringExpressionsTree) {\n        const advFilterTree = this.createExpressionsTreeFromObject(state);\n        this.grid.advancedFilteringExpressionsTree = advFilterTree as FilteringExpressionsTree;\n    }\n\n    /**\n     * Restores the grid sorting state, i.e. sets the `sortingExpressions` property value.\n     */\n    private restoreSorting(state: ISortingExpression[]) {\n        this.grid.sortingExpressions = state;\n    }\n\n    /**\n     * Restores the grid grouping state, i.e. sets the `groupbyExpressions` property value.\n     */\n    private restoreGroupBy(state: IGroupingState) {\n        (this.grid as IgxGridComponent).groupingExpressions = state.expressions as IGroupingExpression[];\n        if ((this.grid as IgxGridComponent).groupsExpanded !== state.defaultExpanded) {\n            this.grid.toggleAllGroupRows();\n        } else {\n            (this.grid as IgxGridComponent).groupingExpansionState = state.expansion as IGroupByExpandState[];\n        }\n    }\n\n    /**\n     * Restores the grid paging state, i.e. sets the `perPage` property value and paginate to index.\n     */\n    private restorePaging(state: IPagingState) {\n        if (this.grid.perPage !== state.recordsPerPage) {\n            this.grid.perPage = state.recordsPerPage;\n            this.grid.cdr.detectChanges();\n        }\n        this.grid.page = state.index;\n    }\n\n    private restoreRowSelection(state: any[]) {\n        this.grid.selectRows(state);\n    }\n\n    private restoreCellSelection(state: GridSelectionRange[]) {\n        state.forEach(r => {\n            const range = { rowStart: r.rowStart, rowEnd: r.rowEnd, columnStart: r.columnStart, columnEnd: r.columnEnd};\n            this.grid.selectRange(range);\n        });\n    }\n\n    /**\n     * This method builds a FilteringExpressionsTree from a provided object.\n     */\n    private createExpressionsTreeFromObject(exprTreeObject: FilteringExpressionsTree): FilteringExpressionsTree {\n        if (!exprTreeObject || !exprTreeObject.filteringOperands) {\n            return null;\n        }\n\n        const expressionsTree = new FilteringExpressionsTree(exprTreeObject.operator, exprTreeObject.fieldName);\n\n        for (const item of exprTreeObject.filteringOperands) {\n            // Check if item is an expressions tree or a single expression.\n            if ((item as FilteringExpressionsTree).filteringOperands) {\n                const subTree = this.createExpressionsTreeFromObject((item as FilteringExpressionsTree));\n                expressionsTree.filteringOperands.push(subTree);\n            } else {\n                const expr = item as IFilteringExpression;\n                let dataType: string;\n                if (this.grid.columnList.length > 0) {\n                    dataType = this.grid.columnList.find(c => c.field === expr.fieldName).dataType;\n                } else {\n                    dataType = this.state[COLUMNS].find(c => c.field === expr.fieldName).dataType;\n                }\n                // when ESF, values are stored in Set.\n                // First those values are converted to an array before returning string in the stringifyCallback\n                // now we need to convert those back to Set\n                if (Array.isArray(expr.searchVal)) {\n                    expr.searchVal = new Set(expr.searchVal);\n                } else {\n                    expr.searchVal = (dataType === 'date') ? new Date(Date.parse(expr.searchVal)) : expr.searchVal;\n                }\n                expr.condition = this.generateFilteringCondition(dataType, expr.condition.name);\n                expressionsTree.filteringOperands.push(expr);\n            }\n        }\n\n        return expressionsTree;\n    }\n\n    /**\n     * Returns the filtering logic function for a given dataType and condition (contains, greaterThan, etc.)\n     */\n    private generateFilteringCondition(dataType: string, name: string): IFilteringOperation {\n        let filters;\n        switch (dataType) {\n            case DataType.Boolean:\n                filters = IgxBooleanFilteringOperand.instance();\n                break;\n            case DataType.Number:\n                filters = IgxNumberFilteringOperand.instance();\n                break;\n            case DataType.Date:\n                filters = IgxDateFilteringOperand.instance();\n                break;\n            case DataType.String:\n            default:\n                filters = IgxStringFilteringOperand.instance();\n                break;\n        }\n        return filters.condition(name);\n    }\n\n    private stringifyCallback(key: string, val: any) {\n        if (key === 'searchVal' && val instanceof Set) {\n            return Array.from(val);\n        }\n        return val;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxGridStateDirective],\n    exports: [IgxGridStateDirective]\n})\nexport class IgxGridStateModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IgxButtonModule } from '../../directives/button/button.directive';\nimport { IgxDatePickerModule } from '../../date-picker/date-picker.component';\nimport { IgxIconModule } from '../../icon/index';\nimport { IgxRippleModule } from '../../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../../input-group/index';\nimport { IgxFocusModule } from '../../directives/focus/focus.directive';\nimport { IgxToggleModule } from '../../directives/toggle/toggle.directive';\nimport { IgxForOfModule } from '../../directives/for-of/for_of.directive';\nimport { IgxTemplateOutletModule } from '../../directives/template-outlet/template_outlet.directive';\nimport { IgxTextHighlightModule } from '../../directives/text-highlight/text-highlight.directive';\nimport { IgxTextSelectionModule } from '../../directives/text-selection/text-selection.directive';\nimport { IgxCheckboxModule } from '../../checkbox/checkbox.component';\nimport { IgxBadgeModule } from '../../badge/badge.component';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxDragDropModule } from '../../directives/drag-drop/drag-drop.directive';\nimport { IgxButtonGroupModule } from '../../buttonGroup/buttonGroup.component';\nimport { IgxProgressBarModule } from '../../progressbar/progressbar.component';\nimport { IgxSelectModule } from '../../select/select.module';\nimport { IgxDropDownModule } from '../../drop-down/index';\nimport { IgxGridStateModule } from '../state.directive';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxFocusModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxTextHighlightModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxProgressBarModule,\n        IgxSelectModule,\n        IgxGridStateModule\n    ],\n    exports: [\n        CommonModule,\n        FormsModule,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxFocusModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxTextHighlightModule,\n        IgxGridStateModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxProgressBarModule,\n        IgxSelectModule\n    ]\n})\nexport class IgxGridSharedModules {}\n","import { NgModule } from '@angular/core';\nimport { IgxGridSharedModules } from '../common/shared.module';\nimport { IgxColumnHidingItemDirective } from './column-hiding-item.directive';\nimport { IgxColumnHidingComponent } from './column-hiding.component';\n\n\n@NgModule({\n    declarations: [\n        IgxColumnHidingComponent,\n        IgxColumnHidingItemDirective\n    ],\n    imports: [\n        IgxGridSharedModules\n    ],\n    exports: [\n        IgxColumnHidingComponent\n    ],\n})\nexport class IgxColumnHidingModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'igx-grid-footer',\n    template: '<ng-content></ng-content>'\n})\nexport class IgxGridFooterComponent {\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Component, Input, Output, NgModule, Optional, Inject, EventEmitter, HostBinding } from '@angular/core';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';\nimport { IgxSelectModule } from '../select/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\n\n@Component({\n    selector: 'igx-paginator',\n    templateUrl: 'paginator.component.html',\n})\nexport class IgxPaginatorComponent extends DisplayDensityBase {\n\n    /**\n     * Total pages calculated from totalRecords and perPage\n     */\n    public totalPages: number;\n    protected _page = 0;\n    protected _totalRecords: number;\n    protected _selectOptions;\n    private defaultSelectValues = [5, 10, 15, 25, 50, 100, 500];\n    protected _perPage = 15;\n\n    /**\n     * Sets the class of the IgxPaginatorComponent based\n     * on the provided displayDensity.\n     */\n    @HostBinding('class.igx-paginator--cosy')\n    public get classCosy(): boolean {\n        return this.displayDensity === DisplayDensity.cosy;\n    }\n\n    @HostBinding('class.igx-paginator--compact')\n    public get classCompact(): boolean {\n        return this.displayDensity === DisplayDensity.compact;\n    }\n\n    @HostBinding('class.igx-paginator')\n    public get classComfortable(): boolean {\n        return this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n   * An @Input property, sets current page of the `IgxPaginatorComponent`.\n   * The default is 0.\n   * ```typescript\n   * let page = this.paginator.page;\n   * ```\n   * @memberof IgxPaginatorComponent\n   */\n    @Input()\n    public get page() {\n        return this._page;\n    }\n\n    public set page(value: number) {\n        this._page = value;\n        this.pageChange.emit(this._page);\n    }\n\n    /**\n   * An @Input property, sets number of visible items per page in the `IgxPaginatorComponent`.\n   * The default is 15.\n   * ```typescript\n   * let itemsPerPage = this.paginator.perPage;\n   * ```\n   * @memberof IgxPaginatorComponent\n   */\n    @Input()\n    public get perPage() {\n        return this._perPage;\n    }\n\n    public set perPage(value: number) {\n        this._perPage = Number(value);\n        this.perPageChange.emit(this._perPage);\n        this._selectOptions = this.sortUniqueOptions(this.defaultSelectValues, this._perPage);\n        this.totalPages = Math.ceil(this.totalRecords / this._perPage);\n    }\n\n    /**\n    * An @Input property that sets the total records.\n    * ```typescript\n    * let totalRecords = this.paginator.totalRecords;\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public get totalRecords() {\n        return this._totalRecords;\n    }\n\n    public set totalRecords(value: number) {\n        this._totalRecords = value;\n        this.totalPages = Math.ceil(this.totalRecords / this.perPage);\n    }\n\n    /**\n    * An @Input property that sets custom options in the select of the paginator\n    * ```typescript\n    * let options = this.paginator.selectOptions;\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public get selectOptions() {\n        return this._selectOptions;\n    }\n\n    public set selectOptions(value: Array<number>) {\n        this._selectOptions = this.sortUniqueOptions(value, this._perPage);\n        this.defaultSelectValues = [...value];\n    }\n    /**\n    * An @Input property that sets if the pager in the paginator should be enabled.\n    * ```html\n    * <igx-paginator [pagerEnabled]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public pagerEnabled = true;\n\n    /**\n    * An @Input property that sets if the pager in the paginator should be hidden.\n    * ```html\n    * <igx-paginator [pagerHidden]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public pagerHidden = false;\n\n    /**\n    * An @Input property that sets if the dropdown in the paginator should be enabled.\n    * ```html\n    * <igx-paginator [dropdownEnabled]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public dropdownEnabled = true;\n\n    /**\n    * An @Input property that sets if the dropdown in the paginator should be hidden.\n    * ```html\n    * <igx-paginator [dropdownHidden]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public dropdownHidden = false;\n\n    /**\n    * An @Input property, sets number of label of the select.\n    * The default is 'Items per page' localized string.\n    * ```html\n    * <igx-paginator label=\"My custom label\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public selectLabel = CurrentResourceStrings.PaginatorResStrings.igx_paginator_label;\n\n    /**\n     *An event that is emitted when the select in the `IgxPaginatorComponent` changes its value.\n    */\n    @Output()\n    public perPageChange = new EventEmitter<number>();\n    /**\n     *An event that is emitted when the paginating is used.\n    */\n    @Output()\n    public pageChange = new EventEmitter<number>();\n\n    constructor(@Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions\n    ) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Returns if the current page is the last page.\n     * ```typescript\n     * const lastPage = this.paginator.isLastPage;\n     * ```\n     */\n    get isLastPage(): boolean {\n        return this.page + 1 >= this.totalPages;\n    }\n\n    /**\n     * Returns if the current page is the first page.\n     * ```typescript\n     * const lastPage = this.paginator.isFirstPage;\n     * ```\n     */\n    get isFirstPage(): boolean {\n        return this.page === 0;\n    }\n\n    private sortUniqueOptions(values: Array<number>, newOption: number): number[] {\n        return Array.from(new Set([...values, newOption])).sort((a, b) => a - b);\n    }\n\n    /**\n     * Sets DisplayDensity for the <select> inside the paginator\n     * @hidden\n     */\n    public paginatorSelectDisplayDensity(): string {\n        if (this.displayDensity === DisplayDensity.comfortable) {\n            return DisplayDensity.cosy;\n        }\n        return DisplayDensity.compact;\n    }\n    /**\n     * Goes to the next page of the `IgxPaginatorComponent`, if the paginator is not already at the last page.\n     * ```typescript\n     * this.paginator.nextPage();\n     * ```\n\t * @memberof IgxPaginatorComponent\n     */\n    public nextPage(): void {\n        if (!this.isLastPage) {\n            this.page += 1;\n        }\n    }\n    /**\n     * Goes to the previous page of the `IgxPaginatorComponent`, if the paginator is not already at the first page.\n     * ```typescript\n     * this.paginator.previousPage();\n     * ```\n\t * @memberof IgxPaginatorComponent\n     */\n    public previousPage(): void {\n        if (!this.isFirstPage) {\n            this.page -= 1;\n        }\n    }\n    /**\n     * Goes to the desired page index.\n     * ```typescript\n     * this.pagiantor.paginate(1);\n     * ```\n     * @param val\n     * @memberof IgxPaginatorComponent\n     */\n    public paginate(val: number): void {\n        if (val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n        this.page = val;\n    }\n}\n\n@NgModule({\n    declarations: [IgxPaginatorComponent],\n    exports: [IgxPaginatorComponent],\n    imports: [CommonModule, IgxSelectModule, FormsModule, IgxIconModule, IgxButtonModule, IgxRippleModule]\n})\nexport class IgxPaginatorModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n    IgxGridFilterConditionPipe,\n    IgxGridTransactionPipe,\n    IgxGridNotGroupedPipe,\n    IgxGridTopLevelColumns,\n    IgxGridCellStylesPipe,\n    IgxGridCellStyleClassesPipe,\n    IgxGridPaginatorOptionsPipe,\n    IgxHasVisibleColumnsPipe,\n    IgxDatePipeComponent,\n    IgxDecimalPipeComponent\n} from './pipes';\n\n@NgModule({\n    declarations: [\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridNotGroupedPipe,\n        IgxGridTopLevelColumns,\n        IgxGridCellStylesPipe,\n        IgxGridCellStyleClassesPipe,\n        IgxGridPaginatorOptionsPipe,\n        IgxHasVisibleColumnsPipe\n    ],\n    exports: [\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridNotGroupedPipe,\n        IgxGridTopLevelColumns,\n        IgxGridCellStylesPipe,\n        IgxGridCellStyleClassesPipe,\n        IgxGridPaginatorOptionsPipe,\n        IgxHasVisibleColumnsPipe\n    ],\n    imports: [\n        CommonModule\n    ]\n  })\nexport class IgxGridPipesModule { }\n","import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { IgxColumnComponent } from '../../columns/column.component';\nimport { IgxGridBaseDirective } from '../../grid-base.directive';\nimport { DisplayDensity } from '../../../core/density';\nimport { IgxColumnGroupComponent } from '../../columns/column-group.component';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-column-moving',\n    templateUrl: './excel-style-column-moving.component.html'\n})\nexport class IgxExcelStyleColumnMovingComponent {\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public grid: IgxGridBaseDirective;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @Input()\n    public isColumnPinnable: boolean;\n\n    constructor() {}\n\n    private get visibleColumns() {\n        return this.grid.visibleColumns.filter(col => !(col instanceof IgxColumnGroupComponent));\n    }\n\n    get canNotMoveLeft() {\n        return this.column.visibleIndex === 0 ||\n            (this.grid.unpinnedColumns.indexOf(this.column) === 0 && this.column.disablePinning) ||\n            (this.grid.unpinnedColumns.indexOf(this.column) === 0 && !this.isColumnPinnable) ||\n            (this.column.level !== 0 && !this.findColumn(0, this.visibleColumns));\n    }\n\n    get canNotMoveRight() {\n        return this.column.visibleIndex === this.visibleColumns.length - 1 ||\n            (this.column.level !== 0 && !this.findColumn(1, this.visibleColumns));\n    }\n\n    public onMoveButtonClicked(moveDirection) {\n        let targetColumn;\n        if (this.column.pinned) {\n            if (this.column.isLastPinned && moveDirection === 1) {\n                targetColumn = this.grid.unpinnedColumns[0];\n                moveDirection = 0;\n            } else {\n                targetColumn = this.findColumn(moveDirection, this.grid.pinnedColumns);\n            }\n        } else if (this.grid.unpinnedColumns.indexOf(this.column) === 0 && moveDirection === 0) {\n            targetColumn = this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1];\n            if (targetColumn.parent) {\n                targetColumn = targetColumn.topLevelParent;\n            }\n            moveDirection = 1;\n        } else {\n            targetColumn = this.findColumn(moveDirection, this.grid.unpinnedColumns);\n        }\n        this.grid.moveColumn(this.column, targetColumn, moveDirection);\n    }\n\n    private findColumn(moveDirection: number, columns: IgxColumnComponent[]) {\n        let index = columns.indexOf(this.column);\n        if (moveDirection === 0) {\n            while (index > 0) {\n                index--;\n                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {\n                    return columns[index];\n                }\n            }\n        } else {\n            while (index < columns.length - 1) {\n                index++;\n                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {\n                    return columns[index];\n                }\n            }\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { FilterListItem, IgxGridExcelStyleFilteringComponent } from './grid.excel-style-filtering.component';\nimport { cloneArray } from '../../../core/utils';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'excelStyleSearchFilter'\n})\nexport class IgxExcelStyleSearchFilterPipe implements PipeTransform {\n    transform(items: FilterListItem[], searchText: string): any[] {\n        if (!items || !items.length) {\n            return [];\n        }\n\n        if (!searchText) {\n            return items;\n        }\n\n        searchText = searchText.toLowerCase();\n        const result = items.filter((it, i) => (i === 0 && it.isSpecial) ||\n            (it.value !== null && it.value !== undefined) &&\n            it.value.toString().toLowerCase().indexOf(searchText) > -1);\n\n        // If 'result' contains the 'Select All' item and at least one more - we use it, otherwise we use an empty array.\n        return result.length > 1 ? result : [];\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IgxExcelStyleLoadingValuesTemplateDirective } from './excel-style-search.component';\nimport {\n    IgxGridExcelStyleFilteringComponent,\n    IgxExcelStyleSortingTemplateDirective,\n    IgxExcelStyleHidingTemplateDirective,\n    IgxExcelStyleMovingTemplateDirective,\n    IgxExcelStylePinningTemplateDirective\n} from './grid.excel-style-filtering.component';\nimport { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';\nimport { IgxExcelStyleColumnMovingComponent } from './excel-style-column-moving.component';\nimport { IgxExcelStyleSearchComponent } from './excel-style-search.component';\nimport { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';\nimport { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { IgxExcelStyleDateExpressionComponent } from './excel-style-date-expression.component';\nimport { IgxSelectionAPIService } from '../../../core/selection';\nimport { FormsModule } from '@angular/forms';\nimport { IgxGridPipesModule } from '../../common/grid-pipes.module';\nimport { IgxButtonModule } from '../../../directives/button/button.directive';\nimport { IgxButtonGroupModule } from '../../../buttonGroup/buttonGroup.component';\nimport { IgxDatePickerModule } from '../../../date-picker/date-picker.component';\nimport { IgxIconModule } from '../../../icon/index';\nimport { IgxRippleModule } from '../../../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../../../input-group/input-group.component';\nimport { IgxDropDownModule } from '../../../drop-down/index';\nimport { IgxForOfModule } from '../../../directives/for-of/for_of.directive';\nimport { IgxCheckboxModule } from '../../../checkbox/checkbox.component';\nimport { IgxFilterModule } from '../../../directives/filter/filter.directive';\nimport { IgxToggleModule } from '../../../directives/toggle/toggle.directive';\nimport { IgxListModule } from '../../../list/list.component';\nimport { IgxExcelStyleSearchFilterPipe } from './excel-style-search.pipe';\nimport { IgxProgressBarModule } from '../../../progressbar/progressbar.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxGridExcelStyleFilteringComponent,\n        IgxExcelStyleSortingComponent,\n        IgxExcelStyleColumnMovingComponent,\n        IgxExcelStyleSearchComponent,\n        IgxExcelStyleCustomDialogComponent,\n        IgxExcelStyleDefaultExpressionComponent,\n        IgxExcelStyleDateExpressionComponent,\n        IgxExcelStyleSortingTemplateDirective,\n        IgxExcelStyleHidingTemplateDirective,\n        IgxExcelStyleMovingTemplateDirective,\n        IgxExcelStylePinningTemplateDirective,\n        IgxExcelStyleLoadingValuesTemplateDirective,\n        IgxExcelStyleSearchFilterPipe\n    ],\n    exports: [\n        IgxGridExcelStyleFilteringComponent,\n        IgxExcelStyleSortingTemplateDirective,\n        IgxExcelStyleHidingTemplateDirective,\n        IgxExcelStyleMovingTemplateDirective,\n        IgxExcelStylePinningTemplateDirective,\n        IgxExcelStyleLoadingValuesTemplateDirective,\n        IgxExcelStyleDateExpressionComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxGridPipesModule,\n        IgxButtonModule,\n        IgxButtonGroupModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxDropDownModule,\n        IgxForOfModule,\n        IgxCheckboxModule,\n        IgxFilterModule,\n        IgxToggleModule,\n        IgxListModule,\n        IgxProgressBarModule\n    ],\n    entryComponents: [\n        IgxGridExcelStyleFilteringComponent\n    ],\n    providers: [\n        IgxSelectionAPIService\n    ]\n})\nexport class IgxGridExcelStyleFilteringModule {\n\n}\n","import { NgModule } from '@angular/core';\nimport { IgxRowSelectorDirective, IgxHeadSelectorDirective } from './row-selectors';\nimport { IgxGridDragSelectDirective } from './drag-select.directive';\n\n\n@NgModule({\n    declarations: [\n        IgxRowSelectorDirective,\n        IgxHeadSelectorDirective,\n        IgxGridDragSelectDirective\n    ],\n    exports: [\n        IgxRowSelectorDirective,\n        IgxHeadSelectorDirective,\n        IgxGridDragSelectDirective\n    ]\n})\nexport class IgxGridSelectionModule {}\n","import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    Input,\n    NgZone,\n    HostListener,\n    OnDestroy\n} from '@angular/core';\nimport { Subject, fromEvent } from 'rxjs';\nimport { debounceTime, takeUntil} from 'rxjs/operators';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxColumnResizingService } from './resizing.service';\n\n\n/**\n * @hidden\n * @internal\n */\n@Directive({\n    selector: '[igxResizeHandle]'\n})\nexport class IgxResizeHandleDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     */\n    @Input('igxResizeHandle')\n    public column: IgxColumnComponent;\n\n    /**\n     * @hidden\n     */\n    private _dblClick = false;\n\n    /**\n     * @hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    private readonly DEBOUNCE_TIME = 200;\n\n    constructor(private zone: NgZone,\n               private element: ElementRef,\n               public colResizingService: IgxColumnResizingService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        if (!this.column.columnGroup && this.column.resizable) {\n            this.zone.runOutsideAngular(() => {\n                fromEvent(this.element.nativeElement, 'mousedown').pipe(\n                    debounceTime(this.DEBOUNCE_TIME),\n                    takeUntil(this.destroy$)\n                ).subscribe((event: MouseEvent) => {\n\n                    if (this._dblClick) {\n                        this._dblClick = false;\n                        return;\n                    }\n\n                    if (event.button === 0) {\n                        this._onResizeAreaMouseDown(event);\n                        this.column.grid.resizeLine.resizer.onMousedown(event);\n                    }\n                });\n            });\n\n            fromEvent(this.element.nativeElement, 'mouseup').pipe(\n                debounceTime(this.DEBOUNCE_TIME),\n                takeUntil(this.destroy$)\n            ).subscribe(() => {\n                this.colResizingService.isColumnResizing = false;\n                this.colResizingService.showResizer = false;\n                this.column.grid.cdr.detectChanges();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onMouseOver() {\n        this.colResizingService.resizeCursor = 'col-resize';\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('dblclick')\n    public onDoubleClick() {\n        this._dblClick = true;\n        this.colResizingService.column = this.column;\n        this.colResizingService.autosizeColumnOnDblClick();\n    }\n\n    /**\n     * @hidden\n     */\n    private _onResizeAreaMouseDown(event) {\n        this.colResizingService.column = this.column;\n        this.colResizingService.isColumnResizing = true;\n        this.colResizingService.startResizePos = event.clientX;\n\n        this.colResizingService.showResizer = true;\n        this.column.grid.cdr.detectChanges();\n    }\n}\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IgxColumnResizingService } from './resizing.service';\nimport { IgxGridColumnResizerComponent } from './resizer.component';\nimport { IgxResizeHandleDirective } from './resize-handle.directive';\nimport { IgxColumnResizerDirective } from './resizer.directive';\n\n\n@NgModule({\n    declarations: [\n        IgxGridColumnResizerComponent,\n        IgxResizeHandleDirective,\n        IgxColumnResizerDirective\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        IgxGridColumnResizerComponent,\n        IgxResizeHandleDirective,\n        IgxColumnResizerDirective\n    ],\n    providers: [\n        IgxColumnResizingService\n    ]\n})\nexport class IgxGridResizingModule {}\n","import { Directive, Input, OnDestroy, ElementRef, Renderer2, NgZone } from '@angular/core';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { DropPosition, IgxColumnMovingService } from './moving.service';\nimport { Subject, interval } from 'rxjs';\nimport { IgxColumnMovingDragDirective } from './moving.drag.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxDropDirective } from '../../directives/drag-drop/drag-drop.directive';\nimport { IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';\n\n\n@Directive({\n    selector: '[igxColumnMovingDrop]'\n})\nexport class IgxColumnMovingDropDirective extends IgxDropDirective implements OnDestroy {\n\n    @Input('igxColumnMovingDrop')\n    set data(val: any) {\n        if (val instanceof IgxColumnComponent) {\n            this._column = val;\n        }\n\n        if (val instanceof IgxGridForOfDirective) {\n            this._hVirtDir = val;\n        }\n    }\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    get isDropTarget(): boolean {\n        return this._column && this._column.grid.hasMovableColumns && this.cms.column.movable &&\n            ((!this._column.pinned && this.cms.column.disablePinning) || !this.cms.column.disablePinning);\n    }\n\n    get horizontalScroll(): any {\n        if (this._hVirtDir) {\n            return this._hVirtDir;\n        }\n    }\n\n    private _dropPos: DropPosition;\n    private _dropIndicator: any = null;\n    private _lastDropIndicator: any = null;\n    private _column: IgxColumnComponent;\n    private _hVirtDir: IgxGridForOfDirective<any>;\n    private _dragLeave = new Subject<boolean>();\n    private _dropIndicatorClass = 'igx-grid__th-drop-indicator--active';\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone, private cms: IgxColumnMovingService) {\n        super(elementRef, renderer, zone);\n    }\n\n    public ngOnDestroy() {\n        this._dragLeave.next(true);\n        this._dragLeave.complete();\n    }\n\n    public onDragOver(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n            if (this._lastDropIndicator) {\n                this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n\n            const clientRect = this.elementRef.nativeElement.getBoundingClientRect();\n            const pos = clientRect.left + clientRect.width / 2;\n\n            const parent = this.elementRef.nativeElement.parentElement;\n            if (event.detail.pageX < pos) {\n                this._dropPos = DropPosition.BeforeDropTarget;\n                this._lastDropIndicator = this._dropIndicator = parent.firstElementChild;\n            } else {\n                this._dropPos = DropPosition.AfterDropTarget;\n                this._lastDropIndicator = this._dropIndicator = parent.lastElementChild;\n            }\n\n            if (this.cms.icon.innerText !== 'block') {\n                this.renderer.addClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n        }\n    }\n\n    public onDragEnter(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.column && this.cms.column.grid.id !== this.column.grid.id) {\n            this.cms.icon.innerText = 'block';\n            return;\n        }\n\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n                if (!this.column.pinned || (this.column.pinned && this.cms.column.pinned)) {\n                    this.cms.icon.innerText = 'swap_horiz';\n                }\n\n                this.cms.icon.innerText = 'lock';\n            } else {\n                this.cms.icon.innerText = 'block';\n            }\n\n            if (this.horizontalScroll) {\n                this.cms.icon.innerText = event.target.id === 'right' ? 'arrow_forward' : 'arrow_back';\n\n                interval(100).pipe(takeUntil(this._dragLeave)).subscribe(() => {\n                    this.cms.column.grid.wheelHandler();\n                    event.target.id === 'right' ? this.horizontalScroll.scrollPosition += 15 :\n                        this.horizontalScroll.scrollPosition -= 15;\n                });\n            }\n    }\n\n    public onDragLeave(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        this.cms.icon.innerText = 'block';\n\n        if (this._dropIndicator) {\n            this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n    }\n\n    public onDragDrop(event) {\n        event.preventDefault();\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.column && (this.cms.column.grid.id !== this.column.grid.id)) {\n            return;\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n\n        if (this.isDropTarget) {\n            const args = {\n                source: this.cms.column,\n                target: this.column\n            };\n\n            this.column.grid.moveColumn(this.cms.column, this.column, this._dropPos);\n\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxColumnMovingDragDirective } from './moving.drag.directive';\nimport { IgxColumnMovingDropDirective } from './moving.drop.directive';\n\n\n@NgModule({\n    declarations: [\n        IgxColumnMovingDropDirective,\n        IgxColumnMovingDragDirective\n    ],\n    exports: [\n        IgxColumnMovingDropDirective,\n        IgxColumnMovingDragDirective\n    ]\n})\nexport class IgxColumnMovingModule {}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { GridType } from '../common/grid.interface';\n\n@Pipe({\n    name: 'igxGridSummaryDataPipe',\n    pure: true\n})\nexport class IgxSummaryDataPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) { }\n\n    transform(id: string, trigger: number = 0) {\n        const summaryService = this.gridAPI.grid.summaryService;\n        return summaryService.calculateSummaries(\n            summaryService.rootSummaryID,\n            this.gridAPI.get_summary_data()\n        );\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxSummaryCellComponent } from './summary-cell.component';\nimport { IgxSummaryRowComponent } from './summary-row.component';\nimport { IgxSummaryDataPipe } from './grid-root-summary.pipe';\nimport { IgxGridSharedModules } from '../common/shared.module';\nimport { IgxGridPipesModule } from '../common/grid-pipes.module';\n\n\n@NgModule({\n    declarations: [\n        IgxSummaryCellComponent,\n        IgxSummaryRowComponent,\n        IgxSummaryDataPipe\n    ],\n    imports: [\n        IgxGridPipesModule,\n        IgxGridSharedModules\n    ],\n    exports: [\n        IgxSummaryCellComponent,\n        IgxSummaryRowComponent,\n        IgxSummaryDataPipe\n    ]\n})\nexport class IgxGridSummaryModule {}\n","import { NgModule } from '@angular/core';\nimport { IgxColumnPinningItemDirective } from './pinning.directive';\nimport { IgxColumnPinningComponent } from './column-pinning.component';\nimport { IgxGridSharedModules } from '../common/shared.module';\n\n\n@NgModule({\n    declarations: [\n        IgxColumnPinningItemDirective,\n        IgxColumnPinningComponent\n    ],\n    imports: [\n        IgxGridSharedModules\n    ],\n    exports: [\n        IgxColumnPinningComponent\n    ]\n})\nexport class IgxColumnPinningModule {}\n","import { NgModule } from '@angular/core';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxGridToolbarCustomContentDirective } from './toolbar.directive';\nimport { IgxGridSharedModules } from '../common/shared.module';\nimport { IgxColumnHidingModule } from '../hiding/hiding.module';\nimport { IgxColumnPinningModule } from '../pinning/pinning.module';\n\n\n@NgModule({\n    declarations: [\n        IgxGridToolbarComponent,\n        IgxGridToolbarCustomContentDirective\n    ],\n    imports: [\n        IgxGridSharedModules,\n        IgxColumnHidingModule,\n        IgxColumnPinningModule\n    ],\n    exports: [\n        IgxGridToolbarComponent,\n        IgxGridToolbarCustomContentDirective\n    ]\n})\nexport class IgxGridToolbarModule {}\n","import {\n    AfterContentInit,\n    Component,\n    ChangeDetectionStrategy,\n    forwardRef,\n    Input\n} from '@angular/core';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxColumnGroupComponent } from './column-group.component';\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(() => IgxColumnLayoutComponent) }],\n    selector: 'igx-column-layout',\n    template: ``\n})\nexport class IgxColumnLayoutComponent extends IgxColumnGroupComponent implements AfterContentInit {\n    public childrenVisibleIndexes = [];\n    /**\n     * Gets the width of the column layout.\n     * ```typescript\n     * let columnGroupWidth = this.columnGroup.width;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get width(): any {\n        const width = this.getFilledChildColumnSizes(this.children).reduce((acc, val) => acc + parseInt(val, 10), 0);\n        return width;\n    }\n\n    set width(val: any) { }\n\n    get columnLayout() {\n        return true;\n    }\n\n    /**\n     * @hidden\n     */\n    public getCalcWidth(): any {\n        let borderWidth = 0;\n\n        if (this.headerGroup && this.headerGroup.hasLastPinnedChildColumn) {\n            const headerStyles = this.grid.document.defaultView.getComputedStyle(this.headerGroup.element.nativeElement.children[0]);\n            borderWidth = parseInt(headerStyles.borderRightWidth, 10);\n        }\n\n        return super.getCalcWidth() + borderWidth;\n    }\n\n    /**\n     * Gets the column visible index.\n     * If the column is not visible, returns `-1`.\n     * ```typescript\n     * let visibleColumnIndex =  this.column.visibleIndex;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get visibleIndex(): number {\n        if (!isNaN(this._vIndex)) {\n            return this._vIndex;\n        }\n\n        const unpinnedColumns = this.grid.unpinnedColumns.filter(c => c.columnLayout && !c.hidden);\n        const pinnedColumns = this.grid.pinnedColumns.filter(c => c.columnLayout && !c.hidden);\n        let vIndex = -1;\n\n        if (!this.pinned) {\n            const indexInCollection = unpinnedColumns.indexOf(this);\n            vIndex = indexInCollection === -1 ? -1 : pinnedColumns.length + indexInCollection;\n        } else {\n            vIndex = pinnedColumns.indexOf(this);\n        }\n        this._vIndex = vIndex;\n        return vIndex;\n    }\n\n    /*\n     * Gets whether the column layout is hidden.\n     * ```typescript\n     * let isHidden = this.columnGroup.hidden;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get hidden() {\n        return this._hidden;\n    }\n\n    /**\n     * Sets the column layout hidden property.\n     * ```typescript\n     * <igx-column-layout [hidden] = \"true\"></igx-column->\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.children.forEach(child => child.hidden = value);\n        if (this.grid && this.grid.columns && this.grid.columns.length > 0) {\n            // reset indexes in case columns are hidden/shown runtime\n            this.grid.columns.filter(x => x.columnGroup).forEach(x => x.populateVisibleIndexes());\n        }\n    }\n\n    /**\n     *@hidden\n    */\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n        if (!this.hidden) {\n            this.hidden = this.allChildren.some(x => x.hidden);\n        } else {\n            this.children.forEach(child => child.hidden = this.hidden);\n        }\n\n        this.children.forEach(child => {\n            child.movable = false;\n        });\n    }\n\n    /*\n     * Gets whether the group contains the last pinned child column of the column layout.\n     * ```typescript\n     * let columsHasLastPinned = this.columnLayout.hasLastPinnedChildColumn;\n     * ```\n     * @memberof IgxColumnLayoutComponent\n     */\n    get hasLastPinnedChildColumn() {\n        return this.children.some(child => child.isLastPinned);\n    }\n\n    /**\n     *@hidden\n    */\n    public populateVisibleIndexes() {\n        this.childrenVisibleIndexes = [];\n        const grid = this.gridAPI.grid;\n        const columns = grid && grid.pinnedColumns && grid.unpinnedColumns ? grid.pinnedColumns.concat(grid.unpinnedColumns) : [];\n        const orderedCols = columns\n            .filter(x => !x.columnGroup && !x.hidden)\n            .sort((a, b) => a.rowStart - b.rowStart || columns.indexOf(a.parent) - columns.indexOf(b.parent) || a.colStart - b.colStart);\n        this.children.forEach(child => {\n            const rs = child.rowStart || 1;\n            let vIndex = 0;\n            // filter out all cols with larger rowStart\n            const cols = orderedCols.filter(c =>\n                !c.columnGroup && (c.rowStart || 1) <= rs);\n            vIndex = cols.indexOf(child);\n            this.childrenVisibleIndexes.push({ column: child, index: vIndex });\n        });\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxColumnGroupComponent } from './column-group.component';\nimport { IgxColumnLayoutComponent } from './column-layout.component';\nimport {\n    IgxCellEditorTemplateDirective,\n    IgxCellFooterTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellTemplateDirective,\n    IgxCollapsibleIndicatorTemplateDirective,\n    IgxFilterCellTemplateDirective\n} from './templates.directive';\n\n\n@NgModule({\n    declarations: [\n        IgxFilterCellTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellFooterTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCollapsibleIndicatorTemplateDirective,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent\n    ],\n    entryComponents: [\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent\n    ],\n    exports: [\n        IgxFilterCellTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellFooterTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCollapsibleIndicatorTemplateDirective,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent\n    ]\n})\nexport class IgxGridColumnModule {}\n","import { NgModule } from '@angular/core';\nimport { IgxGridFilteringCellComponent } from './grid-filtering-cell.component';\nimport { IgxGridFilteringRowComponent } from './grid-filtering-row.component';\nimport { IgxGridSharedModules } from '../../common/shared.module';\nimport { IgxGridPipesModule } from '../../common/grid-pipes.module';\n\n\n@NgModule({\n    declarations: [\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent\n    ],\n    imports: [\n        IgxGridSharedModules,\n        IgxGridPipesModule\n    ],\n    exports: [\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent\n    ]\n})\nexport class IgxGridFilteringModule {}\n","import { NgModule } from '@angular/core';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { IgxGridSharedModules } from '../common/shared.module';\nimport { IgxColumnMovingModule } from '../moving/moving.module';\nimport { IgxGridFilteringModule } from '../filtering/base/filtering.module';\nimport { IgxGridResizingModule } from '../resizing/resize.module';\n\n\n@NgModule({\n    declarations: [\n        IgxGridHeaderComponent,\n        IgxGridHeaderGroupComponent\n    ],\n    imports: [\n        IgxGridSharedModules,\n        IgxGridFilteringModule,\n        IgxColumnMovingModule,\n        IgxGridResizingModule\n    ],\n    exports: [\n        IgxGridHeaderComponent,\n        IgxGridHeaderGroupComponent\n    ]\n})\nexport class IgxGridHeadersModule {}\n","import { NgModule } from '@angular/core';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxGridFooterComponent } from './grid-footer/grid-footer.component';\nimport {\n    IgxGridBodyDirective\n} from './grid.common';\nimport { IgxGridTransaction, IgxGridBaseDirective } from './grid-base.directive';\nimport { IgxBaseTransactionService } from '../services/transaction/base-transaction';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditActionsDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditTabStopDirective\n} from './grid.rowEdit.directive';\nimport { IgxPaginatorModule } from '../paginator/paginator.component';\nimport { IgxGridPipesModule } from './common/grid-pipes.module';\nimport { IgxGridExcelStyleFilteringModule } from './filtering/excel-style/grid.excel-style-filtering.module';\nimport { IgxRowDragModule } from './row-drag.directive';\nimport { IgxAdvancedFilteringDialogComponent } from './filtering/advanced-filtering/advanced-filtering-dialog.component';\nimport { IgxGridSelectionModule } from './selection/selection.module';\nimport { IgxGridResizingModule } from './resizing/resize.module';\nimport { IgxColumnMovingModule } from './moving/moving.module';\nimport { IgxGridSharedModules } from './common/shared.module';\nimport { IgxGridSummaryModule } from './summaries/summary.module';\nimport { IgxGridToolbarModule } from './toolbar/toolbar.module';\nimport { IgxColumnHidingModule } from './hiding/hiding.module';\nimport { IgxColumnPinningModule } from './pinning/pinning.module';\nimport { IgxGridColumnModule } from './columns/column.module';\nimport { IgxGridHeadersModule } from './headers/headers.module';\nimport { IgxGridFilteringModule } from './filtering/base/filtering.module';\nimport { IgxRowDirective } from './row.directive';\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxGridBaseDirective,\n        IgxRowDirective,\n        IgxGridCellComponent,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxGridBodyDirective,\n        IgxGridFooterComponent,\n        IgxAdvancedFilteringDialogComponent\n    ],\n    entryComponents: [\n        IgxAdvancedFilteringDialogComponent\n    ],\n    exports: [\n        IgxGridCellComponent,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxGridBodyDirective,\n        IgxColumnHidingModule,\n        IgxColumnPinningModule,\n        IgxGridColumnModule,\n        IgxGridHeadersModule,\n        IgxGridPipesModule,\n        IgxGridFilteringModule,\n        IgxGridExcelStyleFilteringModule,\n        IgxRowDragModule,\n        IgxPaginatorModule,\n        IgxGridFooterComponent,\n        IgxGridResizingModule,\n        IgxColumnMovingModule,\n        IgxGridSelectionModule,\n        IgxGridSummaryModule,\n        IgxGridToolbarModule,\n        IgxAdvancedFilteringDialogComponent,\n        IgxGridSharedModules\n    ],\n    imports: [\n        IgxGridColumnModule,\n        IgxGridHeadersModule,\n        IgxColumnMovingModule,\n        IgxGridResizingModule,\n        IgxColumnPinningModule,\n        IgxGridSelectionModule,\n        IgxGridSummaryModule,\n        IgxGridToolbarModule,\n        IgxColumnHidingModule,\n        IgxGridPipesModule,\n        IgxGridFilteringModule,\n        IgxGridExcelStyleFilteringModule,\n        IgxRowDragModule,\n        IgxPaginatorModule,\n        IgxGridSharedModules\n    ],\n    providers: [\n        { provide: IgxGridTransaction, useClass: IgxBaseTransactionService }\n    ]\n})\nexport class IgxGridCommonModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IGroupByResult } from '../../data-operations/grouping-result.interface';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { GridType } from '../common/grid.interface';\nimport { IFilteringStrategy } from '../../data-operations/filtering-strategy';\nimport { IGridSortingStrategy } from '../../data-operations/sorting-strategy';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridSort',\n    pure: true\n})\nexport class IgxGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expressions: ISortingExpression[], sorting: IGridSortingStrategy,\n                     id: string, pipeTrigger: number): any[] {\n        const grid = this.gridAPI.grid;\n        let result: any[];\n\n        if (!expressions.length) {\n            result = collection;\n        } else {\n            result = DataUtil.sort(cloneArray(collection), expressions, sorting);\n        }\n        grid.filteredSortedData = result;\n\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridGroupBy',\n    pure: true\n})\nexport class IgxGridGroupingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expression: IGroupingExpression | IGroupingExpression[],\n        expansion: IGroupByExpandState | IGroupByExpandState[], defaultExpanded: boolean,\n        id: string, groupsRecords: any[], pipeTrigger: number): IGroupByResult {\n\n        const state = { expressions: [], expansion: [], defaultExpanded };\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        state.expressions = grid.groupingExpressions;\n        let result: IGroupByResult;\n        const fullResult: IGroupByResult = { data: [], metadata: [] };\n\n        if (!state.expressions.length) {\n            // empty the array without changing reference\n            groupsRecords.splice(0, groupsRecords.length);\n            result = {\n                data: collection,\n                metadata: collection\n            };\n        } else {\n            state.expansion = grid.groupingExpansionState;\n            state.defaultExpanded = grid.groupsExpanded;\n            result = DataUtil.group(cloneArray(collection), state, grid, groupsRecords, fullResult);\n        }\n        grid.groupingFlatResult = result.data;\n        grid.groupingResult = fullResult.data;\n        grid.groupingMetadata = fullResult.metadata;\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPaging',\n    pure: true\n})\nexport class IgxGridPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) { }\n\n    public transform(collection: IGroupByResult, page = 0, perPage = 15, id: string, pipeTrigger: number): IGroupByResult {\n\n        if (!this.gridAPI.grid.paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n        DataUtil.correctPagingState(state, collection.data.length);\n\n        const result = {\n            data: DataUtil.page(cloneArray(collection.data), state),\n            metadata: DataUtil.page(cloneArray(collection.metadata), state)\n        };\n        if (this.gridAPI.grid.page !== state.index) {\n            this.gridAPI.grid.page = state.index;\n        }\n        this.gridAPI.grid.pagingState = state;\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridFiltering',\n    pure: true\n})\nexport class IgxGridFilteringPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) { }\n\n    public transform(collection: any[], expressionsTree: IFilteringExpressionsTree,\n        filterStrategy: IFilteringStrategy,\n        advancedExpressionsTree: IFilteringExpressionsTree, id: string, pipeTrigger: number, filteringPipeTrigger: number) {\n        const grid = this.gridAPI.grid;\n        const state = {\n            expressionsTree: expressionsTree,\n            strategy: filterStrategy,\n            advancedExpressionsTree: advancedExpressionsTree\n        };\n\n        if (FilteringExpressionsTree.empty(state.expressionsTree) && FilteringExpressionsTree.empty(state.advancedExpressionsTree)) {\n            return collection;\n        }\n\n        const result = DataUtil.filter(cloneArray(collection), state);\n        grid.filteredData = result;\n        return result;\n    }\n}\n","import { Component, forwardRef, ChangeDetectionStrategy,\n     ElementRef, ChangeDetectorRef, HostBinding, ViewChildren, QueryList } from '@angular/core';\nimport { IgxGridComponent } from './grid.component';\nimport { IgxRowDirective } from '../row.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-row',\n    templateUrl: './grid-row.component.html',\n    providers: [{ provide: IgxRowDirective, useExisting: forwardRef(() => IgxGridRowComponent) }]\n})\nexport class IgxGridRowComponent extends IgxRowDirective<IgxGridComponent> {\n\n    // R.K. TODO: Remove\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridComponent>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n            // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n            super(gridAPI, crudService, selectionService, element, cdr);\n        }\n\n    @ViewChildren('cell')\n    private _cells: QueryList<any>;\n\n    public get cells() {\n        const res = new QueryList<any>();\n        if (!this._cells) {\n            return res;\n        }\n        const cList = this._cells.toArray().sort((item1, item2) => item1.column.visibleIndex - item2.column.visibleIndex);\n        res.reset(cList);\n        return res;\n    }\n\n    public set cells(cells) {\n\n    }\n\n    @HostBinding('class.igx-grid__tr--mrl')\n    get hasColumnLayouts(): boolean {\n        return this.grid.hasColumnLayouts;\n    }\n\n    getContext(col, row) {\n        return {\n            $implicit: col,\n            row: row\n        };\n    }\n\n    get expanded() {\n        return this.gridAPI.get_row_expansion_state(this.rowData);\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { IgxGridComponent } from './grid.component';\nimport { ISummaryRecord } from '../summaries/grid-summary';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IGroupByResult } from '../../data-operations/grouping-result.interface';\nimport { GridSummaryCalculationMode, GridSummaryPosition } from '../common/enums';\nimport { GridType } from '../common/grid.interface';\n\n/** @hidden */\ninterface ISkipRecord {\n    skip?: boolean;\n}\n\n/** @hidden */\n@Pipe({\n    name: 'gridSummary',\n    pure: true\n})\nexport class IgxGridSummaryPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: IGroupByResult,\n        hasSummary: boolean,\n        summaryCalculationMode: GridSummaryCalculationMode,\n        summaryPosition: GridSummaryPosition,\n        id: string, pipeTrigger: number, summaryPipeTrigger: number): any[] {\n\n        if (!collection.data || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {\n            return collection.data;\n        }\n\n        return this.addSummaryRows(id, collection, summaryPosition);\n    }\n\n    private addSummaryRows(gridId: string, collection: IGroupByResult, summaryPosition: GridSummaryPosition): any[] {\n        const recordsWithSummary = [];\n        const lastChildMap = new Map<any, IGroupByRecord[]>();\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        const maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();\n\n        if (collection.metadata.length && !grid.isGroupByRecord(collection.data[0]) &&\n            grid.isGroupByRecord(collection.metadata[0]) && summaryPosition === GridSummaryPosition.bottom) {\n            const groups: Array<IGroupByRecord & ISkipRecord> = [];\n            groups.push(collection.metadata[0]);\n            while (groups[groups.length - 1].groupParent) {\n                groups.push(groups[groups.length - 1].groupParent);\n            }\n            groups.reverse();\n            groups.forEach(g => g.skip = true);\n            collection.data.splice(0, 0, ...groups);\n        }\n        for (let i = 0; i < collection.data.length; i++) {\n            const record = collection.data[i];\n            let skipAdd = false;\n            let recordId;\n            let groupByRecord: IGroupByRecord = null;\n            if (grid.isGroupByRecord(record)) {\n                skipAdd = !!record.skip;\n                record.skip = null;\n                groupByRecord = record as IGroupByRecord;\n                recordId = this.gridAPI.get_groupBy_record_id(groupByRecord);\n            } else {\n                recordId = this.gridAPI.get_row_id(record);\n            }\n            if (!skipAdd) {\n                recordsWithSummary.push(record);\n            }\n\n            if (summaryPosition === GridSummaryPosition.bottom && lastChildMap.has(recordId)) {\n                const groupRecords = lastChildMap.get(recordId);\n\n                for (let j = 0; j < groupRecords.length; j++) {\n                    const groupRecord = groupRecords[j];\n                    const groupRecordId = this.gridAPI.get_groupBy_record_id(groupRecord);\n                    const records = this.removeDeletedRecord(grid, groupRecord.records.slice());\n                    const summaries = grid.summaryService.calculateSummaries(groupRecordId, records);\n                    const summaryRecord: ISummaryRecord = {\n                        summaries: summaries,\n                        max: maxSummaryHeight\n                    };\n                    recordsWithSummary.push(summaryRecord);\n                }\n            }\n\n            if (groupByRecord === null || !grid.isExpandedGroup(groupByRecord)) {\n                continue;\n            }\n\n            if (summaryPosition === GridSummaryPosition.top) {\n                const records = this.removeDeletedRecord(grid, groupByRecord.records.slice());\n                const summaries = grid.summaryService.calculateSummaries(recordId, records);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max: maxSummaryHeight\n                };\n                recordsWithSummary.push(summaryRecord);\n            } else if (summaryPosition === GridSummaryPosition.bottom) {\n                let lastChild = groupByRecord;\n\n                while (lastChild.groups && lastChild.groups.length > 0 && grid.isExpandedGroup(lastChild)) {\n                    lastChild = lastChild.groups[lastChild.groups.length - 1];\n                }\n\n                let lastChildId;\n                if (grid.isExpandedGroup(lastChild)) {\n                    lastChildId = this.gridAPI.get_row_id(lastChild.records[lastChild.records.length - 1]);\n                } else {\n                    lastChildId = this.gridAPI.get_groupBy_record_id(lastChild);\n                }\n\n                let groupRecords = lastChildMap.get(lastChildId);\n                if (!groupRecords) {\n                    groupRecords = [];\n                    lastChildMap.set(lastChildId, groupRecords);\n                }\n                groupRecords.unshift(groupByRecord);\n            }\n        }\n\n        return recordsWithSummary;\n    }\n\n    private removeDeletedRecord(grid, data) {\n        if (!grid.transactions.enabled) {\n            return data;\n        }\n        const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === 'delete').map(t => t.id);\n        deletedRows.forEach(rowID => {\n            const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n            const index = tempData.indexOf(rowID);\n            if (index !== -1) {\n                data.splice(index, 1);\n            }\n        });\n        return data;\n    }\n}\n","import { PipeTransform, Pipe } from '@angular/core';\nimport { GridType } from '../common/grid.interface';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridAPIService } from './grid-api.service';\n\n/** @hidden */\n@Pipe({\n    name: 'gridDetails',\n    pure: true\n})\nexport class IgxGridDetailsPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n    public transform(collection: any[], hasDetails: boolean, expansionStates:  Map<any, boolean>, pipeTrigger: number) {\n        if (!hasDetails) {\n            return collection;\n        }\n        const res = this.addDetailRows(collection, expansionStates);\n        return res;\n    }\n\n    protected addDetailRows(collection: any[], expansionStates: Map<any, boolean>) {\n        const result = [];\n        collection.forEach((v) => {\n            result.push(v);\n            if (!this.gridAPI.grid.isGroupByRecord(v) && !this.gridAPI.grid.isSummaryRow(v) &&\n                this.gridAPI.get_row_expansion_state(v)) {\n                const detailsObj = { detailsData: v };\n                result.push(detailsObj);\n            }\n        });\n        return result;\n    }\n}\n","import { Component, ChangeDetectorRef, ElementRef, ViewChild, Inject,\n     ChangeDetectionStrategy, NgZone, OnInit, Input, TemplateRef } from '@angular/core';\nimport { IgxGridCellComponent } from '../cell.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { getNodeSizeViaRange, PlatformUtil } from '../../core/utils';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxGridBaseDirective } from '.';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\nimport { HammerGesturesManager } from '../../core/touch';\nimport { GridType } from '../common/grid.interface';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-expandable-grid-cell',\n    templateUrl: 'expandable-cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxGridExpandableCellComponent extends IgxGridCellComponent implements OnInit {\n\n    constructor(\n                selectionService: IgxGridSelectionService,\n                crudService: IgxGridCRUDService,\n                gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n                cdr: ChangeDetectorRef,\n                element: ElementRef,\n                protected zone: NgZone,\n                touchManager: HammerGesturesManager,\n                @Inject(DOCUMENT) public document,\n                protected platformUtil: PlatformUtil) {\n        super(selectionService, crudService, gridAPI, cdr, element, zone, touchManager, platformUtil);\n    }\n\n    /**\n     * @hidden\n    */\n    @Input()\n    expanded = false;\n\n    @ViewChild('indicator', { read: ElementRef })\n    public indicator: ElementRef;\n\n    @ViewChild('indentationDiv', { read: ElementRef })\n    public indentationDiv: ElementRef;\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultExpandedTemplate', { read: TemplateRef, static: true })\n   protected defaultExpandedTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultCollapsedTemplate', { read: TemplateRef, static: true })\n   protected defaultCollapsedTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public toggle(event: Event) {\n        event.stopPropagation();\n        const expansionState = this.gridAPI.get_row_expansion_state(this.row.rowData);\n        this.gridAPI.set_row_expansion_state(this.row.rowID, !expansionState, event);\n    }\n\n    /**\n     * @hidden\n     */\n    public onIndicatorFocus() {\n        this.gridAPI.submit_value();\n        this.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    public calculateSizeToFit(range: any): number {\n        const indicatorWidth = this.indicator.nativeElement.getBoundingClientRect().width;\n        const indicatorStyle = this.document.defaultView.getComputedStyle(this.indicator.nativeElement);\n        const indicatorMargin = parseFloat(indicatorStyle.marginRight);\n        let leftPadding = 0;\n        if (this.indentationDiv) {\n            const indentationStyle = this.document.defaultView.getComputedStyle(this.indentationDiv.nativeElement);\n            leftPadding = parseFloat(indentationStyle.paddingLeft);\n        }\n        const largestWidth = Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => getNodeSizeViaRange(range, child)));\n        return largestWidth + indicatorWidth + indicatorMargin + leftPadding;\n    }\n\n    /**\n     * @hidden\n    */\n    public get iconTemplate() {\n        if (this.expanded) {\n            return this.grid.rowExpandedIndicatorTemplate || this.defaultExpandedTemplate;\n        } else {\n            return this.grid.rowCollapsedIndicatorTemplate || this.defaultCollapsedTemplate;\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport {\n    IgxGroupAreaDropDirective,\n    IgxGroupByRowTemplateDirective,\n    IgxRowExpandedIndicatorDirective,\n    IgxRowCollapsedIndicatorDirective,\n    IgxHeaderExpandIndicatorDirective,\n    IgxHeaderCollapseIndicatorDirective,\n    IgxGridDetailTemplateDirective\n} from './grid.directives';\nimport { IgxGridComponent } from './grid.component';\nimport {\n    IgxGridPagingPipe,\n    IgxGridGroupingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe\n} from './grid.pipes';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IgxGridRowComponent } from './grid-row.component';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { IgxGridSummaryPipe } from './grid.summary.pipe';\nimport { IgxGridDetailsPipe } from './grid.details.pipe';\nimport { IgxGridExpandableCellComponent } from './expandable-cell.component';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxGridComponent,\n    IgxGridRowComponent,\n    IgxGridGroupByRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxGridDetailTemplateDirective,\n    IgxRowExpandedIndicatorDirective,\n    IgxRowCollapsedIndicatorDirective,\n    IgxHeaderExpandIndicatorDirective,\n    IgxHeaderCollapseIndicatorDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe,\n    IgxGridSummaryPipe,\n    IgxGridDetailsPipe,\n    IgxGridExpandableCellComponent\n  ],\n  exports: [\n    IgxGridComponent,\n    IgxGridExpandableCellComponent,\n    IgxGridGroupByRowComponent,\n    IgxGridRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxGridDetailTemplateDirective,\n    IgxRowExpandedIndicatorDirective,\n    IgxRowCollapsedIndicatorDirective,\n    IgxHeaderExpandIndicatorDirective,\n    IgxHeaderCollapseIndicatorDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe,\n    IgxGridSummaryPipe,\n    IgxGridDetailsPipe,\n    IgxGridCommonModule\n  ],\n  imports: [\n    IgxGridCommonModule,\n  ]\n})\nexport class IgxGridModule {}\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IRowToggleEventArgs } from '../common/events';\nimport { HierarchicalTransaction, TransactionType, State } from '../../services';\nimport { mergeObjects } from '../../core/utils';\nimport { Injectable } from '@angular/core';\nimport { ColumnType } from '../common/column.interface';\n\n@Injectable()\nexport class IgxTreeGridAPIService extends GridBaseAPIService<IgxTreeGridComponent> {\n    public get_all_data(transactions?: boolean): any[] {\n        const grid = this.grid;\n        const data = transactions ? grid.dataWithAddedInTransactionRows : grid.flatData;\n        return data ? data : [];\n    }\n\n    public get_summary_data() {\n        const grid = this.grid;\n        const data = grid.processedRootRecords.filter(row => row.isFilteredOutParent === undefined || row.isFilteredOutParent === false)\n            .map(rec => rec.data);\n        if (grid.transactions.enabled) {\n            const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === TransactionType.DELETE).map(t => t.id);\n            deletedRows.forEach(rowID => {\n                const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n                const index = tempData.indexOf(rowID);\n                if (index !== -1) {\n                    data.splice(index, 1);\n                }\n            });\n        }\n        return data;\n    }\n\n    public allow_expansion_state_change(rowID, expanded): boolean {\n        const grid = this.grid;\n        const row = grid.records.get(rowID);\n        if (row.expanded === expanded ||\n            ((!row.children || !row.children.length) && (!grid.loadChildrenOnDemand ||\n            (grid.hasChildrenKey && !row.data[grid.hasChildrenKey])))) {\n            return false;\n        }\n        return true;\n    }\n\n    public expand_path_to_record(record: ITreeGridRecord) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n\n        while (record.parent) {\n            record = record.parent;\n            const expanded = this.get_row_expansion_state(record);\n\n            if (!expanded) {\n                expandedStates.set(record.rowID, true);\n            }\n        }\n        grid.expansionStates = expandedStates;\n\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public get_row_expansion_state(record: ITreeGridRecord): boolean {\n        const grid = this.grid;\n        const states = grid.expansionStates;\n        const expanded = states.get(record.rowID);\n\n        if (expanded !== undefined) {\n            return expanded;\n        } else {\n            return record.children && record.children.length && record.level < grid.expansionDepth;\n        }\n    }\n\n    protected update_row_in_array(value: any, rowID: any, index: number) {\n        const grid = this.grid;\n        if (grid.primaryKey && grid.foreignKey) {\n            super.update_row_in_array(value, rowID, index);\n        } else {\n            const record = grid.records.get(rowID);\n            const childData = record.parent ? record.parent.data[grid.childDataKey] : grid.data;\n            index = grid.primaryKey ? childData.map(c => c[grid.primaryKey]).indexOf(rowID) :\n                childData.indexOf(rowID);\n            childData[index] = value;\n        }\n    }\n\n    public should_apply_number_style(column: ColumnType): boolean {\n        return column.dataType === DataType.Number && column.visibleIndex !== 0;\n    }\n\n    public deleteRowById(rowID: any) {\n        const treeGrid = this.grid;\n        const flatDataWithCascadeOnDeleteAndTransactions =\n        treeGrid.primaryKey &&\n        treeGrid.foreignKey &&\n        treeGrid.cascadeOnDelete &&\n        treeGrid.transactions.enabled;\n\n        if (flatDataWithCascadeOnDeleteAndTransactions) {\n            treeGrid.transactions.startPending();\n        }\n\n        super.deleteRowById(rowID);\n\n        if (flatDataWithCascadeOnDeleteAndTransactions) {\n            treeGrid.transactions.endPending(true);\n        }\n    }\n\n    public deleteRowFromData(rowID: any, index: number) {\n        const treeGrid = this.grid;\n        const record = treeGrid.records.get(rowID);\n\n        if (treeGrid.primaryKey && treeGrid.foreignKey) {\n            index = treeGrid.primaryKey ?\n                treeGrid.data.map(c => c[treeGrid.primaryKey]).indexOf(rowID) :\n                treeGrid.data.indexOf(rowID);\n            super.deleteRowFromData(rowID, index);\n\n            if (treeGrid.cascadeOnDelete) {\n                if (record && record.children && record.children.length > 0) {\n                    for (let i = 0; i < record.children.length; i++) {\n                        const child = record.children[i];\n                        super.deleteRowById(child.rowID);\n                    }\n                }\n            }\n        } else {\n            const collection = record.parent ? record.parent.data[treeGrid.childDataKey] : treeGrid.data;\n            index = treeGrid.primaryKey ?\n                collection.map(c => c[treeGrid.primaryKey]).indexOf(rowID) :\n                collection.indexOf(rowID);\n\n            const selectedChildren = [];\n            this.get_selected_children(record, selectedChildren);\n            if (selectedChildren.length > 0) {\n                treeGrid.deselectRows(selectedChildren);\n            }\n\n            if (treeGrid.transactions.enabled) {\n                const path = treeGrid.generateRowPath(rowID);\n                treeGrid.transactions.add({\n                    id: rowID,\n                    type: TransactionType.DELETE,\n                    newValue: null,\n                    path: path\n                },\n                    collection[index]\n                );\n            } else {\n                collection.splice(index, 1);\n            }\n        }\n    }\n\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(\n        grid: IgxTreeGridComponent,\n        rowID: any,\n        rowValueInDataSource: any,\n        rowCurrentValue: any,\n        rowNewValue: { [x: string]: any }) {\n        if (grid.transactions.enabled) {\n            const path = grid.generateRowPath(rowID);\n            const transaction: HierarchicalTransaction = {\n                id: rowID,\n                type: TransactionType.UPDATE,\n                newValue: rowNewValue,\n                path: path\n            };\n            grid.transactions.add(transaction, rowCurrentValue);\n        } else {\n            mergeObjects(rowValueInDataSource, rowNewValue);\n        }\n    }\n\n    public get_selected_children(record: ITreeGridRecord, selectedRowIDs: any[]) {\n        const grid = this.grid;\n        if (!record.children || record.children.length === 0) {\n            return;\n        }\n        for (const child of record.children) {\n            if (grid.selectionService.isRowSelected(child.rowID)) {\n                selectedRowIDs.push(child.rowID);\n            }\n            this.get_selected_children(child, selectedRowIDs);\n        }\n    }\n\n    public row_deleted_transaction(rowID: any): boolean {\n        return this.row_deleted_parent(rowID) || super.row_deleted_transaction(rowID);\n    }\n\n    public get_rec_by_id(rowID) {\n        return this.grid.records.get(rowID);\n    }\n\n    private row_deleted_parent(rowID: any): boolean {\n        const grid = this.grid;\n        if (!grid) {\n            return false;\n        }\n        if ((grid.cascadeOnDelete && grid.foreignKey) || grid.childDataKey) {\n            let node = grid.records.get(rowID);\n            while (node) {\n                const state: State = grid.transactions.getState(node.rowID);\n                if (state && state.type === TransactionType.DELETE) {\n                    return true;\n                }\n                node = node.parent;\n            }\n        }\n        return false;\n    }\n}\n","import { IgxGridNavigationService } from '../grid-navigation.service';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class IgxTreeGridNavigationService extends IgxGridNavigationService {\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false): string {\n        if (isSummary) {\n            return 'igx-grid-summary-cell';\n        }\n        if (visibleIndex === 0) {\n            return 'igx-tree-grid-cell';\n        }\n        return 'igx-grid-cell';\n    }\n\n    protected getRowSelector() {\n        return 'igx-tree-grid-row';\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowLoadingIndicator]'\n})\nexport class IgxRowLoadingIndicatorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    Input,\n    Output,\n    EventEmitter,\n    forwardRef,\n    OnInit,\n    TemplateRef,\n    QueryList,\n    ContentChild,\n    AfterContentInit,\n    ViewChild,\n    DoCheck\n} from '@angular/core';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IRowToggleEventArgs } from '../common/events';\nimport { HierarchicalTransaction, HierarchicalState, TransactionType } from '../../services/transaction/transaction';\nimport { IgxHierarchicalTransactionService } from '../../services/index';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IgxTreeGridNavigationService } from './tree-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\nimport { mergeObjects } from '../../core/utils';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { IgxDragIndicatorIconDirective } from '../row-drag.directive';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { GridType } from '../common/grid.interface';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxRowIslandAPIService } from '../hierarchical-grid/row-island-api.service';\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Tree Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Tree Grid displays and manipulates hierarchical data with consistent schema formatted as a table and\n * provides features such as sorting, filtering, editing, column pinning, paging, column moving and hiding.\n *\n * Example:\n * ```html\n * <igx-tree-grid [data]=\"employeeData\" primaryKey=\"employeeID\" foreignKey=\"PID\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-tree-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-tree-grid',\n    templateUrl: 'tree-grid.component.html',\n    providers: [\n        IgxGridSelectionService,\n        IgxGridCRUDService,\n        IgxGridSummaryService,\n        { provide: IgxGridNavigationService, useClass: IgxTreeGridNavigationService },\n        { provide: GridBaseAPIService, useClass: IgxTreeGridAPIService },\n        { provide: IgxGridBaseDirective, useExisting: forwardRef(() => IgxTreeGridComponent) },\n        IgxFilteringService,\n        IgxForOfSyncService,\n        IgxForOfScrollSyncService,\n        IgxRowIslandAPIService\n    ]\n})\nexport class IgxTreeGridComponent extends IgxGridBaseDirective implements GridType, OnInit, DoCheck, AfterContentInit {\n    private _id = `igx-tree-grid-${NEXT_ID++}`;\n    private _data;\n    private _rowLoadingIndicatorTemplate: TemplateRef<any>;\n    protected _transactions: IgxHierarchicalTransactionService<HierarchicalTransaction, HierarchicalState>;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-tree-grid [id]=\"'igx-tree-grid-1'\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxTreeGridComponent` with an array of data.\n     * ```html\n     * <igx-tree-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get data(): any[] {\n        return this._data;\n    }\n\n    public set data(value: any[]) {\n        this._data = value || [];\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    set filteredData(value) {\n        this._filteredData = value;\n\n    }\n\n    /**\n     * Get transactions service for the grid.\n     * @experimental @hidden\n     */\n    get transactions() {\n        return this._transactions;\n    }\n\n    /**\n    * @hidden\n    */\n    public flatData: any[];\n\n    /**\n    * @hidden\n    */\n    public processedExpandedFlatData: any[];\n\n    /**\n     * Returns an array of the root level `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the root record with index=2\n     * const states = this.grid.rootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public rootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the record with primaryKey=2\n     * const states = this.grid.records.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public records: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * Returns an array of processed (filtered and sorted) root `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed root record with index=2\n     * const states = this.grid.processedRootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all processed (filtered and sorted) `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed record with primaryKey=2\n     * const states = this.grid.processedRecords.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRecords: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * An @Input property that sets the child data key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public childDataKey;\n\n    /**\n     * An @Input property that sets the foreign key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" [autoGenerate]=\"true\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public foreignKey;\n\n    /**\n     * An @Input property that sets the key indicating whether a row has children.\n     * This property is only used for load on demand scenarios.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\"\n     *                [loadChildrenOnDemand]=\"loadChildren\"\n     *                [hasChildrenKey]=\"'hasEmployees'\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public hasChildrenKey;\n\n    /**\n     * An @Input property indicating whether child records should be deleted when their parent gets deleted.\n     * By default it is set to true and deletes all children along with the parent.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" cascadeOnDelete=\"false\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public cascadeOnDelete = true;\n\n    private _expansionDepth = Infinity;\n\n    /**\n     * An @Input property that sets the count of levels to be expanded in the `IgxTreeGridComponent`. By default it is\n     * set to `Infinity` which means all levels would be expanded.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" expansionDepth=\"1\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get expansionDepth(): number {\n        return this._expansionDepth;\n    }\n\n    public set expansionDepth(value: number) {\n        this._expansionDepth = value;\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxRowLoadingIndicatorTemplateDirective, { read: IgxRowLoadingIndicatorTemplateDirective })\n    protected rowLoadingTemplate: IgxRowLoadingIndicatorTemplateDirective;\n\n    /**\n     * An @Input property that provides a template for the row loading indicator when load on demand is enabled.\n     * ```html\n     * <ng-template #rowLoadingTemplate>\n     *     <igx-icon fontSet=\"material\">loop</igx-icon>\n     * </ng-template>\n     *\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'ID'\" [foreignKey]=\"'parentID'\"\n     *                [loadChildrenOnDemand]=\"loadChildren\"\n     *                [rowLoadingIndicatorTemplate]=\"rowLoadingTemplate\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get rowLoadingIndicatorTemplate(): TemplateRef<any> {\n        return this._rowLoadingIndicatorTemplate;\n    }\n\n    public set rowLoadingIndicatorTemplate(value: TemplateRef<any>) {\n        this._rowLoadingIndicatorTemplate = value;\n        this.notifyChanges();\n    }\n\n    /**\n     * An @Input property that provides a callback for loading child rows on demand.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" [loadChildrenOnDemand]=\"loadChildren\">\n     * </igx-tree-grid>\n     * ```\n     * ```typescript\n     * public loadChildren = (parentID: any, done: (children: any[]) => void) => {\n     *     this.dataService.getData(parentID, children => done(children));\n     * }\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public loadChildrenOnDemand: (parentID: any, done: (children: any[]) => void) => void;\n\n    /**\n     * @hidden\n     */\n    public loadingRows = new Set<any>();\n\n    // Kind of stupid\n    private get _gridAPI(): IgxTreeGridAPIService {\n        return this.gridAPI as IgxTreeGridAPIService;\n    }\n    private _filteredData = null;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef, static: true })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n\n        this.onRowToggle.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.loadChildrenOnRowExpansion(args);\n        });\n    }\n\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (this.rowLoadingTemplate) {\n            this._rowLoadingIndicatorTemplate = this.rowLoadingTemplate.template;\n        }\n        super.ngAfterContentInit();\n    }\n\n    private loadChildrenOnRowExpansion(args: IRowToggleEventArgs) {\n        if (this.loadChildrenOnDemand) {\n            const parentID = args.rowID;\n\n            if (args.expanded && !this._expansionStates.has(parentID)) {\n                this.loadingRows.add(parentID);\n\n                this.loadChildrenOnDemand(parentID, children => {\n                    this.loadingRows.delete(parentID);\n                    this.addChildRows(children, parentID);\n                    this.notifyChanges();\n\n                    requestAnimationFrame(() => {\n                        const cellID = this.selectionService.activeElement;\n                        if (cellID) {\n                            const cell = this._gridAPI.get_cell_by_index(cellID.row, cellID.column);\n                            if (cell) {\n                                cell.nativeElement.focus();\n                            }\n                        }\n                    });\n                });\n            }\n        }\n    }\n\n    private addChildRows(children: any[], parentID: any) {\n        if (this.primaryKey && this.foreignKey) {\n            for (const child of children) {\n                child[this.foreignKey] = parentID;\n            }\n            this.data.push(...children);\n        } else if (this.childDataKey) {\n            let parent = this.records.get(parentID);\n            let parentData = parent.data;\n\n            if (this.transactions.enabled && this.transactions.getAggregatedChanges(true).length) {\n                const path = [];\n                while (parent) {\n                    path.push(parent.rowID);\n                    parent = parent.parent;\n                }\n\n                let collection = this.data;\n                let record: any;\n                for (let i = path.length - 1; i >= 0; i--) {\n                    const pid = path[i];\n                    record = collection.find(r => r[this.primaryKey] === pid);\n\n                    if (!record) {\n                        break;\n                    }\n                    collection = record[this.childDataKey];\n                }\n                if (record) {\n                    parentData = record;\n                }\n            }\n\n            parentData[this.childDataKey] = children;\n        }\n        this.selectionService.clearHeaderCBState();\n        this._pipeTrigger++;\n    }\n\n    private cloneMap(mapIn: Map<any, boolean>): Map<any, boolean> {\n        const mapCloned: Map<any, boolean> = new Map<any, boolean>();\n\n        mapIn.forEach((value: boolean, key: any, mapObj: Map<any, boolean>) => {\n\n            mapCloned.set(key, value);\n        });\n\n        return mapCloned;\n    }\n\n    public getDefaultExpandState(record: ITreeGridRecord) {\n        return record.children && record.children.length && record.level < this.expansionDepth;\n    }\n\n    /**\n     * Expands all rows.\n     * ```typescript\n     * this.grid.expandAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public expandAll() {\n        this._expansionDepth = Infinity;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Collapses all rows.\n     * ```typescript\n     * this.grid.collapseAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public collapseAll() {\n        this._expansionDepth = 0;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Creates a new `IgxTreeGridRowComponent` with the given data. If a parentRowID is not specified, the newly created\n     * row would be added at the root level. Otherwise, it would be added as a child of the row whose primaryKey matches\n     * the specified parentRowID. If the parentRowID does not exist, an error would be thrown.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid.addRow(record, 1); // Adds a new child row to the row with ID=1.\n     * ```\n     * @param data\n     * @param parentRowID\n     * @memberof IgxTreeGridComponent\n     */\n    public addRow(data: any, parentRowID?: any) {\n        if (parentRowID !== undefined && parentRowID !== null) {\n            super.endEdit(true);\n\n            const state = this.transactions.getState(parentRowID);\n            // we should not allow adding of rows as child of deleted row\n            if (state && state.type === TransactionType.DELETE) {\n                throw Error(`Cannot add child row to deleted parent row`);\n            }\n\n            const parentRecord = this.records.get(parentRowID);\n\n            if (!parentRecord) {\n                throw Error('Invalid parent row ID!');\n            }\n            this.summaryService.clearSummaryCache({rowID: parentRecord.rowID});\n            if (this.primaryKey && this.foreignKey) {\n                data[this.foreignKey] = parentRowID;\n                super.addRow(data);\n            } else {\n                const parentData = parentRecord.data;\n                const childKey = this.childDataKey;\n                if (this.transactions.enabled) {\n                    const rowId = this.primaryKey ? data[this.primaryKey] : data;\n                    const path: any[] = [];\n                    path.push(...this.generateRowPath(parentRowID));\n                    path.push(parentRowID);\n                    this.transactions.add({\n                        id: rowId,\n                        path: path,\n                        newValue: data,\n                        type: TransactionType.ADD\n                    } as HierarchicalTransaction,\n                        null);\n                } else {\n                    if (!parentData[childKey]) {\n                        parentData[childKey] = [];\n                    }\n                    parentData[childKey].push(data);\n                }\n                this.onRowAdded.emit({ data });\n                this._pipeTrigger++;\n                this.notifyChanges();\n            }\n        } else {\n            if (this.primaryKey && this.foreignKey) {\n                const rowID = data[this.foreignKey];\n                this.summaryService.clearSummaryCache({rowID: rowID});\n            }\n            super.addRow(data);\n        }\n    }\n\n    /** @hidden */\n    public deleteRowById(rowId: any) {\n        //  if this is flat self-referencing data, and CascadeOnDelete is set to true\n        //  and if we have transactions we should start pending transaction. This allows\n        //  us in case of delete action to delete all child rows as single undo action\n        this._gridAPI.deleteRowById(rowId);\n\n    }\n\n    /** @hidden */\n    public generateRowPath(rowId: any): any[] {\n        const path: any[] = [];\n        let record = this.records.get(rowId);\n\n        while (record.parent) {\n            path.push(record.parent.rowID);\n            record = record.parent;\n        }\n\n        return path.reverse();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected getDataBasedBodyHeight(): number {\n        return !this.flatData || (this.flatData.length < this._defaultTargetRecordNumber) ?\n            0 : this.defaultTargetBodyHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        let delayScrolling = false;\n        let record: ITreeGridRecord;\n\n        if (typeof(row) !== 'number') {\n            const rowData = row;\n            const rowID = this._gridAPI.get_row_id(rowData);\n            record = this.processedRecords.get(rowID);\n            this._gridAPI.expand_path_to_record(record);\n\n            if (this.paging) {\n                const rowIndex = this.processedExpandedFlatData.indexOf(rowData);\n                const page = Math.floor(rowIndex / this.perPage);\n\n                if (this.page !== page) {\n                    delayScrolling = true;\n                    this.page = page;\n                }\n            }\n        }\n\n        if (delayScrolling) {\n            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {\n                this.scrollDirective(this.verticalScrollContainer,\n                    typeof(row) === 'number' ? row : this.dataView.indexOf(record));\n            });\n        } else {\n            this.scrollDirective(this.verticalScrollContainer,\n                typeof(row) === 'number' ? row : this.dataView.indexOf(record));\n        }\n\n        this.scrollToHorizontally(column);\n    }\n\n    /**\n    * @hidden\n    */\n    public getContext(rowData: any, rowIndex: Number): any {\n        return {\n            $implicit: rowData,\n            index: rowIndex,\n            templateID: this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow'\n        };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getSelectedData(formatters = false, headers = false): any[] {\n        const source = [];\n\n        const process = (record) => {\n            if (record.summaries) {\n                source.push(null);\n                return;\n            }\n            source.push(record.data);\n        };\n\n        this.dataView.forEach(process);\n        return this.extractDataFromSelection(source, formatters, headers);\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.flatData[rowIndex], value);\n    }\n\n    /**\n     * @hidden\n    */\n   protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        if (this.hasColumnLayouts) {\n            // invalid configuration - tree grid should not allow column layouts\n            // remove column layouts\n            const nonColumnLayoutColumns = this.columnList.filter((col) => !col.columnLayout && !col.columnLayoutChild);\n            this.columnList.reset(nonColumnLayoutColumns);\n        }\n        super.initColumns(collection, cb);\n    }\n}\n","import { Component, forwardRef, Input, ViewChildren, QueryList, HostBinding, DoCheck, ChangeDetectionStrategy } from '@angular/core';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxRowDirective } from '../row.directive';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-tree-grid-row',\n    templateUrl: 'tree-grid-row.component.html',\n    providers: [{ provide: IgxRowDirective, useExisting: forwardRef(() => IgxTreeGridRowComponent) }]\n})\nexport class IgxTreeGridRowComponent extends IgxRowDirective<IgxTreeGridComponent> implements DoCheck {\n    private _treeRow: ITreeGridRecord;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1);\n     * const cells = row.cells;\n     * ```\n     */\n    @ViewChildren('treeCell')\n    public cells: QueryList<any>;\n\n    /**\n     * The `ITreeGridRecord` passed to the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const treeRow = row.treeRow;\n     * ```\n     */\n    @Input()\n    public get treeRow(): ITreeGridRecord {\n        return this._treeRow;\n    }\n\n    public set treeRow(value: ITreeGridRecord) {\n        if (this._treeRow !== value) {\n            this._treeRow = value;\n            this.rowData = this._treeRow.data;\n        }\n    }\n\n    /**\n     * Returns a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const expanded = row.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this._treeRow.expanded;\n    }\n\n    /**\n     * Sets a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * row.expanded = true;\n     * ```\n     */\n    set expanded(value: boolean) {\n        (this.gridAPI as IgxTreeGridAPIService).set_row_expansion_state(this._treeRow.rowID, value);\n    }\n\n    /**\n     * @hidden\n     */\n    public isLoading: boolean;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get viewIndex(): number {\n        return this.index + this.grid.page * this.grid.perPage;\n    }\n\n    /**\n     * @hidden\n     */\n    public get showIndicator() {\n        return this.grid.loadChildrenOnDemand ?\n            this.grid.expansionStates.has(this.rowID) ?\n                this.treeRow.children && this.treeRow.children.length :\n                this.grid.hasChildrenKey ?\n                    this.rowData[this.grid.hasChildrenKey] :\n                    true :\n            this.treeRow.children && this.treeRow.children.length;\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const classes = super.resolveClasses();\n        const filteredClass = this.treeRow.isFilteredOutParent ? 'igx-grid__tr--filtered' : '';\n        return `${classes} ${filteredClass}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        this.isLoading = this.grid.loadChildrenOnDemand ? this.grid.loadingRows.has(this.rowID) : false;\n        super.ngDoCheck();\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray, cloneHierarchicalArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxGridBaseDirective } from '../grid';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { GridType } from '../common/grid.interface';\nimport { IGridSortingStrategy } from '../../data-operations/sorting-strategy';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridHierarchizing',\n    pure: true\n})\nexport class IgxTreeGridHierarchizingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], primaryKey: string, foreignKey: string, childDataKey: string,\n        id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n        let hierarchicalRecords: ITreeGridRecord[] = [];\n        const treeGridRecordsMap = new Map<any, ITreeGridRecord>();\n        const flatData: any[] = [];\n\n        if (primaryKey && foreignKey) {\n            hierarchicalRecords = this.hierarchizeFlatData(id, collection, primaryKey, foreignKey, treeGridRecordsMap, flatData);\n        } else if (childDataKey) {\n            hierarchicalRecords = this.hierarchizeRecursive(id, collection, primaryKey, childDataKey, undefined,\n                flatData, 0, treeGridRecordsMap);\n        }\n\n        grid.flatData = flatData;\n        grid.records = treeGridRecordsMap;\n        grid.rootRecords = hierarchicalRecords;\n        return hierarchicalRecords;\n    }\n\n    private getRowID(primaryKey: any, rowData: any) {\n        return primaryKey ? rowData[primaryKey] : rowData;\n    }\n\n    private hierarchizeFlatData(id: string, collection: any[], primaryKey: string, foreignKey: string,\n        map: Map<any, ITreeGridRecord>, flatData: any[]):\n        ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n        const missingParentRecords: ITreeGridRecord[] = [];\n        collection.forEach(row => {\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, row),\n                data: row,\n                children: []\n            };\n            const parent = map.get(row[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                missingParentRecords.push(record);\n            }\n\n            map.set(row[primaryKey], record);\n        });\n\n        missingParentRecords.forEach(record => {\n            const parent = map.get(record.data[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                result.push(record);\n            }\n        });\n\n        this.setIndentationLevels(id, result, 0, flatData);\n\n        return result;\n    }\n\n    private setIndentationLevels(id: string, collection: ITreeGridRecord[], indentationLevel: number, flatData: any[]) {\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            record.level = indentationLevel;\n            record.expanded = this.gridAPI.get_row_expansion_state(record);\n            flatData.push(record.data);\n\n            if (record.children && record.children.length > 0) {\n                this.setIndentationLevels(id, record.children, indentationLevel + 1, flatData);\n            }\n        }\n    }\n\n    private hierarchizeRecursive(id: string, collection: any[], primaryKey: string, childDataKey: string,\n        parent: ITreeGridRecord, flatData: any[], indentationLevel: number, map: Map<any, ITreeGridRecord>): ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n\n        for (let i = 0; i < collection.length; i++) {\n            const item = collection[i];\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, item),\n                data: item,\n                parent: parent,\n                level: indentationLevel\n            };\n            record.expanded = this.gridAPI.get_row_expansion_state(record);\n            flatData.push(item);\n            map.set(record.rowID, record);\n            record.children = item[childDataKey] ?\n                this.hierarchizeRecursive(id, item[childDataKey], primaryKey, childDataKey, record, flatData, indentationLevel + 1, map) :\n                undefined;\n            result.push(record);\n        }\n\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridFlattening',\n    pure: true\n})\nexport class IgxTreeGridFlatteningPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], id: string,\n        expandedLevels: number, expandedStates: Map<any, boolean>, pipeTrigger: number): any[] {\n\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        const data: ITreeGridRecord[] = [];\n\n        grid.processedRootRecords = collection;\n        grid.processedRecords = new Map<any, ITreeGridRecord>();\n\n        this.getFlatDataRecursive(collection, data, expandedLevels, expandedStates, id, true);\n\n        grid.processedExpandedFlatData = data.map(r => r.data);\n\n        return data;\n    }\n\n    private getFlatDataRecursive(collection: ITreeGridRecord[], data: ITreeGridRecord[],\n        expandedLevels: number, expandedStates: Map<any, boolean>, gridID: string,\n        parentExpanded: boolean) {\n        if (!collection || !collection.length) {\n            return;\n        }\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        for (let i = 0; i < collection.length; i++) {\n            const hierarchicalRecord = collection[i];\n\n            if (parentExpanded) {\n                data.push(hierarchicalRecord);\n            }\n\n            hierarchicalRecord.expanded = this.gridAPI.get_row_expansion_state(hierarchicalRecord);\n\n            this.updateNonProcessedRecordExpansion(grid, hierarchicalRecord);\n\n            grid.processedRecords.set(hierarchicalRecord.rowID, hierarchicalRecord);\n\n            this.getFlatDataRecursive(hierarchicalRecord.children, data, expandedLevels,\n                expandedStates, gridID, parentExpanded && hierarchicalRecord.expanded);\n        }\n    }\n\n    private updateNonProcessedRecordExpansion(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.expanded = record.expanded;\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSorting',\n    pure: true\n})\nexport class IgxTreeGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(\n        hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression[],\n        sorting: IGridSortingStrategy,\n        id: string,\n        pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n\n        let result: ITreeGridRecord[];\n        if (!expressions.length) {\n            result = hierarchicalData;\n        } else {\n            result = DataUtil.treeGridSort(hierarchicalData, expressions, sorting);\n        }\n        const filteredSortedData = [];\n        this.flattenTreeGridRecords(result, filteredSortedData);\n        grid.filteredSortedData = filteredSortedData;\n\n        return result;\n    }\n\n    private flattenTreeGridRecords(records: ITreeGridRecord[], flatData: any[]) {\n        if (records && records.length) {\n            for (const record of records) {\n                flatData.push(record.data);\n                this.flattenTreeGridRecords(record.children, flatData);\n            }\n        }\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridPaging',\n    pure: true\n})\nexport class IgxTreeGridPagingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], page = 0, perPage = 15, id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n        if (!grid.paging) {\n            return collection;\n        }\n\n        const len = collection.length;\n        const totalPages = Math.ceil(len / perPage);\n\n        const state = {\n            index: (totalPages > 0 && page >= totalPages) ? totalPages - 1 : page,\n            recordsPerPage: perPage\n        };\n\n        const result: ITreeGridRecord[] = DataUtil.page(cloneArray(collection), state);\n        grid.pagingState = state;\n        (grid as any)._page = state.index;\n\n        return result;\n    }\n}\n/** @hidden */\n@Pipe({\n    name: 'treeGridTransaction',\n    pure: true\n})\nexport class IgxTreeGridTransactionPipe implements PipeTransform {\n\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    transform(collection: any[], id: string, pipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        if (grid.transactions.enabled) {\n            const aggregatedChanges = grid.transactions.getAggregatedChanges(true);\n            if (aggregatedChanges.length > 0) {\n                const primaryKey = grid.primaryKey;\n                if (!primaryKey) {\n                    return collection;\n                }\n\n                const foreignKey = grid.foreignKey;\n                const childDataKey = grid.childDataKey;\n\n                if (foreignKey) {\n                    const flatDataClone = cloneArray(collection);\n                    return DataUtil.mergeTransactions(\n                        flatDataClone,\n                        aggregatedChanges,\n                        grid.primaryKey);\n                } else if (childDataKey) {\n                    const hierarchicalDataClone = cloneHierarchicalArray(collection, childDataKey);\n                    return DataUtil.mergeHierarchicalTransactions(\n                        hierarchicalDataClone,\n                        aggregatedChanges,\n                        childDataKey,\n                        grid.primaryKey);\n                }\n            }\n        }\n        return collection;\n    }\n}\n","import { Component, ChangeDetectorRef, ElementRef, ViewChild, Inject,\n     ChangeDetectionStrategy, NgZone, OnInit, Input, TemplateRef } from '@angular/core';\nimport { IgxGridCellComponent } from '../cell.component';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { getNodeSizeViaRange, PlatformUtil } from '../../core/utils';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxGridBaseDirective } from '../grid';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\nimport { HammerGesturesManager } from '../../core/touch';\nimport { GridType } from '../common/grid.interface';\nimport { IgxGridExpandableCellComponent } from '../grid/expandable-cell.component';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-tree-grid-cell',\n    templateUrl: 'tree-cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxTreeGridCellComponent extends IgxGridExpandableCellComponent {\n    private treeGridAPI: IgxTreeGridAPIService;\n\n    constructor(\n                selectionService: IgxGridSelectionService,\n                crudService: IgxGridCRUDService,\n                gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n                cdr: ChangeDetectorRef,\n                element: ElementRef,\n                protected zone: NgZone,\n                touchManager: HammerGesturesManager,\n                @Inject(DOCUMENT) public document,\n                protected platformUtil: PlatformUtil) {\n        super(selectionService, crudService, gridAPI, cdr, element, zone, touchManager, document, platformUtil);\n        this.treeGridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    @Input()\n    level = 0;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    showIndicator = false;\n\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public isLoading: boolean;\n\n    /**\n     * @hidden\n     */\n    public toggle(event: Event) {\n        event.stopPropagation();\n        this.treeGridAPI.set_row_expansion_state(this.row.rowID, !this.row.expanded, event);\n    }\n\n    /**\n     * @hidden\n     */\n    public onLoadingDblClick(event: Event) {\n        event.stopPropagation();\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ISummaryRecord } from '../summaries/grid-summary';\nimport { GridSummaryCalculationMode, GridSummaryPosition } from '../common/enums';\nimport { GridType } from '../common/grid.interface';\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSummary',\n    pure: true\n})\nexport class IgxTreeGridSummaryPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(flatData: ITreeGridRecord[],\n        hasSummary: boolean,\n        summaryCalculationMode: GridSummaryCalculationMode,\n        summaryPosition: GridSummaryPosition,\n        id: string, pipeTrigger: number, summaryPipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        if (!flatData || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {\n            return flatData;\n        }\n\n        return this.addSummaryRows(grid, flatData, summaryPosition);\n    }\n\n    private addSummaryRows(grid: IgxTreeGridComponent, collection: ITreeGridRecord[], summaryPosition: GridSummaryPosition): any[] {\n        const recordsWithSummary = [];\n        const maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();\n\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            recordsWithSummary.push(record);\n\n            const isExpanded = record.children && record.children.length > 0 && record.expanded;\n\n            if (summaryPosition === GridSummaryPosition.bottom && !isExpanded) {\n                let childRecord = record;\n                let parent = record.parent;\n\n                while (parent) {\n                    const children = parent.children;\n\n                    if (children[children.length - 1] === childRecord ) {\n                        let childData = children.filter(r => !r.isFilteredOutParent).map(r => r.data);\n                        childData = this.removeDeletedRecord(grid, parent.rowID, childData);\n                        const summaries = grid.summaryService.calculateSummaries(parent.rowID, childData);\n                        const summaryRecord: ISummaryRecord = {\n                            summaries: summaries,\n                            max: maxSummaryHeight,\n                            cellIndentation: parent.level + 1\n                        };\n                        recordsWithSummary.push(summaryRecord);\n\n                        childRecord = parent;\n                        parent = childRecord.parent;\n                    } else {\n                        break;\n                    }\n                }\n            } else if (summaryPosition === GridSummaryPosition.top && isExpanded) {\n                let childData = record.children.filter(r => !r.isFilteredOutParent).map(r => r.data);\n                childData = this.removeDeletedRecord(grid, record.rowID, childData);\n                const summaries = grid.summaryService.calculateSummaries(record.rowID, childData);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max: maxSummaryHeight,\n                    cellIndentation: record.level + 1\n                };\n                recordsWithSummary.push(summaryRecord);\n            }\n        }\n        return recordsWithSummary;\n    }\n\n    private removeDeletedRecord(grid, rowId, data) {\n        if (!grid.transactions.enabled || !grid.cascadeOnDelete) {\n            return data;\n        }\n        const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === 'delete').map(t => t.id);\n        let row = grid.records.get(rowId);\n        if (!row && deletedRows.lenght === 0) { return []; }\n        row = row.children ? row : row.parent;\n        while (row) {\n            rowId = row.rowID;\n            if (deletedRows.indexOf(rowId) !== -1) {\n                return [];\n            }\n            row = row.parent;\n        }\n        deletedRows.forEach(rowID => {\n            const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n            const index = tempData.indexOf(rowID);\n            if (index !== -1) {\n                data.splice(index, 1);\n            }\n        });\n        return data;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxTreeGridRowComponent } from './tree-grid-row.component';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { IgxTreeGridHierarchizingPipe } from './tree-grid.pipes';\nimport { IgxTreeGridFlatteningPipe, IgxTreeGridSortingPipe, IgxTreeGridPagingPipe, IgxTreeGridTransactionPipe } from './tree-grid.pipes';\nimport { IgxTreeGridCellComponent } from './tree-cell.component';\nimport { IgxTreeGridFilteringPipe } from './tree-grid.filtering.pipe';\nimport { IgxTreeGridSummaryPipe } from './tree-grid.summary.pipe';\nimport { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxTreeGridHierarchizingPipe,\n    IgxTreeGridFlatteningPipe,\n    IgxTreeGridSortingPipe,\n    IgxTreeGridFilteringPipe,\n    IgxTreeGridPagingPipe,\n    IgxTreeGridTransactionPipe,\n    IgxTreeGridSummaryPipe,\n    IgxRowLoadingIndicatorTemplateDirective\n  ],\n  exports: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxRowLoadingIndicatorTemplateDirective,\n    IgxGridCommonModule\n  ],\n  imports: [\n    IgxGridCommonModule,\n  ]\n})\nexport class IgxTreeGridModule {\n}\n","import { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { first } from 'rxjs/operators';\nimport { ISelectionNode } from '../selection/selection.service';\nimport { isIE } from '../../core/utils';\nimport { FilterMode } from '../common/enums';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class IgxHierarchicalGridNavigationService extends IgxGridNavigationService {\n    public grid: IgxHierarchicalGridComponent;\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false) {\n        return isSummary ? 'igx-grid-summary-cell' : 'igx-hierarchical-grid-cell';\n    }\n\n    protected getRowSelector() {\n        return 'igx-hierarchical-grid-row';\n    }\n\n    protected getRowByIndex(index) {\n        const row = super.getRowByIndex(index) as any;\n        return row;\n    }\n\n    private getChildContainer(grid?) {\n        const currGrid = grid || this.grid;\n        return currGrid.nativeElement.parentNode.parentNode.parentNode;\n    }\n\n    private getChildGridRowContainer(grid?) {\n        const currGrid = grid || this.grid;\n        return currGrid.nativeElement.parentNode.parentNode;\n    }\n\n    private getChildGrid(childGridID, grid) {\n        const cgrid = grid.hgridAPI.getChildGrids(true).filter((g) => g.id === childGridID)[0];\n        return cgrid;\n    }\n\n    private _isScrolledToBottom(grid) {\n        const scrollTop = grid.verticalScrollContainer.scrollPosition;\n        const scrollHeight = grid.verticalScrollContainer.getScroll().scrollHeight;\n        return scrollHeight === 0 || Math.round(scrollTop + grid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n    }\n    private getIsChildAtIndex(index) {\n        return this.grid.isChildGridRecord(this.grid.dataView[index]);\n    }\n\n    public getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary = false) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        if (isSummary) {\n            const summaryRow = this.grid.summariesRowList.toArray()[0].nativeElement;\n            return summaryRow.querySelector(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n        }\n        const row = this.getRowByIndex(rowIndex);\n        return row.querySelector(\n            `${cellSelector}[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`);\n    }\n\n    public navigateUp(rowElement, selectedNode: ISelectionNode) {\n        if (selectedNode.isSummaryRow) { return; }\n        const prevElem = rowElement.previousElementSibling;\n        const visibleColumnIndex = selectedNode.column;\n        const currentRowIndex = selectedNode.row;\n        if (prevElem) {\n            const nodeName = prevElem.children[0].nodeName.toLowerCase();\n            const isElemChildGrid = nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isElemChildGrid) {\n                this.focusPrevChild(prevElem, visibleColumnIndex, this.grid);\n            } else {\n                if (this.grid.parent !== null) {\n                    // currently navigating in child grid\n                    this._navigateUpInChild(rowElement, currentRowIndex, visibleColumnIndex);\n                } else {\n                    super.navigateUp(rowElement, selectedNode);\n                }\n            }\n        } else if (currentRowIndex !== 0) {\n            // handle scenario when prev item is child grid but is not yet in view\n            const isPrevChildGrid = this.getIsChildAtIndex(currentRowIndex - 1);\n            if (!isPrevChildGrid) {\n                super.navigateUp(rowElement, selectedNode);\n            } else {\n                this.scrollGrid(this.grid, -rowElement.offsetHeight,\n                    () => {\n                        rowElement = this.getRowByIndex(currentRowIndex);\n                        this.navigateUp(rowElement, selectedNode);\n                    });\n            }\n        } else if (this.grid.parent !== null &&\n            currentRowIndex === 0) {\n            // move to prev row in sibling layout or parent\n            this.focusPrev(visibleColumnIndex);\n        }\n    }\n    public navigateDown(rowElement, selectedNode: ISelectionNode) {\n        if (selectedNode.isSummaryRow) { return; }\n        const nextElem = rowElement.nextElementSibling;\n        const visibleColumnIndex = selectedNode.column;\n        const currentRowIndex = selectedNode.row;\n        if (nextElem) {\n            // next elem is in DOM\n            const nodeName = nextElem.children[0].nodeName.toLowerCase();\n            const isNextElemChildGrid = nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isNextElemChildGrid) {\n                this.focusNextChild(nextElem, visibleColumnIndex, this.grid);\n            } else {\n                if (this.grid.parent !== null) {\n                    // currently navigating in child grid\n                    this._navigateDownInChild(rowElement, currentRowIndex, visibleColumnIndex);\n                } else {\n                    super.navigateDown(rowElement, selectedNode);\n                }\n            }\n        } else if (currentRowIndex !== this.grid.dataView.length - 1) {\n            // scroll next in view\n            super.navigateDown(rowElement, selectedNode);\n        } else if (this.grid.parent !== null &&\n            currentRowIndex === this.grid.dataView.length - 1) {\n            // move to next row in sibling layout or in parent\n            this.focusNext(visibleColumnIndex);\n        }\n    }\n\n    public navigateTop(visibleColumnIndex) {\n        if (this.grid.parent !== null) {\n            // navigating in child\n            const childContainer = this.grid.nativeElement.parentNode.parentNode;\n            const diff =\n            childContainer.getBoundingClientRect().top - this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top;\n            const topIsVisible = diff >= 0;\n            const scrollable = this.getNextScrollable(this.grid);\n            if (!topIsVisible) {\n                this.scrollGrid(scrollable.grid, diff,\n                    () => super.navigateTop(visibleColumnIndex));\n            } else {\n                super.navigateTop(visibleColumnIndex);\n            }\n        } else {\n            super.navigateTop(visibleColumnIndex);\n        }\n    }\n\n    public navigateBottom(visibleColumnIndex) {\n        // handle scenario where last index is child grid\n        // in that case focus cell in last data row\n        const lastIndex = this.grid.dataView.length - 1;\n        if (this.getIsChildAtIndex(lastIndex)) {\n            const targetIndex = lastIndex - 1;\n            const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n            const verticalScrollTop = this.grid.verticalScrollContainer.scrollPosition;\n            const cellSelector = this.getCellSelector(visibleColumnIndex);\n            if (verticalScrollTop === scrTopPosition) {\n                const cells = this.getRowByIndex(targetIndex).querySelectorAll(\n                    `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                cells[cells.length - 1].focus();\n            } else {\n                this.scrollGrid(this.grid, scrTopPosition - verticalScrollTop,\n                    () => {\n                        const cells = this.getRowByIndex(targetIndex).querySelectorAll(\n                            `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                        if (cells.length > 0) { cells[cells.length - 1].focus(); }\n                    });\n            }\n        } else  if (this.grid.parent !== null) {\n            const childContainer = this.grid.nativeElement.parentNode.parentNode;\n            const diff =\n            childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const endIsVisible = diff < 0;\n            const scrollable = this.getNextScrollableDown(this.grid);\n            if (!endIsVisible) {\n                this.scrollGrid(scrollable.grid, diff,\n                    () => super.navigateBottom(visibleColumnIndex));\n            } else {\n                super.navigateBottom(visibleColumnIndex);\n            }\n        } else {\n            super.navigateBottom(visibleColumnIndex);\n        }\n    }\n    public goToLastCell() {\n        // handle scenario where last index is child grid\n        // in that case focus last cell in last data row\n        const lastIndex = this.grid.dataView.length - 1;\n        if (this.getIsChildAtIndex(lastIndex)) {\n            const targetIndex = lastIndex - 1;\n            const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n            const verticalScrollTop = this.grid.verticalScrollContainer.scrollPosition;\n            if (verticalScrollTop === scrTopPosition) {\n                this.onKeydownEnd(targetIndex);\n            } else {\n                this.scrollGrid(this.grid, scrTopPosition - verticalScrollTop,\n                    () => {\n                        this.onKeydownEnd(targetIndex);\n                    });\n            }\n        } else {\n            super.goToLastCell();\n        }\n    }\n\n    public onKeydownEnd(rowIndex, isSummary = false) {\n        if (this.grid.parent && !isSummary) {\n            // handle scenario where last child row might not be in view\n            // parent should scroll to child grid end\n            const childContainer = this.grid.nativeElement.parentNode.parentNode;\n            const diffBottom =\n                childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;\n            const row = this.grid.getRowByIndex(rowIndex).element.nativeElement;\n            const rowBottom = row.getBoundingClientRect().bottom;\n            const rowIsVisible = rowBottom <= this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const gridTop = this._getMaxTop(this.grid);\n            const diffTop = row.getBoundingClientRect().bottom -\n                row.offsetHeight - gridTop;\n            const endIsVisible = diffBottom <= 0;\n            const topVisible = diffTop >= 0;\n            if (!endIsVisible && !rowIsVisible) {\n                this.scrollGrid(this.grid.parent, diffBottom, () => super.onKeydownEnd(rowIndex));\n            } else if (!topVisible) {\n                const scrGrid = this.grid.verticalScrollContainer.scrollPosition !== 0 ? this.grid :\n                    this.getNextScrollable(this.grid).grid;\n                const topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >\n                    this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : this.grid.rootGrid;\n                this.scrollGrid(topGrid, diffTop, () => super.onKeydownEnd(rowIndex));\n            } else {\n                super.onKeydownEnd(rowIndex, isSummary);\n            }\n        } else {\n            super.onKeydownEnd(rowIndex, isSummary);\n        }\n\n    }\n\n    public goToFirstCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        const horizontalScroll = this.grid.dataRowList.first.virtDirRow.getScroll();\n        if (verticalScroll.scrollTop === 0 && this.grid.parent) {\n            // scroll parent so that current child is in view\n            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {\n                this.navigateTop(0);\n            } else {\n                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);\n                this.grid.parentVirtDir.onChunkLoad\n                    .pipe(first())\n                    .subscribe(() => {\n                        this.navigateTop(0);\n                    });\n            }\n        } else {\n            super.goToFirstCell();\n        }\n    }\n\n    public performTab(currentRowEl, selectedNode: ISelectionNode) {\n        if (this.grid.rowInEditMode) {\n            super.performTab(currentRowEl, selectedNode);\n            return;\n        }\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummaryRow = selectedNode.isSummaryRow;\n        const summaryRows = this.grid.summariesRowList.toArray();\n        const hasSummaries = summaryRows.length > 0;\n        const isLastDataRow = rowIndex === this.grid.dataView.length - 1;\n        const nextIsDataRow = this.grid.dataRowList.find(row => row.index === rowIndex + 1);\n        const isLastColumn = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex;\n        const isLastSummaryRow = hasSummaries && isSummaryRow;\n        const nextIndex = rowIndex + 1;\n        const virt = this.grid.verticalScrollContainer;\n        const isNextChild = nextIndex <= virt.igxForOf.length - 1 &&\n            this.grid.isChildGridRecord(virt.igxForOf[nextIndex]);\n        if (!nextIsDataRow && !(isLastDataRow && hasSummaries) && isLastColumn && !isSummaryRow) {\n            // navigating in child, next is not summary\n            const childContainer = this.getChildGridRowContainer();\n            const nextIsSiblingChild = this.grid.parent ? !!childContainer.nextElementSibling : false;\n            if (nextIsSiblingChild) {\n                this.focusNextChildDOMElem(childContainer, this.grid.parent);\n            } else if (isNextChild) {\n                const isInView = virt.state.startIndex + virt.state.chunkSize > nextIndex;\n                if (!isInView) {\n                    this.scrollGrid(this.grid, 'next', () => {\n                        this.focusNextChildDOMElem(currentRowEl, this.grid);\n                    });\n                } else {\n                    this.focusNextChildDOMElem(currentRowEl, this.grid);\n                }\n            } else if (this.grid.parent && this.grid.parent.summariesRowList.length > 0) {\n               this._navigateToNextParentRow(currentRowEl);\n            } else {\n                this.navigateDown(currentRowEl, { row: rowIndex, column: 0 });\n            }\n        } else if (isLastSummaryRow && isLastColumn && this.grid.parent) {\n            this._navigateToNextParentRow(currentRowEl);\n        } else  if (isLastDataRow && hasSummaries && isLastColumn && this.grid.parent) {\n            // navigating in child rows, next is child grid's summary row\n           this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid.parent, true);\n        } else {\n            super.performTab(currentRowEl, selectedNode);\n        }\n    }\n\n    private _navigateToNextParentRow(currentRowEl: any): void {\n         // next is parent summary or next parent row\n         const parent = this.grid.parent;\n         const parentHasSummary = parent.summariesRowList.length > 0;\n         const parentRowIndex = parseInt(\n            this.getClosestElemByTag(currentRowEl, 'igx-child-grid-row').parentNode.getAttribute('data-rowindex'), 10);\n         const isLastRowInParent = parent.dataView.length - 1 === parentRowIndex;\n         // check if next is sibling\n         const childRowContainer = this.getChildGridRowContainer(this.grid);\n         const nextIsSiblingChild = !!childRowContainer.nextElementSibling;\n         if (isLastRowInParent && parentHasSummary && !nextIsSiblingChild) {\n             // next is parent summary\n             const parentSummary = parent.summariesRowList.first.nativeElement;\n             parent.navigation.focusNextRow(parentSummary, 0, parent, true);\n         } else {\n             // next is sibling or parent\n             this.focusNext(0);\n         }\n    }\n\n    private focusNextChildDOMElem(currentRowEl, grid) {\n        const gridElem = currentRowEl.nextElementSibling.querySelector('igx-hierarchical-grid');\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n        if (childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {\n            childGrid.navigation.moveFocusToFilterCell(true);\n            return;\n        }\n        this.focusNextChild(currentRowEl.nextElementSibling, 0, grid);\n    }\n\n    public navigatePrevFilterCell(column: IgxColumnComponent, eventArgs) {\n        if (column.visibleIndex === 0 && this.grid.parent) {\n            eventArgs.preventDefault();\n            let targetGrid = this.grid.parent;\n            const prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;\n            if (prevSiblingChild) {\n                const gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];\n                targetGrid = this.getChildGrid(gridElem.getAttribute('id'), this.grid.parent);\n            }\n            this.focusPrev(targetGrid.unpinnedColumns[targetGrid.unpinnedColumns.length - 1].visibleIndex);\n        } else {\n            super.navigatePrevFilterCell(column, eventArgs);\n        }\n    }\n\n    public navigateNextFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const nextFilterableIndex = cols.indexOf(column) + 1;\n        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {\n            // next is not filter cell\n            const dataRows = this.grid.rowList.toArray();\n            const hasRows = dataRows.length !== 0;\n            const summaryRows = this.grid.summariesRowList.toArray();\n            const hasSummaries = summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0;\n            if (hasRows) {\n                this.focusNextRow(dataRows[0].nativeElement, 0, this.grid, false);\n            } else if (hasSummaries) {\n                this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid, true);\n            } else {\n                this.focusNext(0);\n            }\n            eventArgs.preventDefault();\n        } else {\n            super.navigateNextFilterCell(column, eventArgs);\n        }\n    }\n\n    public performShiftTabKey(currentRowEl, selectedNode: ISelectionNode) {\n        if (this.grid.rowInEditMode) {\n            super.performShiftTabKey(currentRowEl, selectedNode);\n            return;\n        }\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (visibleColumnIndex === 0 && rowIndex === 0 && this.grid.parent && !isSummary) {\n            if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                this.moveFocusToFilterCell();\n            } else {\n                const prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;\n                if (prevSiblingChild) {\n                    const gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];\n                    this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);\n                } else {\n                    const selNode = {\n                        row: rowIndex,\n                        column: this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex\n                    };\n                    this.navigateUp(currentRowEl, selNode);\n                }\n            }\n        } else if (visibleColumnIndex === 0 && currentRowEl.previousElementSibling &&\n            currentRowEl.previousElementSibling.children[0].tagName.toLowerCase() === 'igx-child-grid-row') {\n            const gridElem = this.getLastGridElem(currentRowEl.previousElementSibling);\n            this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);\n        } else if (visibleColumnIndex === 0 && isSummary) {\n            const lastRowIndex = this.grid.dataView.length - 1;\n            if (lastRowIndex === -1) {\n                // no child data\n                if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                    this.moveFocusToFilterCell();\n                } else {\n                    const selNode = {\n                        row: rowIndex,\n                        column: this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex\n                    };\n                    this.navigateUp(currentRowEl, selNode);\n                }\n            } else if (!this.getIsChildAtIndex(lastRowIndex)) {\n                super.goToLastCell();\n            } else {\n                const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(lastRowIndex, true);\n                const verticalScrollTop = this.grid.verticalScrollContainer.scrollPosition;\n                if (verticalScrollTop === scrTopPosition || isNaN(scrTopPosition)) {\n                    const closestChild = this.getLastGridElem(this.grid.getRowByIndex(lastRowIndex).nativeElement.parentElement);\n                    this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);\n                } else {\n                    this.scrollGrid(this.grid, scrTopPosition - verticalScrollTop,\n                        () => {\n                            const closestChild = this.getLastGridElem(this.grid.getRowByIndex(lastRowIndex).nativeElement.parentElement);\n                            this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);\n                        });\n                }\n            }\n        } else {\n            super.performShiftTabKey(currentRowEl, selectedNode);\n        }\n    }\n\n    public getFocusableGrid() {\n        return (isIE() && this.grid.rootGrid) ? this.grid.rootGrid : this.grid;\n    }\n\n    private getLastGridElem(trContainer) {\n        const children = trContainer.children;\n        const closestChild = children[children.length - 1].children[0].children[0];\n        return closestChild;\n    }\n\n    private performShiftTabIntoChild(gridElem, currentRowEl, rowIndex) {\n        const childGridID = gridElem.getAttribute('id');\n            const childGrid = this.getChildGrid(childGridID, this.grid) || this.getChildGrid(childGridID, this.grid.parent);\n            const lastIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n            const summaryRows = childGrid.summariesRowList.toArray();\n            if (summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0) {\n                // move focus to last summary row cell\n                const summaryRow = summaryRows[0].nativeElement;\n                this.focusPrevRow(summaryRow, lastIndex, childGrid, true, true);\n            } else if (childGrid.rowList.length === 0 &&\n             childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {\n                 // move to filter cell\n                childGrid.navigation.moveFocusToFilterCell();\n            } else if (childGrid.rowList.length === 0) {\n                // move to prev child or parent row\n                const prevChild = this.getSibling(childGrid);\n                if (prevChild) {\n                    this.performShiftTabIntoChild(prevChild, currentRowEl, rowIndex);\n                } else {\n                    const selNode = {\n                        row:  rowIndex,\n                        column: this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex\n                    };\n                    this.navigateUp(currentRowEl, selNode);\n                }\n            } else {\n                // move to prev cell\n                childGrid.navigation.goToLastCell();\n            }\n    }\n\n    private getSibling(childGrid) {\n        const prevChildRow = childGrid.childRow.nativeElement.previousElementSibling;\n        if (prevChildRow) {\n            return prevChildRow.children[0].children[0];\n        }\n        return null;\n    }\n\n    private focusNextChild(elem, visibleColumnIndex, grid) {\n        const gridElem = elem.querySelector('igx-hierarchical-grid');\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n\n        if (childGrid.rowList.length === 0) {\n            this.focusNext(visibleColumnIndex, childGrid);\n            return;\n        }\n\n        // Update column index since the next child can have in general less columns than visibleColumnIndex value.\n        const lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n\n        if (childGrid.verticalScrollContainer.state.startIndex !== 0) {\n            // scroll to top\n            this.scrollGrid(childGrid, 'top', () => this.focusNextRow(elem, visibleColumnIndex, childGrid));\n        } else {\n            this.focusNextRow(elem, visibleColumnIndex, childGrid);\n        }\n    }\n    private focusPrevChild(elem, visibleColumnIndex, grid) {\n        const grids = [];\n        const gridElems = Array.from(elem.querySelectorAll('igx-hierarchical-grid'));\n        const childLevel = grid.childLayoutList.first.level;\n        gridElems.forEach((hg) => {\n            const parentRow = this.getClosestElemByTag(hg, 'igx-child-grid-row');\n            if (parentRow && parseInt(parentRow.getAttribute('data-level'), 10) === childLevel) {\n                grids.push(hg);\n            }\n        });\n        const gridElem = grids[grids.length - 1];\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n\n        if (childGrid.rowList.length === 0) {\n            this.focusPrev(visibleColumnIndex, childGrid);\n            return;\n        }\n\n        // Update column index since the previous child can have in general less columns than visibleColumnIndex value.\n        const lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n\n        const isScrolledToBottom = this._isScrolledToBottom(childGrid);\n        const lastIndex = childGrid.dataView.length - 1;\n        if (!isScrolledToBottom) {\n            // scroll to end\n            this.scrollGrid(childGrid, 'bottom', () => this.focusPrevChild(elem, visibleColumnIndex, grid));\n        } else {\n            const lastRowInChild = childGrid.getRowByIndex(lastIndex);\n            const isChildGrid = lastRowInChild.nativeElement.nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isChildGrid) {\n                this.focusPrevChild(lastRowInChild.nativeElement.parentNode, visibleColumnIndex, childGrid);\n            } else {\n                this.focusPrevRow(lastRowInChild.nativeElement, visibleColumnIndex, childGrid, true);\n            }\n        }\n    }\n    private focusPrev(visibleColumnIndex, grid?) {\n        const currGrid = grid || this.grid;\n        let parentContainer = this.getChildContainer(currGrid);\n        let childRowContainer = this.getChildGridRowContainer(currGrid);\n        const prevIsSiblingChild = !!childRowContainer.previousElementSibling;\n        let prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;\n        if (prev) {\n            if (prevIsSiblingChild) {\n                this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);\n            } else {\n                this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);\n            }\n        } else {\n            this.scrollGrid(currGrid.parent, 'prev',\n                () => {\n                    parentContainer = this.getChildContainer(grid);\n                    childRowContainer = this.getChildGridRowContainer(grid);\n                    prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;\n                    if (prevIsSiblingChild) {\n                        this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);\n                    } else {\n                        this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);\n                    }\n                });\n        }\n    }\n\n    private getNextParentInfo(grid) {\n        // find next parent that is not at bottom\n        let currGrid = grid.parent;\n        let nextElem = this.getChildContainer(grid).nextElementSibling;\n        while (!nextElem && currGrid.parent !== null) {\n            nextElem = this.getChildContainer(currGrid).nextElementSibling;\n            currGrid = currGrid.parent;\n        }\n\n        return { grid: currGrid, nextElement: nextElem };\n    }\n    private getNextScrollable(grid) {\n        let currGrid = grid.parent;\n        if (!currGrid) {\n            return { grid: grid, prev: null };\n        }\n        let nonScrollable = currGrid.verticalScrollContainer.scrollPosition === 0;\n        let prev = grid;\n        while (nonScrollable && currGrid.parent !== null) {\n            prev = currGrid;\n            currGrid = currGrid.parent;\n            nonScrollable = currGrid.verticalScrollContainer.scrollPosition === 0;\n        }\n        return { grid: currGrid, prev: prev };\n    }\n\n    private focusNext(visibleColumnIndex, grid?) {\n        const currGrid = grid || this.grid;\n        const parentInfo = this.getNextParentInfo(currGrid);\n        const nextParentGrid = parentInfo.grid;\n        let nextParentElem = parentInfo.nextElement;\n        let childRowContainer = this.getChildGridRowContainer(currGrid);\n        const nextIsSiblingChild = !!childRowContainer.nextElementSibling;\n        let next = childRowContainer.nextElementSibling || nextParentElem;\n        const verticalScroll = nextParentGrid.verticalScrollContainer.getScroll();\n        const parentState = nextParentGrid.verticalScrollContainer.state;\n        const atLastChunk = parentState.startIndex + parentState.chunkSize ===\n         nextParentGrid.dataView.length;\n        if (next) {\n            if (nextIsSiblingChild) {\n                this.focusNextChild(next, visibleColumnIndex, nextParentGrid);\n            } else {\n                this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);\n            }\n        } else if (verticalScroll.scrollTop !==\n            verticalScroll.scrollHeight - nextParentGrid.verticalScrollContainer.igxForContainerSize && !atLastChunk) {\n            this.scrollGrid(nextParentGrid, 'next',\n                () => {\n                    nextParentElem = parentInfo.nextElement;\n                    childRowContainer = this.getChildGridRowContainer();\n                    next = childRowContainer.nextElementSibling || nextParentElem;\n                    if (next && nextIsSiblingChild) {\n                        this.focusNextChild(next, visibleColumnIndex, nextParentGrid);\n                    } else if (next) {\n                        this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);\n                    }\n                });\n        }\n    }\n    private getNextScrollableDown(grid) {\n        let currGrid = grid.parent;\n        if (!currGrid) {\n            return { grid: grid, prev: null };\n        }\n        let scrollTop = currGrid.verticalScrollContainer.scrollPosition;\n        let scrollHeight = currGrid.verticalScrollContainer.getScroll().scrollHeight;\n        let nonScrollable = scrollHeight === 0 ||\n            Math.round(scrollTop + currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n        let prev = grid;\n        while (nonScrollable && currGrid.parent !== null) {\n            prev = currGrid;\n            currGrid = currGrid.parent;\n            scrollTop = currGrid.verticalScrollContainer.scrollPosition;\n            scrollHeight = currGrid.verticalScrollContainer.getScroll().scrollHeight;\n            nonScrollable = scrollHeight === 0 ||\n                Math.round(scrollTop + currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n        }\n        return { grid: currGrid, prev: prev };\n    }\n\n    private _getMinBottom(grid) {\n        let currGrid = grid;\n        let bottom = currGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n            bottom = Math.min(bottom, currGrid.tbody.nativeElement.getBoundingClientRect().bottom);\n        }\n        return bottom;\n    }\n\n    private _getMaxTop(grid) {\n        let currGrid = grid;\n        let top = currGrid.tbody.nativeElement.getBoundingClientRect().top;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n            top = Math.max(top, currGrid.tbody.nativeElement.getBoundingClientRect().top);\n        }\n        return top;\n    }\n\n    private focusNextRow(elem, visibleColumnIndex, grid, isSummary?) {\n        const lastCellIndex = grid.unpinnedColumns[grid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex) || grid.rowList.length === 0) {\n            const cell =\n                elem.querySelector(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            const closestScrollableGrid = this.getNextScrollableDown(grid).grid;\n            // const diff = cell.getBoundingClientRect().bottom - grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const gridBottom = this._getMinBottom(grid);\n            const diff = cell.getBoundingClientRect().bottom - gridBottom;\n            const inView = diff <= 0;\n            const scrollTop = closestScrollableGrid.verticalScrollContainer.scrollPosition;\n            const scrollHeight = closestScrollableGrid.verticalScrollContainer.getScroll().scrollHeight;\n            const canScroll = !(scrollHeight === 0 ||\n                Math.round(scrollTop + closestScrollableGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight);\n            if (!inView && canScroll) {\n                this.scrollGrid(closestScrollableGrid, diff, () => cell.focus({ preventScroll: true }));\n            } else {\n                cell.focus({ preventScroll: true });\n            }\n        } else {\n            this.horizontalScrollGridToIndex(grid, visibleColumnIndex, () => {\n                this.focusNextRow(elem, visibleColumnIndex, grid, isSummary);\n            });\n        }\n    }\n    public getColumnUnpinnedIndex(visibleColumnIndex: number, grid?: IgxHierarchicalGridComponent) {\n        const currGrid = grid || this.grid;\n        const column = currGrid.unpinnedColumns.find((col) => !col.columnGroup && col.visibleIndex === visibleColumnIndex);\n        return currGrid.pinnedColumns.length ? currGrid.unpinnedColumns.filter((c) => !c.columnGroup).indexOf(column) :\n            visibleColumnIndex;\n    }\n\n    private focusPrevRow(elem, visibleColumnIndex, grid, inChild?, isSummary?) {\n        const lastCellIndex = grid.unpinnedColumns[grid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex)) {\n            const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n            const cells = elem.querySelectorAll(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            let cell = cells[cells.length - 1];\n            const rIndex = parseInt(elem.getAttribute('data-rowindex'), 10);\n            const scrGrid = grid.verticalScrollContainer.scrollPosition !== 0 ? grid :\n                this.getNextScrollable(grid).grid;\n            const topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >\n                grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : grid.rootGrid;\n            const gridTop = this._getMaxTop(grid);\n            const scrTop = scrGrid.verticalScrollContainer.scrollPosition;\n            const diff = cell.getBoundingClientRect().bottom -\n                cell.offsetHeight - gridTop;\n            if (scrTop !== 0 && diff < 0 && !inChild) {\n                this.scrollGrid(scrGrid, diff, () => {\n                    const el = !isSummary ? grid.navigation.getRowByIndex(rIndex) : elem;\n                    cell = el.querySelectorAll(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`)[0];\n                    cell.focus({ preventScroll: true });\n                });\n            } else if (diff < 0 && inChild) {\n                this.scrollGrid(topGrid, diff, () => {\n                    cell.focus({ preventScroll: true });\n                });\n            } else {\n                cell.focus({ preventScroll: true });\n            }\n        } else {\n            this.horizontalScrollGridToIndex(grid, visibleColumnIndex, () => {\n                this.focusPrevRow(elem, visibleColumnIndex, grid, inChild, isSummary);\n            });\n        }\n    }\n\n    private horizontalScrollGridToIndex(grid, visibleColumnIndex, callBackFunc) {\n        const unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex, grid);\n        grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(callBackFunc);\n        if (grid.dataRowList.length > 0) {\n            grid.dataRowList.first.virtDirRow.scrollTo(unpinnedIndex);\n        } else {\n            grid.headerContainer.scrollTo(unpinnedIndex);\n        }\n\n    }\n    private scrollGrid(grid, target, callBackFunc) {\n        this.getFocusableGrid().nativeElement.focus({preventScroll: true});\n        requestAnimationFrame(() => {\n            if (typeof target === 'number') {\n                grid.verticalScrollContainer.addScrollTop(target);\n            } else {\n                switch (target) {\n                    case 'top': grid.verticalScrollContainer.scrollTo(0); break;\n                    case 'bottom': grid.verticalScrollContainer.scrollTo(grid.dataView.length - 1); break;\n                    case 'next': grid.verticalScrollContainer.scrollNext(); break;\n                    case 'prev': grid.verticalScrollContainer.scrollPrev(); break;\n                }\n            }\n            grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(callBackFunc);\n        });\n    }\n\n    private _navigateUpInChild(rowElement, currentRowIndex, visibleColumnIndex) {\n        const prevElem = rowElement.previousElementSibling;\n        const scrollable = this.getNextScrollable(this.grid);\n        const grid = scrollable.grid;\n        const scrTop = grid.verticalScrollContainer.scrollPosition;\n        const containerTop = scrollable.prev.nativeElement.parentNode.parentNode.parentNode.parentNode;\n        const top = parseInt(containerTop.style.top, 10);\n        if (scrTop !== 0 && top < 0) {\n            this.scrollGrid(grid, -prevElem.offsetHeight,\n                () => super.navigateUp(rowElement, { row: currentRowIndex, column: visibleColumnIndex }));\n        } else {\n            super.navigateUp(rowElement, { row: currentRowIndex, column: visibleColumnIndex });\n        }\n    }\n\n    private _navigateDownInChild(rowElement, currentRowIndex, visibleColumnIndex) {\n        const nextElem = rowElement.nextElementSibling;\n        const childContainer = this.grid.nativeElement.parentNode.parentNode;\n        const diff =\n            childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;\n        const endIsVisible = diff < 0;\n        const scrollable = this.getNextScrollableDown(this.grid);\n        const grid = scrollable.grid;\n        if (!endIsVisible) {\n            this.scrollGrid(grid, nextElem.offsetHeight,\n                () => super.navigateDown(rowElement, { row: currentRowIndex, column: visibleColumnIndex }));\n        } else {\n            super.navigateDown(rowElement, { row: currentRowIndex, column: visibleColumnIndex });\n        }\n    }\n\n    protected getNextRowByIndex(nextIndex) {\n        return this.grid.dataRowList.find(element => element.index === nextIndex).element.nativeElement;\n   }\n}\n","import {\n    ElementRef,\n    NgZone,\n    ChangeDetectorRef,\n    IterableDiffers,\n    ViewContainerRef,\n    Inject,\n    ComponentFactoryResolver,\n    Optional,\n    Input,\n    ViewChild,\n    TemplateRef,\n    Directive\n} from '@angular/core';\nimport { IgxGridBaseDirective, IgxGridTransaction } from '../grid-base.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { IgxSummaryOperand } from '../summaries/grid-summary';\nimport { IgxOverlayService, IgxTransactionService, Transaction, TransactionService, State } from '../../services/index';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxColumnResizingService } from '../resizing/resizing.service';\nimport { GridType } from '../common/grid.interface';\nimport { IgxColumnGroupComponent } from '../columns/column-group.component';\nimport { IgxColumnComponent } from '../columns/column.component';\n\nexport const IgxHierarchicalTransactionServiceFactory = {\n    provide: IgxGridTransaction,\n    useFactory: hierarchicalTransactionServiceFactory\n};\n\nexport function hierarchicalTransactionServiceFactory() {\n    return new IgxTransactionService();\n}\n\nexport interface IPathSegment {\n    rowID: any;\n    rowIslandKey: string;\n}\n\n@Directive({\n    selector: '[igxHierarchicalGridBase]'\n})\nexport class IgxHierarchicalGridBaseDirective extends IgxGridBaseDirective {\n    public rootGrid;\n\n    @Input()\n    public expandChildren: boolean;\n\n    @Input()\n    public hasChildrenKey: string;\n\n    @Input()\n    public showExpandAll = false;\n\n    /**\n     * @hidden\n     */\n    get maxLevelHeaderDepth() {\n        if (this._maxLevelHeaderDepth === null) {\n            this._maxLevelHeaderDepth = this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        }\n        return this._maxLevelHeaderDepth;\n    }\n\n     /**\n     * @hidden\n     */\n    protected get outlet() {\n        return this.rootGrid ? this.rootGrid.outletDirective : this.outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public hgridAPI: IgxHierarchicalGridAPIService;\n\n    /**\n     * @hidden\n     */\n    public parentIsland: IgxRowIslandComponent;\n\n    /**\n     * @hidden\n    */\n    public childRow: IgxChildGridRowComponent;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef, static: true })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n        @Inject(IgxGridTransaction) protected transactionFactory: TransactionService<Transaction, State>,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(\n            selectionService,\n            crudService,\n            colResizingService,\n            gridAPI,\n            transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions);\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    public createColumnsList(cols: Array<any>) {\n        const columns = [];\n        const topLevelCols = this.onlyTopLevel(cols);\n        topLevelCols.forEach((col) => {\n            const ref = this._createColumn(col);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n        const result = flatten(columns);\n        this.columnList.reset(result);\n        this.columnList.notifyOnChanges();\n        this.initPinning();\n    }\n\n    protected _createColumn(col) {\n        let ref;\n        if (col instanceof IgxColumnGroupComponent) {\n            ref = this._createColGroupComponent(col);\n        } else {\n            ref = this._createColComponent(col);\n        }\n        return ref;\n    }\n\n    protected _createColGroupComponent(col: IgxColumnGroupComponent) {\n        const factoryGroup = this.resolver.resolveComponentFactory(IgxColumnGroupComponent);\n        const ref = this.viewRef.createComponent(factoryGroup, null, this.viewRef.injector);\n        ref.changeDetectorRef.detectChanges();\n        factoryGroup.inputs.forEach((input) => {\n            const propName = input.propName;\n            (<any>ref.instance)[propName] = (<any>col)[propName];\n        });\n        if (col.children.length > 0) {\n            const newChildren = [];\n            col.children.forEach(child => {\n                const newCol = this._createColumn(child).instance;\n                newCol.parent = ref.instance;\n                newChildren.push(newCol);\n            });\n            (<IgxColumnGroupComponent>ref.instance).children.reset(newChildren);\n            (<IgxColumnGroupComponent>ref.instance).children.notifyOnChanges();\n        }\n        return ref;\n    }\n\n    protected _createColComponent(col) {\n        const factoryColumn = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const ref = this.viewRef.createComponent(factoryColumn, null, this.viewRef.injector);\n        factoryColumn.inputs.forEach((input) => {\n            const propName = input.propName;\n            if (!((<any>col)[propName] instanceof IgxSummaryOperand)) {\n                (<any>ref.instance)[propName] = (<any>col)[propName];\n            } else {\n                (<any>ref.instance)[propName] = col[propName].constructor;\n            }\n        });\n        return ref;\n    }\n\n    protected getGridsForIsland(rowIslandID: string) {\n        return this.hgridAPI.getChildGridsForRowIsland(rowIslandID);\n    }\n\n    protected getChildGrid(path: Array<IPathSegment>) {\n        if (!path) {\n            return;\n        }\n        return this.hgridAPI.getChildGrid(path);\n    }\n}\n\nfunction flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            result = result.concat(flatten(el.children.toArray()));\n        }\n    });\n    return result;\n}\n","import { Directive } from '@angular/core';\nimport { IBaseEventArgs } from '../core/utils';\n\n/**\n * Template directive that allows you to set a custom template representing the lower label value of the {@link IgxSliderComponent}\n *\n *```html\n * <igx-slider>\n *  <ng-template igxSliderThumbFrom let-value let-labels>{{value}}</ng-template>\n * </igx-slider>\n * ```\n *\n * @context {@link IgxSliderComponent.context}\n */\n@Directive({\n    selector: '[igxSliderThumbFrom]'\n})\nexport class IgxThumbFromTemplateDirective {}\n\n/**\n * Template directive that allows you to set a custom template representing the upper label value of the {@link IgxSliderComponent}\n *\n * ```html\n * <igx-slider>\n *  <ng-template igxSliderThumbTo let-value let-labels>{{value}}</ng-template>\n * </igx-slider>\n * ```\n *\n * @context {@link IgxSliderComponent.context}\n */\n@Directive({\n    selector: '[igxSliderThumbTo]'\n})\nexport class IgxThumbToTemplateDirective {}\n\n/**\n * Template directive that allows you to set a custom template, represeting primary/secondary tick labels of the {@link IgxSliderComponent}\n *\n * @context {@link IgxTicksComponent.context}\n */\n@Directive({\n    selector: '[igxSliderTickLabel]'\n})\nexport class IgxTickLabelTemplateDirective {}\n\nexport interface IRangeSliderValue {\n    lower: number;\n    upper: number;\n}\n\nexport interface ISliderValueChangeEventArgs {\n    oldValue: number | IRangeSliderValue;\n    value: number | IRangeSliderValue;\n}\n\nexport enum IgxSliderType {\n    /**\n     * Slider with single thumb.\n     */\n    SLIDER,\n    /**\n     *  Range slider with multiple thumbs, that can mark the range.\n     */\n    RANGE\n}\n\nexport enum SliderHandle {\n    FROM,\n    TO\n}\n\n/**\n * Slider Tick labels Orientation\n */\nexport enum TickLabelsOrientation {\n    Horizontal,\n    TopToBottom,\n    BottomToTop\n}\n\n/**\n * Slider Ticks orientation\n */\nexport enum TicksOrientation {\n    Top,\n    Bottom,\n    Mirror\n}\n","import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { Subject } from 'rxjs';\nimport { IPathSegment } from './hierarchical-grid-base.directive';\nimport { IgxGridBaseDirective, GridBaseAPIService } from '../grid';\nimport { GridType } from '../common/grid.interface';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class IgxHierarchicalGridAPIService extends GridBaseAPIService<IgxGridBaseDirective & GridType> {\n    protected childRowIslands: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected childGrids:  Map<string, Map<any, IgxHierarchicalGridComponent>> =\n        new Map<string, Map<any, IgxHierarchicalGridComponent>>();\n\n    registerChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.set(rowIsland.key, rowIsland);\n        this.destroyMap.set(rowIsland.key, new Subject<boolean>());\n    }\n\n    unsetChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childGrids.delete(rowIsland.key);\n        this.childRowIslands.delete(rowIsland.key);\n        this.destroyMap.delete(rowIsland.key);\n    }\n\n    getChildRowIsland(key: string) {\n        return this.childRowIslands.get(key);\n    }\n\n    getChildGrid(path: Array<IPathSegment>) {\n        const currPath = path;\n        let grid;\n        const pathElem = currPath.shift();\n        const childrenForLayout = this.childGrids.get(pathElem.rowIslandKey);\n        if (childrenForLayout) {\n            const childGrid = childrenForLayout.get(pathElem.rowID);\n            if (currPath.length === 0) {\n                grid = childGrid;\n            } else {\n                grid = childGrid.hgridAPI.getChildGrid(currPath);\n            }\n        }\n        return grid;\n    }\n\n    getChildGrids(inDepth?: boolean) {\n        const allChildren = [];\n        this.childGrids.forEach((layoutMap) => {\n            layoutMap.forEach((grid) => {\n                allChildren.push(grid);\n                if (inDepth) {\n                    const children = grid.hgridAPI.getChildGrids(inDepth);\n                    children.forEach((item) => {\n                        allChildren.push(item);\n                    });\n                }\n            });\n        });\n\n        return allChildren;\n    }\n\n    getParentRowId(childGrid: IgxHierarchicalGridComponent) {\n        let rowID;\n        this.childGrids.forEach((layoutMap) => {\n            layoutMap.forEach((grid, key) => {\n                if (grid === childGrid) {\n                    rowID = key;\n                    return;\n                }\n            });\n        });\n        return rowID;\n    }\n\n    registerChildGrid(parentRowID: string|object, rowIslandKey: string, grid: IgxHierarchicalGridComponent) {\n        let childrenForLayout = this.childGrids.get(rowIslandKey);\n        if (!childrenForLayout) {\n            this.childGrids.set(rowIslandKey, new Map<any, IgxHierarchicalGridComponent>());\n            childrenForLayout = this.childGrids.get(rowIslandKey);\n        }\n        childrenForLayout.set(parentRowID, grid);\n    }\n\n    getChildGridsForRowIsland(rowIslandKey): IgxHierarchicalGridComponent[] {\n        const childrenForLayout = this.childGrids.get(rowIslandKey);\n        const children = [];\n        if (childrenForLayout) {\n            childrenForLayout.forEach((child) => {\n                children.push(child);\n            });\n        }\n        return children;\n    }\n\n    getChildGridByID(rowIslandKey, rowID) {\n        const childrenForLayout = this.childGrids.get(rowIslandKey);\n        return childrenForLayout.get(rowID);\n    }\n\n    public get_row_expansion_state(record: any): boolean {\n        let inState;\n        if (record.childGridsData !== undefined) {\n            const ri = record.rowID;\n            const rec = this.grid.primaryKey ? this.get_rec_by_id(ri) : ri;\n            inState = !!super.get_row_expansion_state(rec);\n        } else {\n            inState = !!super.get_row_expansion_state(record);\n        }\n        return inState && (this.grid as any).childLayoutList.length !== 0;\n    }\n\n    public allow_expansion_state_change(rowID, expanded): boolean {\n        const rec = this.get_rec_by_id(rowID);\n        return !!rec && this.grid.expansionStates.get(rowID) !== expanded;\n    }\n\n    public get_rec_by_id(rowID): any {\n        const data = this.get_all_data(false);\n        const index = this.get_row_index_in_data(rowID);\n        return data[index];\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    Input,\n    QueryList,\n    OnInit,\n    Inject,\n    ElementRef,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    IterableDiffers,\n    ViewContainerRef,\n    NgZone,\n    AfterViewInit,\n    OnChanges,\n    Output,\n    EventEmitter,\n    Optional,\n    OnDestroy,\n    DoCheck\n} from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxGridTransaction, IgxGridBaseDirective } from '../grid-base.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { TransactionService, Transaction, State } from '../../services';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseDirective } from './hierarchical-grid-base.directive';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\n\nimport { IgxOverlayService } from '../../services/index';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxColumnComponent } from '../columns/column.component';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { IgxColumnResizingService } from '../resizing/resizing.service';\nimport { GridType } from '../common/grid.interface';\nexport interface IGridCreatedEventArgs extends IBaseEventArgs {\n    owner: IgxRowIslandComponent;\n    parentID: any;\n    grid: IgxHierarchicalGridComponent;\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-row-island',\n    template: ``,\n    providers: [IgxRowIslandAPIService]\n})\nexport class IgxRowIslandComponent extends IgxHierarchicalGridBaseDirective\n            implements AfterContentInit, AfterViewInit, OnChanges, OnInit, OnDestroy, DoCheck {\n    /**\n     * Sets the key of the row island by which child data would be taken from the row data if such is provided.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\">\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Input()\n    public key: string;\n\n    /**\n     * Sets if all immediate children of the grids for this `IgxRowIslandComponent` should be expanded/collapsed.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" [expandChildren]=\"true\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Input()\n    set expandChildren(value: boolean) {\n        this._defaultExpandState  = value;\n        this.rowIslandAPI.getChildGrids().forEach((grid) => {\n            if (document.body.contains(grid.nativeElement)) {\n                // Detect changes right away if the grid is visible\n                grid.expandChildren = value;\n                grid.markForCheck();\n            } else {\n                // Else defer the detection on changes when the grid gets into view for performance.\n                grid.updateOnRender = true;\n            }\n        });\n    }\n\n    /**\n     * Gets if all immediate children of the grids for this `IgxRowIslandComponent` have been set to be expanded/collapsed.\n     * ```typescript\n     * const expanded = this.rowIsland.expandChildren;\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    get expandChildren(): boolean {\n        return this._defaultExpandState;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false })\n    public children = new QueryList<IgxRowIslandComponent>();\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: false })\n    public childColumns = new QueryList<IgxColumnComponent>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onLayoutChange = new EventEmitter<any>();\n\n    /**\n     * Event emmited when a grid is being created based on this row island.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" (onGridCreated)=\"gridCreated($event)\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Output()\n    public onGridCreated = new EventEmitter<IGridCreatedEventArgs>();\n\n    /**\n     * @hidden\n     */\n    get id() {\n        const pId = this.parentId ? this.parentId.substring(this.parentId.indexOf(this.layout_id) + this.layout_id.length) + '-' : '';\n        return this.layout_id + pId +  this.key;\n    }\n\n    /**\n     * @hidden\n     */\n    get parentId() {\n       return this.parentIsland ? this.parentIsland.id : null;\n    }\n\n    /**\n     * @hidden\n     */\n    get level() {\n        let ptr = this.parentIsland;\n        let lvl = 0;\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parentIsland;\n        }\n        return lvl + 1;\n    }\n\n    /**\n     * @hidden\n     */\n    public initialChanges = [];\n\n    /**\n     * @hidden\n     */\n    public rootGrid = null;\n    readonly data: any[];\n    readonly filteredData: any[];\n    private layout_id = `igx-row-island-`;\n    private isInit = false;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        public rowIslandAPI: IgxRowIslandAPIService) {\n        super(\n            selectionService,\n            crudService,\n            colResizingService,\n            gridAPI,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions\n        );\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.rootGrid = this.hgridAPI.grid;\n        this.rowIslandAPI.rowIsland = this;\n    }\n\n    /**\n     * @hidden\n     */\n    ngDoCheck() {\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this.updateChildren();\n        this.children.notifyOnChanges();\n        this.children.changes.pipe(takeUntil(this.destroy$))\n        .subscribe((change) => {\n            this.updateChildren();\n            // update existing grids since their child ri have been changed.\n            this.getGridsForIsland(this.key).forEach(grid => {\n                (grid as any).onRowIslandChange(this.children);\n            });\n        });\n        const nestedColumns = this.children.map((layout) => layout.columnList.toArray());\n        const colsArray = [].concat.apply([], nestedColumns);\n        const topCols = this.columnList.filter((item) => {\n            return colsArray.indexOf(item) === -1;\n        });\n        this.childColumns.reset(topCols);\n        this.columnList.changes.pipe(takeUntil(this.destroy$)).subscribe(() => { this.updateColumnList(); });\n    }\n\n    protected updateChildren() {\n        if (this.children.first === this) {\n            this.children.reset(this.children.toArray().slice(1));\n        }\n        this.children.forEach(child => {\n            child.parentIsland = this;\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.rowIslandAPI.register(this);\n        if (this.parentIsland) {\n            this.parentIsland.rowIslandAPI.registerChildRowIsland(this);\n        } else {\n            this.rootGrid.hgridAPI.registerChildRowIsland(this);\n        }\n        this._init = false;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes) {\n        this.onLayoutChange.emit(changes);\n        if (!this.isInit) {\n            this.initialChanges.push(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        // Override the base destroy because we don't have rendered anything to use removeEventListener on\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this._destroyed = true;\n        this.rowIslandAPI.unset(this.id);\n        if (this.parentIsland) {\n            this.getGridsForIsland(this.key).forEach(grid => {\n                this.cleanGridState(grid);\n                grid.hgridAPI.unsetChildRowIsland(this);\n            });\n            this.parentIsland.rowIslandAPI.unsetChildRowIsland(this);\n        } else {\n            this.rootGrid.hgridAPI.unsetChildRowIsland(this);\n            this.cleanGridState(this.rootGrid);\n        }\n    }\n\n    private cleanGridState(grid) {\n        grid.childGridTemplates.forEach((tmpl) => {\n            tmpl.owner.cleanView(tmpl.context.templateID);\n        });\n        grid.childGridTemplates.clear();\n        grid.onRowIslandChange();\n    }\n\n    /**\n     * @hidden\n     */\n    reflow() {}\n\n    /**\n     * @hidden\n     */\n    calculateGridHeight() {}\n\n    protected updateColumnList() {\n        const nestedColumns = this.children.map((layout) => layout.columnList.toArray());\n        const colsArray = [].concat.apply([], nestedColumns);\n        const topCols = this.columnList.filter((item) => {\n            if (colsArray.indexOf(item) === -1) {\n                /* Reset the default width of the columns that come into this row island,\n                because the root catches them first during the detectChanges() and sets their defaultWidth. */\n                item.defaultWidth = undefined;\n                return true;\n            }\n            return false;\n        });\n        this.childColumns.reset(topCols);\n\n        if (this.parentIsland) {\n            this.parentIsland.columnList.notifyOnChanges();\n        } else {\n            this.rootGrid.columnList.notifyOnChanges();\n        }\n\n        this.rowIslandAPI.getChildGrids().forEach((grid: IgxHierarchicalGridComponent) => {\n            grid.createColumnsList(this.childColumns.toArray());\n            if (!document.body.contains(grid.nativeElement)) {\n                grid.updateOnRender = true;\n            }\n        });\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnInit,\n    ViewChild,\n    AfterViewInit,\n    SimpleChanges,\n    ComponentFactoryResolver\n} from '@angular/core';\nimport { GridBaseAPIService } from '.././api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxGridComponent } from '../grid/grid.component';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-child-grid-row',\n    templateUrl: './child-grid-row.component.html'\n})\nexport class IgxChildGridRowComponent implements AfterViewInit, OnInit {\nprivate resolver;\n\n    /**\n * Returns whether the row is expanded.\n * ```typescript\n * const RowExpanded = this.grid1.rowList.first.expanded;\n * ```\n */\n    public expanded = false;\n\n    @Input()\n    layout: IgxRowIslandComponent;\n\n    /**\n     * @hidden\n     */\n    public get parentHasScroll() {\n        return !this.parentGrid.verticalScrollContainer.dc.instance.notVirtual;\n    }\n\n\n    /**\n    * @hidden\n    */\n    @Input()\n    public parentGridID: string;\n\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public rowData: any = [];\n\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    @ViewChild('hgrid', { static: true })\n    private hGrid: any/* TODO: IgxHierarchicalGridComponent*/;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    // TODO: Refactor\n    get parentGrid(): any/* TODO: IgxHierarchicalGridComponent*/ {\n        return this.gridAPI.grid;\n    }\n\n    @HostBinding('attr.data-level')\n    get level() {\n        return this.layout.level;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<any/* TODO: IgxHierarchicalGridComponent*/>,\n        public element: ElementRef,\n        resolver: ComponentFactoryResolver,\n        public cdr: ChangeDetectorRef) {\n            this.resolver = resolver;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.layout.onLayoutChange.subscribe((ch) => {\n            this._handleLayoutChanges(ch);\n        });\n        const changes = this.layout.initialChanges;\n        changes.forEach(change => {\n            this._handleLayoutChanges(change);\n        });\n        this.hGrid.parent = this.parentGrid;\n        this.hGrid.parentIsland = this.layout;\n        this.hGrid.childRow =  this;\n        // handler logic that re-emits hgrid events on the row island\n        this.setupEventEmitters();\n        this.layout.onGridCreated.emit({\n            owner: this.layout,\n            parentID: this.rowData.rowID,\n            grid: this.hGrid\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.hGrid.childLayoutList = this.layout.children;\n        if (this.layout.childColumns.length > 0 && !this.hGrid.autoGenerate) {\n            this.hGrid.createColumnsList(this.layout.childColumns.toArray());\n        }\n        const layouts = this.hGrid.childLayoutList.toArray();\n        layouts.forEach((l) => this.hGrid.hgridAPI.registerChildRowIsland(l));\n        this.parentGrid.hgridAPI.registerChildGrid(this.rowData.rowID, this.layout.key, this.hGrid);\n        this.layout.rowIslandAPI.registerChildGrid(this.rowData.rowID, this.hGrid);\n\n        this.hGrid.cdr.detectChanges();\n    }\n\n    private setupEventEmitters() {\n        const destructor = takeUntil(this.hGrid.destroy$);\n\n        const factory = this.resolver.resolveComponentFactory(IgxGridComponent);\n        // exclude outputs related to two-way binding functionality\n        const inputNames = factory.inputs.map(input => input.propName);\n        const outputs = factory.outputs.filter(o => {\n            const matchingInputPropName = o.propName.slice(0, o.propName.indexOf('Change'));\n            return inputNames.indexOf(matchingInputPropName) === -1;\n        });\n        outputs.forEach(output => {\n            if (this.hGrid[output.propName]) {\n                this.hGrid[output.propName].pipe(destructor).subscribe((args) => {\n                    if (!args) {\n                        args = {};\n                    }\n                    args.owner = this.hGrid;\n                    this.layout[output.propName].emit(args);\n                });\n            }\n        });\n    }\n\n\n    private _handleLayoutChanges(changes: SimpleChanges) {\n        for (const change in changes) {\n            if (changes.hasOwnProperty(change)) {\n                this.hGrid[change] = changes[change].currentValue;\n            }\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    Input,\n    forwardRef,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    QueryList,\n    ContentChildren,\n    ElementRef,\n    AfterViewInit,\n    AfterContentInit,\n    OnInit,\n    OnDestroy,\n    DoCheck,\n    EventEmitter,\n    Output\n} from '@angular/core';\nimport { IgxGridBaseDirective } from '../grid-base.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { DisplayDensity } from '../../core/displayDensity';\nimport { IgxColumnComponent, } from '../columns/column.component';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseDirective } from './hierarchical-grid-base.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxTemplateOutletDirective } from '../../directives/template-outlet/template_outlet.directive';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\nimport { IgxTransactionService } from '../../services/index';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { GridType } from '../common/grid.interface';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\n\nlet NEXT_ID = 0;\n\nexport interface HierarchicalStateRecord {\n    rowID: any;\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid',\n    templateUrl: 'hierarchical-grid.component.html',\n    providers: [\n        IgxGridSelectionService,\n        IgxGridCRUDService,\n        { provide: GridBaseAPIService, useClass: IgxHierarchicalGridAPIService },\n        { provide: IgxGridBaseDirective, useExisting: forwardRef(() => IgxHierarchicalGridComponent) },\n        IgxGridSummaryService,\n        IgxFilteringService,\n        IgxHierarchicalGridNavigationService,\n        IgxForOfSyncService,\n        IgxForOfScrollSyncService,\n        IgxRowIslandAPIService\n    ]\n})\nexport class IgxHierarchicalGridComponent extends IgxHierarchicalGridBaseDirective\n    implements GridType, AfterViewInit, AfterContentInit, OnInit, OnDestroy, DoCheck {\n\n    /**\n     * Sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-hgrid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this.h_id;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxHierarchicalGridComponent` with an array of data.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @Input()\n    public set data(value: any[]) {\n        this._data = value || [];\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n            this.reflow();\n        }\n        this.cdr.markForCheck();\n        if (this.parent && (this.height === null || this.height.indexOf('%') !== -1)) {\n            // If the height will change based on how much data there is, recalculate sizes in igxForOf.\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Returns an array of data set to the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get data(): any[] {\n        return this._data;\n    }\n\n    /**\n     *@hidden\n     *@deprecated\n     * Sets the state of the `IgxHierarchicalGridComponent` containing which rows are expanded.\n    */\n    @Input()\n    @DeprecateProperty(`'hierarchicalState' property is deprecated. Use 'expansionStates' instead.`)\n    public get hierarchicalState() {\n        const res = Array.from(this.expansionStates.entries()).filter(({1: v}) => v === true).map(([k]) => k);\n        return res;\n    }\n    public set hierarchicalState(val) {\n        if (this.hasChildrenKey) {\n            val = val.filter(item => {\n                const rec = this.primaryKey ? this.data.find(x => x[this.primaryKey] === item.rowID) : item.rowID;\n                return rec[this.hasChildrenKey];\n            });\n        }\n        const expansionStates = new Map<any, boolean>();\n        val.forEach(item => {\n            const rec = this.primaryKey ? this.data.find(x => x[this.primaryKey] === item.rowID) : item.rowID;\n            expansionStates.set(rec, true);\n        });\n        this.expansionStates = expansionStates;\n        if (this.parent) {\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     *@hidden\n     *@deprecated\n     */\n    @Output()\n    @DeprecateProperty(`'hierarchicalStateChange' @Output property is deprecated. Use 'expansionStates' instead.`)\n    public hierarchicalStateChange = new EventEmitter<any>();\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public set filteredData(value) {\n        this._filteredData = value;\n\n\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets if all immediate children of the `IgxHierarchicalGridComponent` should be expanded/collapsed.\n     * Defult value is false.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\" [expandChildren]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @Input()\n    set expandChildren(value: boolean) {\n        this._defaultExpandState  = value;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Gets if all immediate children of the `IgxHierarchicalGridComponent` previously have been set to be expanded/collapsed.\n     * If previously set and some rows have been manually expanded/collapsed it will still return the last set value.\n     * ```typescript\n     * const expanded = this.grid.expandChildren;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    get expandChildren(): boolean {\n        return this._defaultExpandState ;\n    }\n\n    /**\n     * Gets the unique identifier of the parent row. It may be a `string` or `number` if `primaryKey` of the\n     * parent grid is set or an object reference of the parent record otherwise.\n     * ```typescript\n     * const foreignKey = this.grid.foreignKey;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get foreignKey() {\n        if (!this.parent) {\n            return null;\n        }\n        return this.parent.hgridAPI.getParentRowId(this);\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false })\n    public childLayoutList: QueryList<IgxRowIslandComponent>;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: true })\n    public allLayoutList: QueryList<IgxRowIslandComponent>;\n\n    @ViewChild('hierarchical_record_template', { read: TemplateRef, static: true })\n    protected hierarchicalRecordTemplate: TemplateRef<any>;\n\n    @ViewChild('child_record_template', { read: TemplateRef, static: true })\n    protected childTemplate: TemplateRef<any>;\n\n    @ViewChild('headerHierarchyExpander', { read: ElementRef, static: true })\n    protected headerHierarchyExpander: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective })\n    public templateOutlets: QueryList<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxChildGridRowComponent, { read: IgxChildGridRowComponent })\n    public hierarchicalRows: QueryList<IgxChildGridRowComponent>;\n\n    /**\n     * @hidden\n     */\n    get hasExpandableChildren() {\n        return !!this.childLayoutKeys.length;\n    }\n\n    /**\n     * @hidden\n     */\n    public childLayoutKeys = [];\n\n    /**\n     * @hidden\n     */\n    public highlightedRowID = null;\n\n    /**\n     * @hidden\n     */\n    public updateOnRender = false;\n\n    /**\n     * @hidden\n     */\n    public parent = null;\n\n    private _data;\n    private _filteredData = null;\n    private h_id = `igx-hierarchical-grid-${NEXT_ID++}`;\n    private childGridTemplates: Map<any, any> = new Map();\n    private scrollTop = 0;\n    private scrollLeft = 0;\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        if (this._transactions instanceof IgxTransactionService) {\n            // transaction service cannot be injected in a derived class in a factory manner\n            this._transactions = new IgxTransactionService();\n        }\n        this.expansionStatesChange.pipe(takeUntil(this.destroy$)).subscribe((value: Map<any, boolean>) => {\n            const res = Array.from(value.entries()).filter(({1: v}) => v === true).map(([k]) => k);\n            this.hierarchicalStateChange.emit(res);\n        });\n        super.ngOnInit();\n    }\n\n    public ngDoCheck() {\n        if (this._cdrRequestRepaint && !this._init) {\n            this.updateSizes();\n        }\n        super.ngDoCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        this.verticalScrollContainer.getScroll().addEventListener('scroll', this.hg_verticalScrollHandler.bind(this));\n        this.headerContainer.getScroll().addEventListener('scroll', this.hg_horizontalScrollHandler.bind(this));\n\n        this.verticalScrollContainer.onBeforeViewDestroyed.pipe(takeUntil(this.destroy$)).subscribe((view) => {\n            const rowData = view.context.$implicit;\n            if (this.isChildGridRecord(rowData)) {\n                const cachedData = this.childGridTemplates.get(rowData.rowID);\n                if (cachedData) {\n                    const tmlpOutlet = cachedData.owner;\n                    tmlpOutlet._viewContainerRef.detach(0);\n                }\n            }\n        });\n\n        if (this.parent) {\n            this._displayDensity = this.rootGrid._displayDensity;\n            this.rootGrid.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this._displayDensity = this.rootGrid._displayDensity;\n                this.notifyChanges(true);\n                this.cdr.markForCheck();\n            });\n            this.childLayoutKeys = this.parentIsland.children.map((item) => item.key);\n        }\n\n        this.toolbarCustomContentTemplates = this.parentIsland ?\n            this.parentIsland.toolbarCustomContentTemplates :\n            this.toolbarCustomContentTemplates;\n\n        this.headSelectorsTemplates = this.parentIsland ?\n            this.parentIsland.headSelectorsTemplates :\n            this.headSelectorsTemplates;\n\n        this.rowSelectorsTemplates = this.parentIsland ?\n            this.parentIsland.rowSelectorsTemplates :\n            this.rowSelectorsTemplates;\n        this.dragIndicatorIconTemplate = this.parentIsland ?\n            this.parentIsland.dragIndicatorIconTemplate :\n            this.dragIndicatorIconTemplate;\n        this.rowExpandedIndicatorTemplate  = this.rootGrid.rowExpandedIndicatorTemplate;\n        this.rowCollapsedIndicatorTemplate   = this.rootGrid.rowCollapsedIndicatorTemplate;\n        this.headerCollapseIndicatorTemplate = this.rootGrid.headerCollapseIndicatorTemplate;\n        this.headerExpandIndicatorTemplate = this.rootGrid.headerExpandIndicatorTemplate;\n        this.hasChildrenKey = this.parentIsland ?\n         this.parentIsland.hasChildrenKey || this.rootGrid.hasChildrenKey :\n         this.rootGrid.hasChildrenKey;\n         this.showExpandAll = this.parentIsland ?\n         this.parentIsland.showExpandAll : this.rootGrid.showExpandAll;\n    }\n\n    private updateSizes() {\n        if (document.body.contains(this.nativeElement) && this.isPercentWidth) {\n            this.reflow();\n\n            this.hgridAPI.getChildGrids(false).forEach((grid) => {\n                grid.updateSizes();\n            });\n        }\n    }\n\n    protected _shouldAutoSize(renderedHeight) {\n        if (this.isPercentHeight && this.parent) {\n            return true;\n        }\n        return super._shouldAutoSize(renderedHeight);\n    }\n\n    public get outletDirective() {\n        return this.rootGrid._outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this.updateColumnList(false);\n        this.childLayoutKeys = this.parent ?\n            this.parentIsland.children.map((item) => item.key) :\n            this.childLayoutKeys = this.childLayoutList.map((item) => item.key);\n        this.childLayoutList.notifyOnChanges();\n        this.childLayoutList.changes.pipe(takeUntil(this.destroy$)).subscribe(() =>\n            this.onRowIslandChange()\n        );\n        super.ngAfterContentInit();\n    }\n\n    /** @hidden */\n    public featureColumnsWidth() {\n        return super.featureColumnsWidth(this.headerHierarchyExpander);\n    }\n\n    /**\n    * @hidden\n    */\n    public onRowIslandChange() {\n        if (this.parent) {\n            this.childLayoutKeys = this.parentIsland.children.filter(item => !(item as any)._destroyed).map((item) => item.key);\n        } else {\n            this.childLayoutKeys = this.childLayoutList.filter(item => !(item as any)._destroyed).map((item) => item.key);\n        }\n        if (!(this.cdr as any).destroyed) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>) {\n        this.updateColumnList();\n        const cols = change.filter(c => c.gridAPI.grid === this);\n        if (cols.length > 0 || this.autoGenerate) {\n            this.columnList.reset(cols);\n            super.onColumnsChanged(this.columnList);\n        }\n    }\n\n    private updateColumnList(recalcColSizes = true) {\n        const childLayouts = this.parent ? this.childLayoutList : this.allLayoutList;\n        const nestedColumns = childLayouts.map((layout) => {\n            return layout.columnList.toArray();\n        });\n        const colsArray = [].concat.apply([], nestedColumns);\n        const colLength = this.columnList.length;\n        if (colsArray.length > 0) {\n            const topCols = this.columnList.filter((item) => {\n                return colsArray.indexOf(item) === -1;\n            });\n            this.columnList.reset(topCols);\n            if (recalcColSizes && this.columnList.length !== colLength) {\n                this.calculateGridSizes(false);\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        if (!this.parent) {\n            this.hgridAPI.getChildGrids(true).forEach((grid) => {\n                if (!grid.childRow.cdr.destroyed) {\n                    grid.childRow.cdr.destroy();\n                }\n            });\n        }\n        if (this.parent && this.selectionService.activeElement) {\n            // in case selection is in destroyed child grid, selection should be cleared.\n            this._clearSeletionHighlights();\n        }\n        super.ngOnDestroy();\n    }\n\n    private _clearSeletionHighlights() {\n        [this.rootGrid, ...this.rootGrid.getChildGrids(true)].forEach(grid => {\n            grid.selectionService.clear();\n            grid.selectionService.activeElement = null;\n            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');\n            grid.highlightedRowID = null;\n            grid.cdr.markForCheck();\n        });\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public isRowHighlighted(rowData) {\n        return this.highlightedRowID === rowData.rowID;\n    }\n\n    /**\n     * @hidden\n     */\n    public isHierarchicalRecord(record: any): boolean {\n        return this.childLayoutList.length !== 0 && record[this.childLayoutList.first.key];\n    }\n\n    /**\n     * @hidden\n     */\n    public isChildGridRecord(record: any): boolean {\n        // Can be null when there is defined layout but no child data was found\n        return record.childGridsData !== undefined;\n    }\n\n    /**\n     * @hidden\n     */\n    public trackChanges(index, rec) {\n        if (rec.childGridsData !== undefined) {\n            // if is child rec\n            return rec.rowID;\n        }\n        return rec;\n    }\n\n    /**\n     * @hidden\n     */\n    public getContext(rowData): any {\n        if (this.isChildGridRecord(rowData)) {\n            const cachedData = this.childGridTemplates.get(rowData.rowID);\n            if (cachedData) {\n                const view = cachedData.view;\n                const tmlpOutlet = cachedData.owner;\n                return {\n                    $implicit: rowData,\n                    moveView: view,\n                    owner: tmlpOutlet,\n                    index: this.dataView.indexOf(rowData)\n                };\n            } else {\n                const rowID = this.primaryKey ? rowData.rowID : this.data.indexOf(rowData.rowID);\n                // child rows contain unique grids, hence should have unique templates\n                return {\n                    $implicit: rowData,\n                    templateID: 'childRow-' + rowID,\n                    index: this.dataView.indexOf(rowData)\n                };\n            }\n        } else {\n            return {\n                $implicit: rowData,\n                templateID: 'dataRow',\n                index: this.dataView.indexOf(rowData)\n            };\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    public get rootGrid() {\n        let currGrid = this;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n        }\n        return currGrid;\n    }\n\n    /**\n     * @hidden\n    */\n    public get iconTemplate() {\n        const expanded = this.hasExpandedRecords() && this.hasExpandableChildren;\n        if (!expanded && this.showExpandAll) {\n            return this.headerCollapseIndicatorTemplate || this.defaultCollapsedTemplate;\n        } else {\n            return this.headerExpandIndicatorTemplate || this.defaultExpandedTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getDragGhostCustomTemplate(): TemplateRef<any> {\n        if (this.parentIsland) {\n            return this.parentIsland.getDragGhostCustomTemplate();\n        }\n        return super.getDragGhostCustomTemplate();\n    }\n\n    /**\n     * @hidden\n    */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        if (this.hasColumnLayouts) {\n            // invalid configuration - hierarchical grid should not allow column layouts\n            // remove column layouts\n            const nonColumnLayoutColumns = this.columnList.filter((col) => !col.columnLayout && !col.columnLayoutChild);\n            this.columnList.reset(nonColumnLayoutColumns);\n        }\n        super.initColumns(collection, cb);\n    }\n\n    /**\n     * @hidden\n     * Gets the visible content height that includes header + tbody + footer.\n     * For hierarchical child grid it may be scrolled and not fully visible.\n     */\n    public getVisibleContentHeight() {\n        let height = super.getVisibleContentHeight();\n        if (this.parent) {\n            const rootHeight = this.rootGrid.getVisibleContentHeight();\n            const topDiff = this.nativeElement.getBoundingClientRect().top - this.rootGrid.nativeElement.getBoundingClientRect().top;\n            height = rootHeight - topDiff > height ? height : rootHeight - topDiff;\n        }\n        return height;\n    }\n\n    /**\n     * @hidden\n    */\n   toggleAll() {\n    const expanded = this.hasExpandedRecords() && this.hasExpandableChildren;\n    if (!expanded && this.showExpandAll) {\n        this.expandAll();\n    } else {\n        this.collapseAll();\n    }\n   }\n\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public hasExpandedRecords() {\n       if (this.expandChildren) {\n            return true;\n       }\n       let hasExpandedEntry = false;\n       this.expansionStates.forEach((value, key) => {\n           if (value) {\n            hasExpandedEntry = value;\n           }\n        });\n        return hasExpandedEntry;\n    }\n\n    public getDefaultExpandState(record: any) {\n        return this.expandChildren;\n\n    }\n\n    /**\n    * @hidden\n    */\n    public isExpanded(record: any): boolean {\n        return this.gridAPI.get_row_expansion_state(record);\n    }\n\n    /**\n     * @hidden\n     */\n    public viewCreatedHandler(args) {\n        if (this.isChildGridRecord(args.context.$implicit)) {\n            const key = args.context.$implicit.rowID;\n            this.childGridTemplates.set(key, args);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public viewMovedHandler(args) {\n        if (this.isChildGridRecord(args.context.$implicit)) {\n            // view was moved, update owner in cache\n            const key = args.context.$implicit.rowID;\n            const cachedData = this.childGridTemplates.get(key);\n            cachedData.owner = args.owner;\n\n            this.childLayoutList.forEach((layout) => {\n                const relatedGrid = this.hgridAPI.getChildGridByID(layout.key, args.context.$implicit.rowID);\n                if (relatedGrid && relatedGrid.updateOnRender) {\n                    // Detect changes if `expandChildren` has changed when the grid wasn't visible. This is for performance reasons.\n                    relatedGrid.notifyChanges(true);\n                    relatedGrid.updateOnRender = false;\n                }\n            });\n\n            const childGrids = this.getChildGrids(true);\n            childGrids.forEach((grid) => {\n                if (grid.isPercentWidth) {\n                    grid.notifyChanges(true);\n                }\n                grid.updateScrollPosition();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public updateScrollPosition() {\n        const vScr = this.verticalScrollContainer.getScroll();\n        const hScr = this.headerContainer.getScroll();\n        if (vScr) {\n            vScr.scrollTop = this.scrollTop;\n        }\n        if (hScr) {\n            hScr.scrollLeft = this.scrollLeft;\n        }\n    }\n\n    protected getChildGrids(inDeph?: boolean) {\n        return this.hgridAPI.getChildGrids(inDeph);\n    }\n\n    protected generateDataFields(data: any[]): string[] {\n        return super.generateDataFields(data).filter((field) => {\n            const layoutsList = this.parentIsland ? this.parentIsland.children : this.childLayoutList;\n            const keys = layoutsList.map((item) => item.key);\n            return keys.indexOf(field) === -1;\n        });\n    }\n\n\n    private hg_verticalScrollHandler(event) {\n        this.scrollTop = event.target.scrollTop;\n    }\n\n    public onContainerScroll() {\n        this.hideOverlays();\n    }\n\n    private hg_horizontalScrollHandler(event) {\n        this.scrollLeft = event.target.scrollLeft;\n    }\n}\n","import { IgxGridCellComponent } from '../cell.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { ChangeDetectorRef, ElementRef, ChangeDetectionStrategy, Component,\n     OnInit, HostListener, NgZone } from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';\nimport { HammerGesturesManager } from '../../core/touch';\nimport { PlatformUtil } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid-cell',\n    templateUrl: './../cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxHierarchicalGridCellComponent extends IgxGridCellComponent implements OnInit {\n\n    // protected hSelection;\n    protected _rootGrid;\n\n    constructor(\n        protected selectionService: IgxGridSelectionService,\n        protected crudService: IgxGridCRUDService,\n        public gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>,\n        public cdr: ChangeDetectorRef,\n        private helement: ElementRef,\n        protected zone: NgZone,\n        touchManager: HammerGesturesManager,\n        protected platformUtil: PlatformUtil\n        ) {\n            super(selectionService, crudService, gridAPI, cdr, helement, zone, touchManager, platformUtil);\n         }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this._rootGrid = this._getRootGrid();\n    }\n\n    private _getRootGrid() {\n        let currGrid = this.grid;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n        }\n        return currGrid;\n    }\n\n    // TODO: Extend the new selection service to avoid complete traversal\n    _clearAllHighlights() {\n        [this._rootGrid, ...this._rootGrid.getChildGrids(true)].forEach(grid => {\n            grid.selectionService.clear();\n            grid.selectionService.activeElement = null;\n            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');\n            grid.highlightedRowID = null;\n            grid.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('focus', ['$event'])\n    onFocus(event) {\n        if (this.focused) {\n            return;\n        }\n        this._clearAllHighlights();\n        const currentElement = this.grid.nativeElement;\n        let parentGrid = this.grid;\n        let childGrid;\n        // add highligh to the current grid\n        if (this._rootGrid.id !== currentElement.id) {\n            currentElement.classList.add('igx-grid__tr--highlighted');\n        }\n\n        // add highligh to the current grid\n        while (this._rootGrid.id !== parentGrid.id) {\n            childGrid = parentGrid;\n            parentGrid = parentGrid.parent;\n\n            const parentRowID = parentGrid.hgridAPI.getParentRowId(childGrid);\n            parentGrid.highlightedRowID = parentRowID;\n        }\n        super.onFocus(event);\n    }\n\n    // TODO: Refactor\n    /**\n     * @hidden\n     * @internal\n     */\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        if (event.altKey && !this.row.added) {\n            const collapse = this.row.expanded && (key === 'left' || key === 'arrowleft' || key === 'up' || key === 'arrowup');\n            const expand = !this.row.expanded && (key === 'right' || key === 'arrowright' || key === 'down' || key === 'arrowdown');\n            if (collapse) {\n                this.gridAPI.set_row_expansion_state(this.row.rowID, false, event);\n            } else if (expand) {\n                this.gridAPI.set_row_expansion_state(this.row.rowID, true, event);\n            }\n            return;\n        }\n        super.dispatchEvent(event);\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    forwardRef,\n    ElementRef,\n    ViewChildren,\n    QueryList,\n    ViewChild,\n    TemplateRef\n} from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowDirective } from '../row.directive';\nimport { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid-row',\n    templateUrl: './hierarchical-row.component.html',\n    providers: [{ provide: IgxRowDirective, useExisting: forwardRef(() => IgxHierarchicalRowComponent) }]\n})\nexport class IgxHierarchicalRowComponent extends IgxRowDirective<IgxHierarchicalGridComponent> {\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxHierarchicalGridCellComponent), { read: IgxHierarchicalGridCellComponent })\n    public cells: QueryList<IgxHierarchicalGridCellComponent>;\n\n    @ViewChild('expander', { read: ElementRef })\n    public expander: ElementRef<HTMLElement>;\n\n    get viewIndex(): number {\n        return this.index + this.grid.page * this.grid.perPage;\n    }\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultExpandedTemplate', { read: TemplateRef, static: true })\n   protected defaultExpandedTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultEmptyTemplate', { read: TemplateRef, static: true })\n   protected defaultEmptyTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultCollapsedTemplate', { read: TemplateRef, static: true })\n   protected defaultCollapsedTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n        /**\n     * Returns whether the row is expanded.\n     * ```typescript\n     * const RowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    @HostBinding('class.igx-grid__tr--expanded')\n    public get expanded() {\n        return this.gridAPI.get_row_expansion_state(this.rowData);\n    }\n\n    public get hasChildren() {\n        return  !!this.grid.childLayoutKeys.length;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid__tr--highlighted')\n    public get highlighted() {\n        return this.grid && this.grid.highlightedRowID === this.rowID;\n    }\n\n    /**\n    * @hidden\n    */\n   public expanderClick(event) {\n        event.stopPropagation();\n        this.toggle();\n    }\n\n    /**\n     * Toggles the hierarchical row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle() {\n        if (this.added) {\n            return;\n        }\n        const grid = this.gridAPI.grid;\n        this.endEdit(grid.rootGrid);\n        this.gridAPI.set_row_expansion_state(this.rowID, !this.expanded);\n        grid.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public select = () => {\n        this.grid.selectRows([this.rowID]);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public deselect = () => {\n        this.grid.deselectRows([this.rowID]);\n    }\n\n    /**\n    * @hidden\n    */\n    public get iconTemplate() {\n        let expandable = true;\n        if (this.grid.hasChildrenKey) {\n            expandable = this.rowData[this.grid.hasChildrenKey];\n        }\n        if (!expandable) {\n            return this.defaultEmptyTemplate;\n        }\n        if (this.expanded) {\n            return this.grid.rowExpandedIndicatorTemplate || this.defaultExpandedTemplate;\n        } else {\n            return this.grid.rowCollapsedIndicatorTemplate || this.defaultCollapsedTemplate;\n        }\n    }\n\n    private endEdit(grid: IgxHierarchicalGridComponent) {\n        if (grid.crudService.inEditMode) {\n            grid.endEdit();\n        }\n        grid.hgridAPI.getChildGrids(true).forEach(g => {\n            if (g.crudService.inEditMode) {\n            g.endEdit();\n        }});\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { DataUtil } from '../../data-operations/data-util';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridHierarchical',\n    pure: true\n})\nexport class IgxGridHierarchicalPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>) { }\n\n    public transform(\n        collection: any,\n        state = new Map<any, boolean>(),\n        id: string,\n        primaryKey: any,\n        childKeys: string[],\n        pipeTrigger: number\n        ): any[] {\n        if (childKeys.length === 0) {\n            return collection;\n        }\n        const grid: IgxHierarchicalGridComponent = this.gridAPI.grid;\n        const result = this.addHierarchy(grid, cloneArray(collection), state, primaryKey, childKeys);\n\n        return result;\n    }\n\n    public addHierarchy<T>(grid, data: T[], state, primaryKey, childKeys: string[]): T[] {\n        const result = [];\n\n        data.forEach((v) => {\n            result.push(v);\n            const childGridsData = {};\n            childKeys.forEach((childKey) => {\n                const childData = v[childKey] ? v[childKey] : null;\n                childGridsData[childKey] = childData;\n            });\n            if (grid.gridAPI.get_row_expansion_state(v)) {\n                result.push({ rowID: primaryKey ? v[primaryKey] : v, childGridsData: childGridsData});\n            }\n        });\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridHierarchicalPaging',\n    pure: true\n})\nexport class IgxGridHierarchicalPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>) { }\n\n    public transform(collection: any[], page = 0, perPage = 15, id: string, pipeTrigger: number): any[] {\n\n        if (!this.gridAPI.grid.paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n\n        const result: any[] = DataUtil.page(cloneArray(collection), state);\n        this.gridAPI.grid.pagingState = state;\n        return result;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxGridModule } from '../grid/grid.module';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxHierarchicalRowComponent } from './hierarchical-row.component';\nimport { IgxGridHierarchicalPipe, IgxGridHierarchicalPagingPipe } from './hierarchical-grid.pipes';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';\nimport { IgxGridComponent } from '../grid/grid.component';\nimport { IgxHierarchicalGridBaseDirective } from './hierarchical-grid-base.directive';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxHierarchicalGridBaseDirective,\n    IgxHierarchicalGridComponent,\n    IgxHierarchicalRowComponent,\n    IgxRowIslandComponent,\n    IgxChildGridRowComponent,\n    IgxHierarchicalGridCellComponent,\n    IgxGridHierarchicalPipe,\n    IgxGridHierarchicalPagingPipe\n  ],\n  exports: [\n    IgxGridModule,\n    IgxHierarchicalGridComponent,\n    IgxHierarchicalRowComponent,\n    IgxHierarchicalGridCellComponent,\n    IgxRowIslandComponent,\n    IgxChildGridRowComponent\n  ],\n  imports: [\n    IgxGridModule,\n  ],\n  entryComponents: [\n    IgxGridComponent\n  ]\n})\nexport class IgxHierarchicalGridModule {\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Directive,\n    ContentChild\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxIconModule } from '../icon/index';\n\n/**\n * IgxActionIcon is a container for the action nav icon of the IgxNavbar.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-action-icon'\n})\nexport class IgxActionIconDirective { }\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navbar.html)\n *\n * The Ignite UI Navbar is most commonly used to provide an app header with a hamburger menu and navigation\n * state such as a \"Go Back\" button. It also supports other actions represented by icons.\n *\n * Example:\n * ```html\n * <igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n *   <igx-icon>search</igx-icon>\n *   <igx-icon>favorite</igx-icon>\n *   <igx-icon>more_vert</igx-icon>\n * </igx-navbar>\n * ```\n */\n\n@Component({\n    selector: 'igx-navbar',\n    templateUrl: 'navbar.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `\n    ]\n})\n\nexport class IgxNavbarComponent {\n    private static NEXT_ID = 1;\n    private isVisible = true;\n\n    /**\n     *An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-navbar [id]=\"'igx-navbar-12'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-navbar-${NEXT_ID++}`;\n    /**\n     *Returns whether the `IgxNavbarComponent` action button is visible, true/false.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public navBar: IgxNavbarComponent;\n     *ngAfterViewInit(){\n     *    let actionButtonVisibile = this.navBar.isActionButtonVisible;\n     *}\n     *```\n     */\n    @Input()\n    public get isActionButtonVisible(): boolean {\n        if (this.actionIconTemplate || !this.actionButtonIcon) {\n            return false;\n        }\n        return this.isVisible;\n    }\n\n    /**\n     *Sets whether the action button of the `IgxNavbarComponent` is visible.\n     *```html\n     *<igx-navbar [title]=\"currentView\" [isActionButtonVisible]=\"'false'\"></igx-navbar>\n     *```\n     */\n    public set isActionButtonVisible(value: boolean) {\n        this.isVisible = value;\n    }\n    /**\n     *An @Input property that sets the icon of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar [title]=\"currentView\" actionButtonIcon=\"arrow_back\"></igx-navbar>\n     *```\n     */\n    @Input() public actionButtonIcon: string;\n\n    /**\n     *An @Input property that sets the title of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input() public title: string;\n\n    /**\n     *The event that will be thrown when the action is executed,\n     *provides reference to the `IgxNavbar` component as argument\n     *```typescript\n     *public actionExc(event){\n     *    alert(\"Action Execute!\");\n     *}\n     * //..\n     *```\n     *```html\n     *<igx-navbar (onAction)=\"actionExc($event)\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Output() public onAction = new EventEmitter<IgxNavbarComponent>();\n\n    /**\n     *An @Input property that sets the titleId of the `IgxNavbarComponent`. If not set it will be automatically generated.\n     *```html\n     *<igx-navbar [titleId]=\"'igx-navbar-7'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input()\n    public titleId = `igx-navbar-${IgxNavbarComponent.NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxActionIconDirective, { read: IgxActionIconDirective })\n    protected actionIconTemplate: IgxActionIconDirective;\n\n    /**\n     *@hidden\n     */\n    public _triggerAction() {\n        this.onAction.emit(this);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxNavbarComponent, IgxActionIconDirective],\n    exports: [IgxNavbarComponent, IgxActionIconDirective],\n    imports: [IgxButtonModule, IgxIconModule, CommonModule]\n})\nexport class IgxNavbarModule {\n}\n","import { Directive, HostBinding, Input, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDrawerItem]',\n    exportAs: 'igxDrawerItem'\n})\nexport class IgxNavDrawerItemDirective {\n\n    /**\n     * @hidden\n     */\n    @Input('active') public active = false;\n\n    /**\n     * @hidden\n     */\n    @Input('isHeader') public isHeader = false;\n\n    /**\n     * @hidden\n     */\n    public readonly activeClass = 'igx-nav-drawer__item--active';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item')\n    get defaultCSS(): boolean {\n        return !this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--active')\n    get currentCSS(): boolean {\n        return this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--header')\n    get headerCSS(): boolean {\n        return this.isHeader;\n    }\n}\n\n@Directive({\n    selector: '[igxDrawer]'\n})\nexport class IgxNavDrawerTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n\n@Directive({\n    selector: '[igxDrawerMini]'\n})\nexport class IgxNavDrawerMiniTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    SimpleChange,\n    ViewChild,\n    Renderer2\n} from '@angular/core';\nimport { fromEvent, interval, Subscription } from 'rxjs';\nimport { debounce } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { HammerGesturesManager } from '../core/touch';\nimport { IgxNavDrawerMiniTemplateDirective, IgxNavDrawerTemplateDirective } from './navigation-drawer.directives';\nimport { PlatformUtil } from '../core/utils';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navigation Drawer** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navdrawer.html)\n *\n * The Ignite UI Navigation Drawer is a collapsible side navigation container commonly used in combination with the Navbar.\n *\n * Example:\n * ```html\n * <igx-nav-drawer id=\"navigation\" [isOpen]=\"true\">\n *   <ng-template igxDrawer>\n *     <nav>\n *       <span igxDrawerItem [isHeader]=\"true\">Email</span>\n *       <span igxDrawerItem igxRipple>Inbox</span>\n *       <span igxDrawerItem igxRipple>Deleted</span>\n *       <span igxDrawerItem igxRipple>Sent</span>\n *     </nav>\n *   </ng-template>\n * </igx-nav-drawer>\n * ```\n */\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-nav-drawer',\n    templateUrl: 'navigation-drawer.component.html',\n    styles: [`\n        :host {\n            display: block;\n            height: 100%;\n        }\n    `]\n})\nexport class IgxNavigationDrawerComponent implements\n    IToggleView,\n    OnInit,\n    AfterContentInit,\n    OnDestroy,\n    OnChanges {\n\n    private _isOpen = false;\n\n    /** @hidden @internal */\n    @HostBinding('class.igx-nav-drawer')\n    public cssClass = true;\n\n    /**\n     * ID of the component\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerId = this.navdrawer.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     *  <igx-nav-drawer id='navdrawer'></igx-nav-drawer>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-nav-drawer-${NEXT_ID++}`;\n\n    /**\n     * Position of the Navigation Drawer. Can be \"left\"(default) or \"right\".\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerPosition = this.navdrawer.position;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [position]=\"'left'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public position = 'left';\n\n    /**\n     * Enables the use of touch gestures to manipulate the drawer:\n     * - swipe/pan from edge to open, swipe-toggle and pan-drag.\n     *\n     * ```typescript\n     * // get\n     * let gesturesEnabled = this.navdrawer.enableGestures;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [enableGestures]='true'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public enableGestures = true;\n\n    /**\n     * State of the drawer.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsOpen = this.navdrawer.isOpen;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [isOpen]='false'></igx-nav-drawer>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [(isOpen)]='model.isOpen'></igx-nav-drawer>\n     * ```\n     */\n    @Input()\n    public get isOpen() {\n        return this._isOpen;\n    }\n    public set isOpen(value) {\n        this._isOpen = value;\n        this.isOpenChange.emit(this._isOpen);\n    }\n\n    /**\n     *@hidden\n     */\n    @Output() public isOpenChange = new EventEmitter<boolean>();\n\n    /**\n     * When pinned the drawer is relatively positioned instead of sitting above content.\n     * May require additional layout styling.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsPinned = this.navdrawer.pin;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pin]='false'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pin = false;\n\n    /**\n     * Minimum device width required for automatic pin to be toggled.\n     * Default is 1024, can be set to a falsy value to disable this behavior.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerPinTreshold = this.navdrawer.pinThreshold;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pinTreshold]='1024'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pinThreshold = 1024;\n\n    /**\n     * Returns nativeElement of the component.\n     *\n     * @hidden\n     */\n    get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Width of the drawer in its open state. Defaults to \"280px\".\n     *\n     * ```typescript\n     * // get\n     * let navDrawerWidth = this.navdrawer.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [width]=\"'228px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public width = '280px';\n\n    /**\n     * Width of the drawer in its mini state. Defaults to 68px.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerMiniWidth = this.navdrawer.miniWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [miniWidth]=\"'34px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public miniWidth = '68px';\n\n    /**\n     * Pinned state change output for two-way binding.\n     *\n     * ```html\n     * <igx-nav-drawer [(pin)]='isPinned'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public pinChange = new EventEmitter<boolean>(true);\n    /**\n     * Event fired as the Navigation Drawer is about to open.\n     *\n     * ```html\n     *  <igx-nav-drawer (opening)='onOpening()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opening = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has opened.\n     *\n     * ```html\n     * <igx-nav-drawer (opened)='onOpened()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opened = new EventEmitter();\n    /**\n     * Event fired as the Navigation Drawer is about to close.\n     *\n     * ```html\n     * <igx-nav-drawer (closing)='onClosing()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closing = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has closed.\n     *\n     * ```html\n     * <igx-nav-drawer (closed)='onClosed()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closed = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    get template() {\n        if (this.miniTemplate && !this.isOpen) {\n            return this.miniTemplate.template;\n        } else if (this.contentTemplate) {\n            return this.contentTemplate.template;\n        }\n    }\n\n    private _miniTemplate: IgxNavDrawerMiniTemplateDirective;\n    /**\n     * @hidden\n     */\n    public get miniTemplate(): IgxNavDrawerMiniTemplateDirective {\n        return this._miniTemplate;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerMiniTemplateDirective, { read: IgxNavDrawerMiniTemplateDirective })\n    public set miniTemplate(v: IgxNavDrawerMiniTemplateDirective) {\n        if (!this.isOpen) {\n            this.setDrawerWidth(v ? this.miniWidth : '');\n        }\n        this._miniTemplate = v;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerTemplateDirective, { read: IgxNavDrawerTemplateDirective })\n    protected contentTemplate: IgxNavDrawerTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flexBasis')\n    get flexWidth() {\n        if (!this.pin) {\n            return '0px';\n        }\n        if (this.isOpen) {\n            return this.width;\n        }\n        if (this.miniTemplate && this.miniWidth) {\n            return this.miniWidth;\n        }\n\n        return '0px';\n    }\n\n    /** @hidden */\n    @HostBinding('style.order')\n    get isPinnedRight() {\n        return this.pin && this.position === 'right' ? '1' : '0';\n    }\n\n    private _gesturesAttached = false;\n    private _widthCache: { width: number, miniWidth: number, windowWidth: number } = { width: null, miniWidth: null, windowWidth: null };\n    private _resizeObserver: Subscription;\n    private css: { [name: string]: string; } = {\n        drawer: 'igx-nav-drawer__aside',\n        mini: 'igx-nav-drawer__aside--mini',\n        overlay: 'igx-nav-drawer__overlay',\n        styleDummy: 'igx-nav-drawer__style-dummy'\n    };\n\n    @ViewChild('aside', { static: true }) private _drawer: ElementRef;\n    @ViewChild('overlay', { static: true }) private _overlay: ElementRef;\n    @ViewChild('dummy', { static: true }) private _styleDummy: ElementRef;\n\n    /**\n      * @hidden\n      */\n    get drawer() {\n        return this._drawer.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get overlay() {\n        return this._overlay.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get styleDummy() {\n        return this._styleDummy.nativeElement;\n    }\n\n    /** Pan animation properties */\n    private _panning = false;\n    private _panStartWidth: number;\n    private _panLimit: number;\n\n    /**\n     * Property to decide whether to change width or translate the drawer from pan gesture.\n     *\n     * @hidden\n     */\n    public get hasAnimateWidth(): boolean {\n        return this.pin || !!this.miniTemplate;\n    }\n\n    private _maxEdgeZone = 50;\n    /**\n     * Used for touch gestures (swipe and pan).\n     * Defaults to 50 (in px) and is extended to at least 110% of the mini template width if available.\n     *\n     * @hidden\n     */\n    public get maxEdgeZone() {\n        return this._maxEdgeZone;\n    }\n\n    /**\n     * Gets the Drawer width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     *\n     * @hidden\n     */\n    public get expectedWidth() {\n        return this.getExpectedWidth(false);\n    }\n\n    /**\n     * Get the Drawer mini width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     */\n    public get expectedMiniWidth() {\n        return this.getExpectedWidth(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get touchManager() {\n        return this._touchManager;\n    }\n\n    /**\n     * Exposes optional navigation service\n     *\n     * @hidden\n     */\n    public get state() {\n        return this._state;\n    }\n\n    constructor(\n        @Inject(ElementRef) private elementRef: ElementRef,\n        @Optional() private _state: IgxNavigationService,\n        protected renderer: Renderer2,\n        private _touchManager: HammerGesturesManager,\n        private platformUtil: PlatformUtil) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        // DOM and @Input()-s initialized\n        if (this._state) {\n            this._state.add(this.id, this);\n        }\n        if (this.isOpen) {\n            this.setDrawerWidth(this.width);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        // wait for template and ng-content to be ready\n        this.updateEdgeZone();\n        this.checkPinThreshold();\n\n        this.ensureEvents();\n\n        // TODO: apply platform-safe Ruler from http://plnkr.co/edit/81nWDyreYMzkunihfRgX?p=preview\n        // (https://github.com/angular/angular/issues/6515), blocked by https://github.com/angular/angular/issues/6904\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._touchManager.destroy();\n        if (this._state) {\n            this._state.remove(this.id);\n        }\n        if (this._resizeObserver) {\n            this._resizeObserver.unsubscribe();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: { [propName: string]: SimpleChange }) {\n        // simple settings can come from attribute set (rather than binding), make sure boolean props are converted\n        if (changes.enableGestures && changes.enableGestures.currentValue !== undefined) {\n            this.enableGestures = !!(this.enableGestures && this.enableGestures.toString() === 'true');\n            this.ensureEvents();\n        }\n        if (changes.pin && changes.pin.currentValue !== undefined) {\n            this.pin = !!(this.pin && this.pin.toString() === 'true');\n            if (this.pin) {\n                this._touchManager.destroy();\n                this._gesturesAttached = false;\n            } else {\n                this.ensureEvents();\n            }\n        }\n\n        if (changes.pinThreshold) {\n            if (this.pinThreshold) {\n                this.ensureEvents();\n                this.checkPinThreshold();\n            }\n        }\n\n        if (changes.width && this.isOpen) {\n            this.setDrawerWidth(changes.width.currentValue);\n        }\n\n        if (changes.miniWidth) {\n            if (!this.isOpen) {\n                this.setDrawerWidth(changes.miniWidth.currentValue);\n            }\n            this.updateEdgeZone();\n        }\n    }\n\n    /**\n     * Toggle the open state of the Navigation Drawer.\n     *\n     * ```typescript\n     * this.navdrawer.toggle();\n     * ```\n     */\n    public toggle() {\n        if (this.isOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /**\n     * Open the Navigation Drawer. Has no effect if already opened.\n     *\n     * ```typescript\n     * this.navdrawer.open();\n     * ```\n     */\n    public open() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (this.isOpen) {\n            return;\n        }\n        this.opening.emit();\n        this.isOpen = true;\n\n        // TODO: Switch to animate API when available\n        // var animationCss = this.animate.css();\n        //     animationCss\n        //         .setStyles({'width':'50px'}, {'width':'400px'})\n        //         .start(this.elementRef.nativeElement)\n        //         .onComplete(() => animationCss.setToStyles({'width':'auto'}).start(this.elementRef.nativeElement));\n\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.setDrawerWidth(this.width);\n    }\n\n    /**\n     * Close the Navigation Drawer. Has no effect if already closed.\n     *\n     * ```typescript\n     * this.navdrawer.close();\n     * ```\n     */\n    public close() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (!this.isOpen) {\n            return;\n        }\n        this.closing.emit();\n\n        this.isOpen = false;\n        this.setDrawerWidth(this.miniTemplate ? this.miniWidth : '');\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleClosedEvent, false);\n    }\n\n    /**\n     * @hidden\n     */\n    protected set_maxEdgeZone(value: number) {\n        this._maxEdgeZone = value;\n    }\n\n    /**\n     * Get the Drawer width for specific state. Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     * @param [mini] - Request mini width instead\n     */\n    protected getExpectedWidth(mini?: boolean): number {\n        if (mini) {\n            if (!this.miniTemplate) {\n                return 0;\n            }\n            if (this.miniWidth) {\n                return parseFloat(this.miniWidth);\n            } else {\n                // if (!this.isOpen) { // This WON'T work due to transition timings...\n                //     return this.elementRef.nativeElement.children[1].offsetWidth;\n                // } else {\n                if (this._widthCache.miniWidth === null) {\n                    // force class for width calc. TODO?\n                    // force class for width calc. TODO?\n                    this.renderer.addClass(this.styleDummy, this.css.drawer);\n                    this.renderer.addClass(this.styleDummy, this.css.mini);\n                    this._widthCache.miniWidth = this.styleDummy.offsetWidth;\n                    this.renderer.removeClass(this.styleDummy, this.css.drawer);\n                    this.renderer.removeClass(this.styleDummy, this.css.mini);\n                }\n                return this._widthCache.miniWidth;\n            }\n        } else {\n            if (this.width) {\n                return parseFloat(this.width);\n            } else {\n                if (this._widthCache.width === null) {\n                    // force class for width calc. TODO?\n                    // force class for width calc. TODO?\n                    this.renderer.addClass(this.styleDummy, this.css.drawer);\n                    this._widthCache.width = this.styleDummy.offsetWidth;\n                    this.renderer.removeClass(this.styleDummy, this.css.drawer);\n                }\n                return this._widthCache.width;\n            }\n        }\n    }\n\n    private getWindowWidth() {\n        return (window.innerWidth > 0) ? window.innerWidth : screen.width;\n    }\n\n    /**\n     * Sets the drawer width.\n     */\n    private setDrawerWidth(width: string) {\n        if (this.platformUtil.isBrowser) {\n            requestAnimationFrame(() => {\n                if (this.drawer) {\n                    this.renderer.setStyle(this.drawer, 'width', width);\n                }\n            });\n        } else {\n            this.renderer.setStyle(this.drawer, 'width', width);\n        }\n    }\n\n    /**\n     * Get current Drawer width.\n     */\n    private getDrawerWidth(): number {\n        return this.drawer.offsetWidth;\n    }\n\n    private ensureEvents() {\n        // set listeners for swipe/pan only if needed, but just once\n        if (this.enableGestures && !this.pin && !this._gesturesAttached) {\n            // Built-in manager handler(L20887) causes endless loop and max stack exception.\n            // https://github.com/angular/angular/issues/6993\n            // Use ours for now (until beta.10):\n            // this.renderer.listen(document, \"swipe\", this.swipe);\n            this._touchManager.addGlobalEventListener('document', 'swipe', this.swipe);\n            this._gesturesAttached = true;\n\n            // this.renderer.listen(document, \"panstart\", this.panstart);\n            // this.renderer.listen(document, \"pan\", this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panstart', this.panstart);\n            this._touchManager.addGlobalEventListener('document', 'panmove', this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panend', this.panEnd);\n        }\n        if (!this._resizeObserver && this.platformUtil.isBrowser) {\n            this._resizeObserver = fromEvent(window, 'resize').pipe(debounce(() => interval(150)))\n                .subscribe((value) => {\n                    this.checkPinThreshold(value);\n                });\n        }\n    }\n\n    private updateEdgeZone() {\n        let maxValue;\n\n        if (this.miniTemplate) {\n            maxValue = Math.max(this._maxEdgeZone, this.getExpectedWidth(true) * 1.1);\n            this.set_maxEdgeZone(maxValue);\n        }\n    }\n\n    private checkPinThreshold = (evt?: Event) => {\n        if (!this.platformUtil.isBrowser) {\n            return;\n        }\n        let windowWidth;\n        if (this.pinThreshold) {\n            windowWidth = this.getWindowWidth();\n            if (evt && this._widthCache.windowWidth === windowWidth) {\n                return;\n            }\n            this._widthCache.windowWidth = windowWidth;\n            if (!this.pin && windowWidth >= this.pinThreshold) {\n                this.pin = true;\n                this.pinChange.emit(true);\n            } else if (this.pin && windowWidth < this.pinThreshold) {\n                this.pin = false;\n                this.pinChange.emit(false);\n            }\n        }\n    }\n\n    private swipe = (evt: HammerInput) => {\n        // TODO: Could also force input type: http://stackoverflow.com/a/27108052\n        if (!this.enableGestures || evt.pointerType !== 'touch') {\n            return;\n        }\n\n        // HammerJS swipe is horizontal-only by default, don't check deltaY\n        let deltaX;\n        let startPosition;\n        if (this.position === 'right') {\n            // when on the right use inverse of deltaX\n            deltaX = -evt.deltaX;\n            startPosition = this.getWindowWidth() - (evt.center.x + evt.distance);\n        } else {\n            deltaX = evt.deltaX;\n            startPosition = evt.center.x - evt.distance;\n        }\n        // only accept closing swipe (ignoring minEdgeZone) when the drawer is expanded:\n        if ((this.isOpen && deltaX < 0) ||\n            // positive deltaX from the edge:\n            (deltaX > 0 && startPosition < this.maxEdgeZone)) {\n            this.toggle();\n        }\n    }\n\n    private panstart = (evt: HammerInput) => { // TODO: test code\n        if (!this.enableGestures || this.pin || evt.pointerType !== 'touch') {\n            return;\n        }\n        const startPosition = this.position === 'right' ? this.getWindowWidth() - (evt.center.x + evt.distance)\n            : evt.center.x - evt.distance;\n\n        // cache width during animation, flag to allow further handling\n        if (this.isOpen || (startPosition < this.maxEdgeZone)) {\n            this._panning = true;\n            this._panStartWidth = this.getExpectedWidth(!this.isOpen);\n            this._panLimit = this.getExpectedWidth(this.isOpen);\n\n            this.renderer.addClass(this.overlay, 'panning');\n            this.renderer.addClass(this.drawer, 'panning');\n        }\n    }\n\n    private pan = (evt: HammerInput) => {\n        // TODO: input.deltaX = prevDelta.x + (center.x - offset.x);\n        // get actual delta (not total session one) from event?\n        // pan WILL also fire after a full swipe, only resize on flag\n        if (!this._panning) {\n            return;\n        }\n        const right: boolean = this.position === 'right';\n        // when on the right use inverse of deltaX\n        const deltaX = right ? -evt.deltaX : evt.deltaX;\n        let visibleWidth;\n        let newX;\n        let percent;\n\n        visibleWidth = this._panStartWidth + deltaX;\n\n        if (this.isOpen && deltaX < 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth <= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panLimit) / (this._panStartWidth - this._panLimit);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panStartWidth;\n                newX = evt.deltaX;\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n\n        } else if (!this.isOpen && deltaX > 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth >= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panStartWidth) / (this._panLimit - this._panStartWidth);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panLimit;\n                newX = (this._panLimit - visibleWidth) * (right ? 1 : -1);\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n        }\n    }\n\n    private panEnd = (evt: HammerInput) => {\n        if (this._panning) {\n            const deltaX = this.position === 'right' ? -evt.deltaX : evt.deltaX;\n            const visibleWidth: number = this._panStartWidth + deltaX;\n            this.resetPan();\n\n            // check if pan brought the drawer to 50%\n            if (this.isOpen && visibleWidth <= this._panStartWidth / 2) {\n                this.close();\n            } else if (!this.isOpen && visibleWidth >= this._panLimit / 2) {\n                this.open();\n            }\n            this._panStartWidth = null;\n        }\n    }\n\n    private resetPan() {\n        this._panning = false;\n        /* styles fail to apply when set on parent due to extra attributes, prob ng bug */\n        /* styles fail to apply when set on parent due to extra attributes, prob ng bug */\n        this.renderer.removeClass(this.overlay, 'panning');\n        this.renderer.removeClass(this.drawer, 'panning');\n        this.setXSize(0, '');\n    }\n\n    /**\n     * Sets the absolute position or width in case the drawer doesn't change position.\n     * @param x the number pixels to translate on the X axis or the width to set. 0 width will clear the style instead.\n     * @param opacity optional value to apply to the overlay\n     */\n    private setXSize(x: number, opacity?: string) {\n        // Angular polyfills patches window.requestAnimationFrame, but switch to DomAdapter API (TODO)\n        window.requestAnimationFrame(() => {\n            if (this.hasAnimateWidth) {\n                this.renderer.setStyle(this.drawer, 'width', x ? Math.abs(x) + 'px' : '');\n            } else {\n                this.renderer.setStyle(this.drawer, 'transform', x ? 'translate3d(' + x + 'px,0,0)' : '');\n                this.renderer.setStyle(this.drawer, '-webkit-transform', x ? 'translate3d(' + x + 'px,0,0)' : '');\n            }\n            if (opacity !== undefined) {\n                this.renderer.setStyle(this.overlay, 'opacity', opacity);\n            }\n        });\n    }\n\n    private toggleOpenedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.opened.emit();\n    }\n\n    private toggleClosedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleClosedEvent, false);\n        this.closed.emit();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxNavigationDrawerComponent } from './navigation-drawer.component';\nimport {\n    IgxNavDrawerItemDirective,\n    IgxNavDrawerMiniTemplateDirective,\n    IgxNavDrawerTemplateDirective\n} from './navigation-drawer.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    exports: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    imports: [CommonModule]\n})\nexport class IgxNavigationDrawerModule {}\n","import {\n    Component,\n    Input,\n    HostListener,\n    ElementRef,\n    HostBinding,\n    Output,\n    EventEmitter,\n    OnInit,\n    OnDestroy,\n    TemplateRef\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { SliderHandle } from '../slider.common';\nimport { Subject } from 'rxjs';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-thumb',\n    templateUrl: 'thumb-slider.component.html',\n})\nexport class IgxSliderThumbComponent implements OnInit, OnDestroy {\n\n    private _isActive = false;\n    private _isPressed = false;\n    private _destroy$ = new Subject<boolean>();\n\n    private get thumbPositionX() {\n        const thumbBounderies = this.nativeElement.getBoundingClientRect();\n        const thumbCenter = (thumbBounderies.right - thumbBounderies.left) / 2;\n        return thumbBounderies.left + thumbCenter;\n    }\n\n    public isActive = false;\n\n    @Input()\n    public value: number;\n\n    @Input()\n    public continuous: boolean;\n\n    @Input()\n    public thumbLabelVisibilityDuration;\n\n    @Input()\n    public disabled: boolean;\n\n    @Input()\n    public onPan: Subject<number>;\n\n    @Input()\n    public stepDistance: number;\n\n    @Input()\n    public step: number;\n\n    @Input()\n    public templateRef: TemplateRef<any>;\n\n    @Input()\n    public context: any;\n\n    @Input()\n    public type: SliderHandle;\n\n    @Input()\n    public deactiveState: boolean;\n\n    @Output()\n    public onThumbValueChange = new EventEmitter<number>();\n\n    @Output()\n    public onChange = new EventEmitter<any>();\n\n    @Output()\n    public onHoverChange = new EventEmitter<boolean>();\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('attr.z-index')\n    public zIndex = 0;\n\n    @HostBinding('class.igx-slider__thumb-from')\n    public get thumbFromClass() {\n        return this.type === SliderHandle.FROM;\n    }\n\n    @HostBinding('class.igx-slider__thumb-to')\n    public get thumbToClass() {\n        return this.type === SliderHandle.TO;\n    }\n\n    @HostBinding('class.igx-slider__thumb-from--active')\n    public get thumbFromActiveClass() {\n        return this.type === SliderHandle.FROM && this._isActive;\n    }\n\n    @HostBinding('class.igx-slider__thumb-to--active')\n    public get thumbToActiveClass() {\n        return this.type === SliderHandle.TO && this._isActive;\n    }\n\n    @HostBinding('class.igx-slider__thumb--pressed')\n    public get thumbPressedClass() {\n        return this.isActive && this._isPressed;\n    }\n\n    public get nativeElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    public get destroy(): Subject<boolean> {\n        return this._destroy$;\n    }\n\n    constructor(private _elementRef: ElementRef) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.onPan\n            .pipe(takeUntil(this._destroy$))\n            .subscribe(mouseX =>\n                this.updateThumbValue(mouseX)\n            );\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    @HostListener('pointerenter')\n    public onPinterEnter() {\n        this.onHoverChange.emit(true);\n    }\n\n    @HostListener('pointerleave')\n    public onPointerLeave() {\n        this.onHoverChange.emit(false);\n    }\n\n    @HostListener('keydown', ['$event'])\n    public onKeyDown(event: KeyboardEvent) {\n        if (this.disabled) {\n            return;\n        }\n\n        let increment = 0;\n        if (event.key.endsWith('Left')) {\n            increment = this.step * - 1;\n        } else if (event.key.endsWith('Right')) {\n            increment = this.step;\n        } else {\n            return;\n        }\n\n        this.onChange.emit();\n        this.onThumbValueChange.emit(increment);\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.isActive = false;\n        this.zIndex = 0;\n    }\n\n    @HostListener('focus')\n    public onFocusListener() {\n        this.isActive = true;\n        this.zIndex = 1;\n    }\n\n    /**\n     * Show thumb label and ripple.\n     */\n    public showThumbIndicators() {\n        this.toggleThumbIndicators(true);\n    }\n\n    /**\n     * Hide thumb label and ripple.\n     */\n    public hideThumbIndicators() {\n        this.toggleThumbIndicators(false);\n    }\n\n    private updateThumbValue(mouseX: number) {\n        const updateValue = this.calculateTrackUpdate(mouseX);\n        if (this.isActive && updateValue !== 0) {\n            this.onThumbValueChange.emit(updateValue);\n        }\n    }\n\n    private calculateTrackUpdate(mouseX: number): number {\n        const scaleX = mouseX - this.thumbPositionX;\n        const stepDistanceCenter = this.stepDistance / 2;\n\n        // If the thumb scale range (slider update) is less thÃ n a half step,\n        // the position stays the same.\n        const scaleXPositive = Math.abs(scaleX);\n        if (scaleXPositive < stepDistanceCenter) {\n            return 0;\n        }\n\n        return this.stepToProceed(scaleX, this.stepDistance);\n    }\n\n    private stepToProceed(scaleX, stepDist) {\n        return Math.round(scaleX / stepDist) * this.step;\n    }\n\n    private toggleThumbIndicators(visible: boolean) {\n        this._isPressed = visible;\n\n        if (this.continuous || this.deactiveState) {\n            this._isActive = false;\n        } else {\n            this._isActive = visible;\n        }\n\n    }\n}\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE, IBaseEventArgs } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum SwitchLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeSwitchEventArgs extends IBaseEventArgs {\n    checked: boolean;\n    switch: IgxSwitchComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n *\n * The Switch component is a binary choice selection component.\n *\n * @igxModule IgxSwitchModule\n *\n * @igxTheme igx-switch-theme, igx-tooltip-theme\n *\n * @igxKeywords switch, states, tooltip\n *\n * @igxGroup Data Entry & Display\n *\n * @remarks\n *\n * The Ignite UI Switch lets the user toggle between on/off or true/false states.\n *\n * @example\n * ```html\n * <igx-switch [checked]=\"true\">\n *   Simple switch\n * </igx-switch>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSwitchComponent, multi: true }],\n    selector: 'igx-switch',\n    templateUrl: 'switch.component.html'\n})\nexport class IgxSwitchComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     * @hidden\n     * @internal\n     */\n    protected _value: any;\n    /**\n     * Returns a reference to the native checkbox element.\n     *\n     * @example\n     * ```typescript\n     * let checkboxElement =  this.switch.nativeCheckbox;\n     * ```\n     */\n    @ViewChild('checkbox', { static: true }) public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     *\n     * @example\n     * ```typescript\n     * let labelElement =  this.switch.nativeLabel;\n     * ```\n     */\n    @ViewChild('label', { static: true }) public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     *\n     * @example\n     * ```typescript\n     * let labelPlaceholder = this.switch.placeholderLabel;\n     * ```\n     */\n    @ViewChild('placeholderLabel', { static: true }) public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the switch component.\n     * If not set, the `id` of the first switch component will be `\"igx-switch-0\"`.\n     *\n     * @example\n     * ```html\n     * <igx-switch id=\"my-first-switch\"></igx-switch>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-switch-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element of the switch component.\n     * If not set, the label of the first switch component will have value `\"igx-switch-0-label\"`.\n     *\n     * @example\n     * ```html\n     * <igx-switch labelId=\"Label1\"></igx-switch>\n     * ```\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute of the switch component.\n     *\n     * @example\n     * ```html\n     * <igx-switch [value]=\"switchValue\"></igx-switch>\n     * ```\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the switch component.\n     *\n     * @example\n     * ```html\n     * <igx-switch name=\"Switch1\"></igx-switch>\n     * ```\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     *\n     * @example\n     * ```html\n     * <igx-switch [tabindex]=\"1\"></igx-switch>\n     * ```\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Sets/gets the position of the `label` in the switch component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     *\n     * @example\n     * ```html\n     * <igx-switch labelPosition=\"before\"></igx-switch>\n     * ```\n     */\n    @Input() public labelPosition: SwitchLabelPosition | string = 'after';\n    /**\n     * Enables/Disables the ripple effect\n     * If not set, `disableRipple` will have value `false`.\n     *\n     * @example\n     * ```html\n     * <igx-switch [disableRipple]=\"true\"></igx-switch>\n     * ```\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether switch is required.\n     * If not set, `required` will have value `false`.\n     *\n     * @example\n     * ```html\n     * <igx-switch [required]=\"true\"></igx-switch>\n     * ```\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledBy` attribute.\n     * If not set, the  value of `aria-labelledBy` will be equal to the value of `labelId` attribute.\n     *\n     * @example\n     * ```html\n     * <igx-switch aria-labelledby = \"Label1\"></igx-switch>\n     * ```\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     *\n     * @example\n     * ```html\n     * <igx-switch aria-label=\"Label1\"></igx-switch>\n     * ```\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the switch state is changed.\n     * Provides references to the `IgxSwitchComponent` and the `checked` property as event arguments.\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeSwitchEventArgs> = new EventEmitter<IChangeSwitchEventArgs>();\n    /**\n     * @hidden\n     * @internal\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     * @hidden\n     * @internal\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * Returns the class of the switch component.\n     *\n     * @example\n     * ```typescript\n     * let switchClass = this.switch.cssClass;\n     * ```\n     */\n    @HostBinding('class.igx-switch')\n    public cssClass = 'igx-switch';\n    /**\n     * Sets/gets whether the switch is on or off.\n     * Default value is 'false'.\n     *\n     * @example\n     * ```html\n     *  <igx-switch [checked]=\"true\"></igx-switch>\n     * ```\n     */\n    @HostBinding('class.igx-switch--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets the `disabled` attribute.\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     * <igx-switch [disabled]=\"true\"><igx-switch>\n     * ```\n     */\n    @HostBinding('class.igx-switch--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the switch component is on focus.\n     * Default value is `false`.\n     *\n     * @example\n     * ```typescript\n     * this.switch.focused = true;\n     * ```\n     */\n    @HostBinding('class.igx-switch--focused')\n    public focused = false;\n    /**\n     * @hidden\n     * @internal\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     * Toggles the checked state of the switch.\n     *\n     * @example\n     * ```typescript\n     * this.switch.toggle();\n     * ```\n     */\n    public toggle() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = !this.checked;\n        this.focused = false;\n        this.change.emit({ checked: this.checked, switch: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public _onSwitchChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public _onSwitchClick(event) {\n        event.stopPropagation();\n        this.toggle();\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public _onLabelClick(event) {\n        this.toggle();\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /**\n     * @hidden\n     * @internal\n     * */\n    public getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case SwitchLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case SwitchLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     * @hidden\n     * @internal\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n\nexport const IGX_SWITCH_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxSwitchRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-switch[required][formControlName],\n    igx-switch[required][formControl],\n    igx-switch[required][ngModel]`,\n    providers: [IGX_SWITCH_REQUIRED_VALIDATOR]\n})\nexport class IgxSwitchRequiredDirective extends CheckboxRequiredValidator { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    exports: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxSwitchModule { }\n","import { Component, Input, TemplateRef, HostBinding, ElementRef } from '@angular/core';\nimport { SliderHandle } from '../slider.common';\n\n@Component({\n    selector: 'igx-thumb-label',\n    templateUrl: 'thumb-label.component.html'\n})\nexport class IgxThumbLabelComponent {\n    private _active: boolean;\n\n    @Input()\n    public value: number;\n\n    @Input()\n    public templateRef: TemplateRef<any>;\n\n    @Input()\n    public context: any;\n\n    @Input()\n    public type: SliderHandle;\n\n    @Input()\n    public continuous: boolean;\n\n    @Input()\n    public deactiveState: boolean;\n\n    @HostBinding('class.igx-slider__label-from')\n    public get thumbFromClass() {\n        return this.type === SliderHandle.FROM;\n    }\n\n    @HostBinding('class.igx-slider__label-to')\n    public get thumbToClass() {\n        return this.type === SliderHandle.TO;\n    }\n\n    @HostBinding('class.igx-slider__label-from--active')\n    public get thumbFromActiveClass() {\n        return this.type === SliderHandle.FROM && this.active;\n    }\n\n    @HostBinding('class.igx-slider__label-to--active')\n    public get thumbToActiveClass() {\n        return this.type === SliderHandle.TO && this.active;\n    }\n\n    constructor(private _elementRef: ElementRef) { }\n\n    public get nativeElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    public get active() {\n        return this._active;\n    }\n\n    public set active(val: boolean) {\n        if (this.continuous || this.deactiveState) {\n            this._active = false;\n        } else {\n            this._active = val;\n        }\n    }\n}\n","import { Component, Input, TemplateRef, HostBinding } from '@angular/core';\nimport { TicksOrientation, TickLabelsOrientation } from '../slider.common';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-ticks',\n    templateUrl: 'ticks.component.html',\n})\nexport class IgxTicksComponent {\n    @Input()\n    public primaryTicks: number;\n\n    @Input()\n    public secondaryTicks: number;\n\n    @Input()\n    public primaryTickLabels: boolean;\n\n    @Input()\n    public secondaryTickLabels: boolean;\n\n    @Input()\n    public ticksOrientation: TicksOrientation;\n\n    @Input()\n    public tickLabelsOrientation: TickLabelsOrientation;\n\n    @Input()\n    public maxValue: number;\n\n    @Input()\n    public minValue: number;\n\n    @Input()\n    public labelsViewEnabled: boolean;\n\n    @Input()\n    public labels: Array<number | string | boolean | null | undefined>;\n\n    @Input()\n    public tickLabelTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider__ticks')\n    public ticksClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider__ticks--top')\n    public get ticksTopClass() {\n        return this.ticksOrientation === TicksOrientation.Top;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider__ticks--tall')\n    public get hasPrimaryClass() {\n        return this.primaryTicks > 0;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider__tick-labels--top-bottom')\n    public get labelsTopToBottomClass() {\n        return this.tickLabelsOrientation === TickLabelsOrientation.TopToBottom;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider__tick-labels--bottom-top')\n    public get labelsBottomToTopClass() {\n        return this.tickLabelsOrientation === TickLabelsOrientation.BottomToTop;\n    }\n\n    /**\n     * Returns the template context corresponding to\n     * {@link IgxTickLabelTemplateDirective}\n     *\n     * ```typescript\n     * return {\n     *  $implicit //returns the value per each tick label.\n     *  isPrimery //returns if the tick is primary.\n     *  labels // returns the {@link labels} collection.\n     *  index // returns the index per each tick of the whole sequence.\n     * }\n     * ```\n     *\n     * @param idx the index per each tick label.\n     */\n    public context(idx: number): any {\n        return {\n            $implicit: this.tickLabel(idx),\n            isPrimary: this.isPrimary(idx),\n            labels: this.labels,\n            index: idx\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public get ticksLength() {\n        return this.primaryTicks > 0 ?\n                ((this.primaryTicks - 1) * this.secondaryTicks) + this.primaryTicks :\n                this.secondaryTicks > 0 ? this.secondaryTicks : 0;\n    }\n\n    public hiddenTickLabels(idx: number) {\n        return this.isPrimary(idx) ? this.primaryTickLabels : this.secondaryTickLabels;\n    }\n\n    /**\n     * @hidden\n     */\n    public isPrimary(idx: number) {\n        return this.primaryTicks <= 0 ? false :\n            idx % (this.secondaryTicks + 1) === 0;\n    }\n\n    /**\n     * @hidden\n     */\n    public tickLabel(idx: number) {\n        if (this.labelsViewEnabled) {\n            return this.labels[idx];\n        }\n\n        const labelStep = (Math.max(this.minValue, this.maxValue) - Math.min(this.minValue, this.maxValue)) / (this.ticksLength - 1);\n        const labelVal = labelStep * idx;\n\n        return (this.minValue + labelVal).toFixed(2);\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'spreadTickLabels'\n})\nexport class IgxTickLabelsPipe implements PipeTransform {\n\n\n    public transform(labels: Array<string | number | boolean | null | undefined>, secondaryTicks: number) {\n        if (!labels) {\n            return;\n        }\n\n        const result = [];\n        labels.forEach(item => {\n            result.push(item);\n            for (let i = 0; i < secondaryTicks; i++) {\n                result.push('');\n            }\n        });\n\n        return result;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, Component, ElementRef, EventEmitter,\n    HostBinding, Input, NgModule, OnInit, Output, Renderer2,\n    ViewChild,\n    TemplateRef,\n    ContentChild,\n    OnDestroy,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    ChangeDetectorRef,\n    OnChanges,\n    NgZone,\n    AfterContentInit\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxSliderThumbComponent } from './thumb/thumb-slider.component';\nimport { Subject, merge, Observable, timer, pipe } from 'rxjs';\nimport { takeUntil, throttleTime } from 'rxjs/operators';\nimport { SliderHandle,\n    IgxThumbFromTemplateDirective,\n    IgxThumbToTemplateDirective,\n    IRangeSliderValue,\n    IgxSliderType,\n    ISliderValueChangeEventArgs,\n    TicksOrientation,\n    TickLabelsOrientation,\n    IgxTickLabelTemplateDirective\n} from './slider.common';\nimport { IgxThumbLabelComponent } from './label/thumb-label.component';\nimport { IgxTicksComponent } from './ticks/ticks.component';\nimport { IgxTickLabelsPipe } from './ticks/tick.pipe';\nimport { resizeObservable } from '../core/utils';\n\nconst noop = () => {\n};\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Slider** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/slider.html)\n *\n * The Ignite UI Slider allows selection in a given range by moving the thumb along the track. The track\n * can be defined as continuous or stepped, and you can choose between single and range slider types.\n *\n * Example:\n * ```html\n * <igx-slider id=\"slider\"\n *            [minValue]=\"0\" [maxValue]=\"100\"\n *            [continuous]=true [(ngModel)]=\"volume\">\n * </igx-slider>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSliderComponent, multi: true }],\n    selector: 'igx-slider',\n    templateUrl: 'slider.component.html'\n})\nexport class IgxSliderComponent implements\n    ControlValueAccessor,\n    EditorProvider,\n    OnInit,\n    AfterViewInit,\n    AfterContentInit,\n    OnChanges,\n    OnDestroy {\n\n    // Limit handle travel zone\n    private _pMin = 0;\n    private _pMax = 1;\n\n    // From/upperValue in percent values\n    private _hasViewInit = false;\n    private _minValue = 0;\n    private _maxValue = 100;\n    private _lowerBound?: number;\n    private _upperBound?: number;\n    private _lowerValue?: number;\n    private _upperValue?: number;\n    private _continuous = false;\n    private _disabled = false;\n    private _step = 1;\n    private _value: number | IRangeSliderValue = 0;\n\n    // ticks\n    private _primaryTicks = 0;\n    private _secondaryTicks = 0;\n\n    private _labels = new Array<number|string|boolean|null|undefined>();\n    private _type = IgxSliderType.SLIDER;\n\n    private _destroyer$ = new Subject<boolean>();\n    private _indicatorsDestroyer$ = new Subject<boolean>();\n    private _indicatorsTimer: Observable<any>;\n\n    private _onChangeCallback: (_: any) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('ticks', { static: true })\n    private ticks: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxSliderThumbComponent)\n    private thumbs: QueryList<IgxSliderThumbComponent> = new QueryList<IgxSliderThumbComponent>();\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxThumbLabelComponent)\n    private labelRefs: QueryList<IgxThumbLabelComponent> = new QueryList<IgxThumbLabelComponent>();\n\n    private get thumbFrom(): IgxSliderThumbComponent {\n        return this.thumbs.find(thumb => thumb.type === SliderHandle.FROM);\n    }\n\n    private get thumbTo(): IgxSliderThumbComponent {\n        return this.thumbs.find(thumb => thumb.type === SliderHandle.TO);\n    }\n\n    private get labelFrom(): IgxThumbLabelComponent {\n        return this.labelRefs.find(label => label.type === SliderHandle.FROM);\n    }\n\n    private get labelTo(): IgxThumbLabelComponent {\n        return this.labelRefs.find(label => label.type === SliderHandle.TO);\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('track', { static: true })\n    public trackRef: ElementRef;\n\n    /**\n     * @hidden\n     */\n    public stepDistance = this._step;\n\n    /**\n     * @hidden\n     */\n    public onPan: Subject<number> = new Subject<number>();\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxThumbFromTemplateDirective, { read: TemplateRef })\n    public thumbFromTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxThumbToTemplateDirective, { read: TemplateRef })\n    public thumbToTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxTickLabelTemplateDirective, { read: TemplateRef, static: false })\n    public tickLabelTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.role`)\n    public role = 'slider';\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-valuemin`)\n    public get valuemin() {\n        return this.minValue;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-valuemax`)\n    public get valuemax() {\n        return this.maxValue;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-readonly`)\n    public get readonly() {\n        return this.disabled;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider')\n    public slierClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider--disabled')\n    public get disabledClass() {\n        return this.disabled;\n    }\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * If not provided it will be automatically generated.\n     * ```html\n     * <igx-slider [id]=\"'igx-slider-32'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-slider-${NEXT_ID++}`;\n\n    /**\n     * An @Input property that gets the type of the `IgxSliderComponent`.\n     * The slider can be IgxSliderType.SLIDER(default) or IgxSliderType.RANGE.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let type = this.slider.type;\n     * }\n     */\n    @Input()\n    public get type() {\n        return this._type;\n    }\n\n    /**\n     * An @Input property that sets the type of the `IgxSliderComponent`.\n     * The slider can be IgxSliderType.SLIDER(default) or IgxSliderType.RANGE.\n     * ```typescript\n     * sliderType: IgxSliderType = IgxSliderType.RANGE;\n     * ```\n     * ```html\n     * <igx-slider #slider2 [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"0\" [maxValue]=\"100\">\n     * ```\n     */\n    public set type(type: IgxSliderType) {\n        this._type = type;\n\n        if (type === IgxSliderType.SLIDER) {\n            this.lowerValue = 0;\n        }\n\n        if (this.labelsViewEnabled && this.upperValue > this.maxValue) {\n            this.upperValue = this.labels.length - 1;\n        }\n\n        if (this._hasViewInit) {\n            this.updateTrack();\n        }\n    }\n\n    /**\n     *An @Input property that sets the duration visibility of thumbs labels. The default value is 750 milliseconds.\n     *```html\n     *<igx-slider #slider [thumbLabelVisibilityDuration]=\"3000\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     *```\n     */\n    @Input()\n    public thumbLabelVisibilityDuration = 750;\n\n\n    /**\n     * Enables `labelView`, by accepting a collection of primitive values with more than one element.\n     * Each element will be equally spread over the slider and it will serve as a thumb label.\n     * Once the property is set, it will precendence over {@link maxValue}, {@link minValue}, {@link step}.\n     * This means that the manipulation for those properties won't be allowed.\n     */\n    @Input()\n    public get labels() {\n        return this._labels;\n    }\n\n    public set labels(labels: Array<number|string|boolean|null|undefined>) {\n        this._labels = labels;\n\n        this._pMax = this.valueToFraction(this.upperBound, 0, 1);\n        this._pMin = this.valueToFraction(this.lowerBound, 0, 1);\n\n        this.stepDistance = this.calculateStepDistance();\n        this.positionHandlersAndUpdateTrack();\n\n        if (this._hasViewInit) {\n            this.setTickInterval();\n        }\n    }\n\n    /**\n     * Returns the template context corresponding\n     * to {@link IgxThumbFromTemplateDirective} and {@link IgxThumbToTemplateDirective} templates.\n     *\n     * ```typescript\n     * return {\n     *  $implicit // returns the value of the label,\n     *  labels // returns the labels collection the user has passed.\n     * }\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this.value,\n            labels: this.labels\n        };\n    }\n\n    /**\n     * An @Input property that sets the incremental/decremental step of the value when dragging the thumb.\n     * The default step is 1, and step should not be less or equal than 0.\n     * ```html\n     * <igx-slider #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Input()\n    public set step(step: number) {\n        this._step = step;\n\n        this.stepDistance = this.calculateStepDistance();\n        if (this._hasViewInit) {\n            this.normalizeByStep(this.value);\n            this.setTickInterval();\n        }\n    }\n\n    /**\n     * Returns the incremental/decremental dragging step of the {@link IgxSliderComponent}.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let step = this.slider.step;\n     * }\n     * ```\n     */\n    public get step() {\n        return this.labelsViewEnabled ? 1 : this._step;\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is disabled.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let isDisabled = this.slider.disabled;\n     * }\n     * ```\n     */\n    @Input()\n    public get disabled(): boolean {\n        return this._disabled;\n    }\n\n    /**\n     *An @Input property that disables or enables UI interaction.\n     *```html\n     *<igx-slider #slider [disabled]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     *```\n     */\n    public set disabled(disable: boolean) {\n        this._disabled = disable;\n\n        if (this._hasViewInit) {\n            this.changeThumbFocusableState(disable);\n        }\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is set as continuous.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let continuous = this.slider.continuous;\n     * }\n     * ```\n     */\n    @Input()\n    public get continuous(): boolean {\n        return this._continuous;\n    }\n\n    /**\n     * An @Input property that marks the {@link IgxSliderComponent} as continuous.\n     * By default is considered that the {@link IgxSliderComponent} is discrete.\n     * Discrete {@link IgxSliderComponent} does not have ticks and does not show bubble labels for values.\n     * ```html\n     * <igx-slider #slider [continuous]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    public set continuous(continuous: boolean) {\n        this._continuous = continuous;\n        if (this._hasViewInit) {\n            this.setTickInterval();\n        }\n    }\n\n    /**\n     *Returns the minimal value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMin = this.slider.minValue;\n     *}\n     *```\n     */\n    public get minValue(): number {\n        if (this.labelsViewEnabled) {\n            return 0;\n        }\n\n        return this._minValue;\n    }\n\n    /**\n     * Sets the minimal value for the `IgxSliderComponent`.\n     * The default minimal value is 0.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"100\">\n     * ```\n     */\n    @Input()\n    public set minValue(value: number) {\n        if (value >= this.maxValue) {\n            return;\n        } else {\n            this._minValue = value;\n        }\n\n        if (value > this.upperBound) {\n            this.updateUpperBoundAndMaxTravelZone();\n            this.lowerBound = value;\n        }\n\n        // Refresh min travel zone limit.\n        this._pMin = 0;\n        // Recalculate step distance.\n        this.stepDistance = this.calculateStepDistance();\n        this.positionHandlersAndUpdateTrack();\n        if (this._hasViewInit) {\n            this.setTickInterval();\n        }\n    }\n\n        /**\n     * Returns the maximum value for the {@link IgxSliderComponent}.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMax = this.slider.maxValue;\n     *}\n     * ```\n     */\n    public get maxValue(): number {\n        return this.labelsViewEnabled ?\n            this.labels.length - 1 :\n            this._maxValue;\n    }\n\n    /**\n     * Sets the maximal value for the `IgxSliderComponent`.\n     * The default maximum value is 100.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set maxValue(value: number) {\n        if (value <= this._minValue) {\n            return;\n        } else {\n            this._maxValue = value;\n        }\n\n        if (value < this.lowerBound) {\n            this.updateLowerBoundAndMinTravelZone();\n            this.upperBound = value;\n        }\n\n        // refresh max travel zone limits.\n        this._pMax = 1;\n        // recalculate step distance.\n        this.stepDistance = this.calculateStepDistance();\n        this.positionHandlersAndUpdateTrack();\n        if (this._hasViewInit) {\n            this.setTickInterval();\n        }\n    }\n\n    /**\n     * Returns the lower boundary of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderLowBound = this.slider.lowerBound;\n     *}\n     *```\n     */\n    public get lowerBound(): number {\n        if (!Number.isNaN(this._lowerBound) && this._lowerBound !== undefined) {\n            return this.valueInRange(this._lowerBound, this.minValue, this.maxValue);\n        }\n\n        return this.minValue;\n    }\n\n    /**\n     * Sets the lower boundary of the `IgxSliderComponent`.\n     * If not set is the same as min value.\n     * ```html\n     * <igx-slider [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set lowerBound(value: number) {\n        if (value >= this.upperBound || (this.labelsViewEnabled && value < 0)) {\n            return;\n        }\n\n        this._lowerBound = this.valueInRange(value, this.minValue, this.maxValue);\n\n        // Refresh min travel zone.\n        this._pMin = this.valueToFraction(this._lowerBound, 0, 1);\n        this.positionHandlersAndUpdateTrack();\n    }\n\n    /**\n     * Returns the upper boundary of the `IgxSliderComponent`.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderUpBound = this.slider.upperBound;\n     *}\n     * ```\n     */\n    public get upperBound(): number {\n        if (!Number.isNaN(this._upperBound) && this._upperBound !== undefined) {\n            return this.valueInRange(this._upperBound, this.minValue, this.maxValue);\n        }\n\n        return this.maxValue;\n    }\n\n    /**\n     * Sets the upper boundary of the `IgxSliderComponent`.\n     * If not set is the same as max value.\n     * ```html\n     * <igx-slider [step]=\"5\" [upperBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set upperBound(value: number) {\n        if (value <= this.lowerBound || (this.labelsViewEnabled && value > this.labels.length - 1)) {\n            return;\n        }\n\n        this._upperBound = this.valueInRange(value, this.minValue, this.maxValue);\n        // Refresh time travel zone.\n        this._pMax = this.valueToFraction(this._upperBound, 0, 1);\n        this.positionHandlersAndUpdateTrack();\n    }\n\n    /**\n     * Returns the slider value. If the slider is of type {@link IgxSliderType.SLIDER} the returned value is number.\n     * If the slider type is {@link IgxSliderType.RANGE}.\n     * The returned value represents an object of {@link lowerValue} and {@link upperValue}.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public sliderValue(event){\n     *    let sliderVal = this.slider.value;\n     *}\n     *```\n     */\n    public get value(): number | IRangeSliderValue {\n        if (this.isRange) {\n            return {\n                lower: this.valueInRange(this.lowerValue, this.lowerBound, this.upperBound),\n                upper: this.valueInRange(this.upperValue, this.lowerBound, this.upperBound)\n            };\n        } else {\n            return this.valueInRange(this.upperValue, this.lowerBound, this.upperBound);\n        }\n    }\n\n    /**\n     * Sets the slider value.\n     * If the slider is of type {@link IgxSliderType.SLIDER}.\n     * The argument is number. By default the {@link value} gets the {@link lowerBound}.\n     * If the slider type is {@link IgxSliderType.RANGE} the argument\n     * represents an object of {@link lowerValue} and {@link upperValue} properties.\n     * By default the object is associated with the {@link lowerBound} and {@link upperBound} property values.\n     * ```typescript\n     *rangeValue = {\n     *   lower: 30,\n     *   upper: 60\n     *};\n     * ```\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set value(value: number | IRangeSliderValue) {\n        if (this._hasViewInit) {\n            this.setValue(value);\n            this.positionHandlersAndUpdateTrack();\n        } else {\n            this._value = value;\n        }\n    }\n\n    /**\n     * Returns the number of the presented primary ticks.\n     * ```typescript\n     * const primaryTicks = this.slider.primaryTicks;\n     * ```\n     */\n    @Input()\n    public get primaryTicks() {\n        if (this.labelsViewEnabled) {\n            return this._primaryTicks = this.labels.length;\n        }\n        return this._primaryTicks;\n    }\n\n    /**\n     * Sets the number of primary ticks. If {@link @labels} is enabled, this property won't function.\n     * Insted enable ticks by {@link showTicks} property.\n     * ```typescript\n     * this.slider.primaryTicks = 5;\n     * ```\n     */\n    public set primaryTicks(val: number) {\n        if (val <= 1) {\n            return;\n        }\n\n        this._primaryTicks = val;\n    }\n\n    /**\n     * Returns the number of the presented secondary ticks.\n     * ```typescript\n     * const secondaryTicks = this.slider.secondaryTicks;\n     * ```\n     */\n    @Input()\n    public get secondaryTicks() {\n        return this._secondaryTicks;\n    }\n\n    /**\n     * Sets the number of secondary ticks. The property functions even when {@link labels} is enabled,\n     * but all secondary ticks won't present any tick labels.\n     * ```typescript\n     * this.slider.secondaryTicks = 5;\n     * ```\n     */\n    public set secondaryTicks(val: number) {\n        if (val < 1 ) {\n            return;\n        }\n\n        this._secondaryTicks = val;\n    }\n\n    /**\n     * Show/hide slider ticks\n     * ```html\n     * <igx-slier [showTicks]=\"true\" [primaryTicks]=\"5\"></igx-slier>\n     * ```\n     */\n    @Input()\n    public showTicks = false;\n\n    /**\n     * show/hide primary tick labels\n     * ```html\n     * <igx-slider [primaryTicks]=\"5\" [primaryTickLabels]=\"false\"></igx-slider>\n     * ```\n     */\n    @Input()\n    public primaryTickLabels = true;\n\n    /**\n     * show/hide secondary tick labels\n     * ```html\n     * <igx-slider [secondaryTicks]=\"5\" [secondaryTickLabels]=\"false\"></igx-slider>\n     * ```\n     */\n    @Input()\n    public secondaryTickLabels = true;\n\n    /**\n     * Changes ticks orientation:\n     * bottom - The default orienation, below the slider track.\n     * top - Above the slider track\n     * mirror - combines top and bottom orientation.\n     * ```html\n     * <igx-slider [primaryTicks]=\"5\" [ticksOrientation]=\"ticksOrientation\"></igx-slider>\n     * ```\n     */\n    @Input()\n    public ticksOrientation: TicksOrientation = TicksOrientation.Bottom;\n\n    /**\n     * Changes tick labels rotation:\n     * horizontal - The default rotation\n     * toptobottom - Rotates tick labels vertically to 90deg\n     * bottomtotop - Rotate tick labels vertically to -90deg\n     * ```html\n     * <igx-slider [primaryTicks]=\"5\" [secondaryTicks]=\"3\" [tickLabelsOrientation]=\"tickLabelsOrientaiton\"></igx-slider>\n     * ```\n     */\n    @Input()\n    public tickLabelsOrientation = TickLabelsOrientation.Horizontal;\n\n    /**\n     * @hidden\n     */\n    public get deactivateThumbLabel() {\n        return ((this.primaryTicks && this.primaryTickLabels) || (this.secondaryTicks && this.secondaryTickLabels)) &&\n            (this.ticksOrientation === TicksOrientation.Top || this.ticksOrientation === TicksOrientation.Mirror);\n    }\n\n    /**\n     * This event is emitted every time the value is changed.\n     * ```typescript\n     * public change(event){\n     *    alert(\"The value has been changed!\");\n     *}\n     * ```\n     * ```html\n     * <igx-slider (onValueChange)=\"change($event)\" #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<ISliderValueChangeEventArgs>();\n\n    /**\n     * This event is emitted at the end of every slide interaction.\n     * ```typescript\n     * public change(event){\n     *    alert(\"The value has been changed!\");\n     *}\n     * ```\n     * ```html\n     * <igx-slider (onValueChanged)=\"change($event)\" #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Output()\n    public onValueChanged = new EventEmitter<number | IRangeSliderValue>();\n\n\n    constructor(\n        private renderer: Renderer2,\n        private _el: ElementRef,\n        private _cdr: ChangeDetectorRef,\n        private _ngZone: NgZone) { }\n\n    /**\n     * @hidden\n     */\n    @HostListener('pointerdown', ['$event'])\n    public onPointerDown($event: PointerEvent) {\n        this.findClosestThumb($event);\n\n        if (!this.thumbTo.isActive && this.thumbFrom === undefined) {\n            return;\n        }\n\n        const activeThumb = this.thumbTo.isActive ? this.thumbTo : this.thumbFrom;\n        activeThumb.nativeElement.setPointerCapture($event.pointerId);\n        this.showSliderIndicators();\n\n        $event.preventDefault();\n    }\n\n\n    /**\n     * @hidden\n     */\n    @HostListener('pointerup', ['$event'])\n    public onPointerUp($event: PointerEvent) {\n        if (!this.thumbTo.isActive && this.thumbFrom === undefined) {\n            return;\n        }\n\n        const activeThumb = this.thumbTo.isActive ? this.thumbTo : this.thumbTo;\n        activeThumb.nativeElement.releasePointerCapture($event.pointerId);\n\n        this.hideSliderIndicators();\n        this.onValueChanged.emit(this.value);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('focus')\n    public onFocus() {\n        this.toggleSliderIndicators();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('pan', ['$event'])\n    public onPanListener($event) {\n        this.update($event.srcEvent.clientX);\n    }\n\n    /**\n     *Returns whether the `IgxSliderComponent` type is RANGE.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderRange = this.slider.isRange;\n     *}\n     * ```\n     */\n    public get isRange(): boolean {\n        return this.type === IgxSliderType.RANGE;\n    }\n\n    /**\n     * Returns the lower value of the `IgxSliderComponent`.\n     * ```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * public lowValue(event){\n     *    let sliderLowValue = this.slider.lowerValue;\n     *}\n     *```\n     */\n    public get lowerValue(): number {\n        if (!Number.isNaN(this._lowerValue) && this._lowerValue !== undefined && this._lowerValue >= this.lowerBound) {\n            return this._lowerValue;\n        }\n\n        return this.lowerBound;\n    }\n\n    /**\n     *Sets the lower value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public lowValue(event){\n     *    this.slider.lowerValue = 120;\n     *}\n     *```\n     */\n    public set lowerValue(value: number) {\n        value = this.valueInRange(value, this.lowerBound, this.upperBound);\n        this._lowerValue = value;\n\n    }\n\n    /**\n     *Returns the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    let upperValue = this.slider.upperValue;\n     *}\n     *```\n     */\n    public get upperValue() {\n        if (!Number.isNaN(this._upperValue) && this._upperValue !== undefined && this._upperValue <= this.upperBound) {\n            return this._upperValue;\n        }\n\n        return this.upperBound;\n    }\n\n    /**\n     *Sets the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    this.slider.upperValue = 120;\n     *}\n     *```\n     */\n    public set upperValue(value: number) {\n        value = this.valueInRange(value, this.lowerBound, this.upperBound);\n        this._upperValue = value;\n    }\n\n    /**\n     * Returns the value corresponding the lower label.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let label = this.slider.lowerLabel;\n     *```\n     */\n    public get lowerLabel() {\n        return this.labelsViewEnabled ?\n            this.labels[this.lowerValue] :\n            this.lowerValue;\n    }\n\n    /**\n     * Returns the value corresponding the upper label.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let label = this.slider.upperLabel;\n     *```\n     */\n    public get upperLabel() {\n        return this.labelsViewEnabled ?\n            this.labels[this.upperValue] :\n            this.upperValue;\n    }\n\n    /**\n     * Returns if label view is enabled.\n     * If the {@link labels} is set, the view is automatically activated.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let labelView = this.slider.labelsViewEnabled;\n     *```\n     */\n    public get labelsViewEnabled(): boolean {\n        return !!(this.labels && this.labels.length > 1);\n    }\n\n    /**\n     * @hidden\n     */\n    public get showTopTicks() {\n        return this.ticksOrientation === TicksOrientation.Top ||\n            this.ticksOrientation === TicksOrientation.Mirror;\n    }\n\n    /**\n     * @hidden\n     */\n    public get showBottomTicks() {\n        return this.ticksOrientation === TicksOrientation.Bottom ||\n            this.ticksOrientation === TicksOrientation.Mirror;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.sliderSetup();\n\n        // Set track travel zone\n        this._pMin = this.valueToFraction(this.lowerBound) || 0;\n        this._pMax = this.valueToFraction(this.upperBound) || 1;\n    }\n\n    public ngOnChanges(changes) {\n        if (changes.minValue && changes.maxValue &&\n                changes.minValue.currentValue < changes.maxValue.currentValue) {\n            this._maxValue = changes.maxValue.currentValue;\n            this._minValue = changes.minValue.currentValue;\n        }\n    }\n\n    public ngAfterContentInit() {\n        this.setValue(this._value);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this._hasViewInit = true;\n        this.positionHandlersAndUpdateTrack();\n        this.setTickInterval();\n        this.changeThumbFocusableState(this.disabled);\n\n        this.subscribeTo(this.thumbFrom, this.thumbChanged.bind(this));\n        this.subscribeTo(this.thumbTo, this.thumbChanged.bind(this));\n\n        this.thumbs.changes.pipe(takeUntil(this._destroyer$)).subscribe(change => {\n            const thumbFrom = change.find((thumb: IgxSliderThumbComponent) => thumb.type === SliderHandle.FROM);\n            this.positionHandler(thumbFrom, null, this.lowerValue);\n            this.subscribeTo(thumbFrom, this.thumbChanged.bind(this));\n            this.changeThumbFocusableState(this.disabled);\n        });\n\n        this.labelRefs.changes.pipe(takeUntil(this._destroyer$)).subscribe(change => {\n            const labelFrom = this.labelRefs.find((label: IgxThumbLabelComponent) => label.type === SliderHandle.FROM);\n            this.positionHandler(null, labelFrom, this.lowerValue);\n        });\n\n        this._ngZone.runOutsideAngular(() => {\n            resizeObservable(this._el.nativeElement).pipe(\n                throttleTime(40),\n                takeUntil(this._destroyer$)).subscribe(() => this._ngZone.run( () => {\n                    this.stepDistance = this.calculateStepDistance();\n                }));\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroyer$.next(true);\n        this._destroyer$.complete();\n\n        this._indicatorsDestroyer$.next(true);\n        this._indicatorsDestroyer$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: IRangeSliderValue | number): void {\n        if (!value) {\n            return;\n        }\n\n        this.normalizeByStep(value);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n\n    /** @hidden */\n     public getEditElement() {\n        return this.isRange ? this.thumbFrom.nativeElement : this.thumbTo.nativeElement;\n    }\n\n    /**\n     *\n     * @hidden\n     */\n    public update(mouseX) {\n        if (this.disabled) {\n            return;\n        }\n\n        // Update To/From Values\n        this.onPan.next(mouseX);\n\n        // Finally do positionHandlersAndUpdateTrack the DOM\n        // based on data values\n        this.positionHandlersAndUpdateTrack();\n        this._onTouchedCallback();\n    }\n\n    /**\n     * @hidden\n     */\n    public thumbChanged(value: number, thumbType: number) {\n        const oldValue = this.value;\n\n        let newVal: IRangeSliderValue;\n        if (this.isRange) {\n            if (thumbType === SliderHandle.FROM) {\n                newVal = {\n                    lower: (this.value as IRangeSliderValue).lower + value,\n                    upper: (this.value as IRangeSliderValue).upper\n                };\n            } else {\n                newVal = {\n                    lower: (this.value as IRangeSliderValue).lower,\n                    upper: (this.value as IRangeSliderValue).upper + value\n                };\n            }\n\n            // Swap the thumbs if a collision appears.\n            if (newVal.lower >= newVal.upper) {\n                this.value = this.swapThumb(newVal);\n            } else {\n                this.value = newVal;\n            }\n\n        } else {\n            this.value = this.value as number + value;\n        }\n\n        if (this.hasValueChanged(oldValue)) {\n            this.emitValueChanged(oldValue);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onThumbChange() {\n        this.toggleSliderIndicators();\n    }\n\n    /**\n     * @hidden\n     */\n    public onHoverChange(state: boolean) {\n        return state ? this.showSliderIndicators() : this.hideSliderIndicators();\n    }\n\n\n\n    private swapThumb(value: IRangeSliderValue) {\n        if (this.thumbFrom.isActive) {\n            value.upper = this.upperValue;\n            value.lower = this.upperValue;\n        } else {\n            value.upper = this.lowerValue;\n            value.lower = this.lowerValue;\n        }\n\n        this.toggleThumb();\n        return value;\n    }\n\n    private findClosestThumb(event: PointerEvent) {\n        if (this.isRange) {\n            this.closestHandle(event);\n        } else {\n            this.thumbTo.nativeElement.focus();\n        }\n\n        this.update(event.clientX);\n    }\n\n    private updateLowerBoundAndMinTravelZone() {\n        this.lowerBound = this.minValue;\n        this._pMin = 0;\n    }\n\n    private updateUpperBoundAndMaxTravelZone() {\n        this.upperBound = this.maxValue;\n        this._pMax = 1;\n    }\n\n    private sliderSetup() {\n        /**\n         * if {@link SliderType.SLIDER} than the initial value shold be the lowest one.\n         */\n        if (!this.isRange && this._upperValue === undefined) {\n            this._upperValue = this.lowerBound;\n        }\n    }\n\n    private calculateStepDistance() {\n        return this._el.nativeElement.getBoundingClientRect().width / (this.maxValue - this.minValue) * this.step;\n    }\n\n    private toggleThumb() {\n        return this.thumbFrom.isActive ?\n            this.thumbTo.nativeElement.focus() :\n            this.thumbFrom.nativeElement.focus();\n    }\n\n    private valueInRange(value, min = 0, max = 100) {\n        return Math.max(Math.min(value, max), min);\n    }\n\n    private generateTickMarks(color: string, interval: number) {\n        return interval !== null ? `repeating-linear-gradient(\n            ${'to left'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        ), repeating-linear-gradient(\n            ${'to right'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        )` : interval;\n    }\n\n    private positionHandler(thumbHandle: ElementRef, labelHandle: ElementRef, position: number) {\n        const positionLeft = `${this.valueToFraction(position) * 100}%`;\n\n        if (thumbHandle) {\n            thumbHandle.nativeElement.style.left = positionLeft;\n        }\n\n        if (labelHandle) {\n            labelHandle.nativeElement.style.left = positionLeft;\n        }\n    }\n\n    private positionHandlersAndUpdateTrack() {\n        if (!this.isRange) {\n            this.positionHandler(this.thumbTo, this.labelTo, this.value as number);\n        } else {\n            this.positionHandler(this.thumbTo, this.labelTo, (this.value as IRangeSliderValue).upper);\n            this.positionHandler(this.thumbFrom, this.labelFrom, (this.value as IRangeSliderValue).lower);\n        }\n\n        if (this._hasViewInit) {\n            this.updateTrack();\n        }\n    }\n\n    private closestHandle(event: PointerEvent) {\n        const fromOffset = this.thumbFrom.nativeElement.offsetLeft + this.thumbFrom.nativeElement.offsetWidth / 2;\n        const toOffset = this.thumbTo.nativeElement.offsetLeft + this.thumbTo.nativeElement.offsetWidth / 2;\n        const xPointer = event.clientX - this._el.nativeElement.getBoundingClientRect().left;\n        const match = this.closestTo(xPointer, [fromOffset, toOffset]);\n\n        if (fromOffset === toOffset && toOffset < xPointer) {\n            this.thumbTo.nativeElement.focus();\n        } else if (fromOffset === toOffset && toOffset > xPointer ) {\n            this.thumbFrom.nativeElement.focus();\n        } else if (match === fromOffset) {\n            this.thumbFrom.nativeElement.focus();\n        } else {\n            this.thumbTo.nativeElement.focus();\n        }\n    }\n\n    private setTickInterval() {\n        let interval;\n        const trackProgress = 100;\n        if (this.labelsViewEnabled) {\n            // Calc ticks depending on the labels length;\n            interval = ((trackProgress / (this.labels.length - 1) * 10)) / 10;\n        } else {\n            const trackRange = this.maxValue - this.minValue;\n            interval = this.step > 1 ?\n                (trackProgress / ((trackRange / this.step)) * 10) / 10\n                : null;\n        }\n\n        const renderCallbackExecution = !this.continuous ? this.generateTickMarks('white', interval) : null;\n        this.renderer.setStyle(this.ticks.nativeElement, 'background', renderCallbackExecution);\n    }\n\n    private showSliderIndicators() {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this._indicatorsTimer) {\n            this._indicatorsDestroyer$.next(true);\n            this._indicatorsTimer = null;\n        }\n\n        this.thumbTo.showThumbIndicators();\n        this.labelTo.active = true;\n        if (this.thumbFrom) {\n            this.thumbFrom.showThumbIndicators();\n        }\n\n        if (this.labelFrom) {\n            this.labelFrom.active = true;\n        }\n\n    }\n\n    private hideSliderIndicators() {\n        if (this.disabled) {\n            return;\n        }\n\n        this._indicatorsTimer = timer(this.thumbLabelVisibilityDuration);\n        this._indicatorsTimer.pipe(takeUntil(this._indicatorsDestroyer$)).subscribe(() => {\n            this.thumbTo.hideThumbIndicators();\n            this.labelTo.active = false;\n            if (this.thumbFrom) {\n                this.thumbFrom.hideThumbIndicators();\n            }\n\n            if (this.labelFrom) {\n                this.labelFrom.active = false;\n            }\n        });\n    }\n\n    private toggleSliderIndicators() {\n        this.showSliderIndicators();\n        this.hideSliderIndicators();\n    }\n\n    private changeThumbFocusableState(state: boolean) {\n        const value = state ? -1 : 1;\n\n        if (this.isRange) {\n            this.thumbFrom.tabindex = value;\n        }\n\n        this.thumbTo.tabindex = value;\n\n        this._cdr.detectChanges();\n    }\n\n    private closestTo(goal: number, positions: number[]): number {\n        return positions.reduce((previous, current) => {\n            return (Math.abs(goal - current) < Math.abs(goal - previous) ? current : previous);\n        });\n    }\n\n    private valueToFraction(value: number, pMin = this._pMin, pMax = this._pMax) {\n        return this.valueInRange((value - this.minValue) / (this.maxValue - this.minValue), pMin, pMax);\n    }\n\n    /**\n     * @hidden\n     * NormalizÐµ the value when two-way data bind is used and {@link this.step} is set.\n     * @param value\n     */\n    private normalizeByStep(value: IRangeSliderValue | number) {\n        if (this.isRange) {\n            this.value =  {\n                lower: (value as IRangeSliderValue).lower - ((value as IRangeSliderValue).lower % this.step),\n                upper: (value as IRangeSliderValue).upper - ((value as IRangeSliderValue).upper % this.step)\n            };\n        } else {\n            this.value = (value as number) - ((value as number) % this.step);\n        }\n    }\n\n    private updateTrack() {\n        const fromPosition = this.valueToFraction(this.lowerValue);\n        const toPosition = this.valueToFraction(this.upperValue);\n        const positionGap = toPosition - fromPosition;\n\n        let trackLeftIndention = fromPosition;\n        if (this.isRange) {\n            if (positionGap) {\n                trackLeftIndention = Math.round((1 / positionGap * fromPosition) * 100);\n            }\n\n            this.renderer.setStyle(this.trackRef.nativeElement, 'transform', `scaleX(${positionGap}) translateX(${trackLeftIndention}%)`);\n        } else {\n            this.renderer.setStyle(this.trackRef.nativeElement, 'transform', `scaleX(${toPosition})`);\n        }\n    }\n\n    private validateInitialValue(value: IRangeSliderValue) {\n        if (value.lower < this.lowerBound && value.upper < this.lowerBound) {\n            value.upper = this.lowerBound;\n            value.lower = this.lowerBound;\n        }\n\n        if (value.lower > this.upperBound && value.upper > this.upperBound) {\n            value.upper = this.upperBound;\n            value.lower = this.upperBound;\n        }\n\n        if (value.upper < value.lower) {\n            value.upper = this.upperValue;\n            value.lower = this.lowerValue;\n        }\n\n        return value;\n    }\n\n    private subscribeTo(thumb: IgxSliderThumbComponent, callback: (a: number, b: number) => void) {\n        if (!thumb) {\n            return;\n        }\n\n        thumb.onThumbValueChange\n            .pipe(takeUntil(this.unsubscriber(thumb)))\n            .subscribe(value => callback(value, thumb.type));\n    }\n\n    private unsubscriber(thumb: IgxSliderThumbComponent) {\n        return merge(this._destroyer$, thumb.destroy);\n    }\n\n    private hasValueChanged(oldValue) {\n        const isSliderWithDifferentValue: boolean = !this.isRange && oldValue !== this.value;\n        const isRangeWithOneDifferentValue: boolean = this.isRange &&\n            ((oldValue as IRangeSliderValue).lower !== (this.value as IRangeSliderValue).lower ||\n                (oldValue as IRangeSliderValue).upper !== (this.value as IRangeSliderValue).upper);\n\n        return isSliderWithDifferentValue || isRangeWithOneDifferentValue;\n    }\n\n    public setValue(value: number | IRangeSliderValue) {\n        if (!this.isRange) {\n            this.upperValue = value as number - (value as number % this.step);\n        } else {\n            value = this.validateInitialValue(value as IRangeSliderValue);\n            this.upperValue = (value as IRangeSliderValue).upper;\n            this.lowerValue = (value as IRangeSliderValue).lower;\n        }\n\n        this._onChangeCallback(this.value);\n    }\n\n    private emitValueChanged(oldValue: number | IRangeSliderValue) {\n        this.onValueChange.emit({ oldValue, value: this.value });\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxSliderComponent,\n        IgxThumbFromTemplateDirective,\n        IgxThumbToTemplateDirective,\n        IgxTickLabelTemplateDirective,\n        IgxSliderThumbComponent,\n        IgxThumbLabelComponent,\n        IgxTicksComponent,\n        IgxTickLabelsPipe],\n    exports: [\n        IgxSliderComponent,\n        IgxThumbFromTemplateDirective,\n        IgxThumbToTemplateDirective,\n        IgxTickLabelTemplateDirective,\n        IgxSliderThumbComponent,\n        IgxThumbLabelComponent,\n        IgxTicksComponent],\n    imports: [CommonModule, FormsModule]\n})\nexport class IgxSliderModule {\n}\n","import {\n    AnimationEvent,\n    transition,\n    trigger,\n    useAnimation\n} from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    NgZone,\n    Output\n} from '@angular/core';\nimport { fadeIn, fadeOut, slideInBottom, slideOutBottom } from '../animations/main';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Snackbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/snackbar.html)\n *\n * The Ignite UI Snack Bar provides feedback about an operation with a single-line message, which can\n * include a link to an action such as Undo.\n *\n * Example:\n * ```html\n * <button (click)=\"snackbar.show()\">Send message</button>\n * <div>\n *   <igx-snackbar #snackbar message=\"Message sent\">\n *   </igx-snackbar>\n * </div>\n * ```\n */\n@Component({\n    animations: [\n        trigger('slideInOut', [\n            transition('void => *', [\n                useAnimation(slideInBottom, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'cubic-bezier(0.0, 0.0, 0.2, 1)',\n                        fromPosition: 'translateY(100%)',\n                        toPosition: 'translateY(0)'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(slideOutBottom, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'cubic-bezier(0.4, 0.0, 1, 1)',\n                        fromPosition: 'translateY(0)',\n                        toOpacity: 1,\n                        toPosition: 'translateY(100%)'\n                    }\n                })\n            ])\n        ]),\n        trigger('fadeInOut', [\n            transition('void => *', [\n                useAnimation(fadeIn, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'ease-out'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(fadeOut, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'ease-out'\n                    }\n                })\n            ])\n        ])\n    ],\n    selector: 'igx-snackbar',\n    templateUrl: 'snackbar.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSnackbarComponent {\n\n    /**\n     * Sets/gets the `id` of the snackbar.\n     * If not set, the `id` of the first snackbar component  will be `\"igx-snackbar-0\"`;\n     * ```html\n     * <igx-snackbar id = \"Snackbar1\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let snackbarId = this.snackbar.id;\n     * ```\n     * @memberof IgxSnackbarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-snackbar-${NEXT_ID++}`;\n    /**\n     * Sets/gets the `message` attribute.\n     * ```html\n     * <igx-snackbar [message] = \"'Snackbar Component'\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let message =  this.snackbar.message;\n     * ```\n     */\n    @Input() public message: string;\n\n    /**\n     * Enables/Disables the visibility of the snackbar.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-snackbar [isVisible] = \"true\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let isVisible =  this.snackbar.isVisible;\n     * ```\n     */\n    @Input() public isVisible = false;\n\n    /**\n     * Sets/gets if the snackbar will be automatically hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-snackbar [autoHide] = \"false\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let autoHide =  this.snackbar.autoHide;\n     * ```\n     */\n    @Input() public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time(in milliseconds) in which the snackbar will be visible after it is being shown.\n     * Default value is 4000.\n     * ```html\n     * <igx-snackbar [displayTime] = \"2000\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let displayTime = this.snackbar.displayTime;\n     * ```\n     */\n    @Input() public displayTime = 4000;\n\n    /**\n     * Sets/gets the `actionText` attribute.\n     * ```html\n     * <igx-snackbar [actionText] = \"'Action Text'\"></igx-snackbar>\n     * ```\n     */\n    @Input() public actionText?: string;\n\n    /**\n     * An event that will be emitted when the action is executed.\n     * Provides reference to the `IgxSnackbarComponent` as an argument.\n     * ```html\n     * <igx-snackbar (onAction) = \"onAction($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public onAction = new EventEmitter<IgxSnackbarComponent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation starts.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationStarted) = \"animationStarted($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationStarted = new EventEmitter<AnimationEvent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation ends.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationDone) = \"animationDone($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationDone = new EventEmitter<AnimationEvent>();\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     * Shows the snackbar and hides it after the `displayTime` is over if `autoHide` is set to `true`.\n     * ```typescript\n     * this.snackbar.show();\n     * ```\n     */\n    public show(): void {\n        clearTimeout(this.timeoutId);\n        setTimeout(this.timeoutId);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n    }\n\n    /**\n     * Hides the snackbar.\n     * ```typescript\n     * this.snackbar.hide();\n     * ```\n     */\n    public hide(): void {\n        this.isVisible = false;\n        clearTimeout(this.timeoutId);\n    }\n    /**\n     *@hidden\n     */\n    public triggerAction(): void {\n        this.onAction.emit(this);\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationStarted(evt: AnimationEvent): void {\n        if (evt.fromState === 'void') {\n            this.animationStarted.emit(evt);\n        }\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationDone(evt: AnimationEvent): void {\n        if (evt.fromState === 'show') {\n            this.animationDone.emit(evt);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSnackbarComponent],\n    exports: [IgxSnackbarComponent],\n    imports: [CommonModule]\n})\nexport class IgxSnackbarModule { }\n","import {\n    Directive,\n    HostBinding,\n    TemplateRef\n} from '@angular/core';\nimport { IgxTabsBase } from './tabs.common';\n\nenum ButtonStyle {\n    VISIBLE = 'visible',\n    HIDDEN = 'hidden',\n    NOT_DISPLAYED = 'not_displayed'\n}\n\n@Directive({\n    selector: '[igxRightButtonStyle]'\n})\n\nexport class IgxRightButtonStyleDirective {\n    constructor(public tabs: IgxTabsBase) {\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n\n    private getRightButtonStyle(): string {\n        const viewPortWidth = this.tabs.viewPort.nativeElement.offsetWidth;\n\n        // We use this hacky way to get the width of the itemsContainer,\n        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.\n        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;\n        let itemsContainerWidth = 0;\n        if (itemsContainerChildrenCount > 1) {\n            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];\n            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n        }\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n        const total = offset + viewPortWidth;\n\n        // Fix for IE 11, a difference is accumulated from the widths calculations.\n        if (itemsContainerWidth - headerContainerWidth <= 1 && offset === 0) {\n            return ButtonStyle.NOT_DISPLAYED;\n        }\n\n        if (itemsContainerWidth > total) {\n            return ButtonStyle.VISIBLE;\n        } else {\n            return ButtonStyle.HIDDEN;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxLeftButtonStyle]'\n})\n\nexport class IgxLeftButtonStyleDirective {\n    constructor(public tabs: IgxTabsBase) {\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n\n    private getLeftButtonStyle(): string {\n        // We use this hacky way to get the width of the itemsContainer,\n        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.\n        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;\n        let itemsContainerWidth = 0;\n        if (itemsContainerChildrenCount > 1) {\n            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];\n            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n        }\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n        if (offset === 0) {\n            // Fix for IE 11, a difference is accumulated from the widths calculations.\n            if (itemsContainerWidth - headerContainerWidth <= 1) {\n                return ButtonStyle.NOT_DISPLAYED;\n            }\n            return ButtonStyle.HIDDEN;\n        } else {\n            return ButtonStyle.VISIBLE;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabItemTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewChecked,\n    AfterViewInit,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren\n} from '@angular/core';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport interface ISelectTabEventArgs extends IBaseEventArgs {\n    tab: IgxTabComponent;\n    panel: IgxTabPanelComponent;\n}\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n/**\n * **Ignite UI for Angular Tab Bar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tabbar.html)\n *\n * The Ignite UI Tab Bar enables the user to navigate among a number of content panels displayed in a single view.\n *\n * Example:\n * ```html\n * <igx-bottom-nav>\n *   <igx-tab-panel label=\"Tab 1\">Tab 1 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 2\">Tab 2 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 3\">Tab 3 Content</igx-tab-panel>\n * </igx-bottom-nav>\n * ```\n */\n@Component({\n    selector: 'igx-bottom-nav',\n    templateUrl: 'tab-bar-content.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxBottomNavComponent implements AfterViewInit {\n\n    /**\n     * Gets the `IgxTabComponent` elements in the tab bar component created based on the provided panels.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.viewTabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ViewChildren(forwardRef(() => IgxTabComponent))\n    public viewTabs: QueryList<IgxTabComponent>;\n\n    /**\n     * Gets the `IgxTabComponent` elements in the tab bar component defined as content child.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.contentTabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ContentChildren(forwardRef(() => IgxTabComponent))\n    public contentTabs: QueryList<IgxTabComponent>;\n\n    /**\n     * Gets the `IgxTabComponent` elements for this bottom navigation component.\n     * First try to get them as content children if not available get them as view children.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.tabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public get tabs(): QueryList<IgxTabComponent> {\n        return this.hasContentTabs ? this.contentTabs : this.viewTabs;\n    }\n\n    /**\n     * Gets the `IgxTabPanelComponent` elements in the tab bar component.\n     * ```typescript\n     * let tabPanels: QueryList<IgxTabPanelComponent> = this.tabBar.panels;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ContentChildren(forwardRef(() => IgxTabPanelComponent))\n    public panels: QueryList<IgxTabPanelComponent>;\n\n    /**\n     * Sets/gets the `id` of the tab bar.\n     * If not set, the `id` of the first tab bar component will be `\"igx-bottom-nav-0\"`.\n     * ```html\n     * <igx-bottom-nav id = \"my-first-tab-bar\"></igx-bottom-nav>\n     * ```\n     * ```typescript\n     * let tabBarId =  this.tabBar.id;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-bottom-nav-${NEXT_ID++}`;\n\n    /**\n     * Emits an event when a new tab is selected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTableSelected) = \"onTabSelected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabSelected = new EventEmitter<ISelectTabEventArgs>();\n\n    /**\n     * Emits an event when a tab is deselected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTabDeselected) = \"onTabDeselected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabDeselected = new EventEmitter<ISelectTabEventArgs>();\n\n    /**\n     * Gets the `index` of selected tab/panel in the respective collection.\n     * ```typescript\n     * let index =  this.tabBar.selectedIndex;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public selectedIndex = -1;\n\n    /**\n     * Gets the `itemStyle` of the tab bar.\n     * ```typescript\n     * let itemStyle =  this.tabBar.itemStyle;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n\n    /**\n     *@hidden\n     */\n    public get hasContentTabs(): boolean {\n        return (this.contentTabs && this.contentTabs.length > 0);\n    }\n\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-bottom-nav';\n\n    /**\n     * Gets the selected tab in the tab bar.\n     * ```typescript\n     * let tab =  this.tabBar.selectedTab;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    get selectedTab(): IgxTabComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef) {\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        // initial selection\n        setTimeout(() => {\n            if (this.selectedIndex === -1) {\n                const selectablePanels = this.panels.filter((p) => !p.disabled);\n                const panel = selectablePanels[0];\n                if (panel) {\n                    panel.select();\n                }\n            }\n        }, 0);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('onTabSelected', ['$event'])\n    public _selectedPanelHandler(args) {\n        if (this.hasContentTabs) {\n            this.selectedIndex = args.tab.index;\n            this.contentTabs.forEach((t) => {\n                if (t !== args.tab) {\n                    this._deselectTab(t);\n                }\n            });\n        } else {\n            if (args.panel) {\n                this.selectedIndex = args.panel.index;\n                this.panels.forEach((p) => {\n                    if (p.index !== this.selectedIndex) {\n                        this._deselectPanel(p);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _deselectPanel(panel: IgxTabPanelComponent) {\n        // Cannot deselect the selected tab - this will mean that there will be not selected tab left\n        if (panel.disabled || this.selectedTab.index === panel.index) {\n            return;\n        }\n\n        panel.isSelected = false;\n        this.onTabDeselected.emit({ tab: this.tabs[panel.index], panel });\n    }\n\n    private _deselectTab(aTab: IgxTabComponent) {\n        aTab.isSelected = false;\n        this.onTabDeselected.emit({ tab: aTab, panel: null });\n    }\n}\n\n// ================================= IgxTabPanelComponent ======================================\n\n@Component({\n    selector: 'igx-tab-panel',\n    templateUrl: 'tab-panel.component.html'\n})\nexport class IgxTabPanelComponent implements AfterContentInit, AfterViewChecked {\n\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-tab-panel';\n\n    /**\n     *@hidden\n     */\n    private _isSelected = false;\n\n    /**\n     * Sets/gets the `label` of the tab panel.\n     * ```html\n     * <igx-tab-panel [label] = \"'Tab panel label'\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelLabel = this.tabPanel.label;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public label: string;\n\n    /**\n     * Sets/gets  the `icon` of the tab panel.\n     * ```html\n     * <igx-tab-panel [icon] = \"panel_icon\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelIcon =  this.tabPanel.icon;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public icon: string;\n\n    /**\n     * Sets/gets whether the tab panel is disabled.\n     * ```html\n     * <igx-tab-panel [disabled] = \"true\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let isDisabled = this.tabPanel.disabled;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public disabled: boolean;\n\n    /**\n     * Gets the role of the tab panel.\n     * ```typescript\n     * let tabPanelRole = this.tabPanel.role;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('attr.role') public role = 'tabpanel';\n\n    /**\n     * Gets whether a tab panel will have `igx-bottom-nav__panel` class.\n     * ```typescript\n     * let styleClass = this.tabPanel.styleClass;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel')\n    get styleClass(): boolean {\n        return (!this.isSelected);\n    }\n\n    /**\n     * Sets/gets whether a tab panel is selected.\n     * ```typescript\n     * this.tabPanel.isSelected = true;\n     * ```\n     * ```typescript\n     * let isSelected =  this.tabPanel.isSelected;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel--selected')\n    public get isSelected(): boolean {\n        return this._isSelected;\n    }\n    public set isSelected(newValue: boolean) {\n        if (this._isSelected !== newValue) {\n            if (newValue) {\n                this.select();\n            } else {\n                this._isSelected = newValue;\n            }\n        }\n    }\n\n    /**\n     * Gets the `itemStyle` of the tab panel.\n     * ```typescript\n     * let itemStyle = this.tabPanel.itemStyle;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n\n    /**\n     * Gets the tab associated with the panel.\n     * ```typescript\n     * let tab = this.tabPanel.relatedTab;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get relatedTab(): IgxTabComponent {\n        if (this._tabBar.tabs) {\n            return this._tabBar.tabs.toArray()[this.index];\n        }\n    }\n\n    /**\n     * Gets the changes and updates accordingly applied to the tab/panel.\n     *\n     * @memberof IgxTabComponent\n     */\n    get changesCount(): number {\n        return this.relatedTab ? this.relatedTab.changesCount : 0;\n    }\n\n    /**\n     * Gets the index of a panel in the panels collection.\n     * ```typescript\n     * let panelIndex =  this.tabPanel.index\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get index() {\n        if (this._tabBar.panels) {\n            return this._tabBar.panels.toArray().indexOf(this);\n        }\n    }\n\n    /**\n     * Gets the tab template.\n     * ```typescript\n     * let tabTemplate = this.tabPanel.customTabTemplate\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n\n    /**\n     * Sets the tab template.\n     * ```typescript\n     * this.tabPanel.customTabTemplate(tabTemplate);\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n\n    /**\n     *@hidden\n     */\n    private _tabTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTabTemplateDirective, { read: IgxTabTemplateDirective })\n    protected tabTemplate: IgxTabTemplateDirective;\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewChecked() {\n        this._element.nativeElement.setAttribute('aria-labelledby', `igx-tab-${this.index}`);\n        this._element.nativeElement.setAttribute('id', `igx-bottom-nav__panel-${this.index}`);\n    }\n\n    /**\n     * Selects the current tab and the tab panel.\n     * ```typescript\n     * this.tabPanel.select();\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public select() {\n        if (this.disabled || this._tabBar.selectedIndex === this.index) {\n            return;\n        }\n\n        this._isSelected = true;\n        this._tabBar.onTabSelected.emit({ tab: this._tabBar.tabs.toArray()[this.index], panel: this });\n    }\n}\n\n// ======================================= IgxTabComponent ==========================================\n\n@Component({\n    selector: 'igx-tab',\n    templateUrl: 'tab.component.html'\n})\nexport class IgxTabComponent {\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let tabRole = this.tab.role;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'tab';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.id')\n    public id = 'igx-tab-' + this.index;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = this.label;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-disabled')\n    public ariaDisabled = this.disabled;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-selected')\n    public ariaSelected = this.isSelected;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-controls')\n    public ariaControls = 'igx-tab-panel-' + this.index;\n\n    /**\n     * Gets the panel associated with the tab.\n     * ```typescript\n     * let tabPanel =  this.tab.relatedPanel;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    public relatedPanel: IgxTabPanelComponent;\n\n    /**\n     *@hidden\n     */\n    private _label: string;\n\n    /**\n     * Sets/gets the `label` of the tab panel.\n     * ```html\n     * <igx-tab [label] = \"'Tab label'\"><igx-tab>\n     * ```\n     * ```typescript\n     * let tabLabel = this.tab.label;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    public get label(): string {\n        return this.relatedPanel ? this.relatedPanel.label : this._label;\n    }\n    public set label(newValue: string) {\n        if (this.relatedPanel) {\n            this.relatedPanel.label = newValue;\n        }\n        this._label = newValue;\n    }\n\n    /**\n     *@hidden\n     */\n    private _icon: string;\n\n    /**\n     * Sets/gets  the `icon` of the tab panel.\n     * ```html\n     * <igx-tab [icon] = \"tab_icon\"><igx-tab>\n     * ```\n     * ```typescript\n     * let tabIcon =  this.tab.icon;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    public get icon(): string {\n        return this.relatedPanel ? this.relatedPanel.icon : this._icon;\n    }\n    public set icon(newValue: string) {\n        if (this.relatedPanel) {\n            this.relatedPanel.icon = newValue;\n        }\n        this._icon = newValue;\n    }\n\n    /**\n     *@hidden\n     */\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n\n    /**\n     * Gets the changes and updates accordingly applied to the tab.\n     *\n     * @memberof IgxTabComponent\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n\n    private _disabled = false;\n\n    /**\n     * Gets whether the tab is disabled.\n     * ```typescript\n     * let isDisabled = this.tab.disabled;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    get disabled(): boolean {\n        return this.relatedPanel ? this.relatedPanel.disabled : this._disabled;\n    }\n    set disabled(newValue: boolean) {\n        if (this.relatedPanel) {\n            this.relatedPanel.disabled = newValue;\n        } else {\n            this._disabled = newValue;\n        }\n    }\n\n    public _selected = false;\n\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * let isSelected  = this.tab.isSelected;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    set isSelected(newValue: boolean) {\n        if (this.relatedPanel) {\n            this.relatedPanel.isSelected = newValue;\n        } else if (this._selected !== newValue) {\n            this._selected = newValue;\n            if (this._selected) {\n                this._tabBar.onTabSelected.emit({ tab: this, panel: null });\n            }\n        }\n    }\n    get isSelected(): boolean {\n        return this.relatedPanel ? this.relatedPanel.isSelected : this._selected;\n    }\n\n    @HostBinding('class.igx-bottom-nav__menu-item--selected')\n    public get cssClassSelected(): boolean {\n        return this.isSelected;\n    }\n\n    @HostBinding('class.igx-bottom-nav__menu-item--disabled')\n    public get cssClassDisabled(): boolean {\n        return this.disabled;\n    }\n\n    @HostBinding('class.igx-bottom-nav__menu-item')\n    public get cssClass(): boolean {\n        return (!this.disabled && !this.isSelected);\n    }\n\n    /**\n     * Gets the `index` of the tab.\n     * ```typescript\n     * let tabIndex = this.tab.index;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public get index(): number {\n        if (this._tabBar.tabs) {\n            return this._tabBar.tabs.toArray().indexOf(this);\n        }\n    }\n\n    /**@hidden*/\n    @ViewChild('defaultTabTemplate', { read: TemplateRef, static: true })\n    protected defaultTabTemplate: TemplateRef<any>;\n\n    /**@hidden*/\n    @ContentChild(IgxTabTemplateDirective, { read: IgxTabTemplateDirective })\n    protected customTabTemplateDir: IgxTabTemplateDirective;\n\n    /**\n     * Returns the `template` for this IgxTabComponent.\n     * ```typescript\n     * let tabItemTemplate = this.tabItem.template;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public get template(): TemplateRef<any> {\n        if (this.relatedPanel && this.relatedPanel.customTabTemplate) {\n            return this.relatedPanel.customTabTemplate;\n        }\n        if (this.customTabTemplateDir) {\n            return this.customTabTemplateDir.template;\n        }\n        return this.defaultTabTemplate;\n    }\n\n    /**\n     * Returns the `context` object for the template of this `IgxTabComponent`.\n     * ```typescript\n     * let tabItemContext = this.tabItem.context;\n     * ```\n     */\n    public get context(): any {\n        return this.relatedPanel ? this.relatedPanel : this;\n    }\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n\n    /**\n     * Selects the current tab and the associated panel.\n     * ```typescript\n     * this.tab.select();\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public select() {\n        if (this.relatedPanel) {\n            this.relatedPanel.select();\n        } else {\n            this._selected = true;\n            this._tabBar.onTabSelected.emit({ tab: this, panel: null });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        this.select();\n    }\n\n    public elementRef(): ElementRef {\n        return this._element;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    exports: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule]\n})\nexport class IgxBottomNavModule {\n}\n","import { ElementRef, QueryList, EventEmitter } from '@angular/core';\n\n/** @hidden */\nexport abstract class IgxTabsBase {\n    selectedIndicator: ElementRef<any>;\n    tabs: QueryList<IgxTabItemBase>;\n    groups: QueryList<IgxTabsGroupBase>;\n    offset: number;\n    selectedIndex: number;\n    viewPort: ElementRef;\n    contentsContainer: ElementRef;\n    tabsContainer: ElementRef;\n    itemsContainer: ElementRef;\n    headerContainer: ElementRef;\n    onTabItemSelected: EventEmitter<{}>; // TODO: Define event arg interface!\n    hasContentTabs: boolean;\n    scrollElement(element: any, scrollRight: boolean) {}\n    performSelectionChange(newTab: IgxTabItemBase) {}\n    transformContentAnimation(tab: IgxTabItemBase, duration: number) {}\n    transformIndicatorAnimation(element: HTMLElement, duration?: number) {}\n}\n\n/** @hidden */\nexport abstract class IgxTabItemBase {\n    nativeTabItem: ElementRef;\n    get index(): number { return 0; }\n    select(): void {}\n    setSelectedInternal(newValue: boolean) {}\n}\n\n/** @hidden */\nexport abstract class IgxTabsGroupBase {\n    select(): void {}\n    setSelectedInternal(newValue: boolean) {}\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n    OnDestroy,\n    NgZone\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxLeftButtonStyleDirective, IgxRightButtonStyleDirective, IgxTabItemTemplateDirective } from './tabs.directives';\nimport { IgxTabsBase, IgxTabItemBase } from './tabs.common';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { PlatformUtil } from '../core/utils';\n\nexport enum IgxTabsType {\n    FIXED = 'fixed',\n    CONTENTFIT = 'contentfit'\n}\n\n@Component({\n    selector: 'igx-tabs',\n    templateUrl: 'tabs.component.html',\n    providers: [{ provide: IgxTabsBase, useExisting: IgxTabsComponent }]\n})\n\nexport class IgxTabsComponent implements IgxTabsBase, AfterViewInit, OnDestroy {\n    /**\n    * Provides an observable collection of all `IgxTabsGroupComponent`s.\n    * ```typescript\n    * const groupItems = this.myTabComponent.groups;\n    * ```\n    */\n    @ContentChildren(forwardRef(() => IgxTabsGroupComponent))\n    public groups: QueryList<IgxTabsGroupComponent>;\n\n    /**\n    * Provides an observable collection of all `IgxTabItemComponent`s defined in the page.\n    * ```typescript\n    * const tabItems = this.myTabComponent.contentTabs;\n    * ```\n    */\n    @ContentChildren(forwardRef(() => IgxTabItemComponent))\n    public contentTabs: QueryList<IgxTabItemComponent>;\n\n    /**\n    * An @Input property that sets the value of the `selectedIndex`.\n    * Default value is 0.\n    * ```html\n    * <igx-tabs selectedIndex=\"1\">\n    * ```\n    *\n    * Two-way data binding.\n    * ```html\n    * <igx-tabs [(selectedIndex)]=\"model.selectedIndex\">\n    * ```\n    */\n    @Input()\n    public get selectedIndex(): number {\n        return this._selectedIndex;\n    }\n\n    public set selectedIndex(index: number) {\n        const newIndex = typeof index !== 'number' ? parseInt(index, 10) : index;\n        if (this._selectedIndex !== newIndex) {\n            if (this.tabs && this.tabs.length > 0) {\n                const newTab = this.tabs.toArray()[newIndex];\n                if (newTab) {\n                   this.performSelectionChange(newTab);\n                }\n            } else {\n                this._selectedIndex = newIndex;\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public selectedIndexChange = new EventEmitter<number>();\n\n    /**\n     * Defines the tab header sizing mode. You can choose between `contentfit` or `fixed`.\n     * By default the header sizing mode is `contentfit`.\n     * ```html\n     * <igx-tabs type=\"fixed\">\n     *     <igx-tabs-group label=\"HOME\">Home</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     */\n    @Input('type')\n    public type: string | IgxTabsType = 'contentfit';\n\n    /**\n    * @hidden\n    */\n    @Input()\n    public class = '';\n\n    /**\n     * Emitted when a tab item is deselected.\n     * ```html\n     * <igx-tabs (onTabItemDeselected)=\"itemDeselected($event)\">\n     *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n     *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     * ```typescript\n     * itemDeselected(e){\n     *      const tabGroup = e.group;\n     *      const tabItem = e.tab;\n     * }\n     * ```\n     */\n    @Output()\n    public onTabItemDeselected = new EventEmitter();\n\n    /**\n    * Emitted when a tab item is selected.\n    * ```html\n    * <igx-tabs (onTabItemSelected)=\"itemSelected($event)\">\n    *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n    *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n    * </igx-tabs>\n    * ```\n    * ```typescript\n    * itemSelected(e){\n    *      const tabGroup = e.group;\n    *      const tabItem = e.tab;\n    * }\n    * ```\n    */\n    @Output()\n    public onTabItemSelected = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('contentsContainer', { static: true })\n    public contentsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerContainer', { static: true })\n    public headerContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('itemsContainer', { static: true })\n    public itemsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('selectedIndicator')\n    public selectedIndicator: ElementRef;\n\n    /**\n    * @hidden\n    */\n    @ViewChild('tabsContainer', { static: true })\n    public tabsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('viewPort', { static: true })\n    public viewPort: ElementRef;\n\n    /**\n     * Provides an observable collection of all `IgxTabItemComponent`s.\n     * ```typescript\n     * const tabItems = this.myTabComponent.viewTabs;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxTabItemComponent))\n    public viewTabs: QueryList<IgxTabItemComponent>;\n\n    /**\n     * Provides an observable collection of all `IgxTabItemComponent`s.\n     * First try to get them as content children if not available get them as view children.\n     * ```typescript\n     * const tabItems = this.myTabComponent.tabs;\n     * ```\n     */\n    public get tabs(): QueryList<IgxTabItemComponent> {\n        if (this.hasContentTabs) {\n            return this.contentTabs;\n        }\n        return this.viewTabs;\n    }\n\n    /**\n     *@hidden\n     */\n    public get hasContentTabs(): boolean {\n        return (this.contentTabs && this.contentTabs.length > 0);\n    }\n\n    /**\n     * @hidden\n     */\n    public calculatedWidth: number;\n\n    /**\n     * @hidden\n     */\n    public visibleItemsWidth: number;\n\n    /**\n     * @hidden\n     */\n    public offset = 0;\n\n    private _groupChanges$: Subscription;\n    private _selectedIndex = -1;\n    private _resizeObserver: ResizeObserver;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    public get cssClass() {\n        const defaultStyle = `igx-tabs`;\n        const fixedStyle = `igx-tabs--fixed`;\n        const iconStyle = `igx-tabs--icons`;\n        const iconLabelFoundInGroups = this.groups.find((group) => group.icon != null && group.label != null);\n        const iconLabelFoundInTabs = this.contentTabs.find((tab) => tab.icon != null && tab.label != null);\n        let css: string;\n        switch (IgxTabsType[this.type.toUpperCase()]) {\n            case IgxTabsType.FIXED: {\n                css = fixedStyle;\n                break;\n            }\n            default: {\n                css = defaultStyle;\n                break;\n            }\n        }\n\n        // Layout fix for items with icons\n        if (iconLabelFoundInGroups !== undefined || iconLabelFoundInTabs !== undefined) {\n            css = `${css} ${iconStyle}`;\n        }\n\n        return `${css} ${this.class}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollLeft(event): void {\n        this.scroll(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollRight(event): void {\n        this.scroll(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollElement(element: any, scrollRight: boolean): void {\n        const viewPortWidth = this.viewPort.nativeElement.offsetWidth;\n\n        this.offset = (scrollRight) ? element.offsetWidth + element.offsetLeft - viewPortWidth : element.offsetLeft;\n        this.itemsContainer.nativeElement.style.transform = `translate(${-this.offset}px)`;\n    }\n\n    /**\n     * Gets the selected `IgxTabItemComponent`.\n     * ```\n     * const selectedItem = this.myTabComponent.selectedTabItem;\n     * ```\n     */\n    get selectedTabItem(): IgxTabItemComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef, private _ngZone: NgZone, private platformUtil: PlatformUtil) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        if (this._selectedIndex === -1) {\n            this.tabs.forEach((t) => {\n                if (t.isSelected) {\n                    this._selectedIndex = t.index;\n                }\n            });\n        }\n\n        if (!this.hasContentTabs && (this.selectedIndex < 0 || this.selectedIndex >= this.groups.length)) {\n            this._selectedIndex = 0;\n        }\n\n        if (this.platformUtil.isBrowser) {\n            requestAnimationFrame(() => {\n                const newTab = this.tabs.toArray()[this._selectedIndex];\n                if (newTab) {\n                    this.performSelection(newTab);\n                } else {\n                    this.hideIndicator();\n                }\n            });\n            this._ngZone.runOutsideAngular(() => {\n                this._resizeObserver = new ResizeObserver(() => {\n                    if (!this.hasContentTabs && this._selectedIndex >= 0 && this._selectedIndex < this.tabs.length) {\n                        const newTab = this.tabs.toArray()[this._selectedIndex];\n                        this.transformContentAnimation(newTab, 0);\n                    }\n                });\n\n                this._resizeObserver.observe(this.tabsContainer.nativeElement);\n            });\n        }\n\n        this._groupChanges$ = this.groups.changes.subscribe(() => {\n            this.resetSelectionOnCollectionChanged();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._groupChanges$) {\n            this._groupChanges$.unsubscribe();\n        }\n        if (this._resizeObserver) {\n            this._ngZone.runOutsideAngular(() => {\n                this._resizeObserver.disconnect();\n            });\n        }\n    }\n\n    private resetSelectionOnCollectionChanged(): void {\n        requestAnimationFrame(() => {\n            const currentTab = this.tabs.toArray()[this.selectedIndex];\n            if (currentTab) {\n                this.performSelectionChange(currentTab);\n            } else if (this.selectedIndex >= this.tabs.length) {\n                this.performSelectionChange(this.tabs.last);\n            } else {\n                this.hideIndicator();\n            }\n        });\n    }\n\n    private scroll(scrollRight: boolean): void {\n        const tabsArray = this.tabs.toArray();\n        for (const tab of tabsArray) {\n            const element = tab.nativeTabItem.nativeElement;\n            if (scrollRight) {\n                if (element.offsetWidth + element.offsetLeft > this.viewPort.nativeElement.offsetWidth + this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            } else {\n                if (element.offsetWidth + element.offsetLeft >= this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public performSelectionChange(newTab: IgxTabItemBase): void {\n        const oldTab = this.selectedTabItem;\n        if (oldTab) {\n            this.performDeselection(oldTab);\n        }\n        if (newTab) {\n            this.performSelection(newTab);\n        } else {\n            // if there is no new selected tab hide the selection indicator\n            this.hideIndicator();\n        }\n        this.selectedIndexChange.emit(this._selectedIndex);\n    }\n\n    private performDeselection(oldTab: IgxTabItemBase): void {\n        oldTab.setSelectedInternal(false);\n        const oldTabRelatedGroup = this.groups.toArray()[oldTab.index];\n        if (oldTabRelatedGroup) {\n            oldTabRelatedGroup.setSelectedInternal(false);\n        }\n        this._selectedIndex = -1;\n        this.onTabItemDeselected.emit({ tab: oldTab, group: oldTabRelatedGroup });\n    }\n\n    private performSelection(newTab: IgxTabItemBase): void {\n        newTab.setSelectedInternal(true);\n        this._selectedIndex = newTab.index;\n\n        let newTabRelatedGroup = null;\n        if (!this.hasContentTabs && this.groups) {\n            newTabRelatedGroup = this.groups.toArray()[newTab.index];\n            if (newTabRelatedGroup) {\n                newTabRelatedGroup.setSelectedInternal(true);\n            }\n        }\n\n        this.onTabItemSelected.emit({ tab: newTab, group: newTabRelatedGroup });\n\n        requestAnimationFrame(() => {\n            // bring the new selected tab into view if it is not\n            this.bringNewTabIntoView(newTab);\n            // animate the new selection indicator\n            this.transformIndicatorAnimation(newTab.nativeTabItem.nativeElement);\n            // animate the new tab's group content\n            if (!this.hasContentTabs) {\n                this.transformContentAnimation(newTab, 0.2);\n            }\n        });\n    }\n\n    private bringNewTabIntoView(newTab: IgxTabItemBase): void {\n        const tabNativeElement = newTab.nativeTabItem.nativeElement;\n\n        // Scroll left if there is need\n        if (tabNativeElement.offsetLeft < this.offset) {\n            this.scrollElement(tabNativeElement, false);\n        }\n\n        // Scroll right if there is need\n        const viewPortOffsetWidth = this.viewPort.nativeElement.offsetWidth;\n        const delta = (tabNativeElement.offsetLeft + tabNativeElement.offsetWidth) - (viewPortOffsetWidth + this.offset);\n\n        // Fix for IE 11, a difference is accumulated from the widths calculations\n        if (delta > 1) {\n            this.scrollElement(tabNativeElement, true);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    // animation for the new panel/group (not needed for tab only mode)\n    public transformContentAnimation(tab: IgxTabItemBase, duration: number): void {\n        const contentOffset = this.tabsContainer.nativeElement.offsetWidth * tab.index;\n        this.contentsContainer.nativeElement.style.transitionDuration = duration > 0 ? `${duration}s` : 'initial';\n        this.contentsContainer.nativeElement.style.transform = `translate(${-contentOffset}px)`;\n    }\n\n    /**\n     * @hidden\n     */\n    public transformIndicatorAnimation(element: HTMLElement, duration = 0.3): void {\n        if (this.selectedIndicator) {\n            this.selectedIndicator.nativeElement.style.visibility = 'visible';\n            this.selectedIndicator.nativeElement.style.transitionDuration = duration > 0 ? `${duration}s` : 'initial';\n            this.selectedIndicator.nativeElement.style.width = `${element.offsetWidth}px`;\n            this.selectedIndicator.nativeElement.style.transform = `translate(${element.offsetLeft}px)`;\n        }\n    }\n\n    public hideIndicator(): void {\n        if (this.selectedIndicator) {\n            this.selectedIndicator.nativeElement.style.visibility = 'hidden';\n        }\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    exports: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule, IgxRippleModule]\n})\n\nexport class IgxTabsModule {\n}\n","import {\n    Component,\n    ContentChild,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    TemplateRef,\n    ViewChild,\n    NgZone,\n    AfterViewInit,\n    OnDestroy\n} from '@angular/core';\n\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxTabItemBase, IgxTabsBase } from './tabs.common';\nimport { IgxTabItemTemplateDirective } from './tabs.directives';\nimport ResizeObserver from 'resize-observer-polyfill';\n\n@Component({\n    selector: 'igx-tab-item',\n    templateUrl: 'tab-item.component.html'\n})\n\nexport class IgxTabItemComponent extends IgxTabItemBase implements AfterViewInit, OnDestroy {\n    /**\n    * Gets the group associated with the tab.\n    * ```html\n    * const relatedGroup = this.tabbar.tabs.toArray()[1].relatedGroup;\n    * ```\n    */\n    @Input()\n    public relatedGroup: IgxTabsGroupComponent;\n\n    /**@hidden*/\n    private _icon: string;\n\n    /**\n    * An @Input property that sets the value of the `icon`.\n    * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.\n    *```html\n    *<igx-tab-item label=\"Tab 1\" icon=\"home\">\n    *```\n    */\n    @Input()\n    public get icon(): string {\n        return this.relatedGroup ? this.relatedGroup.icon : this._icon;\n    }\n    public set icon(newValue: string) {\n        if (this.relatedGroup) {\n            this.relatedGroup.icon = newValue;\n        }\n        this._icon = newValue;\n    }\n\n    /**@hidden*/\n    private _label: string;\n\n    /**\n    * An @Input property that sets the value of the `label`.\n    *```html\n    *<igx-tabs-item label=\"Tab 2\" icon=\"folder\">\n    *```\n    */\n    @Input()\n    public get label(): string {\n        return this.relatedGroup ? this.relatedGroup.label : this._label;\n    }\n    public set label(newValue: string) {\n        if (this.relatedGroup) {\n            this.relatedGroup.label = newValue;\n        }\n        this._label = newValue;\n    }\n\n    /**@hidden*/\n    @ViewChild('defaultTabTemplate', { read: TemplateRef, static: true })\n    protected defaultTabTemplate: TemplateRef<any>;\n\n    /**@hidden*/\n    @ContentChild(IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective })\n    protected customTabTemplateDir: IgxTabItemTemplateDirective;\n\n    private _nativeTabItem: ElementRef;\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n    private _isSelected = false;\n    private _disabled = false;\n    private _resizeObserver: ResizeObserver;\n\n    constructor(private _tabs: IgxTabsBase, private _element: ElementRef, private _ngZone: NgZone) {\n        super();\n        this._nativeTabItem = _element;\n    }\n\n    @HostBinding('class.igx-tabs__header-menu-item--selected')\n    public get provideCssClassSelected(): boolean {\n        return this.isSelected;\n    }\n\n    @HostBinding('class.igx-tabs__header-menu-item--disabled')\n    public get provideCssClassDisabled(): boolean {\n        return this.disabled;\n    }\n\n    @HostBinding('class.igx-tabs__header-menu-item')\n    public get provideCssClass(): boolean {\n        return (!this.disabled && !this.isSelected);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.role')\n    public role = 'tab';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.id')\n    public id = 'igx-tab-item-' + this.index;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = this.label;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-disabled')\n    public ariaDisabled = this.disabled;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-selected')\n    public ariaSelected = this.isSelected;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-controls')\n    public ariaControls = 'igx-tab-item-group-' + this.index;\n\n    ngAfterViewInit(): void {\n        this._ngZone.runOutsideAngular(() => {\n            this._resizeObserver = new ResizeObserver(() => {\n                this._tabs.transformIndicatorAnimation(this._nativeTabItem.nativeElement, 0);\n            });\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._ngZone.runOutsideAngular(() => {\n            this._resizeObserver.disconnect();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        this.select();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        this.onKeyDown(false);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        this.onKeyDown(true);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        this.onKeyDown(false, 0);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        this.onKeyDown(false, this._tabs.tabs.toArray().length - 1);\n    }\n\n    /**\n     * @hidden\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n\n    /**\n     * @hidden\n     */\n    get nativeTabItem(): ElementRef {\n        return this._nativeTabItem;\n    }\n\n    /**\n    * \tGets whether the tab is disabled.\n    * ```\n    * const disabledItem = this.myTabComponent.tabs.first.disabled;\n    * ```\n    */\n    @Input()\n    get disabled(): boolean {\n        return this.relatedGroup ? this.relatedGroup.disabled : this._disabled;\n    }\n    set disabled(newValue: boolean) {\n        if (this.relatedGroup) {\n            this.relatedGroup.disabled = newValue;\n        } else {\n            this._disabled = newValue;\n        }\n    }\n\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * const selectedItem = this.myTabComponent.tabs.first.isSelected;\n     * ```\n     */\n    @Input()\n    get isSelected(): boolean {\n        return this.relatedGroup ? this.relatedGroup.isSelected : this._isSelected;\n    }\n    set isSelected(newValue: boolean) {\n        if (!this.disabled && this.isSelected !== newValue) {\n            this._tabs.performSelectionChange(newValue ? this : null);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public select(): void {\n        if (!this.disabled && !this.isSelected) {\n            this._tabs.performSelectionChange(this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get index(): number {\n        if (this._tabs.tabs) {\n            return this._tabs.tabs.toArray().indexOf(this);\n        }\n        return -1;\n    }\n\n    /**\n     * @hidden\n     */\n    public setSelectedInternal(newValue: boolean) {\n        this._isSelected = newValue;\n        this._ngZone.runOutsideAngular(() => {\n            if (this._resizeObserver) {\n                if (this._isSelected) {\n                    this._resizeObserver.observe(this._element.nativeElement);\n                } else {\n                    this._resizeObserver.disconnect();\n                }\n            }\n        });\n        this.tabindex = newValue ? 0 : -1;\n    }\n\n    private onKeyDown(isLeftArrow: boolean, index = null): void {\n        const tabsArray = this._tabs.tabs.toArray();\n        if (index === null) {\n            index = (isLeftArrow)\n                ? (this._tabs.selectedIndex === 0) ? tabsArray.length - 1 : this._tabs.selectedIndex - 1\n                : (this._tabs.selectedIndex === tabsArray.length - 1) ? 0 : this._tabs.selectedIndex + 1;\n        }\n        const tab = tabsArray[index];\n        tab.select();\n    }\n\n    /**\n     * @hidden\n     */\n    public get template(): TemplateRef<any> {\n        if (this.relatedGroup && this.relatedGroup.customTabTemplate) {\n            return this.relatedGroup.customTabTemplate;\n        }\n        if (this.customTabTemplateDir) {\n            return this.customTabTemplateDir.template;\n        }\n        return this.defaultTabTemplate;\n    }\n\n    /**\n     * @hidden\n     */\n    public get context(): any {\n        return this.relatedGroup ? this.relatedGroup : this;\n    }\n\n}\n","import {\n    AfterContentInit,\n    AfterViewChecked,\n    Component,\n    ContentChild,\n    ElementRef,\n    HostBinding,\n    Input,\n    TemplateRef,\n    HostListener\n} from '@angular/core';\n\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabItemTemplateDirective } from './tabs.directives';\nimport { IgxTabsBase, IgxTabsGroupBase } from './tabs.common';\n\n@Component({\n    selector: 'igx-tabs-group',\n    templateUrl: 'tabs-group.component.html'\n})\n\nexport class IgxTabsGroupComponent extends IgxTabsGroupBase implements AfterContentInit, AfterViewChecked {\n\n    /**\n    * An @Input property that allows you to enable/disable the `IgxTabGroupComponent`.\n    *```html\n    *<igx-tabs-group label=\"Tab 2  Lorem ipsum dolor sit\" icon=\"home\" [disabled]=\"true\">\n    *```\n    */\n    @Input()\n    public disabled = false;\n\n    /**\n    * An @Input property that sets the value of the `icon`.\n    * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"home\">\n    *```\n    */\n    @Input()\n    public icon: string;\n\n    /**\n    * An @Input property that sets the value of the `label`.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"folder\">\n    *```\n    */\n    @Input()\n    public label: string;\n\n    /**\n     * Sets/gets whether a tab group is selected.\n     * ```typescript\n     * this.tabGroup.isSelected = true;\n     * ```\n     * ```typescript\n     * let isSelected = this.tabGroup.isSelected;\n     * ```\n     * @memberof IgxTabsGroupComponent\n     */\n    public get isSelected(): boolean {\n        return this._isSelected;\n    }\n    public set isSelected(newValue: boolean) {\n        if (!this.disabled && this.isSelected !== newValue) {\n            this._tabs.performSelectionChange(newValue ? this.relatedTab : null);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective })\n    protected tabTemplate: IgxTabItemTemplateDirective;\n\n    private _tabTemplate: TemplateRef<any>;\n    private _isSelected = false;\n\n    constructor(private _tabs: IgxTabsBase, private _element: ElementRef) {\n        super();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'tabpanel';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tabs__group')\n    public styleClass = true;\n\n    /**\n     * An accessor that returns the `IgxTabItemComponent` component.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabComponent = this.tab.relatedTab;\n     * }\n     * ```\n     */\n    get relatedTab(): IgxTabItemComponent {\n        if (this._tabs.tabs) {\n            return this._tabs.tabs.toArray()[this.index] as IgxTabItemComponent;\n        }\n    }\n\n    /**\n     * An accessor that returns the value of the index of the `IgxTabsGroupComponent`.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabIndex = this.tab.index;\n     * }\n     * ```\n     */\n    get index(): number {\n        if (this._tabs.groups) {\n            return this._tabs.groups.toArray().indexOf(this);\n        }\n        return -1;\n    }\n\n    /**\n     * @hidden\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n\n    /**\n     *@hidden\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewChecked() {\n        this._element.nativeElement.setAttribute('aria-labelledby', `igx-tab-item-${this.index}`);\n        this._element.nativeElement.setAttribute('id', `igx-tabs__group-${this.index}`);\n    }\n\n    /**\n     * A method that sets the focus on a tab.\n     * @memberof {@link IgxTabsGroupComponent}\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public tab : IgxTabsGroupComponent;\n     *ngAfterViewInit(){\n     *    this.tab.select();\n     *}\n     *```\n     */\n    public select(): void {\n        if (!this.disabled && !this.isSelected) {\n            this._tabs.performSelectionChange(this.relatedTab);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public setSelectedInternal(newValue: boolean) {\n        this._isSelected = newValue;\n    }\n\n}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Toast** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/toast.html)\n *\n * The Ignite UI Toast provides information and warning messages that are non-interactive and cannot\n * be dismissed by the user. Toasts can be displayed at the bottom, middle, or top of the page.\n *\n * Example:\n * ```html\n * <button (click)=\"toast.show()\">Show notification</button>\n * <igx-toast #toast\n *           message=\"Notification displayed\"\n *           displayTime=\"1000\">\n * </igx-toast>\n * ```\n */\n@Component({\n    animations: [\n        trigger('animate', [\n            state('show', style({\n                opacity: 1\n            })),\n            transition('* => show', animate('.20s ease')),\n            transition('show => *', animate('.40s ease-out'))\n        ])\n    ],\n    selector: 'igx-toast',\n    templateUrl: 'toast.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxToastComponent implements IToggleView, OnInit, OnDestroy {\n    private _isVisible = false;\n    /**\n     * Returns a list of available CSS classes.\n     * ```typescript\n     * let toastClasses =  this.toast.CSS_CLASSES;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public readonly CSS_CLASSES = {\n        IGX_TOAST_BOTTOM: 'igx-toast--bottom',\n        IGX_TOAST_MIDDLE: 'igx-toast--middle',\n        IGX_TOAST_TOP: 'igx-toast--top'\n    };\n\n    /**\n     * Sets/gets the `id` of the toast.\n     * If not set, the `id` will have value `\"igx-toast-0\"`.\n     * ```html\n     * <igx-toast id = \"my-first-toast\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastId = this.toast.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-toast-${NEXT_ID++}`;\n\n    /**\n     * Emits an event prior the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShowing) = \"onShowing($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShowing = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event when the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShown) = \"onShown($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShown = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event prior the toast is hidden.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHiding) = \"onHiding($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHiding = new EventEmitter<IgxToastComponent>();\n\n    /**\n     *  Emits an event when the toast is hidden.\n     *  Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHidden) = \"onHidden($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHidden = new EventEmitter<IgxToastComponent>();\n    /**\n     * Sets/gets the `role` attribute.\n     * If not set, `role` will have value `\"alert\"`.\n     * ```html\n     * <igx-toast [role] = \"'notify'\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastRole = this.toast.role;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public role = 'alert';\n    /**\n     * Sets/gets whether the toast will be hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-toast [autoHide] = \"false\"></igx-toast>\n     * ```\n     * ```typescript\n     * let autoHide = this.toast.autoHide;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time span(in milliseconds) which the toast will be visible\n     * after it is being shown.\n     * Default value is `4000`.\n     * ```html\n     * <igx-toast [displayTime] = \"2500\"></igx-toast>\n     * ```\n     * ```typescript\n     * let displayTime = this.toast.displayTime;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public displayTime = 4000;\n\n    /**\n     * Enables/Disables the visibility of the toast.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-toast [isVisible] = \"true\"></igx-toast>\n     * ```\n     * ```typescript\n     * let isVisible = this.toast.isVisible;\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-toast [(isVisible)] = \"model.isVisible\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public get isVisible() {\n        return this._isVisible;\n    }\n    public set isVisible(value) {\n        this._isVisible = value;\n        this.isVisibleChange.emit(this._isVisible);\n\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public isVisibleChange = new EventEmitter<boolean>();\n\n    /**\n     * Sets/gets the message that will be shown by the toast.\n     * ```html\n     * <igx-toast [message] = \"Notification\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastMessage = this.toast.message;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public message: string;\n\n    /**\n     * Sets/gets the position of the toast.\n     * If not set, the `position` attribute will have value `IgxToastPosition.Bottom`.\n     * ```html\n     * <igx-toast [position] = \"top\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastPosition = this.toast.position;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public position: IgxToastPosition = IgxToastPosition.Bottom;\n\n    /**\n     * Gets the nativeElement of the toast.\n     * ```typescript\n     * let nativeElement = this.toast.element;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService) { }\n\n    /**\n     * Shows the toast.\n     * If `autoHide` is enabled, the toast will hide after `displayTime` is over.\n     * ```typescript\n     * this.toast.show();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public show(): void {\n        clearInterval(this.timeoutId);\n        this.onShowing.emit(this);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n\n        this.onShown.emit(this);\n    }\n\n    /**\n     * Hides the toast.\n     * ```typescript\n     * this.toast.hide();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public hide(): void {\n        this.onHiding.emit(this);\n        this.isVisible = false;\n        this.onHidden.emit(this);\n\n        clearInterval(this.timeoutId);\n    }\n\n    /**\n     * Wraps @show() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public open() {\n        this.show();\n    }\n\n    /**\n     * Wraps @hide() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public close() {\n        this.hide();\n    }\n\n    /**\n     * Toggles the visible state of the toast.\n     * ```typescript\n     * this.toast.toggle();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public toggle() {\n        this.isVisible ? this.close() : this.open();\n    }\n    /**\n     * Sets/gets the class name of the toast based on the `position` value.\n     * ```typescript\n     * let className =  this.toast.mapPositionToClassName();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public mapPositionToClassName(): any {\n        if (this.position === IgxToastPosition.Top) {\n            return this.CSS_CLASSES.IGX_TOAST_TOP;\n        }\n\n        if (this.position === IgxToastPosition.Middle) {\n            return this.CSS_CLASSES.IGX_TOAST_MIDDLE;\n        }\n\n        if (this.position === IgxToastPosition.Bottom) {\n            return this.CSS_CLASSES.IGX_TOAST_BOTTOM;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n    }\n}\n\n/**\n * Enumeration for toast position\n * Can be:\n * Bottom\n * Middle\n * Top\n */\nexport enum IgxToastPosition {\n    Bottom,\n    Middle,\n    Top\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxToastComponent],\n    exports: [IgxToastComponent],\n    imports: [CommonModule]\n})\nexport class IgxToastModule { }\n","import { ElementRef } from '@angular/core';\nimport { InteractionMode } from '../core/enums';\n\n/** @hidden */\nexport const IGX_TIME_PICKER_COMPONENT = 'IgxTimePickerComponentToken';\n\n/** @hidden */\nexport interface IgxTimePickerBase {\n    hourList: ElementRef;\n    minuteList: ElementRef;\n    secondsList: ElementRef;\n    ampmList: ElementRef;\n    selectedHour: string;\n    selectedMinute: string;\n    selectedSeconds: string;\n    selectedAmPm: string;\n    format: string;\n    promptChar: string;\n    cleared: boolean;\n    mode: InteractionMode;\n    showHoursList: boolean;\n    showMinutesList: boolean;\n    showSecondsList: boolean;\n    showAmPmList: boolean;\n    nextHour();\n    prevHour();\n    nextMinute();\n    prevMinute();\n    nextSeconds();\n    prevSeconds();\n    nextAmPm();\n    prevAmPm();\n    okButtonClick(): boolean;\n    cancelButtonClick(): void;\n    scrollHourIntoView(item: string): void;\n    scrollMinuteIntoView(item: string): void;\n    scrollSecondsIntoView(item: string): void;\n    scrollAmPmIntoView(item: string): void;\n    close(): void;\n    parseMask(preserveAmPm?: boolean): string;\n}\n\n","/**\n * This file contains all the directives used by the @link IgxTimePickerComponent.\n * You should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    TemplateRef\n} from '@angular/core';\nimport { IGX_TIME_PICKER_COMPONENT, IgxTimePickerBase } from './time-picker.common';\nimport { InteractionMode } from '../core/enums';\n\n/** @hidden */\n@Directive({\n    selector: '[igxItemList]'\n})\nexport class IgxItemListDirective {\n\n    @Input('igxItemList')\n    public type: string;\n\n    public isActive: boolean;\n\n    constructor(\n        @Inject(IGX_TIME_PICKER_COMPONENT) public timePicker: IgxTimePickerBase,\n        private elementRef: ElementRef\n    ) { }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-time-picker__column')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__hourList')\n    get hourCSS(): boolean {\n        return this.type === 'hourList';\n    }\n\n    @HostBinding('class.igx-time-picker__minuteList')\n    get minuteCSS(): boolean {\n        return this.type === 'minuteList';\n    }\n\n    @HostBinding('class.igx-time-picker__secondsList')\n    get secondsCSS(): boolean {\n        return this.type === 'secondsList';\n    }\n\n    @HostBinding('class.igx-time-picker__ampmList')\n    get ampmCSS(): boolean {\n        return this.type === 'ampmList';\n    }\n\n    @HostListener('focus')\n    public onFocus() {\n        this.isActive = true;\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.isActive = false;\n    }\n\n    private nextItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.nextHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.nextMinute();\n                break;\n            }\n            case 'secondsList': {\n                this.timePicker.nextSeconds();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.nextAmPm();\n                break;\n            }\n        }\n    }\n\n    private prevItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.prevHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.prevMinute();\n                break;\n            }\n            case 'secondsList': {\n                this.timePicker.prevSeconds();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.prevAmPm();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.nextItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.prevItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('hourList') !== -1 && this.timePicker.minuteList) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if ((listName.indexOf('hourList') !== -1 || listName.indexOf('minuteList') !== -1) && this.timePicker.secondsList) {\n            this.timePicker.secondsList.nativeElement.focus();\n        } else if ((listName.indexOf('hourList') !== -1 || listName.indexOf('minuteList') !== -1 ||\n            listName.indexOf('secondsList') !== -1) && this.timePicker.ampmList) {\n            this.timePicker.ampmList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('ampmList') !== -1 && this.timePicker.secondsList) {\n            this.timePicker.secondsList.nativeElement.focus();\n        } else if (listName.indexOf('secondsList') !== -1 && this.timePicker.secondsList\n            && listName.indexOf('minutesList') && this.timePicker.minuteList) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if (listName.indexOf('ampmList') !== -1 && this.timePicker.minuteList) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if ((listName.indexOf('ampmList') !== -1 || listName.indexOf('secondsList') !== -1 ||\n            listName.indexOf('minuteList') !== -1) && this.timePicker.hourList) {\n            this.timePicker.hourList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.timePicker.mode === InteractionMode.DropDown) {\n            this.timePicker.close();\n            return;\n        }\n        this.timePicker.okButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.escape', ['$event'])\n    public onKeydownEscape(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.timePicker.cancelButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onHover() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('wheel', ['$event'])\n    public onScroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (event.deltaY > 0) {\n            this.nextItem();\n        } else if (event.deltaY < 0) {\n            this.prevItem();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('panmove', ['$event'])\n    public onPanMove(event) {\n        if (event.deltaY < 0) {\n            this.nextItem();\n        } else if (event.deltaY > 0) {\n            this.prevItem();\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHourItem]'\n})\nexport class IgxHourItemDirective {\n\n    @Input('igxHourItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedHour;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedHour && this.itemList.isActive;\n    }\n\n    get isSelectedHour(): boolean {\n        return this.timePicker.selectedHour === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollHourIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxMinuteItem]'\n})\nexport class IgxMinuteItemDirective {\n\n    @Input('igxMinuteItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedMinute;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedMinute && this.itemList.isActive;\n    }\n\n    get isSelectedMinute(): boolean {\n        return this.timePicker.selectedMinute === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollMinuteIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxSecondsItem]'\n})\nexport class IgxSecondsItemDirective {\n\n    @Input('igxSecondsItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedSeconds;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedSeconds && this.itemList.isActive;\n    }\n\n    get isSelectedSeconds(): boolean {\n        return this.timePicker.selectedSeconds === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollSecondsIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxAmPmItem]'\n})\nexport class IgxAmPmItemDirective {\n\n    @Input('igxAmPmItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedAmPm;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedAmPm && this.itemList.isActive;\n    }\n\n    get isSelectedAmPm(): boolean {\n        return this.timePicker.selectedAmPm === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollAmPmIntoView(item);\n        }\n    }\n}\n\n/**\n * This directive should be used to mark which ng-template will be used from IgxTimePicker when re-templating its input group.\n */\n@Directive({\n    selector: '[igxTimePickerTemplate]'\n})\nexport class IgxTimePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * This directive can be used to add custom action buttons to the dropdownb/dialog.\n */\n@Directive({\n    selector: '[igxTimePickerActions]'\n})\nexport class IgxTimePickerActionsDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Pipe, PipeTransform, Inject } from '@angular/core';\nimport { IGX_TIME_PICKER_COMPONENT, IgxTimePickerBase } from './time-picker.common';\n\n\n/**\n * Formats `IgxTimePickerComponent` display value according to the `format` property,\n * when the input element loses focus.\n **/\n@Pipe({ name: 'displayFormat' })\nexport class TimeDisplayFormatPipe implements PipeTransform {\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT) private timePicker: IgxTimePickerBase) { }\n\n    transform(value: any): string {\n        let hour, minutes, seconds, amPM;\n\n        const maskAmPM = this.timePicker.parseMask();\n        const mask = this.timePicker.parseMask(false);\n        if (!value || value === mask || value === maskAmPM) {\n            return '';\n        }\n\n        const sections = value.split(/[\\s:]+/);\n\n        if (this.timePicker.showHoursList) {\n            hour = sections[0];\n        }\n\n        if (this.timePicker.showMinutesList) {\n            minutes = this.timePicker.showHoursList ? sections[1] : sections[0];\n        }\n\n        if (this.timePicker.showSecondsList) {\n            seconds = sections[sections.length - (this.timePicker.showAmPmList ? 2 : 1)];\n        }\n\n        if (this.timePicker.showAmPmList) {\n            amPM = sections[sections.length - 1];\n        }\n\n        const format = this.timePicker.format;\n        const prompt = this.timePicker.promptChar;\n        const regExp = new RegExp(this.timePicker.promptChar, 'g');\n\n        if (format.indexOf('hh') !== -1 || format.indexOf('HH') !== -1 && hour.indexOf(prompt) !== -1) {\n            hour = hour === prompt + prompt ? '00' : hour.replace(regExp, '0');\n        }\n\n        if (format.indexOf('mm') !== -1 && minutes.indexOf(prompt) !== -1) {\n            minutes = minutes === prompt + prompt ? '00' : minutes.replace(regExp, '0');\n        }\n\n        if (format.indexOf('ss') !== -1 && seconds.indexOf(prompt) !== -1) {\n            seconds = seconds === prompt + prompt ? '00' : seconds.replace(regExp, '0');\n        }\n\n        if (format.indexOf('hh') === -1 && format.indexOf('HH') === -1 && hour !== undefined) {\n            hour = hour.indexOf(prompt) !== -1 ? hour.replace(regExp, '') : hour;\n            const hourVal = parseInt(hour, 10);\n            hour = !hourVal ? '0' : hourVal < 10 && hourVal !== 0 ? hour.replace('0', '') : hour;\n        }\n\n        if (format.indexOf('mm') === -1 && minutes !== undefined) {\n            minutes = minutes.indexOf(prompt) !== -1 ? minutes.replace(regExp, '') : minutes;\n            const minutesVal = parseInt(minutes, 10);\n            minutes = !minutesVal ? '0' : minutesVal < 10 && minutesVal !== 0 ? minutes.replace('0', '') : minutes;\n        }\n\n        if (format.indexOf('ss') === -1 && seconds !== undefined) {\n            seconds = seconds.indexOf(prompt) !== -1 ? seconds.replace(regExp, '') : seconds;\n            const secondsVal = parseInt(seconds, 10);\n            seconds = !secondsVal ? '0' : secondsVal < 10 && secondsVal !== 0 ? seconds.replace('0', '') : seconds;\n        }\n\n        if (format.indexOf('tt') !== -1 && (amPM !== 'AM' || amPM !== 'PM')) {\n            amPM = amPM.indexOf('p') !== -1 || amPM.indexOf('P') !== -1 ? 'PM' : 'AM';\n        }\n\n        let result = `${hour}:${minutes}:${seconds}`;\n        if (!hour) {\n            // remove the hours\n            result = result.slice(result.indexOf(':') + 1);\n        }\n        if (!minutes) {\n            if (hour) {\n                // get the hours and seconds and concat them\n                result = result.slice(0, result.indexOf(':')) +\n                    result.slice(result.lastIndexOf(':'), result.length);\n            } else {\n                // remove the minutes\n                result = result.slice(result.indexOf(':') + 1);\n            }\n        }\n        if (!seconds) {\n            // remove the seconds\n            result = result.slice(0, result.lastIndexOf(':'));\n        }\n\n        return amPM ? `${result} ${amPM}` : result;\n    }\n}\n\n/**\n * Formats `IgxTimePickerComponent` display value according to the `format` property,\n * when the input element gets focus.\n **/\n@Pipe({ name: 'inputFormat' })\nexport class TimeInputFormatPipe implements PipeTransform {\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT) private timePicker: IgxTimePickerBase) { }\n\n    transform(value: any): string {\n        const prompt = this.timePicker.promptChar;\n        const regExp = new RegExp(prompt, 'g');\n\n        let mask, hour, minutes, seconds, amPM;\n\n        if (this.timePicker.cleared) {\n            this.timePicker.cleared = false;\n            mask = this.timePicker.parseMask(false);\n        } else {\n            mask = this.timePicker.parseMask();\n        }\n\n        if (!value || value === mask) {\n            return mask;\n        }\n\n        const sections = value.split(/[\\s:]+/);\n\n        if (this.timePicker.showHoursList) {\n            hour = sections[0];\n            hour = hour.replace(regExp, '');\n\n            const leadZeroHour = (parseInt(hour, 10) < 10 && !hour.startsWith('0')) || hour === '0';\n            hour = leadZeroHour ? '0' + hour : hour;\n        }\n\n        if (this.timePicker.showMinutesList) {\n            minutes = this.timePicker.showHoursList ? sections[1] : sections[0];\n            minutes = minutes.replace(regExp, '');\n\n            const leadZeroMinutes = (parseInt(minutes, 10) < 10 && !minutes.startsWith('0')) || minutes === '0';\n            minutes = leadZeroMinutes ? '0' + minutes : minutes;\n        }\n\n        if (this.timePicker.showSecondsList) {\n            seconds = sections[sections.length - (this.timePicker.showAmPmList ? 2 : 1)];\n            seconds = seconds.replace(regExp, '');\n\n            const leadZeroSeconds = (parseInt(seconds, 10) < 10 && !seconds.startsWith('0')) || seconds === '0';\n            seconds = leadZeroSeconds ? '0' + seconds : seconds;\n        }\n\n        if (this.timePicker.showAmPmList) {\n            amPM = sections[sections.length - 1];\n        }\n\n        let result = `${hour}:${minutes}:${seconds}`;\n        if (!hour) {\n            // remove the hours\n            result = result.slice(result.indexOf(':') + 1);\n        }\n        if (!minutes) {\n            if (hour) {\n                // get the hours and seconds and concat them\n                result = result.slice(0, result.indexOf(':')) +\n                    result.slice(result.lastIndexOf(':'), result.length);\n            } else {\n                // remove the minutes\n                result = result.slice(result.indexOf(':') + 1);\n            }\n        }\n        if (!seconds) {\n            // remove the seconds\n            result = result.slice(0, result.lastIndexOf(':'));\n        }\n\n        return amPM ? `${result} ${amPM}` : result;\n    }\n}\n","import {\n    CommonModule\n} from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ContentChild,\n    Injectable,\n    AfterViewInit,\n    Injector,\n    ChangeDetectorRef,\n    AfterViewChecked\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl, AbstractControl } from '@angular/forms';\nimport { HAMMER_GESTURE_CONFIG, HammerGestureConfig } from '@angular/platform-browser';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule, IgxInputGroupComponent } from '../input-group/input-group.component';\nimport { IgxInputDirective, IgxInputState } from '../directives/input/input.directive';\nimport {\n    IgxAmPmItemDirective,\n    IgxHourItemDirective,\n    IgxMinuteItemDirective,\n    IgxSecondsItemDirective,\n    IgxItemListDirective,\n    IgxTimePickerTemplateDirective,\n    IgxTimePickerActionsDirective\n} from './time-picker.directives';\nimport { Subject, fromEvent, interval, animationFrameScheduler, Subscription } from 'rxjs';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxTimePickerBase, IGX_TIME_PICKER_COMPONENT } from './time-picker.common';\nimport { AbsoluteScrollStrategy } from '../services/overlay/scroll';\nimport { AutoPositionStrategy } from '../services/overlay/position';\nimport { OverlaySettings } from '../services/overlay/utilities';\nimport { takeUntil, throttle } from 'rxjs/operators';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxMaskModule } from '../directives/mask/mask.directive';\nimport { IgxOverlayOutletDirective, IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { TimeDisplayFormatPipe, TimeInputFormatPipe } from './time-picker.pipes';\nimport { ITimePickerResourceStrings } from '../core/i18n/time-picker-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { KEYS, CancelableBrowserEventArgs, IBaseEventArgs } from '../core/utils';\nimport { InteractionMode } from '../core/enums';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\nlet NEXT_ID = 0;\nconst ITEMS_COUNT = 7;\n\n@Injectable()\nexport class TimePickerHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\nexport interface IgxTimePickerValueChangedEventArgs extends IBaseEventArgs {\n    oldValue: Date;\n    newValue: Date;\n}\n\nexport interface IgxTimePickerValidationFailedEventArgs extends IBaseEventArgs {\n    timePicker: IgxTimePickerComponent;\n    currentValue: Date;\n    setThroughUI: boolean;\n}\n\nconst noop = () => { };\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxTimePickerComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: TimePickerHammerConfig\n        },\n        {\n            provide: IGX_TIME_PICKER_COMPONENT,\n            useExisting: IgxTimePickerComponent\n        }\n    ],\n    selector: 'igx-time-picker',\n    templateUrl: 'time-picker.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ]\n})\nexport class IgxTimePickerComponent implements\n    IgxTimePickerBase,\n    ControlValueAccessor,\n    EditorProvider,\n    OnInit,\n    OnDestroy,\n    AfterViewInit,\n    AfterViewChecked {\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * ```html\n     * <igx-time-picker [id]=\"'igx-time-picker-5'\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-time-picker-${NEXT_ID++}`;\n\n    /**\n     * An accessor that allows you to set a time using the `value` input.\n     * ```html\n     *public date: Date = new Date(Date.now());\n     *  //...\n     *<igx-time-picker [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set value(value: Date) {\n        if (this._isValueValid(value)) {\n            const oldVal = this._value;\n\n            this._value = value;\n            this._onChangeCallback(value);\n\n            const dispVal = this._formatTime(this.value, this.format);\n            if (this.mode === InteractionMode.DropDown && this._displayValue !== dispVal) {\n                this.displayValue = dispVal;\n            }\n\n            const args: IgxTimePickerValueChangedEventArgs = {\n                oldValue: oldVal,\n                newValue: value\n            };\n            this.onValueChanged.emit(args);\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: value,\n                setThroughUI: false\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n\n    /**\n     * An accessor that returns the value of `igx-time-picker` component.\n     * ```html\n     *@ViewChild(\"MyPick\")\n     *public pick: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let pickSelect = this.pick.value;\n     * }\n     * ```\n     */\n    get value(): Date {\n        return this._value;\n    }\n\n    /**\n     * An @Input property that allows you to disable the `igx-time-picker` component. By default `disabled` is set to false.\n     * ```html\n     * <igx-time-picker [disabled]=\"'true'\" [vertical]=\"true\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n    */\n    @Input()\n    set resourceStrings(value: ITimePickerResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n    */\n    get resourceStrings(): ITimePickerResourceStrings {\n        return this._resourceStrings;\n    }\n\n    /**\n     * An @Input property that renders OK button with custom text. By default `okButtonLabel` is set to OK.\n     * ```html\n     * <igx-time-picker okButtonLabel='SET' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set okButtonLabel(value: string) {\n        this._okButtonLabel = value;\n    }\n\n    /**\n     * An accessor that returns the label of ok button.\n    */\n    get okButtonLabel(): string {\n        if (this._okButtonLabel === null) {\n            return this.resourceStrings.igx_time_picker_ok;\n        }\n        return this._okButtonLabel;\n    }\n\n    /**\n     * An @Input property that renders cancel button with custom text.\n     * By default `cancelButtonLabel` is set to Cancel.\n     * ```html\n     * <igx-time-picker cancelButtonLabel='Exit' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set cancelButtonLabel(value: string) {\n        this._cancelButtonLabel = value;\n    }\n\n    /**\n    * An accessor that returns the label of cancel button.\n    */\n    get cancelButtonLabel(): string {\n        if (this._cancelButtonLabel === null) {\n            return this.resourceStrings.igx_time_picker_cancel;\n        }\n        return this._cancelButtonLabel;\n    }\n\n    /**\n     * An @Input property that gets/sets the delta by which hour and minute items would be changed <br>\n     * when the user presses the Up/Down keys.\n     * By default `itemsDelta` is set to `{hours: 1, minutes: 1, seconds: 1}`\n     * ```html\n     *<igx-time-picker [itemsDelta]=\"{hours:3, minutes:5, seconds:10}\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    set itemsDelta(value) {\n        this._itemsDelta = { hours: 1, minutes: 1, seconds: 1, ...value };\n    }\n\n    get itemsDelta(): { hours: number, minutes: number, seconds: number } {\n        return this._itemsDelta;\n    }\n\n    /**\n     * An @Input property that allows you to set the `minValue` to limit the user input.\n     *```html\n     *public min: string = \"09:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [minValue]=\"min\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public minValue: string;\n\n    /**\n     * An @Input property that allows you to set the `maxValue` to limit the user input.\n     *```html\n     *public max: string = \"18:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [maxValue]=\"max\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public maxValue: string;\n\n    /**\n     * An @Input property that determines the spin behavior. By default `isSpinLoop` is set to true.\n     * The seconds, minutes and hour spinning will wrap around by default.\n     *```html\n     *<igx-time-picker [isSpinLoop]=\"false\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n     * An @Input property that Gets/Sets the orientation of the `igxTimePicker`. By default `vertical` is set to false.\n     * ```html\n     *<igx-time-picker [vertical]=\"true\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that Gets/Sets format of time while `igxTimePicker` does not have focus. <br>\n     * By default `format` is set to hh:mm tt. <br>\n     * List of time-flags: <br>\n     * `h` : hours field in 12-hours format without leading zero <br>\n     * `hh` : hours field in 12-hours format with leading zero <br>\n     * `H` : hours field in 24-hours format without leading zero <br>\n     * `HH` : hours field in 24-hours format with leading zero <br>\n     * `m` : minutes field without leading zero <br>\n     * `mm` : minutes field with leading zero <br>\n     * `s` : seconds field without leading zero <br>\n     * `ss` : seconds field with leading zero <br>\n     * `tt` : 2 character string which represents AM/PM field <br>\n     * ```html\n     *<igx-time-picker format=\"HH:m\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    get format() {\n        return this._format || 'hh:mm tt';\n    }\n\n    set format(formatValue: string) {\n        this._format = formatValue;\n        this.mask = this._format.indexOf('tt') !== -1 ? '00:00:00 LL' : '00:00:00';\n\n        if (!this.showHoursList || !this.showMinutesList) {\n            this.trimMask();\n        }\n\n        if (!this.showSecondsList) {\n            this.trimMask();\n        }\n\n        if (this.displayValue) {\n            this.displayValue = this._formatTime(this.value, this._format);\n        }\n\n        this.determineCursorPos();\n    }\n\n    /**\n     * Sets the character used to prompt the user for input.\n     * Default value is \"'-'\".\n     * ```html\n     * <igx-time-picker [promptChar] = \"'_'\">\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public promptChar = '-';\n\n    /**\n     * An @Input property that allows you to switch the interaction mode between\n     * a dialog picker or dropdown with editable masked input.\n     * Deafult is dialog picker.\n     *```html\n     *public mode = InteractionMode.DROPDOWN;\n     *  //..\n     *<igx-time-picker [mode]=\"mode\"></igx-time-picker>\n     *```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public mode = InteractionMode.Dialog;\n\n    /**\n     * Determines the container the popup element should be attached to.\n     *\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * //..\n     * <igx-time-picker [outlet]=\"outlet\"></igx-time-picker>\n     * //..\n     * ```\n     * Where `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.\n     */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n    * An @Input property that allows you to modify overlay positioning, interaction and scroll behavior.\n    * ```typescript\n    * const settings: OverlaySettings = {\n    *      closeOnOutsideClick: true,\n    *      modal: false\n    *  }\n    * ```\n    * ---\n    * ```html\n    * <igx-time-picker [overlaySettings]=\"settings\"></igx-time-picker>\n    * ```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public set overlaySettings(value: OverlaySettings) {\n        this._overlaySettings = value;\n    }\n\n    public get overlaySettings(): OverlaySettings {\n        return this._overlaySettings ? this._overlaySettings :\n            (this.mode === InteractionMode.Dialog ? this._dialogOverlaySettings : this._dropDownOverlaySettings);\n    }\n\n    /**\n     * Emitted when selection is made. The event contains the selected value. Returns {`oldValue`: `Date`, `newValue`: `Date`}.\n     *```typescript\n     * @ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValueChanged(timepicker){\n     *    this.toast.show()\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker (onValueChanged)=\"onValueChanged($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The value has been changed!\"></igx-toast>\n     *```\n     */\n    @Output()\n    public onValueChanged = new EventEmitter<IgxTimePickerValueChangedEventArgs>();\n\n    /**\n     * Emitted when an invalid value is being set. Returns {`timePicker`: `any`, `currentValue`: `Date`, `setThroughUI`: `boolean`}\n     * ```typescript\n     *public min: string = \"09:00\";\n     *public max: string = \"18:00\";\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValidationFailed(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onValidationFailed)=\"onValidationFailed($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"Value must be between 09:00 and 18:00!\"></igx-toast>\n     * ```\n     */\n    @Output()\n    public onValidationFailed = new EventEmitter<IgxTimePickerValidationFailedEventArgs>();\n\n    /**\n     * @deprecated Use 'onOpened' instead.\n     * Emitted when a timePicker is being opened.\n     * ```html\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onOpen(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onOpen)=\"onOpen($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The time picker has been opened!\"></igx-toast>\n     * ```\n     */\n    @DeprecateProperty(`'onOpen' @Output property is deprecated. Use 'onOpened' instead.`)\n    @Output()\n    public get onOpen(): EventEmitter<IgxTimePickerComponent> {\n        return this._onOpen;\n    }\n\n    public set onOpen(val: EventEmitter<IgxTimePickerComponent>) {\n        this._onOpen = val;\n    }\n\n    /**\n     * Emitted when a timePicker is opened.\n     */\n    @Output()\n    public onOpened = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * @deprecated Use 'onClosed' instead.\n     * Emitted when a timePicker is being closed.\n     */\n    @DeprecateProperty(`'onClose' @Output property is deprecated. Use 'onClosed' instead.`)\n    @Output()\n    public get onClose(): EventEmitter<IgxTimePickerComponent> {\n        return this._onClose;\n    }\n\n    public set onClose(val: EventEmitter<IgxTimePickerComponent>) {\n        this._onClose = val;\n    }\n\n    /**\n     * Emitted when a timePicker is closed.\n     */\n    @Output()\n    public onClosed = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * Emitted when a timePicker is being closed.\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('hourList')\n    public hourList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('minuteList')\n    public minuteList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('secondsList')\n    public secondsList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('ampmList')\n    public ampmList: ElementRef;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('defaultTimePickerTemplate', { read: TemplateRef, static: true })\n    protected defaultTimePickerTemplate: TemplateRef<any>;\n\n    @ViewChild('dropdownInputTemplate', { read: TemplateRef, static: true })\n    private dropdownInputTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTimePickerTemplateDirective, { read: IgxTimePickerTemplateDirective })\n    protected timePickerTemplateDirective: IgxTimePickerTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTimePickerActionsDirective, { read: IgxTimePickerActionsDirective })\n    public timePickerActionsDirective: IgxTimePickerActionsDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxToggleDirective, { static: true })\n    public toggleRef: IgxToggleDirective;\n\n    @ViewChild(IgxInputDirective, { read: ElementRef })\n    private _inputElementRef: ElementRef;\n\n    @ViewChild(IgxInputDirective, { read: IgxInputDirective})\n    private _inputDirective: IgxInputDirective;\n\n    @ContentChild(IgxInputDirective, { read: IgxInputDirective})\n    private _inputDirectiveUserTemplate: IgxInputDirective;\n\n    @ViewChild(IgxInputGroupComponent, { read: IgxInputGroupComponent })\n    private _inputGroup: IgxInputGroupComponent;\n\n    private _overlaySettings: OverlaySettings;\n\n    /**\n     * @hidden\n     */\n    public _hourItems = [];\n\n    /**\n     * @hidden\n     */\n    public _minuteItems = [];\n\n    /**\n     * @hidden\n     */\n    public _secondsItems = [];\n\n    /**\n     * @hidden\n     */\n    public _ampmItems = [];\n\n    /**\n     * @hidden\n    */\n    public cleared = false;\n\n    /**\n     * @hidden\n    */\n    public isNotEmpty = false;\n\n    /**\n     * @hidden\n    */\n    public displayFormat = new TimeDisplayFormatPipe(this);\n\n    /**\n     * @hidden\n    */\n    public inputFormat = new TimeInputFormatPipe(this);\n\n    /**\n     * @hidden\n     */\n    public selectedHour: string;\n\n    /**\n     * @hidden\n     */\n    public selectedMinute: string;\n\n    /**\n     * @hidden\n     */\n    public selectedSeconds: string;\n\n    /**\n     * @hidden\n     */\n    public selectedAmPm: string;\n\n    /** @hidden @internal */\n    private _value: Date;\n    private _resourceStrings = CurrentResourceStrings.TimePickerResStrings;\n    private _okButtonLabel = null;\n    private _cancelButtonLabel = null;\n    private _format: string;\n    private _mask: string;\n    private _displayValue: string;\n    private _itemsDelta: { hours: number, minutes: number, seconds: number } = { hours: 1, minutes: 1, seconds: 1 };\n\n    private _isHourListLoop = this.isSpinLoop;\n    private _isMinuteListLoop = this.isSpinLoop;\n    private _isSecondsListLoop = this.isSpinLoop;\n\n    private _hourView = [];\n    private _minuteView = [];\n    private _secondsView = [];\n    private _ampmView = [];\n\n    private _dateFromModel: Date;\n    private _destroy$ = new Subject<boolean>();\n    private _statusChanges$: Subscription;\n    private _dropDownOverlaySettings: OverlaySettings;\n    private _dialogOverlaySettings: OverlaySettings;\n\n    private _prevSelectedHour: string;\n    private _prevSelectedMinute: string;\n    private _prevSelectedSeconds: string;\n    private _prevSelectedAmPm: string;\n\n    private _onOpen = new EventEmitter<IgxTimePickerComponent>();\n    private _onClose = new EventEmitter<IgxTimePickerComponent>();\n\n    private _hoursPos = new Set();\n    private _minutesPos = new Set();\n    private _secondsPos = new Set();\n    private _amPmPos = new Set();\n    private _ngControl: NgControl = null;\n\n    //#region ControlValueAccessor\n\n    private _onChangeCallback: (_: Date) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n\n    /** @hidden @internal */\n    public writeValue(value: Date) {\n        // use this flag to make sure that min/maxValue are checked (in _convertMinMaxValue() method)\n        // against the real value when initializing the component and value is bound via ngModel\n        this._dateFromModel = value;\n\n        this._value = value;\n\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this.value, this.format);\n        }\n    }\n\n    /** @hidden @internal */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /** @hidden @internal */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden @internal */\n    public setDisabledState(isDisabled: boolean): void { this.disabled = isDisabled; }\n\n    //#endregion\n\n    private trimMask(): void {\n        this.mask = this.mask.slice(this.mask.indexOf(':') + 1, this.mask.length);\n    }\n\n    /**\n     * @hidden\n    */\n    get mask(): string {\n        return this._mask || '00:00 LL';\n    }\n\n    set mask(val: string) {\n        this._mask = val;\n    }\n\n    /**\n     * @hidden\n     */\n    get displayValue(): string {\n        if (this._displayValue === undefined) {\n            return this._formatTime(this.value, this.format);\n        }\n        return this._displayValue;\n    }\n\n    set displayValue(value: string) {\n        this._displayValue = value;\n    }\n\n    /**\n     * Returns the current time formatted as string using the `format` option.\n     * If there is no set time the return is an empty string.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let time = this.picker.displayTime;\n     *}\n     *```\n     */\n    public get displayTime(): string {\n        if (this.value) {\n            return this._formatTime(this.value, this.format);\n        }\n        return '';\n    }\n\n    /**\n     * @hidden\n     */\n    get hourView(): string[] {\n        return this._hourView;\n    }\n\n    /**\n     * @hidden\n     */\n    get minuteView(): string[] {\n        return this._minuteView;\n    }\n\n    /**\n     * @hidden\n     */\n    get secondsView(): string[] {\n        return this._secondsView;\n    }\n\n    /**\n     * @hidden\n     */\n    get ampmView(): string[] {\n        return this._ampmView;\n    }\n\n    /**\n     * @hidden\n     */\n    get showClearButton(): boolean {\n        return (this.displayValue && this.displayValue !== this.parseMask(false)) || this.isNotEmpty;\n    }\n\n    /**\n     * @hidden\n     */\n    get showHoursList(): boolean {\n        return this.format.indexOf('h') !== - 1 || this.format.indexOf('H') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get showMinutesList(): boolean {\n        return this.format.indexOf('m') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get showSecondsList(): boolean {\n        return this.format.indexOf('s') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get showAmPmList(): boolean {\n        return this.format.indexOf('t') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get validSecondsEntries(): any[] {\n        const secondsEntries = [];\n        for (let i = 0; i < 60; i++) {\n            secondsEntries.push(i);\n        }\n        return secondsEntries;\n    }\n\n    /**\n     * @hidden\n     */\n    get validMinuteEntries(): any[] {\n        const minuteEntries = [];\n        for (let i = 0; i < 60; i++) {\n            minuteEntries.push(i);\n        }\n        return minuteEntries;\n    }\n\n    /**\n     * @hidden\n     */\n    get validHourEntries(): any[] {\n        const hourEntries = [];\n        const index = this.format.indexOf('h') !== -1 ? 13 : 24;\n        for (let i = 0; i < index; i++) {\n            hourEntries.push(i);\n        }\n        return hourEntries;\n    }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.timePickerTemplateDirective) {\n            return this.timePickerTemplateDirective.template;\n        }\n        return this.mode === InteractionMode.Dialog ? this.defaultTimePickerTemplate : this.dropdownInputTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxTimePickerComponent\n     */\n    get context() {\n        return {\n            value: this.value,\n            displayTime: this.displayTime,\n            displayValue: this.displayValue,\n            openDialog: (target?: HTMLElement) => this.openDialog(target)\n        };\n    }\n\n    private get required(): boolean {\n        if (this._ngControl && this._ngControl.control && this._ngControl.control.validator) {\n            // Run the validation with empty object to check if required is enabled.\n            const error = this._ngControl.control.validator({} as AbstractControl);\n            return error && error.required;\n        }\n\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        this._generateHours();\n        this._generateMinutes();\n        this._generateSeconds();\n        if (this.format.indexOf('tt') !== -1) {\n            this._generateAmPm();\n        }\n\n        this._dropDownOverlaySettings = {\n            modal: false,\n            closeOnOutsideClick: true,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy()\n        };\n        this._dialogOverlaySettings = {};\n        this._ngControl = this._injector.get<NgControl>(NgControl, null);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit(): void {\n        if (this.mode === InteractionMode.DropDown && this._inputElementRef) {\n            fromEvent(this._inputElementRef.nativeElement, 'keydown').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy$)\n            ).subscribe((event: KeyboardEvent) => {\n                if (event.key === KEYS.UP_ARROW || event.key === KEYS.UP_ARROW_IE ||\n                    event.key === KEYS.DOWN_ARROW || event.key === KEYS.DOWN_ARROW_IE) {\n                    this.spinOnEdit(event);\n                }\n            });\n        }\n\n        if (this.toggleRef && this._inputGroup) {\n            this.toggleRef.element.style.width = this._inputGroup.element.nativeElement.getBoundingClientRect().width + 'px';\n        }\n\n        if (this.toggleRef) {\n            this.toggleRef.onClosed.pipe(takeUntil(this._destroy$)).subscribe(() => {\n                if (this.mode === InteractionMode.DropDown) {\n                    this._onDropDownClosed();\n                }\n\n                this.onClosed.emit(this);\n\n                // TODO: remove this line after deprecating 'onClose'\n                this._onClose.emit(this);\n            });\n\n            this.toggleRef.onOpened.pipe(takeUntil(this._destroy$)).subscribe(() => {\n                this.onOpened.emit(this);\n\n                // TODO: remove this line after deprecating 'onOpen'\n                this._onOpen.emit(this);\n            });\n\n            this.toggleRef.onClosing.pipe(takeUntil(this._destroy$)).subscribe((event) => {\n                this.onClosing.emit(event);\n                // If canceled in a user onClosing handler\n                if (event.cancel) {\n                    return;\n                }\n                // Do not focus the input if clicking outside in dropdown mode\n                const input = this.getEditElement();\n                if (input && !(event.event && this.mode === InteractionMode.DropDown)) {\n                    input.focus();\n                } else {\n                    this._updateValidityOnBlur();\n                }\n            });\n\n            this.determineCursorPos();\n\n            if (this._ngControl) {\n                this._statusChanges$ = this._ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n            }\n        }\n    }\n\n    public ngAfterViewChecked() {\n        // if one sets mode at run time this forces initialization of new igxInputGroup\n        // As a result a new igxInputDirective is initialized too. In ngAfterViewInit of\n        // the new directive isRequired of the igxInputGroup is set again. However\n        // ngAfterViewInit of the time picker is not called again and we may finish with wrong\n        // isRequired in igxInputGroup. This is why we should set it her, only when needed\n        if (this._inputGroup && this._inputGroup.isRequired !== this.required) {\n            this._inputGroup.isRequired = this.required;\n            this._cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onKeydownSpace(event) {\n        this.openDialog(this.getInputGroupElement());\n        event.preventDefault();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.Alt.ArrowDown')\n    public onAltArrowDown() {\n        this.openDialog(this.getInputGroupElement());\n    }\n\n    constructor(\n        private _injector: Injector,\n        private _cdr: ChangeDetectorRef) { }\n\n    private determineCursorPos(): void {\n        this.clearCursorPos();\n        for (const char of this.format) {\n            switch (char) {\n                case 'H':\n                case 'h':\n                    this._hoursPos.size === 0 ? this._hoursPos.add(this.format.indexOf(char)) :\n                        this._hoursPos.add(this.format.lastIndexOf(char));\n                    this._hoursPos.add(this.format.lastIndexOf(char) + 1);\n                    break;\n                case 'M':\n                case 'm':\n                    this._minutesPos.size === 0 ? this._minutesPos.add(this.format.indexOf(char)) :\n                        this._minutesPos.add(this.format.lastIndexOf(char));\n                    this._minutesPos.add(this.format.lastIndexOf(char) + 1);\n                    break;\n                case 'S':\n                case 's':\n                    this._secondsPos.size === 0 ? this._secondsPos.add(this.format.indexOf(char)) :\n                        this._secondsPos.add(this.format.lastIndexOf(char));\n                    this._secondsPos.add(this.format.lastIndexOf(char) + 1);\n                    break;\n                case 'T':\n                case 't':\n                    this._amPmPos.size === 0 ? this._amPmPos.add(this.format.indexOf(char)) :\n                        this._amPmPos.add(this.format.lastIndexOf(char));\n                    this._amPmPos.add(this.format.lastIndexOf(char) + 1);\n                    break;\n            }\n        }\n    }\n\n    private clearCursorPos() {\n        this._hoursPos.forEach(v => this._hoursPos.delete(v));\n        this._minutesPos.forEach(v => this._minutesPos.delete(v));\n        this._secondsPos.forEach(v => this._secondsPos.delete(v));\n        this._amPmPos.forEach(v => this._amPmPos.delete(v));\n    }\n\n    private _scrollItemIntoView(item: string, items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        let itemIntoView;\n        if (items) {\n            const index = (item === 'AM' || item === 'PM') ? items.indexOf(item) : items.indexOf(parseInt(item, 10));\n            let view;\n\n            if (index !== -1) {\n                if (isListLoop) {\n                    if (index > 0) {\n                        selectedItem = this._itemToString(items[index - 1], viewType);\n                        itemIntoView = this._nextItem(items, selectedItem, isListLoop, viewType);\n                    } else {\n                        selectedItem = this._itemToString(items[1], viewType);\n                        itemIntoView = this._prevItem(items, selectedItem, isListLoop, viewType);\n                    }\n                } else {\n                    view = items.slice(index - 3, index + 4);\n                    selectedItem = this._itemToString(items[index], viewType);\n                    itemIntoView = { selectedItem, view };\n                }\n                itemIntoView.view = this._viewToString(itemIntoView.view, viewType);\n            }\n        }\n        return itemIntoView;\n    }\n\n    private _viewToString(view: any, viewType: string): any {\n        for (let i = 0; i < view.length; i++) {\n            if (typeof (view[i]) !== 'string') {\n                view[i] = this._itemToString(view[i], viewType);\n            }\n        }\n        return view;\n    }\n\n    private _itemToString(item: any, viewType: string): string {\n        if (item === null) {\n            item = '';\n        } else if (viewType && typeof (item) !== 'string') {\n            const leadZeroHour = (item < 10 && (this.format.indexOf('hh') !== -1 || this.format.indexOf('HH') !== -1));\n            const leadZeroMinute = (item < 10 && this.format.indexOf('mm') !== -1);\n            const leadZeroSeconds = (item < 10 && this.format.indexOf('ss') !== -1);\n\n            const leadZero = {\n                hour: leadZeroHour,\n                minute: leadZeroMinute,\n                seconds: leadZeroSeconds\n            }[viewType];\n\n            item = (leadZero) ? '0' + item : `${item}`;\n        }\n        return item;\n    }\n\n    private _prevItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex - 4 < 0) {\n                view = items.slice(itemsCount - (4 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3));\n            } else if (selectedIndex + 4 > itemsCount) {\n                view = items.slice(selectedIndex - 4, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            }\n\n            selectedItem = (selectedIndex === 0) ? items[itemsCount - 1] : items[selectedIndex - 1];\n        } else if (selectedIndex > 3) {\n            view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            selectedItem = items[selectedIndex - 1];\n        } else if (selectedIndex === 3) {\n            view = items.slice(0, 7);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _nextItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex < 2) {\n                view = items.slice(itemsCount - (2 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5));\n            } else if (selectedIndex + 4 >= itemsCount) {\n                view = items.slice(selectedIndex - 2, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            }\n\n            selectedItem = (selectedIndex === itemsCount - 1) ? items[0] : items[selectedIndex + 1];\n        } else if (selectedIndex + 1 < itemsCount - 3) {\n            view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            selectedItem = items[selectedIndex + 1];\n        } else if (selectedIndex === itemsCount - 4) {\n            view = items.slice(selectedIndex - 3, itemsCount);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _formatTime(value: Date, format: string): string {\n        if (!value) {\n            return '';\n        } else {\n            let hour = value.getHours();\n            let formattedSeconds, formattedMinute, formattedHour;\n\n            const minute = value.getMinutes();\n            const seconds = value.getSeconds();\n            const amPM = (hour > 11) ? 'PM' : 'AM';\n\n            if (format.indexOf('h') !== -1) {\n                if (hour > 12) {\n                    hour -= 12;\n                    formattedHour = hour < 10 && format.indexOf('hh') !== -1 ? '0' + hour : `${hour}`;\n                } else if (hour === 0) {\n                    formattedHour = '12';\n                } else if (hour < 10 && format.indexOf('hh') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            } else {\n                if (hour < 10 && format.indexOf('HH') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            }\n\n            formattedMinute = minute < 10 && format.indexOf('mm') !== -1 ? '0' + minute : `${minute}`;\n\n            formattedSeconds = seconds < 10 && format.indexOf('ss') !== -1 ? '0' + seconds : `${seconds}`;\n\n            return format.replace('hh', formattedHour).replace('h', formattedHour)\n                .replace('HH', formattedHour).replace('H', formattedHour)\n                .replace('mm', formattedMinute).replace('m', formattedMinute)\n                .replace('ss', formattedSeconds).replace('s', formattedSeconds)\n                .replace('tt', amPM);\n        }\n    }\n\n    private _updateHourView(start: any, end: any): void {\n        this._hourView = this._viewToString(this._hourItems.slice(start, end), 'hour');\n    }\n\n    private _updateMinuteView(start: any, end: any): void {\n        this._minuteView = this._viewToString(this._minuteItems.slice(start, end), 'minute');\n    }\n\n    private _updateSecondsView(start: any, end: any): void {\n        this._secondsView = this._viewToString(this._secondsItems.slice(start, end), 'seconds');\n    }\n\n    private _updateAmPmView(start: any, end: any): void {\n        this._ampmView = this._ampmItems.slice(start, end);\n    }\n\n    private _addEmptyItems(items: string[]): void {\n        for (let i = 0; i < 3; i++) {\n            items.push(null);\n        }\n    }\n\n    private _generateHours(): void {\n        let hourItemsCount = 24;\n        if (this.format.indexOf('h') !== -1) {\n            hourItemsCount = 13;\n        }\n\n        hourItemsCount /= this.itemsDelta.hours;\n\n        let i = this.format.indexOf('H') !== -1 ? 0 : 1;\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n            this._isHourListLoop = false;\n        }\n\n        if (hourItemsCount > 1) {\n            for (i; i < hourItemsCount; i++) {\n                this._hourItems.push(i * this.itemsDelta.hours);\n            }\n        } else {\n            this._hourItems.push(0);\n        }\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n        }\n    }\n\n    private _generateMinutes(): void {\n        const minuteItemsCount = 60 / this.itemsDelta.minutes;\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n            this._isMinuteListLoop = false;\n        }\n\n        for (let i = 0; i < minuteItemsCount; i++) {\n            this._minuteItems.push(i * this.itemsDelta.minutes);\n        }\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n        }\n    }\n\n    private _generateSeconds(): void {\n        const secondsItemsCount = 60 / this.itemsDelta.seconds;\n\n        if (secondsItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._secondsItems);\n            this._isSecondsListLoop = false;\n        }\n\n        for (let i = 0; i < secondsItemsCount; i++) {\n            this._secondsItems.push(i * this.itemsDelta.seconds);\n        }\n\n        if (secondsItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._secondsItems);\n        }\n    }\n\n    private _generateAmPm(): void {\n\n        this._addEmptyItems(this._ampmItems);\n\n        this._ampmItems.push('AM');\n        this._ampmItems.push('PM');\n\n        this._addEmptyItems(this._ampmItems);\n    }\n\n    private _getSelectedTime(): Date {\n        const date = this.value ? new Date(this.value) : new Date();\n        if (this.selectedHour) {\n            date.setHours(parseInt(this.selectedHour, 10));\n        }\n        if (this.selectedMinute) {\n            date.setMinutes(parseInt(this.selectedMinute, 10));\n        }\n        if (this.selectedSeconds) {\n            date.setSeconds(parseInt(this.selectedSeconds, 10));\n        }\n        if (((this.showHoursList && this.selectedHour !== '12') || (!this.showHoursList && this.selectedHour <= '11')) &&\n            this.selectedAmPm === 'PM') {\n            date.setHours(date.getHours() + 12);\n        }\n        if (!this.showHoursList && this.selectedAmPm === 'AM' && this.selectedHour > '11') {\n            date.setHours(date.getHours() - 12);\n        }\n        if (this.selectedAmPm === 'AM' && this.selectedHour === '12') {\n            date.setHours(0);\n        }\n        return date;\n    }\n\n    private _convertMinMaxValue(value: string): Date {\n        const date = this.value ? new Date(this.value) : this._dateFromModel ? new Date(this._dateFromModel) : new Date();\n        const sections = value.split(/[\\s:]+/);\n        let hour, minutes, seconds, amPM;\n\n        date.setSeconds(0);\n\n        if (this.showHoursList) {\n            hour = sections[0];\n            date.setHours(parseInt(hour, 10));\n        }\n\n        if (this.showMinutesList) {\n            minutes = this.showHoursList ? sections[1] : sections[0];\n            date.setMinutes(parseInt(minutes, 10));\n        }\n\n        if (this.showSecondsList) {\n            seconds = sections[sections.length - (this.showAmPmList ? 2 : 1)];\n            date.setSeconds(parseInt(seconds, 10));\n        }\n\n        if (this.showAmPmList) {\n            amPM = sections[sections.length - 1];\n\n            if (((this.showHoursList && date.getHours().toString() !== '12') ||\n                (!this.showHoursList && date.getHours().toString() <= '11')) && amPM === 'PM') {\n                date.setHours(date.getHours() + 12);\n            }\n\n            if (!this.showHoursList && amPM === 'AM' && date.getHours().toString() > '11') {\n                date.setHours(date.getHours() - 12);\n            }\n\n            if (this.showHoursList && date.getHours() === 12 && amPM === 'AM') {\n                date.setHours(0);\n            }\n        }\n\n        return date;\n    }\n\n    private _isValueValid(value: Date): boolean {\n        if (this.maxValue && value > this._convertMinMaxValue(this.maxValue)) {\n            return false;\n        } else if (this.minValue && value < this._convertMinMaxValue(this.minValue)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private _isEntryValid(val: string): boolean {\n        let validH = true;\n        let validM = true;\n        let validS = true;\n\n        const sections = val.split(/[\\s:]+/);\n        const re = new RegExp(this.promptChar, 'g');\n\n        if (this.showHoursList) {\n            validH = this.validHourEntries.indexOf(parseInt(sections[0].replace(re, ''), 10)) !== -1;\n        }\n\n        if (this.showMinutesList) {\n            const minutes = this.showHoursList ? sections[1] : sections[0];\n            validM = this.validMinuteEntries.indexOf(parseInt(minutes.replace(re, ''), 10)) !== -1;\n        }\n\n        if (this.showSecondsList) {\n            const seconds = sections[sections.length - (this.showAmPmList ? 2 : 1)];\n            validS = this.validSecondsEntries.indexOf(parseInt(seconds.replace(re, ''), 10)) !== -1;\n        }\n\n        return validH && validM && validS;\n    }\n\n    private _getCursorPosition(): number {\n        return this._inputElementRef.nativeElement.selectionStart;\n    }\n\n    private _setCursorPosition(start: number, end: number = start): void {\n        this._inputElementRef.nativeElement.setSelectionRange(start, end);\n    }\n\n    private _updateEditableInput(): void {\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this._getSelectedTime(), this.format);\n        }\n    }\n\n    private _spinHours(currentVal: Date, minVal: Date, maxVal: Date, hDelta: number, sign: number): Date {\n        const oldVal = new Date(currentVal);\n\n        currentVal.setMinutes(sign * hDelta);\n        if (currentVal.getDate() !== oldVal.getDate() && this.isSpinLoop) {\n            currentVal.setDate(oldVal.getDate());\n        }\n\n        let minutes = currentVal.getMinutes();\n        if (currentVal.getTime() > maxVal.getTime()) {\n            if (this.isSpinLoop) {\n                minutes = minutes < minVal.getMinutes() ? 60 + minutes : minutes;\n                minVal.setMinutes(sign * minutes);\n                return minVal;\n            } else {\n                return oldVal;\n            }\n        } else if (currentVal.getTime() < minVal.getTime()) {\n            if (this.isSpinLoop) {\n                minutes = minutes <= maxVal.getMinutes() ? minutes : minutes - 60;\n                maxVal.setMinutes(minutes);\n                return maxVal;\n            } else {\n                return oldVal;\n            }\n        } else {\n            return currentVal;\n        }\n    }\n\n    private _spinMinutes(currentVal: Date, mDelta: number, sign: number) {\n        let minutes = currentVal.getMinutes() + (sign * mDelta);\n\n        if (minutes < 0 || minutes >= 60) {\n            minutes = this.isSpinLoop ? minutes - (sign * 60) : currentVal.getMinutes();\n        }\n\n        currentVal.setMinutes(minutes);\n        return currentVal;\n    }\n\n    private _spinSeconds(currentVal: Date, sDelta: number, sign: number) {\n        let seconds = currentVal.getSeconds() + (sign * sDelta);\n\n        if (seconds < 0 || seconds >= 60) {\n            seconds = this.isSpinLoop ? seconds - (sign * 60) : currentVal.getSeconds();\n        }\n\n        currentVal.setSeconds(seconds);\n        return currentVal;\n    }\n\n    private _initializeContainer() {\n        if (this.value) {\n            const formttedTime = this._formatTime(this.value, this.format);\n            const sections = formttedTime.split(/[\\s:]+/);\n\n            if (this.showHoursList) {\n                this.selectedHour = sections[0];\n            }\n\n            if (this.showMinutesList) {\n                this.selectedMinute = this.showHoursList ? sections[1] : sections[0];\n            }\n\n            if (this.showSecondsList) {\n                this.selectedSeconds = sections[sections.length - (this.showAmPmList ? 2 : 1)];\n            }\n\n            if (this.showAmPmList && this._ampmItems !== null) {\n                this.selectedAmPm = sections[sections.length - 1];\n            }\n        }\n\n        if (this.selectedHour === undefined) {\n            this.selectedHour = !this.showHoursList && this.value ? this.value.getHours().toString() :\n                this.showHoursList ? `${this._hourItems[3]}` : '0';\n        }\n        if (this.selectedMinute === undefined) {\n            this.selectedMinute = !this.showMinutesList && this.value ? this.value.getMinutes().toString() : '0';\n        }\n        if (this.selectedSeconds === undefined) {\n            this.selectedSeconds = !this.showSecondsList && this.value ? this.value.getSeconds().toString() : '0';\n        }\n        if (this.selectedAmPm === undefined && this._ampmItems !== null) {\n            this.selectedAmPm = this._ampmItems[3];\n        }\n\n        this._prevSelectedHour = this.selectedHour;\n        this._prevSelectedMinute = this.selectedMinute;\n        this._prevSelectedSeconds = this.selectedSeconds;\n        this._prevSelectedAmPm = this.selectedAmPm;\n\n        this._onTouchedCallback();\n\n        this._updateHourView(0, ITEMS_COUNT);\n        this._updateMinuteView(0, ITEMS_COUNT);\n        this._updateSecondsView(0, ITEMS_COUNT);\n        this._updateAmPmView(0, ITEMS_COUNT);\n\n        if (this.selectedHour) {\n            this.scrollHourIntoView(this.selectedHour);\n        }\n        if (this.selectedMinute) {\n            this.scrollMinuteIntoView(this.selectedMinute);\n        }\n        if (this.selectedSeconds) {\n            this.scrollSecondsIntoView(this.selectedSeconds);\n        }\n        if (this.selectedAmPm) {\n            this.scrollAmPmIntoView(this.selectedAmPm);\n        }\n\n        requestAnimationFrame(() => {\n            if (this.hourList) {\n                this.hourList.nativeElement.focus();\n            } else if (this.minuteList) {\n                this.minuteList.nativeElement.focus();\n            } else if (this.secondsList) {\n                this.secondsList.nativeElement.focus();\n            }\n        });\n    }\n\n    private _onDropDownClosed(): void {\n        const oldValue = this.value;\n        const newVal = this._convertMinMaxValue(this.displayValue);\n\n        if (this.displayValue === this.parseMask(false)) {\n            return;\n        }\n\n        if (this._isValueValid(newVal)) {\n            if (!this.value || oldValue.getTime() !== newVal.getTime()) {\n                this.value = newVal;\n            }\n        } else {\n            this.displayValue = this.inputFormat.transform(this._formatTime(oldValue, this.format));\n\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: newVal,\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n\n    protected onStatusChanged() {\n        if ((this._ngControl.control.touched || this._ngControl.control.dirty) &&\n            (this._ngControl.control.validator || this._ngControl.control.asyncValidator)) {\n            const input = this._inputDirective || this._inputDirectiveUserTemplate;\n            if (this._inputGroup.isFocused) {\n                input.valid = this._ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n            } else {\n                input.valid = this._ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n            }\n        }\n\n        if (this._inputGroup && this._inputGroup.isRequired !== this.required) {\n            this._inputGroup.isRequired = this.required;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    getEditElement() {\n        return this._inputElementRef ? this._inputElementRef.nativeElement : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public getInputGroupElement() {\n        return this._inputGroup ? this._inputGroup.element.nativeElement : null;\n    }\n\n\n    /**\n     * opens the dialog.\n     * @param target HTMLElement - the target element to use for positioning the drop down container according to\n     * ```html\n     * <igx-time-picker [value]=\"date\" mode=\"dropdown\" #retemplated>\n     *   <ng-template igxTimePickerTemplate let-openDialog=\"openDialog\"\n     *                let-displayTime=\"displayTime\">\n     *     <igx-input-group>\n     *       <input #dropDownTarget igxInput [value]=\"displayTime\" />\n     *       <igx-suffix (click)=\"openDialog(dropDownTarget)\">\n     *         <igx-icon>alarm</igx-icon>\n     *       </igx-suffix>\n     *     </igx-input-group>\n     *   </ng-template>\n     * </igx-time-picker>\n     * ```\n     */\n    public openDialog(target?: HTMLElement): void {\n        if (!this.toggleRef.collapsed) {\n            return this._onDropDownClosed();\n        }\n        const settings = this.overlaySettings;\n\n        if (target && settings && settings.positionStrategy) {\n            settings.positionStrategy.settings.target = target;\n        }\n        if (this.outlet) {\n            settings.outlet = this.outlet;\n        }\n\n        this.toggleRef.open(settings);\n        this._initializeContainer();\n    }\n\n    /**\n     * Scrolls a hour item into view.\n     * ```typescript\n     *scrhintoView(picker) {\n     *picker.scrollHourIntoView('2');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrhintoView(picker)\"></igx-time-picker>\n     *```\n     *@param item to be scrolled in view.\n     */\n    public scrollHourIntoView(item: string): void {\n        if (this.showHoursList) {\n            const hourIntoView = this._scrollItemIntoView(item, this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n            if (hourIntoView) {\n                this._hourView = hourIntoView.view;\n                this.selectedHour = hourIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * Scrolls a minute item into view.\n     * ```typescript\n     *scrMintoView(picker) {\n     *picker.scrollMinuteIntoView('3');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrMintoView(picker)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollMinuteIntoView(item: string): void {\n        if (this.showMinutesList) {\n            const minuteIntoView = this._scrollItemIntoView(item, this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n            if (minuteIntoView) {\n                this._minuteView = minuteIntoView.view;\n                this.selectedMinute = minuteIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * Scrolls a seconds item into view.\n     * ```typescript\n     *scrMintoView(picker) {\n     *picker.scrollSecondsIntoView('4');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrMintoView(picker)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollSecondsIntoView(item: string): void {\n        if (this.showSecondsList) {\n            const secondsIntoView = this._scrollItemIntoView(item,\n                this._secondsItems, this.selectedSeconds, this._isSecondsListLoop, 'seconds');\n            if (secondsIntoView) {\n                this._secondsView = secondsIntoView.view;\n                this.selectedSeconds = secondsIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * Scrolls an ampm item into view.\n     * ```typescript\n     *scrAmPmIntoView(picker) {\n     *picker.scrollAmPmIntoView('PM');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrAmPmIntoView(picker)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollAmPmIntoView(item: string): void {\n        if (this.showAmPmList) {\n            const ampmIntoView = this._scrollItemIntoView(item, this._ampmItems, this.selectedAmPm, false, null);\n            if (ampmIntoView) {\n                this._ampmView = ampmIntoView.view;\n                this.selectedAmPm = ampmIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public nextHour() {\n        const nextHour = this._nextItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = nextHour.view;\n        this.selectedHour = nextHour.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevHour() {\n        const prevHour = this._prevItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = prevHour.view;\n        this.selectedHour = prevHour.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextMinute() {\n        const nextMinute = this._nextItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = nextMinute.view;\n        this.selectedMinute = nextMinute.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevMinute() {\n        const prevMinute = this._prevItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = prevMinute.view;\n        this.selectedMinute = prevMinute.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextSeconds() {\n        const nextSeconds = this._nextItem(this._secondsItems, this.selectedSeconds, this._isSecondsListLoop, 'seconds');\n        this._secondsView = nextSeconds.view;\n        this.selectedSeconds = nextSeconds.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevSeconds() {\n        const prevSeconds = this._prevItem(this._secondsItems, this.selectedSeconds, this._isSecondsListLoop, 'seconds');\n        this._secondsView = prevSeconds.view;\n        this.selectedSeconds = prevSeconds.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex + 1 < this._ampmItems.length - 3) {\n            this._updateAmPmView(selectedIndex - 2, selectedIndex + 5);\n            this.selectedAmPm = this._ampmItems[selectedIndex + 1];\n\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public prevAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex > 3) {\n            this._updateAmPmView(selectedIndex - 4, selectedIndex + 3);\n            this.selectedAmPm = this._ampmItems[selectedIndex - 1];\n\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * If current value is valid selects it, closes the dialog and returns true, otherwise returns false.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [rightButtonLabel]=\"okButtonLabel\" (onRightButtonSelect)=\"okButtonClick()\">\n     * //..\n     * </igx-dialog>\n     * ```\n     */\n    public okButtonClick(): boolean {\n        const time = this._getSelectedTime();\n        if (this._isValueValid(time)) {\n            this.close();\n            this.value = time;\n            return true;\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: time,\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n            return false;\n        }\n    }\n\n    /**\n     * Closes the dialog without selecting the current value.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [leftButtonLabel]=\"cancelButtonLabel\" (onLeftButtonSelect)=\"cancelButtonClick()\">\n     * //...\n     * </igx-dialog>\n     * ```\n     */\n    public cancelButtonClick(): void {\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this.value ? this._formatTime(this.value, this.format) : this.parseMask(false);\n        }\n\n        this.close();\n\n        this.selectedHour = this._prevSelectedHour;\n        this.selectedMinute = this._prevSelectedMinute;\n        this.selectedSeconds = this._prevSelectedSeconds;\n        this.selectedAmPm = this._prevSelectedAmPm;\n    }\n\n    /**\n     * Returns an array of the hours currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let hInView = this.picker.hoursInView;\n     *}\n     *```\n     */\n    public hoursInView(): string[] {\n        return this._hourView.filter((hour) => hour !== '');\n    }\n\n    /**\n     * Returns an array of the minutes currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let minInView = this.picker.minutesInView;\n     *}\n     *```\n     */\n    public minutesInView(): string[] {\n        return this._minuteView.filter((minute) => minute !== '');\n    }\n\n    /**\n     * Returns an array of the seconds currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let minInView = this.picker.secondsInView;\n     *}\n     *```\n     */\n    public secondsInView(): string[] {\n        return this._secondsView.filter((seconds) => seconds !== '');\n    }\n\n    /**\n     * Returns an array of the AM/PM currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let ApInView = this.picker.ampmInView;\n     *}\n     *```\n     */\n    public ampmInView(): string[] {\n        return this._ampmView.filter((ampm) => ampm !== '');\n    }\n\n    /**\n     * Closes the dropdown/dialog.\n     * ```html\n     *<igx-time-picker #timePicker></igx-time-picker>\n     * ```\n     * ```typescript\n     * @ViewChild('timePicker', { read: IgxTimePickerComponent }) picker: IgxTimePickerComponent;\n     * picker.close();\n     * ```\n     */\n    public close(): void {\n        this.toggleRef.close();\n    }\n\n    /**\n     * @hidden\n     */\n    public parseMask(preserveAmPm = true): string {\n        const maskWithAmPm = this.mask.replace(new RegExp('0', 'g'), this.promptChar).replace('LL', 'AM');\n        const pureMask = this.mask.replace(new RegExp('0', 'g'), this.promptChar).replace(new RegExp('L', 'g'), this.promptChar);\n\n        return preserveAmPm ? maskWithAmPm : pureMask;\n    }\n\n    /**\n     * @hidden\n     */\n    public clear(): void {\n        if (this.toggleRef.collapsed) {\n            this.cleared = true;\n            this.isNotEmpty = false;\n\n            const oldVal = new Date(this.value);\n\n            this.displayValue = '';\n            this.value.setHours(0, 0);\n\n            if (oldVal.getTime() !== this.value.getTime()) {\n                const args: IgxTimePickerValueChangedEventArgs = {\n                    oldValue: oldVal,\n                    newValue: this.value\n                };\n                this.onValueChanged.emit(args);\n            }\n        } else {\n            this.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInput(event): void {\n        const val = event.target.value;\n        const oldVal = new Date(this.value);\n\n        this.isNotEmpty = val !== this.parseMask(false);\n\n        // handle cases where all empty positions (promts) are filled and we want to update\n        // timepicker own value property if it is a valid Date\n        if (val.indexOf(this.promptChar) === -1) {\n            if (this._isEntryValid(val)) {\n                const newVal = this._convertMinMaxValue(val);\n                if (oldVal.getTime() !== newVal.getTime()) {\n                    this.value = newVal;\n                }\n            } else {\n                const args: IgxTimePickerValidationFailedEventArgs = {\n                    timePicker: this,\n                    currentValue: val,\n                    setThroughUI: false\n                };\n                this.onValidationFailed.emit(args);\n            }\n            // handle cases where the user deletes the display value (when pressing backspace or delete)\n        } else if (!this.value || !val || val === this.parseMask(false)) {\n            this.isNotEmpty = false;\n\n            this.value.setHours(0, 0);\n            this.displayValue = val;\n\n            if (oldVal.getTime() !== this.value.getTime()) {\n                const args: IgxTimePickerValueChangedEventArgs = {\n                    oldValue: oldVal,\n                    newValue: this.value\n                };\n                this.onValueChanged.emit(args);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onFocus(event): void {\n        this.isNotEmpty = event.target.value !== this.parseMask(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public onBlur(event): void {\n        if (this.mode === InteractionMode.DropDown) {\n            const value = event.target.value;\n\n            this.isNotEmpty = value !== '';\n            this.displayValue = value;\n\n            if (value && value !== this.parseMask()) {\n                if (this._isEntryValid(value)) {\n                    const newVal = this._convertMinMaxValue(value);\n                    if (!this.value || this.value.getTime() !== newVal.getTime()) {\n                        this.value = newVal;\n                    }\n                } else {\n                    const args: IgxTimePickerValidationFailedEventArgs = {\n                        timePicker: this,\n                        currentValue: value,\n                        setThroughUI: false\n                    };\n                    this.onValidationFailed.emit(args);\n                }\n            }\n        }\n\n        if (this.toggleRef.collapsed) {\n            this._updateValidityOnBlur();\n        }\n    }\n\n    public mouseDown(event: MouseEvent): void {\n        // if the click is not on the input but in input group\n        // e.g. on prefix or suffix, prevent default and this way prevent blur\n        if (event.target !== this.getEditElement()) {\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public spinOnEdit(event): void {\n        event.preventDefault();\n\n        let sign: number;\n        let displayVal: string;\n        const currentVal = new Date(this.value);\n        const min = this.minValue ? this._convertMinMaxValue(this.minValue) : this._convertMinMaxValue('00:00');\n        const max = this.maxValue ? this._convertMinMaxValue(this.maxValue) : this._convertMinMaxValue('24:00');\n\n        const cursor = this._getCursorPosition();\n\n        if (event.key) {\n            const key = event.key;\n            sign = key === KEYS.DOWN_ARROW || key === KEYS.DOWN_ARROW_IE ? -1 : 1;\n        }\n\n        if (event.deltaY) {\n            sign = event.deltaY < 0 ? 1 : -1;\n        }\n\n        if (!this.displayValue) {\n            this.value = min;\n            displayVal = this._formatTime(this.value, this.format);\n        } else {\n            const hDelta = this.itemsDelta.hours * 60 + (sign * this.value.getMinutes());\n            const mDelta = this.itemsDelta.minutes;\n            const sDelta = this.itemsDelta.seconds;\n\n            if (this.cursorOnHours(cursor, this.showHoursList)) {\n                this.value = this._spinHours(currentVal, min, max, hDelta, sign);\n            }\n            if (this.cursorOnMinutes(cursor, this.showHoursList, this.showMinutesList)) {\n                this.value = this._spinMinutes(currentVal, mDelta, sign);\n            }\n            if (this.cursorOnSeconds(cursor, this.showHoursList, this.showMinutesList, this.showSecondsList)) {\n                this.value = this._spinSeconds(currentVal, sDelta, sign);\n            }\n            if (this.cursorOnAmPm(cursor, this.showHoursList, this.showMinutesList, this.showSecondsList, this.showAmPmList)) {\n                const sections = this.displayValue.split(/[\\s:]+/);\n                sign = sections[sections.length - 1] === 'AM' ? 1 : -1;\n                currentVal.setHours(currentVal.getHours() + (sign * 12));\n\n                this.value = currentVal;\n            }\n\n            displayVal = this._formatTime(this.value, this.format);\n        }\n\n        // minor hack for preventing cursor jumping in IE\n        this._displayValue = this.inputFormat.transform(displayVal);\n        this._inputElementRef.nativeElement.value = this._displayValue;\n        this._setCursorPosition(cursor);\n\n        requestAnimationFrame(() => {\n            this._setCursorPosition(cursor);\n        });\n    }\n\n    private cursorOnHours(cursor: number, showHours: boolean): boolean {\n        return showHours && this._hoursPos.has(cursor);\n    }\n\n    private cursorOnMinutes(cursor: number, showHours: boolean, showMinutes: boolean): boolean {\n        return showMinutes &&\n            (showHours && this._minutesPos.has(cursor)) ||\n            (!showHours && this._minutesPos.has(cursor));\n    }\n\n    private cursorOnSeconds(cursor: number, showHours: boolean, showMinutes: boolean, showSeconds: boolean): boolean {\n        return showSeconds &&\n            (showHours && showMinutes && this._secondsPos.has(cursor)) ||\n            ((!showHours || !showMinutes) && this._secondsPos.has(cursor)) ||\n            (!showHours && !showMinutes && this._secondsPos.has(cursor));\n    }\n\n    private cursorOnAmPm(cursor: number, showHours: boolean, showMinutes: boolean,\n        showSeconds: boolean, showAmPm: boolean): boolean {\n        return showAmPm &&\n            (showHours && showMinutes && showSeconds && this._amPmPos.has(cursor)) ||\n            ((!showHours || !showMinutes || !showSeconds) && this._amPmPos.has(cursor)) ||\n            (!showHours && (!showMinutes || !showSeconds) && this._amPmPos.has(cursor));\n    }\n\n    private _updateValidityOnBlur() {\n        this._onTouchedCallback();\n        const input = this._inputDirective || this._inputDirectiveUserTemplate;\n        if (this._ngControl && !this._ngControl.valid) {\n            input.valid = IgxInputState.INVALID;\n        } else {\n            input.valid = IgxInputState.INITIAL;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxTimePickerComponent,\n        IgxHourItemDirective,\n        IgxMinuteItemDirective,\n        IgxSecondsItemDirective,\n        IgxItemListDirective,\n        IgxAmPmItemDirective,\n        IgxTimePickerTemplateDirective,\n        IgxTimePickerActionsDirective,\n        TimeDisplayFormatPipe,\n        TimeInputFormatPipe\n    ],\n    exports: [\n        IgxTimePickerComponent,\n        IgxTimePickerTemplateDirective,\n        IgxTimePickerActionsDirective,\n        TimeDisplayFormatPipe,\n        TimeInputFormatPipe\n    ],\n    imports: [\n        CommonModule,\n        IgxInputGroupModule,\n        IgxIconModule,\n        IgxButtonModule,\n        IgxMaskModule,\n        IgxToggleModule\n    ],\n    providers: []\n})\nexport class IgxTimePickerModule { }\n"]}