import { ElementRef, EventEmitter, OnInit, OnDestroy, TemplateRef } from '@angular/core';
import { SliderHandle } from '../slider.common';
import { Subject } from 'rxjs';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class IgxSliderThumbComponent implements OnInit, OnDestroy {
    private _elementRef;
    private _isActive;
    private _isPressed;
    private _destroy$;
    private get thumbPositionX();
    isActive: boolean;
    value: number;
    continuous: boolean;
    thumbLabelVisibilityDuration: any;
    disabled: boolean;
    onPan: Subject<number>;
    stepDistance: number;
    step: number;
    templateRef: TemplateRef<any>;
    context: any;
    type: SliderHandle;
    deactiveState: boolean;
    onThumbValueChange: EventEmitter<number>;
    onChange: EventEmitter<any>;
    onHoverChange: EventEmitter<boolean>;
    tabindex: number;
    zIndex: number;
    get thumbFromClass(): boolean;
    get thumbToClass(): boolean;
    get thumbFromActiveClass(): boolean;
    get thumbToActiveClass(): boolean;
    get thumbPressedClass(): boolean;
    get nativeElement(): any;
    get destroy(): Subject<boolean>;
    constructor(_elementRef: ElementRef);
    /**
     * @hidden
     */
    ngOnInit(): void;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    onPinterEnter(): void;
    onPointerLeave(): void;
    onKeyDown(event: KeyboardEvent): void;
    onBlur(): void;
    onFocusListener(): void;
    /**
     * Show thumb label and ripple.
     */
    showThumbIndicators(): void;
    /**
     * Hide thumb label and ripple.
     */
    hideThumbIndicators(): void;
    private updateThumbValue;
    private calculateTrackUpdate;
    private stepToProceed;
    private toggleThumbIndicators;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxSliderThumbComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxSliderThumbComponent, "igx-thumb", never, {
    "value": "value";
    "continuous": "continuous";
    "thumbLabelVisibilityDuration": "thumbLabelVisibilityDuration";
    "disabled": "disabled";
    "onPan": "onPan";
    "stepDistance": "stepDistance";
    "step": "step";
    "templateRef": "templateRef";
    "context": "context";
    "type": "type";
    "deactiveState": "deactiveState";
}, {
    "onThumbValueChange": "onThumbValueChange";
    "onChange": "onChange";
    "onHoverChange": "onHoverChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGh1bWItc2xpZGVyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ0aHVtYi1zbGlkZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFNQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3REEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgT25EZXN0cm95LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2xpZGVySGFuZGxlIH0gZnJvbSAnLi4vc2xpZGVyLmNvbW1vbic7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4U2xpZGVyVGh1bWJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBfZWxlbWVudFJlZjtcbiAgICBwcml2YXRlIF9pc0FjdGl2ZTtcbiAgICBwcml2YXRlIF9pc1ByZXNzZWQ7XG4gICAgcHJpdmF0ZSBfZGVzdHJveSQ7XG4gICAgcHJpdmF0ZSBnZXQgdGh1bWJQb3NpdGlvblgoKTtcbiAgICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgICB2YWx1ZTogbnVtYmVyO1xuICAgIGNvbnRpbnVvdXM6IGJvb2xlYW47XG4gICAgdGh1bWJMYWJlbFZpc2liaWxpdHlEdXJhdGlvbjogYW55O1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIG9uUGFuOiBTdWJqZWN0PG51bWJlcj47XG4gICAgc3RlcERpc3RhbmNlOiBudW1iZXI7XG4gICAgc3RlcDogbnVtYmVyO1xuICAgIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGNvbnRleHQ6IGFueTtcbiAgICB0eXBlOiBTbGlkZXJIYW5kbGU7XG4gICAgZGVhY3RpdmVTdGF0ZTogYm9vbGVhbjtcbiAgICBvblRodW1iVmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuICAgIG9uQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkhvdmVyQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XG4gICAgdGFiaW5kZXg6IG51bWJlcjtcbiAgICB6SW5kZXg6IG51bWJlcjtcbiAgICBnZXQgdGh1bWJGcm9tQ2xhc3MoKTogYm9vbGVhbjtcbiAgICBnZXQgdGh1bWJUb0NsYXNzKCk6IGJvb2xlYW47XG4gICAgZ2V0IHRodW1iRnJvbUFjdGl2ZUNsYXNzKCk6IGJvb2xlYW47XG4gICAgZ2V0IHRodW1iVG9BY3RpdmVDbGFzcygpOiBib29sZWFuO1xuICAgIGdldCB0aHVtYlByZXNzZWRDbGFzcygpOiBib29sZWFuO1xuICAgIGdldCBuYXRpdmVFbGVtZW50KCk6IGFueTtcbiAgICBnZXQgZGVzdHJveSgpOiBTdWJqZWN0PGJvb2xlYW4+O1xuICAgIGNvbnN0cnVjdG9yKF9lbGVtZW50UmVmOiBFbGVtZW50UmVmKTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBvblBpbnRlckVudGVyKCk6IHZvaWQ7XG4gICAgb25Qb2ludGVyTGVhdmUoKTogdm9pZDtcbiAgICBvbktleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIG9uQmx1cigpOiB2b2lkO1xuICAgIG9uRm9jdXNMaXN0ZW5lcigpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNob3cgdGh1bWIgbGFiZWwgYW5kIHJpcHBsZS5cbiAgICAgKi9cbiAgICBzaG93VGh1bWJJbmRpY2F0b3JzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogSGlkZSB0aHVtYiBsYWJlbCBhbmQgcmlwcGxlLlxuICAgICAqL1xuICAgIGhpZGVUaHVtYkluZGljYXRvcnMoKTogdm9pZDtcbiAgICBwcml2YXRlIHVwZGF0ZVRodW1iVmFsdWU7XG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVUcmFja1VwZGF0ZTtcbiAgICBwcml2YXRlIHN0ZXBUb1Byb2NlZWQ7XG4gICAgcHJpdmF0ZSB0b2dnbGVUaHVtYkluZGljYXRvcnM7XG59XG4iXX0=