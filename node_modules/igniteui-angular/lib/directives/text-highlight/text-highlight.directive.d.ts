import { AfterViewInit, ElementRef, OnChanges, OnDestroy, Renderer2, SimpleChanges, AfterViewChecked } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
interface ISearchInfo {
    searchedText: string;
    content: string;
    matchCount: number;
    caseSensitive: boolean;
    exactMatch: boolean;
}
/**
 * An interface describing information for the active highlight.
 */
export interface IActiveHighlightInfo {
    /**
     * The row index of the highlight. This property is deprecated, use `row` instead.
     */
    rowIndex?: number;
    /**
     * The column index of the highlight. This property is deprecated, use `column` instead.
     */
    columnIndex?: number;
    /**
     * The page index of the highlight. This property is deprecated.
     */
    page?: number;
    /**
     * The row of the highlight.
     */
    row?: any;
    /**
     * The column of the highlight.
     */
    column?: any;
    /**
     * The index of the highlight.
     */
    index: number;
}
export declare class IgxTextHighlightDirective implements AfterViewInit, AfterViewChecked, OnDestroy, OnChanges {
    private element;
    renderer: Renderer2;
    private static onActiveElementChanged;
    static highlightGroupsMap: Map<string, IActiveHighlightInfo>;
    private _lastSearchInfo;
    private _div;
    private _observer;
    private _nodeWasRemoved;
    private _forceEvaluation;
    private _activeElementIndex;
    private _valueChanged;
    private _defaultCssClass;
    private _defaultActiveCssClass;
    /**
     * Determines the `CSS` class of the highlight elements.
     * This allows the developer to provide custom `CSS` to customize the highlight.
     *
     * ```html
     * <div
     *   igxTextHighlight
     *   [cssClass]="myClass">
     * </div>
     * ```
     */
    cssClass: string;
    /**
     * Determines the `CSS` class of the active highlight element.
     * This allows the developer to provide custom `CSS` to customize the highlight.
     *
     * ```html
     * <div
     *   igxTextHighlight
     *   [activeCssClass]="activeHighlightClass">
     * </div>
     * ```
     */
    activeCssClass: string;
    /**
     * @hidden
     */
    containerClass: string;
    /**
     * Identifies the highlight within a unique group.
     * This allows it to have several different highlight groups,
     * with each of them having their own active highlight.
     *
     * ```html
     * <div
     *   igxTextHighlight
     *   [groupName]="myGroupName">
     * </div>
     * ```
     */
    groupName: string;
    private _value;
    /**
     * The underlying value of the element that will be highlighted.
     *
     * ```typescript
     * // get
     * const elementValue = this.textHighlight.value;
     * ```
     *
     * ```html
     * <!--set-->
     * <div
     *   igxTextHighlight
     *   [value]="newValue">
     * </div>
     * ```
     */
    get value(): any;
    set value(value: any);
    /**
     * The identifier of the row on which the directive is currently on.
     *
     * ```html
     * <div
     *   igxTextHighlight
     *   [row]="0">
     * </div>
     * ```
     */
    row: any;
    /**
     * The identifier of the column on which the directive is currently on.
     *
     * ```html
     * <div
     *   igxTextHighlight
     *   [column]="0">
     * </div>
     * ```
     */
    column: any;
    page: number;
    /**
     * @hidden
     */
    get lastSearchInfo(): ISearchInfo;
    /**
     * @hidden
     */
    parentElement: any;
    private _container;
    private destroy$;
    /**
     * Activates the highlight at a given index.
     * (if such index exists)
     */
    static setActiveHighlight(groupName: string, highlight: IActiveHighlightInfo): void;
    /**
     * Clears any existing highlight.
     */
    static clearActiveHighlight(groupName: any): void;
    constructor(element: ElementRef, renderer: Renderer2);
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * @hidden
     */
    ngAfterViewInit(): void;
    /**
     * @hidden
     */
    ngAfterViewChecked(): void;
    /**
     * Clears the existing highlight and highlights the searched text.
     * Returns how many times the element contains the searched text.
     */
    highlight(text: string, caseSensitive?: boolean, exactMatch?: boolean): number;
    /**
     * Clears any existing highlight.
     */
    clearHighlight(): void;
    /**
     * Activates the highlight if it is on the currently active row, column and page.
     */
    activateIfNecessary(): void;
    /**
     * Attaches a MutationObserver to the parentElement and watches for when the container element is removed/readded to the DOM.
     * Should be used only when necessary as using many observers may lead to performance degradation.
     */
    observe(): void;
    private activate;
    private deactivate;
    private clearChildElements;
    private getHighlightedText;
    private appendText;
    private appendSpan;
    private appendDiv;
    private searchNeedsEvaluation;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxTextHighlightDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxTextHighlightDirective, "[igxTextHighlight]", never, {
    "groupName": "groupName";
    "value": "value";
    "cssClass": "cssClass";
    "activeCssClass": "activeCssClass";
    "containerClass": "containerClass";
    "row": "row";
    "column": "column";
    "page": "page";
}, {}, never>;
}
/**
 * @hidden
 */
export declare class IgxTextHighlightModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxTextHighlightModule, [typeof IgxTextHighlightDirective], never, [typeof IgxTextHighlightDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxTextHighlightModule>;
}
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC1oaWdobGlnaHQuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbInRleHQtaGlnaGxpZ2h0LmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1NQTs7Ozs7OztBQUtBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZiwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFJlbmRlcmVyMiwgU2ltcGxlQ2hhbmdlcywgQWZ0ZXJWaWV3Q2hlY2tlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW50ZXJmYWNlIElTZWFyY2hJbmZvIHtcbiAgICBzZWFyY2hlZFRleHQ6IHN0cmluZztcbiAgICBjb250ZW50OiBzdHJpbmc7XG4gICAgbWF0Y2hDb3VudDogbnVtYmVyO1xuICAgIGNhc2VTZW5zaXRpdmU6IGJvb2xlYW47XG4gICAgZXhhY3RNYXRjaDogYm9vbGVhbjtcbn1cbi8qKlxuICogQW4gaW50ZXJmYWNlIGRlc2NyaWJpbmcgaW5mb3JtYXRpb24gZm9yIHRoZSBhY3RpdmUgaGlnaGxpZ2h0LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElBY3RpdmVIaWdobGlnaHRJbmZvIHtcbiAgICAvKipcbiAgICAgKiBUaGUgcm93IGluZGV4IG9mIHRoZSBoaWdobGlnaHQuIFRoaXMgcHJvcGVydHkgaXMgZGVwcmVjYXRlZCwgdXNlIGByb3dgIGluc3RlYWQuXG4gICAgICovXG4gICAgcm93SW5kZXg/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIGNvbHVtbiBpbmRleCBvZiB0aGUgaGlnaGxpZ2h0LiBUaGlzIHByb3BlcnR5IGlzIGRlcHJlY2F0ZWQsIHVzZSBgY29sdW1uYCBpbnN0ZWFkLlxuICAgICAqL1xuICAgIGNvbHVtbkluZGV4PzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBwYWdlIGluZGV4IG9mIHRoZSBoaWdobGlnaHQuIFRoaXMgcHJvcGVydHkgaXMgZGVwcmVjYXRlZC5cbiAgICAgKi9cbiAgICBwYWdlPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSByb3cgb2YgdGhlIGhpZ2hsaWdodC5cbiAgICAgKi9cbiAgICByb3c/OiBhbnk7XG4gICAgLyoqXG4gICAgICogVGhlIGNvbHVtbiBvZiB0aGUgaGlnaGxpZ2h0LlxuICAgICAqL1xuICAgIGNvbHVtbj86IGFueTtcbiAgICAvKipcbiAgICAgKiBUaGUgaW5kZXggb2YgdGhlIGhpZ2hsaWdodC5cbiAgICAgKi9cbiAgICBpbmRleDogbnVtYmVyO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4VGV4dEhpZ2hsaWdodERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIEFmdGVyVmlld0NoZWNrZWQsIE9uRGVzdHJveSwgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIGVsZW1lbnQ7XG4gICAgcmVuZGVyZXI6IFJlbmRlcmVyMjtcbiAgICBwcml2YXRlIHN0YXRpYyBvbkFjdGl2ZUVsZW1lbnRDaGFuZ2VkO1xuICAgIHN0YXRpYyBoaWdobGlnaHRHcm91cHNNYXA6IE1hcDxzdHJpbmcsIElBY3RpdmVIaWdobGlnaHRJbmZvPjtcbiAgICBwcml2YXRlIF9sYXN0U2VhcmNoSW5mbztcbiAgICBwcml2YXRlIF9kaXY7XG4gICAgcHJpdmF0ZSBfb2JzZXJ2ZXI7XG4gICAgcHJpdmF0ZSBfbm9kZVdhc1JlbW92ZWQ7XG4gICAgcHJpdmF0ZSBfZm9yY2VFdmFsdWF0aW9uO1xuICAgIHByaXZhdGUgX2FjdGl2ZUVsZW1lbnRJbmRleDtcbiAgICBwcml2YXRlIF92YWx1ZUNoYW5nZWQ7XG4gICAgcHJpdmF0ZSBfZGVmYXVsdENzc0NsYXNzO1xuICAgIHByaXZhdGUgX2RlZmF1bHRBY3RpdmVDc3NDbGFzcztcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHRoZSBgQ1NTYCBjbGFzcyBvZiB0aGUgaGlnaGxpZ2h0IGVsZW1lbnRzLlxuICAgICAqIFRoaXMgYWxsb3dzIHRoZSBkZXZlbG9wZXIgdG8gcHJvdmlkZSBjdXN0b20gYENTU2AgdG8gY3VzdG9taXplIHRoZSBoaWdobGlnaHQuXG4gICAgICpcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGRpdlxuICAgICAqICAgaWd4VGV4dEhpZ2hsaWdodFxuICAgICAqICAgW2Nzc0NsYXNzXT1cIm15Q2xhc3NcIj5cbiAgICAgKiA8L2Rpdj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBjc3NDbGFzczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgdGhlIGBDU1NgIGNsYXNzIG9mIHRoZSBhY3RpdmUgaGlnaGxpZ2h0IGVsZW1lbnQuXG4gICAgICogVGhpcyBhbGxvd3MgdGhlIGRldmVsb3BlciB0byBwcm92aWRlIGN1c3RvbSBgQ1NTYCB0byBjdXN0b21pemUgdGhlIGhpZ2hsaWdodC5cbiAgICAgKlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8ZGl2XG4gICAgICogICBpZ3hUZXh0SGlnaGxpZ2h0XG4gICAgICogICBbYWN0aXZlQ3NzQ2xhc3NdPVwiYWN0aXZlSGlnaGxpZ2h0Q2xhc3NcIj5cbiAgICAgKiA8L2Rpdj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBhY3RpdmVDc3NDbGFzczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIElkZW50aWZpZXMgdGhlIGhpZ2hsaWdodCB3aXRoaW4gYSB1bmlxdWUgZ3JvdXAuXG4gICAgICogVGhpcyBhbGxvd3MgaXQgdG8gaGF2ZSBzZXZlcmFsIGRpZmZlcmVudCBoaWdobGlnaHQgZ3JvdXBzLFxuICAgICAqIHdpdGggZWFjaCBvZiB0aGVtIGhhdmluZyB0aGVpciBvd24gYWN0aXZlIGhpZ2hsaWdodC5cbiAgICAgKlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8ZGl2XG4gICAgICogICBpZ3hUZXh0SGlnaGxpZ2h0XG4gICAgICogICBbZ3JvdXBOYW1lXT1cIm15R3JvdXBOYW1lXCI+XG4gICAgICogPC9kaXY+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ3JvdXBOYW1lOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfdmFsdWU7XG4gICAgLyoqXG4gICAgICogVGhlIHVuZGVybHlpbmcgdmFsdWUgb2YgdGhlIGVsZW1lbnQgdGhhdCB3aWxsIGJlIGhpZ2hsaWdodGVkLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIC8vIGdldFxuICAgICAqIGNvbnN0IGVsZW1lbnRWYWx1ZSA9IHRoaXMudGV4dEhpZ2hsaWdodC52YWx1ZTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8IS0tc2V0LS0+XG4gICAgICogPGRpdlxuICAgICAqICAgaWd4VGV4dEhpZ2hsaWdodFxuICAgICAqICAgW3ZhbHVlXT1cIm5ld1ZhbHVlXCI+XG4gICAgICogPC9kaXY+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IHZhbHVlKCk6IGFueTtcbiAgICBzZXQgdmFsdWUodmFsdWU6IGFueSk7XG4gICAgLyoqXG4gICAgICogVGhlIGlkZW50aWZpZXIgb2YgdGhlIHJvdyBvbiB3aGljaCB0aGUgZGlyZWN0aXZlIGlzIGN1cnJlbnRseSBvbi5cbiAgICAgKlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8ZGl2XG4gICAgICogICBpZ3hUZXh0SGlnaGxpZ2h0XG4gICAgICogICBbcm93XT1cIjBcIj5cbiAgICAgKiA8L2Rpdj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICByb3c6IGFueTtcbiAgICAvKipcbiAgICAgKiBUaGUgaWRlbnRpZmllciBvZiB0aGUgY29sdW1uIG9uIHdoaWNoIHRoZSBkaXJlY3RpdmUgaXMgY3VycmVudGx5IG9uLlxuICAgICAqXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxkaXZcbiAgICAgKiAgIGlneFRleHRIaWdobGlnaHRcbiAgICAgKiAgIFtjb2x1bW5dPVwiMFwiPlxuICAgICAqIDwvZGl2PlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGNvbHVtbjogYW55O1xuICAgIHBhZ2U6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZ2V0IGxhc3RTZWFyY2hJbmZvKCk6IElTZWFyY2hJbmZvO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwYXJlbnRFbGVtZW50OiBhbnk7XG4gICAgcHJpdmF0ZSBfY29udGFpbmVyO1xuICAgIHByaXZhdGUgZGVzdHJveSQ7XG4gICAgLyoqXG4gICAgICogQWN0aXZhdGVzIHRoZSBoaWdobGlnaHQgYXQgYSBnaXZlbiBpbmRleC5cbiAgICAgKiAoaWYgc3VjaCBpbmRleCBleGlzdHMpXG4gICAgICovXG4gICAgc3RhdGljIHNldEFjdGl2ZUhpZ2hsaWdodChncm91cE5hbWU6IHN0cmluZywgaGlnaGxpZ2h0OiBJQWN0aXZlSGlnaGxpZ2h0SW5mbyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIGFueSBleGlzdGluZyBoaWdobGlnaHQuXG4gICAgICovXG4gICAgc3RhdGljIGNsZWFyQWN0aXZlSGlnaGxpZ2h0KGdyb3VwTmFtZTogYW55KTogdm9pZDtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyKTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDbGVhcnMgdGhlIGV4aXN0aW5nIGhpZ2hsaWdodCBhbmQgaGlnaGxpZ2h0cyB0aGUgc2VhcmNoZWQgdGV4dC5cbiAgICAgKiBSZXR1cm5zIGhvdyBtYW55IHRpbWVzIHRoZSBlbGVtZW50IGNvbnRhaW5zIHRoZSBzZWFyY2hlZCB0ZXh0LlxuICAgICAqL1xuICAgIGhpZ2hsaWdodCh0ZXh0OiBzdHJpbmcsIGNhc2VTZW5zaXRpdmU/OiBib29sZWFuLCBleGFjdE1hdGNoPzogYm9vbGVhbik6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBDbGVhcnMgYW55IGV4aXN0aW5nIGhpZ2hsaWdodC5cbiAgICAgKi9cbiAgICBjbGVhckhpZ2hsaWdodCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEFjdGl2YXRlcyB0aGUgaGlnaGxpZ2h0IGlmIGl0IGlzIG9uIHRoZSBjdXJyZW50bHkgYWN0aXZlIHJvdywgY29sdW1uIGFuZCBwYWdlLlxuICAgICAqL1xuICAgIGFjdGl2YXRlSWZOZWNlc3NhcnkoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBBdHRhY2hlcyBhIE11dGF0aW9uT2JzZXJ2ZXIgdG8gdGhlIHBhcmVudEVsZW1lbnQgYW5kIHdhdGNoZXMgZm9yIHdoZW4gdGhlIGNvbnRhaW5lciBlbGVtZW50IGlzIHJlbW92ZWQvcmVhZGRlZCB0byB0aGUgRE9NLlxuICAgICAqIFNob3VsZCBiZSB1c2VkIG9ubHkgd2hlbiBuZWNlc3NhcnkgYXMgdXNpbmcgbWFueSBvYnNlcnZlcnMgbWF5IGxlYWQgdG8gcGVyZm9ybWFuY2UgZGVncmFkYXRpb24uXG4gICAgICovXG4gICAgb2JzZXJ2ZSgpOiB2b2lkO1xuICAgIHByaXZhdGUgYWN0aXZhdGU7XG4gICAgcHJpdmF0ZSBkZWFjdGl2YXRlO1xuICAgIHByaXZhdGUgY2xlYXJDaGlsZEVsZW1lbnRzO1xuICAgIHByaXZhdGUgZ2V0SGlnaGxpZ2h0ZWRUZXh0O1xuICAgIHByaXZhdGUgYXBwZW5kVGV4dDtcbiAgICBwcml2YXRlIGFwcGVuZFNwYW47XG4gICAgcHJpdmF0ZSBhcHBlbmREaXY7XG4gICAgcHJpdmF0ZSBzZWFyY2hOZWVkc0V2YWx1YXRpb247XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4VGV4dEhpZ2hsaWdodE1vZHVsZSB7XG59XG5leHBvcnQge307XG4iXX0=