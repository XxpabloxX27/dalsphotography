import { ElementRef, EventEmitter, OnInit, PipeTransform } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { IBaseEventArgs } from '../../core/utils';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
export declare class IgxMaskDirective implements OnInit, ControlValueAccessor {
    private elementRef;
    /**
     * Sets the input mask.
     * ```html
     * <input [igxMask] = "'00/00/0000'">
     * ```
     * @memberof IgxMaskDirective
     */
    mask: string;
    /**
     * Sets the character representing a fillable spot in the input mask.
     * Default value is "'_'".
     * ```html
     * <input [promptChar] = "'/'">
     * ```
     * @memberof IgxMaskDirective
     */
    promptChar: string;
    /**
     * Specifies if the bound value includes the formatting symbols.
     * ```html
     * <input [includeLiterals] = "true">
     * ```
     * @memberof IgxMaskDirective
     */
    includeLiterals: boolean;
    /**
     * Specifies a placeholder.
     * ```html
     * <input placeholder = "enter text...">
     * ```
     * @memberof IgxMaskDirective
     */
    set placeholder(val: string);
    get placeholder(): string;
    /**
     * Specifies a pipe to be used on blur.
     * ```html
     * <input [displayValuePipe] = "displayFormatPipe">
     * ```
     * @memberof IgxMaskDirective
     */
    displayValuePipe: PipeTransform;
    /**
     * Specifies a pipe to be used on focus.
     * ```html
     * <input [focusedValuePipe] = "inputFormatPipe">
     * ```
     * @memberof IgxMaskDirective
     */
    focusedValuePipe: PipeTransform;
    /**
     *@hidden
     */
    private dataValue;
    /**
     * Emits an event each time the value changes.
     * Provides `rawValue: string` and `formattedValue: string` as event arguments.
     * ```html
     * <input (onValueChange) = "onValueChange(rawValue: string, formattedValue: string)">
     * ```
     */
    onValueChange: EventEmitter<IMaskEventArgs>;
    /**
     *@hidden
     */
    private get value();
    /**
     *@hidden
     */
    private set value(value);
    /**
     *@hidden
     */
    private get nativeElement();
    /**
     *@hidden
     */
    private get selectionStart();
    /**
     *@hidden
     */
    private get selectionEnd();
    /**
     *@hidden
     */
    private _ctrlDown;
    /**
     *@hidden
     */
    private _paste;
    /**
     *@hidden
     */
    private _selection;
    /**
     *@hidden
     */
    private _placeholder;
    /**
     *@hidden
     */
    private _maskOptions;
    /**
     *@hidden
     */
    private _key;
    /**
     *@hidden
     */
    private _cursorOnPaste;
    /**
     *@hidden
     */
    private _valOnPaste;
    private _stopPropagation;
    /**
     *@hidden
     */
    private maskHelper;
    /**
     *@hidden
     */
    private _onTouchedCallback;
    /**
     *@hidden
     */
    private _onChangeCallback;
    constructor(elementRef: ElementRef);
    /**
     *@hidden
     */
    ngOnInit(): void;
    /**
     *@hidden
     */
    onKeydown(event: any): void;
    /**
     *@hidden
     */
    onKeyup(event: any): void;
    /**
     *@hidden
     */
    onPaste(event: any): void;
    /**
     *@hidden
     */
    onInputChanged(event: any): void;
    /**
     *@hidden
     */
    onFocus(value: any): void;
    /**
     *@hidden
     */
    onBlur(value: any): void;
    /**
     *@hidden
     */
    private getCursorPosition;
    /**
     *@hidden
     */
    private setCursorPosition;
    /**
     *@hidden
     */
    writeValue(value: any): void;
    /**
     *@hidden
     */
    registerOnChange(fn: (_: any) => void): void;
    /**
     *@hidden
     */
    registerOnTouched(fn: () => void): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxMaskDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxMaskDirective, "[igxMask]", never, {
    "placeholder": "placeholder";
    "promptChar": "promptChar";
    "dataValue": "dataValue";
    "mask": "igxMask";
    "includeLiterals": "includeLiterals";
    "displayValuePipe": "displayValuePipe";
    "focusedValuePipe": "focusedValuePipe";
}, {
    "onValueChange": "onValueChange";
}, never>;
}
/**
 * The IgxMaskModule provides the {@link IgxMaskDirective} inside your application.
 */
export interface IMaskEventArgs extends IBaseEventArgs {
    rawValue: string;
    formattedValue: string;
}
/**
 * @hidden
 */
export declare class IgxMaskModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxMaskModule, [typeof IgxMaskDirective], [typeof ɵngcc1.CommonModule], [typeof IgxMaskDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxMaskModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzay5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsibWFzay5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtMQTs7Ozs7Ozs7Ozs7Ozs7QUFZQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25Jbml0LCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IElCYXNlRXZlbnRBcmdzIH0gZnJvbSAnLi4vLi4vY29yZS91dGlscyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hNYXNrRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGlucHV0IG1hc2suXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpbnB1dCBbaWd4TWFza10gPSBcIicwMC8wMC8wMDAwJ1wiPlxuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hNYXNrRGlyZWN0aXZlXG4gICAgICovXG4gICAgbWFzazogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGNoYXJhY3RlciByZXByZXNlbnRpbmcgYSBmaWxsYWJsZSBzcG90IGluIHRoZSBpbnB1dCBtYXNrLlxuICAgICAqIERlZmF1bHQgdmFsdWUgaXMgXCInXydcIi5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlucHV0IFtwcm9tcHRDaGFyXSA9IFwiJy8nXCI+XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneE1hc2tEaXJlY3RpdmVcbiAgICAgKi9cbiAgICBwcm9tcHRDaGFyOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIGlmIHRoZSBib3VuZCB2YWx1ZSBpbmNsdWRlcyB0aGUgZm9ybWF0dGluZyBzeW1ib2xzLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aW5wdXQgW2luY2x1ZGVMaXRlcmFsc10gPSBcInRydWVcIj5cbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4TWFza0RpcmVjdGl2ZVxuICAgICAqL1xuICAgIGluY2x1ZGVMaXRlcmFsczogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgYSBwbGFjZWhvbGRlci5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlucHV0IHBsYWNlaG9sZGVyID0gXCJlbnRlciB0ZXh0Li4uXCI+XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneE1hc2tEaXJlY3RpdmVcbiAgICAgKi9cbiAgICBzZXQgcGxhY2Vob2xkZXIodmFsOiBzdHJpbmcpO1xuICAgIGdldCBwbGFjZWhvbGRlcigpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIGEgcGlwZSB0byBiZSB1c2VkIG9uIGJsdXIuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpbnB1dCBbZGlzcGxheVZhbHVlUGlwZV0gPSBcImRpc3BsYXlGb3JtYXRQaXBlXCI+XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneE1hc2tEaXJlY3RpdmVcbiAgICAgKi9cbiAgICBkaXNwbGF5VmFsdWVQaXBlOiBQaXBlVHJhbnNmb3JtO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyBhIHBpcGUgdG8gYmUgdXNlZCBvbiBmb2N1cy5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlucHV0IFtmb2N1c2VkVmFsdWVQaXBlXSA9IFwiaW5wdXRGb3JtYXRQaXBlXCI+XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneE1hc2tEaXJlY3RpdmVcbiAgICAgKi9cbiAgICBmb2N1c2VkVmFsdWVQaXBlOiBQaXBlVHJhbnNmb3JtO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgZGF0YVZhbHVlO1xuICAgIC8qKlxuICAgICAqIEVtaXRzIGFuIGV2ZW50IGVhY2ggdGltZSB0aGUgdmFsdWUgY2hhbmdlcy5cbiAgICAgKiBQcm92aWRlcyBgcmF3VmFsdWU6IHN0cmluZ2AgYW5kIGBmb3JtYXR0ZWRWYWx1ZTogc3RyaW5nYCBhcyBldmVudCBhcmd1bWVudHMuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpbnB1dCAob25WYWx1ZUNoYW5nZSkgPSBcIm9uVmFsdWVDaGFuZ2UocmF3VmFsdWU6IHN0cmluZywgZm9ybWF0dGVkVmFsdWU6IHN0cmluZylcIj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBvblZhbHVlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8SU1hc2tFdmVudEFyZ3M+O1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0IHZhbHVlKCk7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZXQgdmFsdWUodmFsdWUpO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0IG5hdGl2ZUVsZW1lbnQoKTtcbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIGdldCBzZWxlY3Rpb25TdGFydCgpO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0IHNlbGVjdGlvbkVuZCgpO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgX2N0cmxEb3duO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgX3Bhc3RlO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgX3NlbGVjdGlvbjtcbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9wbGFjZWhvbGRlcjtcbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9tYXNrT3B0aW9ucztcbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9rZXk7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBfY3Vyc29yT25QYXN0ZTtcbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF92YWxPblBhc3RlO1xuICAgIHByaXZhdGUgX3N0b3BQcm9wYWdhdGlvbjtcbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIG1hc2tIZWxwZXI7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBfb25Ub3VjaGVkQ2FsbGJhY2s7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBfb25DaGFuZ2VDYWxsYmFjaztcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKTtcbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIG9uS2V5ZG93bihldmVudDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBvbktleXVwKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIG9uUGFzdGUoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgb25JbnB1dENoYW5nZWQoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgb25Gb2N1cyh2YWx1ZTogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBvbkJsdXIodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRDdXJzb3JQb3NpdGlvbjtcbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIHNldEN1cnNvclBvc2l0aW9uO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKF86IGFueSkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpOiB2b2lkO1xufVxuLyoqXG4gKiBUaGUgSWd4TWFza01vZHVsZSBwcm92aWRlcyB0aGUge0BsaW5rIElneE1hc2tEaXJlY3RpdmV9IGluc2lkZSB5b3VyIGFwcGxpY2F0aW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElNYXNrRXZlbnRBcmdzIGV4dGVuZHMgSUJhc2VFdmVudEFyZ3Mge1xuICAgIHJhd1ZhbHVlOiBzdHJpbmc7XG4gICAgZm9ybWF0dGVkVmFsdWU6IHN0cmluZztcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hNYXNrTW9kdWxlIHtcbn1cbiJdfQ==