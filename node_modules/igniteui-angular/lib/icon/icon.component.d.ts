import { ElementRef, OnInit, TemplateRef } from '@angular/core';
import { IgxIconService } from './icon.service';
import * as ɵngcc0 from '@angular/core';
export declare class IgxIconComponent implements OnInit {
    private _el;
    private iconService;
    private noLigature;
    private explicitLigature;
    private svgImage;
    /**
     *  This allows you to change the value of `class.igx-icon`. By default it's `igx-icon`.
     *
     * @hidden
     * @internal
     */
    cssClass: string;
    /**
     *  This allows you to disable the `aria-hidden` attribute. By default it's applied.
     * @example
     *```typescript
     *@ViewChild("MyIcon") public icon: IgxIconComponent;
     *constructor(private cdRef:ChangeDetectorRef) {}
     *ngAfterViewInit() {
     *    this.icon.ariaHidden = false;
     *    this.cdRef.detectChanges();
     *}
     * ```
     */
    ariaHidden: boolean;
    /**
    *  An @Input property that sets the value of the `id` attribute.
    * @example
    *```html
    *<igx-icon id="igx-icon-1" fontSet="material">settings</igx-icon>
    *```
    */
    id: string;
    /**
    *  An @Input property that sets the value of the `fontSet`. By default it's "material".
    * @example
    *```html
    *<igx-icon fontSet="material">settings</igx-icon>
    *```
    */
    font: string;
    /**
    *  An @Input property that allows you to disable the `active` property. By default it's applied.
    * @example
    *```html
    *<igx-icon [isActive]="false">settings</igx-icon>
    *```
    */
    active: boolean;
    /**
    *  An @Input property that allows you to change the `iconColor` of the icon.
    * @example
    *```html
    *<igx-icon color="blue">settings</igx-icon>
    *```
    */
    iconColor: string;
    /**
    *  An @Input property that allows you to set the `iconName` of the icon.
    *  @example
    *```html
    *<igx-icon name="contains" fontSet="filter-icons"></igx-icon>
    *```
    */
    iconName: string;
    /**
     * An ElementRef property of the `igx-icon` component.
     */
    el: ElementRef;
    constructor(_el: ElementRef, iconService: IgxIconService);
    /**
     * @hidden
     * @internal
     */
    ngOnInit(): void;
    /**
     *  An accessor that returns the value of the font property.
     * @example
     *```typescript
     *@ViewChild("MyIcon")
     *public icon: IgxIconComponent;
     *ngAfterViewInit() {
     *    let iconFont = this.icon.getFontSet;
     * }
     * ```
     */
    get getFontSet(): string;
    /**
     *  An accessor that returns the value of the active property.
     * @example
     *```typescript
     *@ViewChild("MyIcon")
     *public icon: IgxIconComponent;
     *ngAfterViewInit() {
     *    let iconActive = this.icon.getActive;
     * }
     * ```
     */
    get getActive(): boolean;
    /**
     *  An accessor that returns inactive property.
     * @example
     *```typescript
     *@ViewChild("MyIcon")
     *public icon: IgxIconComponent;
     *ngAfterViewInit() {
     *    let iconActive = this.icon.getInactive;
     * }
     * ```
     */
    get getInactive(): boolean;
    /**
     *  An accessor that returns the opposite value of the `iconColor` property.
     * @example
     *```typescript
     *@ViewChild("MyIcon")
     *public icon: IgxIconComponent;
     *ngAfterViewInit() {
     *    let iconColor = this.icon.getIconColor;
     * }
     * ```
     */
    get getIconColor(): string;
    /**
     *  An accessor that returns the value of the iconName property.
     * @example
     *```typescript
     *@ViewChild("MyIcon")
     *public icon: IgxIconComponent;
     *ngAfterViewInit() {
     *    let iconName = this.icon.getIconName;
     * }
     * ```
     */
    get getIconName(): string;
    /**
     *  An accessor that returns the key of the SVG image.
     *  The key consists of the fontSet and the iconName separated by underscore.
     * @example
     *```typescript
     *@ViewChild("MyIcon")
     *public icon: IgxIconComponent;
     *ngAfterViewInit() {
     *    let svgKey = this.icon.getSvgKey;
     * }
     * ```
     */
    get getSvgKey(): string;
    /**
     *   An accessor that returns a TemplateRef to explicit, svg or no ligature.
     * @example
     *```typescript
     *@ViewChild("MyIcon")
     *public icon: IgxIconComponent;
     *ngAfterViewInit() {
     *    let iconTemplate = this.icon.template;
     * }
     * ```
     */
    get template(): TemplateRef<HTMLElement>;
    /**
     * @hidden
     * @internal
     */
    private updateIconClass;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxIconComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxIconComponent, "igx-icon", never, {
    "id": "id";
    "active": "isActive";
    "font": "fontSet";
    "iconColor": "color";
    "iconName": "name";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiaWNvbi5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNLQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIE9uSW5pdCwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneEljb25TZXJ2aWNlIH0gZnJvbSAnLi9pY29uLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4SWNvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSBfZWw7XG4gICAgcHJpdmF0ZSBpY29uU2VydmljZTtcbiAgICBwcml2YXRlIG5vTGlnYXR1cmU7XG4gICAgcHJpdmF0ZSBleHBsaWNpdExpZ2F0dXJlO1xuICAgIHByaXZhdGUgc3ZnSW1hZ2U7XG4gICAgLyoqXG4gICAgICogIFRoaXMgYWxsb3dzIHlvdSB0byBjaGFuZ2UgdGhlIHZhbHVlIG9mIGBjbGFzcy5pZ3gtaWNvbmAuIEJ5IGRlZmF1bHQgaXQncyBgaWd4LWljb25gLlxuICAgICAqXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNzc0NsYXNzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogIFRoaXMgYWxsb3dzIHlvdSB0byBkaXNhYmxlIHRoZSBgYXJpYS1oaWRkZW5gIGF0dHJpYnV0ZS4gQnkgZGVmYXVsdCBpdCdzIGFwcGxpZWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKmBgYHR5cGVzY3JpcHRcbiAgICAgKkBWaWV3Q2hpbGQoXCJNeUljb25cIikgcHVibGljIGljb246IElneEljb25Db21wb25lbnQ7XG4gICAgICpjb25zdHJ1Y3Rvcihwcml2YXRlIGNkUmVmOkNoYW5nZURldGVjdG9yUmVmKSB7fVxuICAgICAqbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAqICAgIHRoaXMuaWNvbi5hcmlhSGlkZGVuID0gZmFsc2U7XG4gICAgICogICAgdGhpcy5jZFJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICp9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgYXJpYUhpZGRlbjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAqICBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIHRoZSB2YWx1ZSBvZiB0aGUgYGlkYCBhdHRyaWJ1dGUuXG4gICAgKiBAZXhhbXBsZVxuICAgICpgYGBodG1sXG4gICAgKjxpZ3gtaWNvbiBpZD1cImlneC1pY29uLTFcIiBmb250U2V0PVwibWF0ZXJpYWxcIj5zZXR0aW5nczwvaWd4LWljb24+XG4gICAgKmBgYFxuICAgICovXG4gICAgaWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAqICBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIHRoZSB2YWx1ZSBvZiB0aGUgYGZvbnRTZXRgLiBCeSBkZWZhdWx0IGl0J3MgXCJtYXRlcmlhbFwiLlxuICAgICogQGV4YW1wbGVcbiAgICAqYGBgaHRtbFxuICAgICo8aWd4LWljb24gZm9udFNldD1cIm1hdGVyaWFsXCI+c2V0dGluZ3M8L2lneC1pY29uPlxuICAgICpgYGBcbiAgICAqL1xuICAgIGZvbnQ6IHN0cmluZztcbiAgICAvKipcbiAgICAqICBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBhbGxvd3MgeW91IHRvIGRpc2FibGUgdGhlIGBhY3RpdmVgIHByb3BlcnR5LiBCeSBkZWZhdWx0IGl0J3MgYXBwbGllZC5cbiAgICAqIEBleGFtcGxlXG4gICAgKmBgYGh0bWxcbiAgICAqPGlneC1pY29uIFtpc0FjdGl2ZV09XCJmYWxzZVwiPnNldHRpbmdzPC9pZ3gtaWNvbj5cbiAgICAqYGBgXG4gICAgKi9cbiAgICBhY3RpdmU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgKiAgQW4gQElucHV0IHByb3BlcnR5IHRoYXQgYWxsb3dzIHlvdSB0byBjaGFuZ2UgdGhlIGBpY29uQ29sb3JgIG9mIHRoZSBpY29uLlxuICAgICogQGV4YW1wbGVcbiAgICAqYGBgaHRtbFxuICAgICo8aWd4LWljb24gY29sb3I9XCJibHVlXCI+c2V0dGluZ3M8L2lneC1pY29uPlxuICAgICpgYGBcbiAgICAqL1xuICAgIGljb25Db2xvcjogc3RyaW5nO1xuICAgIC8qKlxuICAgICogIEFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IGFsbG93cyB5b3UgdG8gc2V0IHRoZSBgaWNvbk5hbWVgIG9mIHRoZSBpY29uLlxuICAgICogIEBleGFtcGxlXG4gICAgKmBgYGh0bWxcbiAgICAqPGlneC1pY29uIG5hbWU9XCJjb250YWluc1wiIGZvbnRTZXQ9XCJmaWx0ZXItaWNvbnNcIj48L2lneC1pY29uPlxuICAgICpgYGBcbiAgICAqL1xuICAgIGljb25OYW1lOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQW4gRWxlbWVudFJlZiBwcm9wZXJ0eSBvZiB0aGUgYGlneC1pY29uYCBjb21wb25lbnQuXG4gICAgICovXG4gICAgZWw6IEVsZW1lbnRSZWY7XG4gICAgY29uc3RydWN0b3IoX2VsOiBFbGVtZW50UmVmLCBpY29uU2VydmljZTogSWd4SWNvblNlcnZpY2UpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqICBBbiBhY2Nlc3NvciB0aGF0IHJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBmb250IHByb3BlcnR5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpgYGB0eXBlc2NyaXB0XG4gICAgICpAVmlld0NoaWxkKFwiTXlJY29uXCIpXG4gICAgICpwdWJsaWMgaWNvbjogSWd4SWNvbkNvbXBvbmVudDtcbiAgICAgKm5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgKiAgICBsZXQgaWNvbkZvbnQgPSB0aGlzLmljb24uZ2V0Rm9udFNldDtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IGdldEZvbnRTZXQoKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqICBBbiBhY2Nlc3NvciB0aGF0IHJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBhY3RpdmUgcHJvcGVydHkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKmBgYHR5cGVzY3JpcHRcbiAgICAgKkBWaWV3Q2hpbGQoXCJNeUljb25cIilcbiAgICAgKnB1YmxpYyBpY29uOiBJZ3hJY29uQ29tcG9uZW50O1xuICAgICAqbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAqICAgIGxldCBpY29uQWN0aXZlID0gdGhpcy5pY29uLmdldEFjdGl2ZTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IGdldEFjdGl2ZSgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqICBBbiBhY2Nlc3NvciB0aGF0IHJldHVybnMgaW5hY3RpdmUgcHJvcGVydHkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKmBgYHR5cGVzY3JpcHRcbiAgICAgKkBWaWV3Q2hpbGQoXCJNeUljb25cIilcbiAgICAgKnB1YmxpYyBpY29uOiBJZ3hJY29uQ29tcG9uZW50O1xuICAgICAqbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAqICAgIGxldCBpY29uQWN0aXZlID0gdGhpcy5pY29uLmdldEluYWN0aXZlO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXQgZ2V0SW5hY3RpdmUoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiAgQW4gYWNjZXNzb3IgdGhhdCByZXR1cm5zIHRoZSBvcHBvc2l0ZSB2YWx1ZSBvZiB0aGUgYGljb25Db2xvcmAgcHJvcGVydHkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKmBgYHR5cGVzY3JpcHRcbiAgICAgKkBWaWV3Q2hpbGQoXCJNeUljb25cIilcbiAgICAgKnB1YmxpYyBpY29uOiBJZ3hJY29uQ29tcG9uZW50O1xuICAgICAqbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAqICAgIGxldCBpY29uQ29sb3IgPSB0aGlzLmljb24uZ2V0SWNvbkNvbG9yO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXQgZ2V0SWNvbkNvbG9yKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiAgQW4gYWNjZXNzb3IgdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgaWNvbk5hbWUgcHJvcGVydHkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKmBgYHR5cGVzY3JpcHRcbiAgICAgKkBWaWV3Q2hpbGQoXCJNeUljb25cIilcbiAgICAgKnB1YmxpYyBpY29uOiBJZ3hJY29uQ29tcG9uZW50O1xuICAgICAqbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAqICAgIGxldCBpY29uTmFtZSA9IHRoaXMuaWNvbi5nZXRJY29uTmFtZTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IGdldEljb25OYW1lKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiAgQW4gYWNjZXNzb3IgdGhhdCByZXR1cm5zIHRoZSBrZXkgb2YgdGhlIFNWRyBpbWFnZS5cbiAgICAgKiAgVGhlIGtleSBjb25zaXN0cyBvZiB0aGUgZm9udFNldCBhbmQgdGhlIGljb25OYW1lIHNlcGFyYXRlZCBieSB1bmRlcnNjb3JlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpgYGB0eXBlc2NyaXB0XG4gICAgICpAVmlld0NoaWxkKFwiTXlJY29uXCIpXG4gICAgICpwdWJsaWMgaWNvbjogSWd4SWNvbkNvbXBvbmVudDtcbiAgICAgKm5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgKiAgICBsZXQgc3ZnS2V5ID0gdGhpcy5pY29uLmdldFN2Z0tleTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IGdldFN2Z0tleSgpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogICBBbiBhY2Nlc3NvciB0aGF0IHJldHVybnMgYSBUZW1wbGF0ZVJlZiB0byBleHBsaWNpdCwgc3ZnIG9yIG5vIGxpZ2F0dXJlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpgYGB0eXBlc2NyaXB0XG4gICAgICpAVmlld0NoaWxkKFwiTXlJY29uXCIpXG4gICAgICpwdWJsaWMgaWNvbjogSWd4SWNvbkNvbXBvbmVudDtcbiAgICAgKm5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgKiAgICBsZXQgaWNvblRlbXBsYXRlID0gdGhpcy5pY29uLnRlbXBsYXRlO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXQgdGVtcGxhdGUoKTogVGVtcGxhdGVSZWY8SFRNTEVsZW1lbnQ+O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwcml2YXRlIHVwZGF0ZUljb25DbGFzcztcbn1cbiJdfQ==