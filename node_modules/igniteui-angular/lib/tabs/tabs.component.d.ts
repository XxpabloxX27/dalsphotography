import { AfterViewInit, ElementRef, EventEmitter, QueryList, OnDestroy, NgZone } from '@angular/core';
import { IgxTabItemComponent } from './tab-item.component';
import { IgxTabsGroupComponent } from './tabs-group.component';
import { IgxTabsBase, IgxTabItemBase } from './tabs.common';
import { PlatformUtil } from '../core/utils';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './tabs-group.component';
import * as ɵngcc2 from './tab-item.component';
import * as ɵngcc3 from './tabs.directives';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '../badge/badge.component';
import * as ɵngcc6 from '../icon/index';
import * as ɵngcc7 from '../directives/ripple/ripple.directive';
export declare enum IgxTabsType {
    FIXED = "fixed",
    CONTENTFIT = "contentfit"
}
export declare class IgxTabsComponent implements IgxTabsBase, AfterViewInit, OnDestroy {
    private _element;
    private _ngZone;
    private platformUtil;
    /**
    * Provides an observable collection of all `IgxTabsGroupComponent`s.
    * ```typescript
    * const groupItems = this.myTabComponent.groups;
    * ```
    */
    groups: QueryList<IgxTabsGroupComponent>;
    /**
    * Provides an observable collection of all `IgxTabItemComponent`s defined in the page.
    * ```typescript
    * const tabItems = this.myTabComponent.contentTabs;
    * ```
    */
    contentTabs: QueryList<IgxTabItemComponent>;
    /**
    * An @Input property that sets the value of the `selectedIndex`.
    * Default value is 0.
    * ```html
    * <igx-tabs selectedIndex="1">
    * ```
    *
    * Two-way data binding.
    * ```html
    * <igx-tabs [(selectedIndex)]="model.selectedIndex">
    * ```
    */
    get selectedIndex(): number;
    set selectedIndex(index: number);
    /**
     *@hidden
     */
    selectedIndexChange: EventEmitter<number>;
    /**
     * Defines the tab header sizing mode. You can choose between `contentfit` or `fixed`.
     * By default the header sizing mode is `contentfit`.
     * ```html
     * <igx-tabs type="fixed">
     *     <igx-tabs-group label="HOME">Home</igx-tabs-group>
     * </igx-tabs>
     * ```
     */
    type: string | IgxTabsType;
    /**
    * @hidden
    */
    class: string;
    /**
     * Emitted when a tab item is deselected.
     * ```html
     * <igx-tabs (onTabItemDeselected)="itemDeselected($event)">
     *      <igx-tabs-group label="Tab 1">This is Tab 1 content.</igx-tabs-group>
     *      <igx-tabs-group label="Tab 2">This is Tab 2 content.</igx-tabs-group>
     * </igx-tabs>
     * ```
     * ```typescript
     * itemDeselected(e){
     *      const tabGroup = e.group;
     *      const tabItem = e.tab;
     * }
     * ```
     */
    onTabItemDeselected: EventEmitter<any>;
    /**
    * Emitted when a tab item is selected.
    * ```html
    * <igx-tabs (onTabItemSelected)="itemSelected($event)">
    *      <igx-tabs-group label="Tab 1">This is Tab 1 content.</igx-tabs-group>
    *      <igx-tabs-group label="Tab 2">This is Tab 2 content.</igx-tabs-group>
    * </igx-tabs>
    * ```
    * ```typescript
    * itemSelected(e){
    *      const tabGroup = e.group;
    *      const tabItem = e.tab;
    * }
    * ```
    */
    onTabItemSelected: EventEmitter<any>;
    /**
     * @hidden
     */
    contentsContainer: ElementRef;
    /**
     * @hidden
     */
    headerContainer: ElementRef;
    /**
     * @hidden
     */
    itemsContainer: ElementRef;
    /**
     * @hidden
     */
    selectedIndicator: ElementRef;
    /**
    * @hidden
    */
    tabsContainer: ElementRef;
    /**
     * @hidden
     */
    viewPort: ElementRef;
    /**
     * Provides an observable collection of all `IgxTabItemComponent`s.
     * ```typescript
     * const tabItems = this.myTabComponent.viewTabs;
     * ```
     */
    viewTabs: QueryList<IgxTabItemComponent>;
    /**
     * Provides an observable collection of all `IgxTabItemComponent`s.
     * First try to get them as content children if not available get them as view children.
     * ```typescript
     * const tabItems = this.myTabComponent.tabs;
     * ```
     */
    get tabs(): QueryList<IgxTabItemComponent>;
    /**
     *@hidden
     */
    get hasContentTabs(): boolean;
    /**
     * @hidden
     */
    calculatedWidth: number;
    /**
     * @hidden
     */
    visibleItemsWidth: number;
    /**
     * @hidden
     */
    offset: number;
    private _groupChanges$;
    private _selectedIndex;
    private _resizeObserver;
    /**
     * @hidden
     */
    get cssClass(): string;
    /**
     * @hidden
     */
    scrollLeft(event: any): void;
    /**
     * @hidden
     */
    scrollRight(event: any): void;
    /**
     * @hidden
     */
    scrollElement(element: any, scrollRight: boolean): void;
    /**
     * Gets the selected `IgxTabItemComponent`.
     * ```
     * const selectedItem = this.myTabComponent.selectedTabItem;
     * ```
     */
    get selectedTabItem(): IgxTabItemComponent;
    constructor(_element: ElementRef, _ngZone: NgZone, platformUtil: PlatformUtil);
    /**
     * @hidden
     */
    ngAfterViewInit(): void;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    private resetSelectionOnCollectionChanged;
    private scroll;
    /**
     * @hidden
     */
    performSelectionChange(newTab: IgxTabItemBase): void;
    private performDeselection;
    private performSelection;
    private bringNewTabIntoView;
    /**
     * @hidden
     */
    transformContentAnimation(tab: IgxTabItemBase, duration: number): void;
    /**
     * @hidden
     */
    transformIndicatorAnimation(element: HTMLElement, duration?: number): void;
    hideIndicator(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxTabsComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxTabsComponent, "igx-tabs", never, {
    "type": "type";
    "class": "class";
    "selectedIndex": "selectedIndex";
}, {
    "selectedIndexChange": "selectedIndexChange";
    "onTabItemDeselected": "onTabItemDeselected";
    "onTabItemSelected": "onTabItemSelected";
}, ["groups", "contentTabs"]>;
}
/**
 * @hidden
 */
export declare class IgxTabsModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxTabsModule, [typeof IgxTabsComponent, typeof ɵngcc1.IgxTabsGroupComponent, typeof ɵngcc2.IgxTabItemComponent, typeof ɵngcc3.IgxTabItemTemplateDirective, typeof ɵngcc3.IgxRightButtonStyleDirective, typeof ɵngcc3.IgxLeftButtonStyleDirective], [typeof ɵngcc4.CommonModule, typeof ɵngcc5.IgxBadgeModule, typeof ɵngcc6.IgxIconModule, typeof ɵngcc7.IgxRippleModule], [typeof IgxTabsComponent, typeof ɵngcc1.IgxTabsGroupComponent, typeof ɵngcc2.IgxTabItemComponent, typeof ɵngcc3.IgxTabItemTemplateDirective, typeof ɵngcc3.IgxRightButtonStyleDirective, typeof ɵngcc3.IgxLeftButtonStyleDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxTabsModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidGFicy5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztBQUtBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrTUE7Ozs7Ozs7QUFLQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgUXVlcnlMaXN0LCBPbkRlc3Ryb3ksIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4VGFiSXRlbUNvbXBvbmVudCB9IGZyb20gJy4vdGFiLWl0ZW0uY29tcG9uZW50JztcbmltcG9ydCB7IElneFRhYnNHcm91cENvbXBvbmVudCB9IGZyb20gJy4vdGFicy1ncm91cC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4VGFic0Jhc2UsIElneFRhYkl0ZW1CYXNlIH0gZnJvbSAnLi90YWJzLmNvbW1vbic7XG5pbXBvcnQgeyBQbGF0Zm9ybVV0aWwgfSBmcm9tICcuLi9jb3JlL3V0aWxzJztcbmV4cG9ydCBkZWNsYXJlIGVudW0gSWd4VGFic1R5cGUge1xuICAgIEZJWEVEID0gXCJmaXhlZFwiLFxuICAgIENPTlRFTlRGSVQgPSBcImNvbnRlbnRmaXRcIlxufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4VGFic0NvbXBvbmVudCBpbXBsZW1lbnRzIElneFRhYnNCYXNlLCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgX2VsZW1lbnQ7XG4gICAgcHJpdmF0ZSBfbmdab25lO1xuICAgIHByaXZhdGUgcGxhdGZvcm1VdGlsO1xuICAgIC8qKlxuICAgICogUHJvdmlkZXMgYW4gb2JzZXJ2YWJsZSBjb2xsZWN0aW9uIG9mIGFsbCBgSWd4VGFic0dyb3VwQ29tcG9uZW50YHMuXG4gICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgKiBjb25zdCBncm91cEl0ZW1zID0gdGhpcy5teVRhYkNvbXBvbmVudC5ncm91cHM7XG4gICAgKiBgYGBcbiAgICAqL1xuICAgIGdyb3VwczogUXVlcnlMaXN0PElneFRhYnNHcm91cENvbXBvbmVudD47XG4gICAgLyoqXG4gICAgKiBQcm92aWRlcyBhbiBvYnNlcnZhYmxlIGNvbGxlY3Rpb24gb2YgYWxsIGBJZ3hUYWJJdGVtQ29tcG9uZW50YHMgZGVmaW5lZCBpbiB0aGUgcGFnZS5cbiAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAqIGNvbnN0IHRhYkl0ZW1zID0gdGhpcy5teVRhYkNvbXBvbmVudC5jb250ZW50VGFicztcbiAgICAqIGBgYFxuICAgICovXG4gICAgY29udGVudFRhYnM6IFF1ZXJ5TGlzdDxJZ3hUYWJJdGVtQ29tcG9uZW50PjtcbiAgICAvKipcbiAgICAqIEFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IHNldHMgdGhlIHZhbHVlIG9mIHRoZSBgc2VsZWN0ZWRJbmRleGAuXG4gICAgKiBEZWZhdWx0IHZhbHVlIGlzIDAuXG4gICAgKiBgYGBodG1sXG4gICAgKiA8aWd4LXRhYnMgc2VsZWN0ZWRJbmRleD1cIjFcIj5cbiAgICAqIGBgYFxuICAgICpcbiAgICAqIFR3by13YXkgZGF0YSBiaW5kaW5nLlxuICAgICogYGBgaHRtbFxuICAgICogPGlneC10YWJzIFsoc2VsZWN0ZWRJbmRleCldPVwibW9kZWwuc2VsZWN0ZWRJbmRleFwiPlxuICAgICogYGBgXG4gICAgKi9cbiAgICBnZXQgc2VsZWN0ZWRJbmRleCgpOiBudW1iZXI7XG4gICAgc2V0IHNlbGVjdGVkSW5kZXgoaW5kZXg6IG51bWJlcik7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgc2VsZWN0ZWRJbmRleENoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgdGFiIGhlYWRlciBzaXppbmcgbW9kZS4gWW91IGNhbiBjaG9vc2UgYmV0d2VlbiBgY29udGVudGZpdGAgb3IgYGZpeGVkYC5cbiAgICAgKiBCeSBkZWZhdWx0IHRoZSBoZWFkZXIgc2l6aW5nIG1vZGUgaXMgYGNvbnRlbnRmaXRgLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LXRhYnMgdHlwZT1cImZpeGVkXCI+XG4gICAgICogICAgIDxpZ3gtdGFicy1ncm91cCBsYWJlbD1cIkhPTUVcIj5Ib21lPC9pZ3gtdGFicy1ncm91cD5cbiAgICAgKiA8L2lneC10YWJzPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHR5cGU6IHN0cmluZyB8IElneFRhYnNUeXBlO1xuICAgIC8qKlxuICAgICogQGhpZGRlblxuICAgICovXG4gICAgY2xhc3M6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gYSB0YWIgaXRlbSBpcyBkZXNlbGVjdGVkLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LXRhYnMgKG9uVGFiSXRlbURlc2VsZWN0ZWQpPVwiaXRlbURlc2VsZWN0ZWQoJGV2ZW50KVwiPlxuICAgICAqICAgICAgPGlneC10YWJzLWdyb3VwIGxhYmVsPVwiVGFiIDFcIj5UaGlzIGlzIFRhYiAxIGNvbnRlbnQuPC9pZ3gtdGFicy1ncm91cD5cbiAgICAgKiAgICAgIDxpZ3gtdGFicy1ncm91cCBsYWJlbD1cIlRhYiAyXCI+VGhpcyBpcyBUYWIgMiBjb250ZW50LjwvaWd4LXRhYnMtZ3JvdXA+XG4gICAgICogPC9pZ3gtdGFicz5cbiAgICAgKiBgYGBcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogaXRlbURlc2VsZWN0ZWQoZSl7XG4gICAgICogICAgICBjb25zdCB0YWJHcm91cCA9IGUuZ3JvdXA7XG4gICAgICogICAgICBjb25zdCB0YWJJdGVtID0gZS50YWI7XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIG9uVGFiSXRlbURlc2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIC8qKlxuICAgICogRW1pdHRlZCB3aGVuIGEgdGFiIGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAgKiBgYGBodG1sXG4gICAgKiA8aWd4LXRhYnMgKG9uVGFiSXRlbVNlbGVjdGVkKT1cIml0ZW1TZWxlY3RlZCgkZXZlbnQpXCI+XG4gICAgKiAgICAgIDxpZ3gtdGFicy1ncm91cCBsYWJlbD1cIlRhYiAxXCI+VGhpcyBpcyBUYWIgMSBjb250ZW50LjwvaWd4LXRhYnMtZ3JvdXA+XG4gICAgKiAgICAgIDxpZ3gtdGFicy1ncm91cCBsYWJlbD1cIlRhYiAyXCI+VGhpcyBpcyBUYWIgMiBjb250ZW50LjwvaWd4LXRhYnMtZ3JvdXA+XG4gICAgKiA8L2lneC10YWJzPlxuICAgICogYGBgXG4gICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgKiBpdGVtU2VsZWN0ZWQoZSl7XG4gICAgKiAgICAgIGNvbnN0IHRhYkdyb3VwID0gZS5ncm91cDtcbiAgICAqICAgICAgY29uc3QgdGFiSXRlbSA9IGUudGFiO1xuICAgICogfVxuICAgICogYGBgXG4gICAgKi9cbiAgICBvblRhYkl0ZW1TZWxlY3RlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGNvbnRlbnRzQ29udGFpbmVyOiBFbGVtZW50UmVmO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBoZWFkZXJDb250YWluZXI6IEVsZW1lbnRSZWY7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGl0ZW1zQ29udGFpbmVyOiBFbGVtZW50UmVmO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBzZWxlY3RlZEluZGljYXRvcjogRWxlbWVudFJlZjtcbiAgICAvKipcbiAgICAqIEBoaWRkZW5cbiAgICAqL1xuICAgIHRhYnNDb250YWluZXI6IEVsZW1lbnRSZWY7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHZpZXdQb3J0OiBFbGVtZW50UmVmO1xuICAgIC8qKlxuICAgICAqIFByb3ZpZGVzIGFuIG9ic2VydmFibGUgY29sbGVjdGlvbiBvZiBhbGwgYElneFRhYkl0ZW1Db21wb25lbnRgcy5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgdGFiSXRlbXMgPSB0aGlzLm15VGFiQ29tcG9uZW50LnZpZXdUYWJzO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHZpZXdUYWJzOiBRdWVyeUxpc3Q8SWd4VGFiSXRlbUNvbXBvbmVudD47XG4gICAgLyoqXG4gICAgICogUHJvdmlkZXMgYW4gb2JzZXJ2YWJsZSBjb2xsZWN0aW9uIG9mIGFsbCBgSWd4VGFiSXRlbUNvbXBvbmVudGBzLlxuICAgICAqIEZpcnN0IHRyeSB0byBnZXQgdGhlbSBhcyBjb250ZW50IGNoaWxkcmVuIGlmIG5vdCBhdmFpbGFibGUgZ2V0IHRoZW0gYXMgdmlldyBjaGlsZHJlbi5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgdGFiSXRlbXMgPSB0aGlzLm15VGFiQ29tcG9uZW50LnRhYnM7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IHRhYnMoKTogUXVlcnlMaXN0PElneFRhYkl0ZW1Db21wb25lbnQ+O1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIGdldCBoYXNDb250ZW50VGFicygpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjYWxjdWxhdGVkV2lkdGg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgdmlzaWJsZUl0ZW1zV2lkdGg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb2Zmc2V0OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfZ3JvdXBDaGFuZ2VzJDtcbiAgICBwcml2YXRlIF9zZWxlY3RlZEluZGV4O1xuICAgIHByaXZhdGUgX3Jlc2l6ZU9ic2VydmVyO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBnZXQgY3NzQ2xhc3MoKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBzY3JvbGxMZWZ0KGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBzY3JvbGxSaWdodChldmVudDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgc2Nyb2xsRWxlbWVudChlbGVtZW50OiBhbnksIHNjcm9sbFJpZ2h0OiBib29sZWFuKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzZWxlY3RlZCBgSWd4VGFiSXRlbUNvbXBvbmVudGAuXG4gICAgICogYGBgXG4gICAgICogY29uc3Qgc2VsZWN0ZWRJdGVtID0gdGhpcy5teVRhYkNvbXBvbmVudC5zZWxlY3RlZFRhYkl0ZW07XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IHNlbGVjdGVkVGFiSXRlbSgpOiBJZ3hUYWJJdGVtQ29tcG9uZW50O1xuICAgIGNvbnN0cnVjdG9yKF9lbGVtZW50OiBFbGVtZW50UmVmLCBfbmdab25lOiBOZ1pvbmUsIHBsYXRmb3JtVXRpbDogUGxhdGZvcm1VdGlsKTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSByZXNldFNlbGVjdGlvbk9uQ29sbGVjdGlvbkNoYW5nZWQ7XG4gICAgcHJpdmF0ZSBzY3JvbGw7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHBlcmZvcm1TZWxlY3Rpb25DaGFuZ2UobmV3VGFiOiBJZ3hUYWJJdGVtQmFzZSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBwZXJmb3JtRGVzZWxlY3Rpb247XG4gICAgcHJpdmF0ZSBwZXJmb3JtU2VsZWN0aW9uO1xuICAgIHByaXZhdGUgYnJpbmdOZXdUYWJJbnRvVmlldztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgdHJhbnNmb3JtQ29udGVudEFuaW1hdGlvbih0YWI6IElneFRhYkl0ZW1CYXNlLCBkdXJhdGlvbjogbnVtYmVyKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgdHJhbnNmb3JtSW5kaWNhdG9yQW5pbWF0aW9uKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBkdXJhdGlvbj86IG51bWJlcik6IHZvaWQ7XG4gICAgaGlkZUluZGljYXRvcigpOiB2b2lkO1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneFRhYnNNb2R1bGUge1xufVxuIl19