import { EventEmitter } from '@angular/core';
import { IDisplayDensityOptions, DisplayDensityBase } from '../core/displayDensity';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../select/select.module';
import * as ɵngcc3 from '@angular/forms';
import * as ɵngcc4 from '../icon/index';
import * as ɵngcc5 from '../directives/button/button.directive';
import * as ɵngcc6 from '../directives/ripple/ripple.directive';
export declare class IgxPaginatorComponent extends DisplayDensityBase {
    protected _displayDensityOptions: IDisplayDensityOptions;
    /**
     * Total pages calculated from totalRecords and perPage
     */
    totalPages: number;
    protected _page: number;
    protected _totalRecords: number;
    protected _selectOptions: any;
    private defaultSelectValues;
    protected _perPage: number;
    /**
     * Sets the class of the IgxPaginatorComponent based
     * on the provided displayDensity.
     */
    get classCosy(): boolean;
    get classCompact(): boolean;
    get classComfortable(): boolean;
    /**
   * An @Input property, sets current page of the `IgxPaginatorComponent`.
   * The default is 0.
   * ```typescript
   * let page = this.paginator.page;
   * ```
   * @memberof IgxPaginatorComponent
   */
    get page(): number;
    set page(value: number);
    /**
   * An @Input property, sets number of visible items per page in the `IgxPaginatorComponent`.
   * The default is 15.
   * ```typescript
   * let itemsPerPage = this.paginator.perPage;
   * ```
   * @memberof IgxPaginatorComponent
   */
    get perPage(): number;
    set perPage(value: number);
    /**
    * An @Input property that sets the total records.
    * ```typescript
    * let totalRecords = this.paginator.totalRecords;
    * ```
    * @memberof IgxPaginatorComponent
    */
    get totalRecords(): number;
    set totalRecords(value: number);
    /**
    * An @Input property that sets custom options in the select of the paginator
    * ```typescript
    * let options = this.paginator.selectOptions;
    * ```
    * @memberof IgxPaginatorComponent
    */
    get selectOptions(): Array<number>;
    set selectOptions(value: Array<number>);
    /**
    * An @Input property that sets if the pager in the paginator should be enabled.
    * ```html
    * <igx-paginator [pagerEnabled]="true"></igx-paginator>
    * ```
    * @memberof IgxPaginatorComponent
    */
    pagerEnabled: boolean;
    /**
    * An @Input property that sets if the pager in the paginator should be hidden.
    * ```html
    * <igx-paginator [pagerHidden]="true"></igx-paginator>
    * ```
    * @memberof IgxPaginatorComponent
    */
    pagerHidden: boolean;
    /**
    * An @Input property that sets if the dropdown in the paginator should be enabled.
    * ```html
    * <igx-paginator [dropdownEnabled]="true"></igx-paginator>
    * ```
    * @memberof IgxPaginatorComponent
    */
    dropdownEnabled: boolean;
    /**
    * An @Input property that sets if the dropdown in the paginator should be hidden.
    * ```html
    * <igx-paginator [dropdownHidden]="true"></igx-paginator>
    * ```
    * @memberof IgxPaginatorComponent
    */
    dropdownHidden: boolean;
    /**
    * An @Input property, sets number of label of the select.
    * The default is 'Items per page' localized string.
    * ```html
    * <igx-paginator label="My custom label"></igx-paginator>
    * ```
    * @memberof IgxPaginatorComponent
    */
    selectLabel: any;
    /**
     *An event that is emitted when the select in the `IgxPaginatorComponent` changes its value.
    */
    perPageChange: EventEmitter<number>;
    /**
     *An event that is emitted when the paginating is used.
    */
    pageChange: EventEmitter<number>;
    constructor(_displayDensityOptions: IDisplayDensityOptions);
    /**
     * Returns if the current page is the last page.
     * ```typescript
     * const lastPage = this.paginator.isLastPage;
     * ```
     */
    get isLastPage(): boolean;
    /**
     * Returns if the current page is the first page.
     * ```typescript
     * const lastPage = this.paginator.isFirstPage;
     * ```
     */
    get isFirstPage(): boolean;
    private sortUniqueOptions;
    /**
     * Sets DisplayDensity for the <select> inside the paginator
     * @hidden
     */
    paginatorSelectDisplayDensity(): string;
    /**
     * Goes to the next page of the `IgxPaginatorComponent`, if the paginator is not already at the last page.
     * ```typescript
     * this.paginator.nextPage();
     * ```
     * @memberof IgxPaginatorComponent
     */
    nextPage(): void;
    /**
     * Goes to the previous page of the `IgxPaginatorComponent`, if the paginator is not already at the first page.
     * ```typescript
     * this.paginator.previousPage();
     * ```
     * @memberof IgxPaginatorComponent
     */
    previousPage(): void;
    /**
     * Goes to the desired page index.
     * ```typescript
     * this.pagiantor.paginate(1);
     * ```
     * @param val
     * @memberof IgxPaginatorComponent
     */
    paginate(val: number): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxPaginatorComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxPaginatorComponent, "igx-paginator", never, {
    "pagerEnabled": "pagerEnabled";
    "pagerHidden": "pagerHidden";
    "dropdownEnabled": "dropdownEnabled";
    "dropdownHidden": "dropdownHidden";
    "selectLabel": "selectLabel";
    "page": "page";
    "perPage": "perPage";
    "totalRecords": "totalRecords";
    "selectOptions": "selectOptions";
}, {
    "perPageChange": "perPageChange";
    "pageChange": "pageChange";
}, never>;
}
export declare class IgxPaginatorModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxPaginatorModule, [typeof IgxPaginatorComponent], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.IgxSelectModule, typeof ɵngcc3.FormsModule, typeof ɵngcc4.IgxIconModule, typeof ɵngcc5.IgxButtonModule, typeof ɵngcc6.IgxRippleModule], [typeof IgxPaginatorComponent]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxPaginatorModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdG9yLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwYWdpbmF0b3IuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUpBOzs7O0FBRUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElEaXNwbGF5RGVuc2l0eU9wdGlvbnMsIERpc3BsYXlEZW5zaXR5QmFzZSB9IGZyb20gJy4uL2NvcmUvZGlzcGxheURlbnNpdHknO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4UGFnaW5hdG9yQ29tcG9uZW50IGV4dGVuZHMgRGlzcGxheURlbnNpdHlCYXNlIHtcbiAgICBwcm90ZWN0ZWQgX2Rpc3BsYXlEZW5zaXR5T3B0aW9uczogSURpc3BsYXlEZW5zaXR5T3B0aW9ucztcbiAgICAvKipcbiAgICAgKiBUb3RhbCBwYWdlcyBjYWxjdWxhdGVkIGZyb20gdG90YWxSZWNvcmRzIGFuZCBwZXJQYWdlXG4gICAgICovXG4gICAgdG90YWxQYWdlczogbnVtYmVyO1xuICAgIHByb3RlY3RlZCBfcGFnZTogbnVtYmVyO1xuICAgIHByb3RlY3RlZCBfdG90YWxSZWNvcmRzOiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIF9zZWxlY3RPcHRpb25zOiBhbnk7XG4gICAgcHJpdmF0ZSBkZWZhdWx0U2VsZWN0VmFsdWVzO1xuICAgIHByb3RlY3RlZCBfcGVyUGFnZTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGNsYXNzIG9mIHRoZSBJZ3hQYWdpbmF0b3JDb21wb25lbnQgYmFzZWRcbiAgICAgKiBvbiB0aGUgcHJvdmlkZWQgZGlzcGxheURlbnNpdHkuXG4gICAgICovXG4gICAgZ2V0IGNsYXNzQ29zeSgpOiBib29sZWFuO1xuICAgIGdldCBjbGFzc0NvbXBhY3QoKTogYm9vbGVhbjtcbiAgICBnZXQgY2xhc3NDb21mb3J0YWJsZSgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgKiBBbiBASW5wdXQgcHJvcGVydHksIHNldHMgY3VycmVudCBwYWdlIG9mIHRoZSBgSWd4UGFnaW5hdG9yQ29tcG9uZW50YC5cbiAgICogVGhlIGRlZmF1bHQgaXMgMC5cbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBsZXQgcGFnZSA9IHRoaXMucGFnaW5hdG9yLnBhZ2U7XG4gICAqIGBgYFxuICAgKiBAbWVtYmVyb2YgSWd4UGFnaW5hdG9yQ29tcG9uZW50XG4gICAqL1xuICAgIGdldCBwYWdlKCk6IG51bWJlcjtcbiAgICBzZXQgcGFnZSh2YWx1ZTogbnVtYmVyKTtcbiAgICAvKipcbiAgICogQW4gQElucHV0IHByb3BlcnR5LCBzZXRzIG51bWJlciBvZiB2aXNpYmxlIGl0ZW1zIHBlciBwYWdlIGluIHRoZSBgSWd4UGFnaW5hdG9yQ29tcG9uZW50YC5cbiAgICogVGhlIGRlZmF1bHQgaXMgMTUuXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogbGV0IGl0ZW1zUGVyUGFnZSA9IHRoaXMucGFnaW5hdG9yLnBlclBhZ2U7XG4gICAqIGBgYFxuICAgKiBAbWVtYmVyb2YgSWd4UGFnaW5hdG9yQ29tcG9uZW50XG4gICAqL1xuICAgIGdldCBwZXJQYWdlKCk6IG51bWJlcjtcbiAgICBzZXQgcGVyUGFnZSh2YWx1ZTogbnVtYmVyKTtcbiAgICAvKipcbiAgICAqIEFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IHNldHMgdGhlIHRvdGFsIHJlY29yZHMuXG4gICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgKiBsZXQgdG90YWxSZWNvcmRzID0gdGhpcy5wYWdpbmF0b3IudG90YWxSZWNvcmRzO1xuICAgICogYGBgXG4gICAgKiBAbWVtYmVyb2YgSWd4UGFnaW5hdG9yQ29tcG9uZW50XG4gICAgKi9cbiAgICBnZXQgdG90YWxSZWNvcmRzKCk6IG51bWJlcjtcbiAgICBzZXQgdG90YWxSZWNvcmRzKHZhbHVlOiBudW1iZXIpO1xuICAgIC8qKlxuICAgICogQW4gQElucHV0IHByb3BlcnR5IHRoYXQgc2V0cyBjdXN0b20gb3B0aW9ucyBpbiB0aGUgc2VsZWN0IG9mIHRoZSBwYWdpbmF0b3JcbiAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAqIGxldCBvcHRpb25zID0gdGhpcy5wYWdpbmF0b3Iuc2VsZWN0T3B0aW9ucztcbiAgICAqIGBgYFxuICAgICogQG1lbWJlcm9mIElneFBhZ2luYXRvckNvbXBvbmVudFxuICAgICovXG4gICAgZ2V0IHNlbGVjdE9wdGlvbnMoKTogQXJyYXk8bnVtYmVyPjtcbiAgICBzZXQgc2VsZWN0T3B0aW9ucyh2YWx1ZTogQXJyYXk8bnVtYmVyPik7XG4gICAgLyoqXG4gICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIGlmIHRoZSBwYWdlciBpbiB0aGUgcGFnaW5hdG9yIHNob3VsZCBiZSBlbmFibGVkLlxuICAgICogYGBgaHRtbFxuICAgICogPGlneC1wYWdpbmF0b3IgW3BhZ2VyRW5hYmxlZF09XCJ0cnVlXCI+PC9pZ3gtcGFnaW5hdG9yPlxuICAgICogYGBgXG4gICAgKiBAbWVtYmVyb2YgSWd4UGFnaW5hdG9yQ29tcG9uZW50XG4gICAgKi9cbiAgICBwYWdlckVuYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIGlmIHRoZSBwYWdlciBpbiB0aGUgcGFnaW5hdG9yIHNob3VsZCBiZSBoaWRkZW4uXG4gICAgKiBgYGBodG1sXG4gICAgKiA8aWd4LXBhZ2luYXRvciBbcGFnZXJIaWRkZW5dPVwidHJ1ZVwiPjwvaWd4LXBhZ2luYXRvcj5cbiAgICAqIGBgYFxuICAgICogQG1lbWJlcm9mIElneFBhZ2luYXRvckNvbXBvbmVudFxuICAgICovXG4gICAgcGFnZXJIaWRkZW46IGJvb2xlYW47XG4gICAgLyoqXG4gICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIGlmIHRoZSBkcm9wZG93biBpbiB0aGUgcGFnaW5hdG9yIHNob3VsZCBiZSBlbmFibGVkLlxuICAgICogYGBgaHRtbFxuICAgICogPGlneC1wYWdpbmF0b3IgW2Ryb3Bkb3duRW5hYmxlZF09XCJ0cnVlXCI+PC9pZ3gtcGFnaW5hdG9yPlxuICAgICogYGBgXG4gICAgKiBAbWVtYmVyb2YgSWd4UGFnaW5hdG9yQ29tcG9uZW50XG4gICAgKi9cbiAgICBkcm9wZG93bkVuYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIGlmIHRoZSBkcm9wZG93biBpbiB0aGUgcGFnaW5hdG9yIHNob3VsZCBiZSBoaWRkZW4uXG4gICAgKiBgYGBodG1sXG4gICAgKiA8aWd4LXBhZ2luYXRvciBbZHJvcGRvd25IaWRkZW5dPVwidHJ1ZVwiPjwvaWd4LXBhZ2luYXRvcj5cbiAgICAqIGBgYFxuICAgICogQG1lbWJlcm9mIElneFBhZ2luYXRvckNvbXBvbmVudFxuICAgICovXG4gICAgZHJvcGRvd25IaWRkZW46IGJvb2xlYW47XG4gICAgLyoqXG4gICAgKiBBbiBASW5wdXQgcHJvcGVydHksIHNldHMgbnVtYmVyIG9mIGxhYmVsIG9mIHRoZSBzZWxlY3QuXG4gICAgKiBUaGUgZGVmYXVsdCBpcyAnSXRlbXMgcGVyIHBhZ2UnIGxvY2FsaXplZCBzdHJpbmcuXG4gICAgKiBgYGBodG1sXG4gICAgKiA8aWd4LXBhZ2luYXRvciBsYWJlbD1cIk15IGN1c3RvbSBsYWJlbFwiPjwvaWd4LXBhZ2luYXRvcj5cbiAgICAqIGBgYFxuICAgICogQG1lbWJlcm9mIElneFBhZ2luYXRvckNvbXBvbmVudFxuICAgICovXG4gICAgc2VsZWN0TGFiZWw6IGFueTtcbiAgICAvKipcbiAgICAgKkFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIHRoZSBzZWxlY3QgaW4gdGhlIGBJZ3hQYWdpbmF0b3JDb21wb25lbnRgIGNoYW5nZXMgaXRzIHZhbHVlLlxuICAgICovXG4gICAgcGVyUGFnZUNoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgLyoqXG4gICAgICpBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiB0aGUgcGFnaW5hdGluZyBpcyB1c2VkLlxuICAgICovXG4gICAgcGFnZUNoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgY29uc3RydWN0b3IoX2Rpc3BsYXlEZW5zaXR5T3B0aW9uczogSURpc3BsYXlEZW5zaXR5T3B0aW9ucyk7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpZiB0aGUgY3VycmVudCBwYWdlIGlzIHRoZSBsYXN0IHBhZ2UuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGxhc3RQYWdlID0gdGhpcy5wYWdpbmF0b3IuaXNMYXN0UGFnZTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXQgaXNMYXN0UGFnZSgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgaWYgdGhlIGN1cnJlbnQgcGFnZSBpcyB0aGUgZmlyc3QgcGFnZS5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgbGFzdFBhZ2UgPSB0aGlzLnBhZ2luYXRvci5pc0ZpcnN0UGFnZTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXQgaXNGaXJzdFBhZ2UoKTogYm9vbGVhbjtcbiAgICBwcml2YXRlIHNvcnRVbmlxdWVPcHRpb25zO1xuICAgIC8qKlxuICAgICAqIFNldHMgRGlzcGxheURlbnNpdHkgZm9yIHRoZSA8c2VsZWN0PiBpbnNpZGUgdGhlIHBhZ2luYXRvclxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwYWdpbmF0b3JTZWxlY3REaXNwbGF5RGVuc2l0eSgpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogR29lcyB0byB0aGUgbmV4dCBwYWdlIG9mIHRoZSBgSWd4UGFnaW5hdG9yQ29tcG9uZW50YCwgaWYgdGhlIHBhZ2luYXRvciBpcyBub3QgYWxyZWFkeSBhdCB0aGUgbGFzdCBwYWdlLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLnBhZ2luYXRvci5uZXh0UGFnZSgpO1xuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hQYWdpbmF0b3JDb21wb25lbnRcbiAgICAgKi9cbiAgICBuZXh0UGFnZSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEdvZXMgdG8gdGhlIHByZXZpb3VzIHBhZ2Ugb2YgdGhlIGBJZ3hQYWdpbmF0b3JDb21wb25lbnRgLCBpZiB0aGUgcGFnaW5hdG9yIGlzIG5vdCBhbHJlYWR5IGF0IHRoZSBmaXJzdCBwYWdlLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLnBhZ2luYXRvci5wcmV2aW91c1BhZ2UoKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4UGFnaW5hdG9yQ29tcG9uZW50XG4gICAgICovXG4gICAgcHJldmlvdXNQYWdlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogR29lcyB0byB0aGUgZGVzaXJlZCBwYWdlIGluZGV4LlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLnBhZ2lhbnRvci5wYWdpbmF0ZSgxKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gdmFsXG4gICAgICogQG1lbWJlcm9mIElneFBhZ2luYXRvckNvbXBvbmVudFxuICAgICAqL1xuICAgIHBhZ2luYXRlKHZhbDogbnVtYmVyKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneFBhZ2luYXRvck1vZHVsZSB7XG59XG4iXX0=