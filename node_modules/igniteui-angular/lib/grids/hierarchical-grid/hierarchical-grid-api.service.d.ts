import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';
import { IgxRowIslandComponent } from './row-island.component';
import { IPathSegment } from './hierarchical-grid-base.directive';
import { IgxGridBaseDirective, GridBaseAPIService } from '../grid';
import { GridType } from '../common/grid.interface';
import * as ɵngcc0 from '@angular/core';
export declare class IgxHierarchicalGridAPIService extends GridBaseAPIService<IgxGridBaseDirective & GridType> {
    protected childRowIslands: Map<string, IgxRowIslandComponent>;
    protected childGrids: Map<string, Map<any, IgxHierarchicalGridComponent>>;
    registerChildRowIsland(rowIsland: IgxRowIslandComponent): void;
    unsetChildRowIsland(rowIsland: IgxRowIslandComponent): void;
    getChildRowIsland(key: string): IgxRowIslandComponent;
    getChildGrid(path: Array<IPathSegment>): any;
    getChildGrids(inDepth?: boolean): any[];
    getParentRowId(childGrid: IgxHierarchicalGridComponent): any;
    registerChildGrid(parentRowID: string | object, rowIslandKey: string, grid: IgxHierarchicalGridComponent): void;
    getChildGridsForRowIsland(rowIslandKey: any): IgxHierarchicalGridComponent[];
    getChildGridByID(rowIslandKey: any, rowID: any): IgxHierarchicalGridComponent;
    get_row_expansion_state(record: any): boolean;
    allow_expansion_state_change(rowID: any, expanded: any): boolean;
    get_rec_by_id(rowID: any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxHierarchicalGridAPIService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<IgxHierarchicalGridAPIService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGllcmFyY2hpY2FsLWdyaWQtYXBpLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiaGllcmFyY2hpY2FsLWdyaWQtYXBpLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBS0E7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJZ3hIaWVyYXJjaGljYWxHcmlkQ29tcG9uZW50IH0gZnJvbSAnLi9oaWVyYXJjaGljYWwtZ3JpZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4Um93SXNsYW5kQ29tcG9uZW50IH0gZnJvbSAnLi9yb3ctaXNsYW5kLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJUGF0aFNlZ21lbnQgfSBmcm9tICcuL2hpZXJhcmNoaWNhbC1ncmlkLWJhc2UuZGlyZWN0aXZlJztcbmltcG9ydCB7IElneEdyaWRCYXNlRGlyZWN0aXZlLCBHcmlkQmFzZUFQSVNlcnZpY2UgfSBmcm9tICcuLi9ncmlkJztcbmltcG9ydCB7IEdyaWRUeXBlIH0gZnJvbSAnLi4vY29tbW9uL2dyaWQuaW50ZXJmYWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneEhpZXJhcmNoaWNhbEdyaWRBUElTZXJ2aWNlIGV4dGVuZHMgR3JpZEJhc2VBUElTZXJ2aWNlPElneEdyaWRCYXNlRGlyZWN0aXZlICYgR3JpZFR5cGU+IHtcbiAgICBwcm90ZWN0ZWQgY2hpbGRSb3dJc2xhbmRzOiBNYXA8c3RyaW5nLCBJZ3hSb3dJc2xhbmRDb21wb25lbnQ+O1xuICAgIHByb3RlY3RlZCBjaGlsZEdyaWRzOiBNYXA8c3RyaW5nLCBNYXA8YW55LCBJZ3hIaWVyYXJjaGljYWxHcmlkQ29tcG9uZW50Pj47XG4gICAgcmVnaXN0ZXJDaGlsZFJvd0lzbGFuZChyb3dJc2xhbmQ6IElneFJvd0lzbGFuZENvbXBvbmVudCk6IHZvaWQ7XG4gICAgdW5zZXRDaGlsZFJvd0lzbGFuZChyb3dJc2xhbmQ6IElneFJvd0lzbGFuZENvbXBvbmVudCk6IHZvaWQ7XG4gICAgZ2V0Q2hpbGRSb3dJc2xhbmQoa2V5OiBzdHJpbmcpOiBJZ3hSb3dJc2xhbmRDb21wb25lbnQ7XG4gICAgZ2V0Q2hpbGRHcmlkKHBhdGg6IEFycmF5PElQYXRoU2VnbWVudD4pOiBhbnk7XG4gICAgZ2V0Q2hpbGRHcmlkcyhpbkRlcHRoPzogYm9vbGVhbik6IGFueVtdO1xuICAgIGdldFBhcmVudFJvd0lkKGNoaWxkR3JpZDogSWd4SGllcmFyY2hpY2FsR3JpZENvbXBvbmVudCk6IGFueTtcbiAgICByZWdpc3RlckNoaWxkR3JpZChwYXJlbnRSb3dJRDogc3RyaW5nIHwgb2JqZWN0LCByb3dJc2xhbmRLZXk6IHN0cmluZywgZ3JpZDogSWd4SGllcmFyY2hpY2FsR3JpZENvbXBvbmVudCk6IHZvaWQ7XG4gICAgZ2V0Q2hpbGRHcmlkc0ZvclJvd0lzbGFuZChyb3dJc2xhbmRLZXk6IGFueSk6IElneEhpZXJhcmNoaWNhbEdyaWRDb21wb25lbnRbXTtcbiAgICBnZXRDaGlsZEdyaWRCeUlEKHJvd0lzbGFuZEtleTogYW55LCByb3dJRDogYW55KTogSWd4SGllcmFyY2hpY2FsR3JpZENvbXBvbmVudDtcbiAgICBnZXRfcm93X2V4cGFuc2lvbl9zdGF0ZShyZWNvcmQ6IGFueSk6IGJvb2xlYW47XG4gICAgYWxsb3dfZXhwYW5zaW9uX3N0YXRlX2NoYW5nZShyb3dJRDogYW55LCBleHBhbmRlZDogYW55KTogYm9vbGVhbjtcbiAgICBnZXRfcmVjX2J5X2lkKHJvd0lEOiBhbnkpOiBhbnk7XG59XG4iXX0=