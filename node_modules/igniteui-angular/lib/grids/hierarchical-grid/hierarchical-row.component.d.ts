import { ElementRef, QueryList, TemplateRef } from '@angular/core';
import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';
import { IgxRowDirective } from '../row.directive';
import { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';
import * as ɵngcc0 from '@angular/core';
export declare class IgxHierarchicalRowComponent extends IgxRowDirective<IgxHierarchicalGridComponent> {
    /**
     * The rendered cells in the row component.
     *
     * ```typescript
     * // get the cells of the third selected row
     * let selectedRowCells = this.grid.selectedRows[2].cells;
     * ```
     */
    cells: QueryList<IgxHierarchicalGridCellComponent>;
    expander: ElementRef<HTMLElement>;
    get viewIndex(): number;
    /**
    * @hidden
    */
    protected defaultExpandedTemplate: TemplateRef<any>;
    /**
    * @hidden
    */
    protected defaultEmptyTemplate: TemplateRef<any>;
    /**
    * @hidden
    */
    protected defaultCollapsedTemplate: TemplateRef<any>;
    /**
     * @hidden
     */
    tabindex: number;
    /**
 * Returns whether the row is expanded.
 * ```typescript
 * const RowExpanded = this.grid1.rowList.first.expanded;
 * ```
 */
    get expanded(): boolean;
    get hasChildren(): boolean;
    /**
     * @hidden
     */
    get highlighted(): boolean;
    /**
    * @hidden
    */
    expanderClick(event: any): void;
    /**
     * Toggles the hierarchical row.
     * ```typescript
     * this.grid1.rowList.first.toggle()
     * ```
     */
    toggle(): void;
    /**
     * @hidden
     * @internal
     */
    select: () => void;
    /**
     * @hidden
     * @internal
     */
    deselect: () => void;
    /**
    * @hidden
    */
    get iconTemplate(): TemplateRef<any>;
    private endEdit;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxHierarchicalRowComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxHierarchicalRowComponent, "igx-hierarchical-grid-row", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGllcmFyY2hpY2FsLXJvdy5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiaGllcmFyY2hpY2FsLXJvdy5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrRUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBRdWVyeUxpc3QsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hIaWVyYXJjaGljYWxHcmlkQ29tcG9uZW50IH0gZnJvbSAnLi9oaWVyYXJjaGljYWwtZ3JpZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4Um93RGlyZWN0aXZlIH0gZnJvbSAnLi4vcm93LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJZ3hIaWVyYXJjaGljYWxHcmlkQ2VsbENvbXBvbmVudCB9IGZyb20gJy4vaGllcmFyY2hpY2FsLWNlbGwuY29tcG9uZW50JztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneEhpZXJhcmNoaWNhbFJvd0NvbXBvbmVudCBleHRlbmRzIElneFJvd0RpcmVjdGl2ZTxJZ3hIaWVyYXJjaGljYWxHcmlkQ29tcG9uZW50PiB7XG4gICAgLyoqXG4gICAgICogVGhlIHJlbmRlcmVkIGNlbGxzIGluIHRoZSByb3cgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIC8vIGdldCB0aGUgY2VsbHMgb2YgdGhlIHRoaXJkIHNlbGVjdGVkIHJvd1xuICAgICAqIGxldCBzZWxlY3RlZFJvd0NlbGxzID0gdGhpcy5ncmlkLnNlbGVjdGVkUm93c1syXS5jZWxscztcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBjZWxsczogUXVlcnlMaXN0PElneEhpZXJhcmNoaWNhbEdyaWRDZWxsQ29tcG9uZW50PjtcbiAgICBleHBhbmRlcjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD47XG4gICAgZ2V0IHZpZXdJbmRleCgpOiBudW1iZXI7XG4gICAgLyoqXG4gICAgKiBAaGlkZGVuXG4gICAgKi9cbiAgICBwcm90ZWN0ZWQgZGVmYXVsdEV4cGFuZGVkVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqXG4gICAgKiBAaGlkZGVuXG4gICAgKi9cbiAgICBwcm90ZWN0ZWQgZGVmYXVsdEVtcHR5VGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqXG4gICAgKiBAaGlkZGVuXG4gICAgKi9cbiAgICBwcm90ZWN0ZWQgZGVmYXVsdENvbGxhcHNlZFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB0YWJpbmRleDogbnVtYmVyO1xuICAgIC8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSByb3cgaXMgZXhwYW5kZWQuXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCBSb3dFeHBhbmRlZCA9IHRoaXMuZ3JpZDEucm93TGlzdC5maXJzdC5leHBhbmRlZDtcbiAqIGBgYFxuICovXG4gICAgZ2V0IGV4cGFuZGVkKCk6IGJvb2xlYW47XG4gICAgZ2V0IGhhc0NoaWxkcmVuKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGdldCBoaWdobGlnaHRlZCgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICogQGhpZGRlblxuICAgICovXG4gICAgZXhwYW5kZXJDbGljayhldmVudDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBUb2dnbGVzIHRoZSBoaWVyYXJjaGljYWwgcm93LlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmdyaWQxLnJvd0xpc3QuZmlyc3QudG9nZ2xlKClcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICB0b2dnbGUoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgc2VsZWN0OiAoKSA9PiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBkZXNlbGVjdDogKCkgPT4gdm9pZDtcbiAgICAvKipcbiAgICAqIEBoaWRkZW5cbiAgICAqL1xuICAgIGdldCBpY29uVGVtcGxhdGUoKTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBwcml2YXRlIGVuZEVkaXQ7XG59XG4iXX0=