import { ChangeDetectorRef, ElementRef, NgZone } from '@angular/core';
import { GridBaseAPIService } from '../api.service';
import { PlatformUtil } from '../../core/utils';
import { IgxGridBaseDirective } from '../grid';
import { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';
import { HammerGesturesManager } from '../../core/touch';
import { GridType } from '../common/grid.interface';
import { IgxGridExpandableCellComponent } from '../grid/expandable-cell.component';
import * as ɵngcc0 from '@angular/core';
export declare class IgxTreeGridCellComponent extends IgxGridExpandableCellComponent {
    protected zone: NgZone;
    document: any;
    protected platformUtil: PlatformUtil;
    private treeGridAPI;
    constructor(selectionService: IgxGridSelectionService, crudService: IgxGridCRUDService, gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>, cdr: ChangeDetectorRef, element: ElementRef, zone: NgZone, touchManager: HammerGesturesManager, document: any, platformUtil: PlatformUtil);
    /**
     * @hidden
     */
    level: number;
    /**
     * @hidden
     */
    showIndicator: boolean;
    /**
     * @hidden
     */
    isLoading: boolean;
    /**
     * @hidden
     */
    toggle(event: Event): void;
    /**
     * @hidden
     */
    onLoadingDblClick(event: Event): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxTreeGridCellComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxTreeGridCellComponent, "igx-tree-grid-cell", never, {
    "level": "level";
    "showIndicator": "showIndicator";
    "isLoading": "isLoading";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1jZWxsLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ0cmVlLWNlbGwuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQVFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdyaWRCYXNlQVBJU2VydmljZSB9IGZyb20gJy4uL2FwaS5zZXJ2aWNlJztcbmltcG9ydCB7IFBsYXRmb3JtVXRpbCB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbHMnO1xuaW1wb3J0IHsgSWd4R3JpZEJhc2VEaXJlY3RpdmUgfSBmcm9tICcuLi9ncmlkJztcbmltcG9ydCB7IElneEdyaWRTZWxlY3Rpb25TZXJ2aWNlLCBJZ3hHcmlkQ1JVRFNlcnZpY2UgfSBmcm9tICcuLi9zZWxlY3Rpb24vc2VsZWN0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgSGFtbWVyR2VzdHVyZXNNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vY29yZS90b3VjaCc7XG5pbXBvcnQgeyBHcmlkVHlwZSB9IGZyb20gJy4uL2NvbW1vbi9ncmlkLmludGVyZmFjZSc7XG5pbXBvcnQgeyBJZ3hHcmlkRXhwYW5kYWJsZUNlbGxDb21wb25lbnQgfSBmcm9tICcuLi9ncmlkL2V4cGFuZGFibGUtY2VsbC5jb21wb25lbnQnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4VHJlZUdyaWRDZWxsQ29tcG9uZW50IGV4dGVuZHMgSWd4R3JpZEV4cGFuZGFibGVDZWxsQ29tcG9uZW50IHtcbiAgICBwcm90ZWN0ZWQgem9uZTogTmdab25lO1xuICAgIGRvY3VtZW50OiBhbnk7XG4gICAgcHJvdGVjdGVkIHBsYXRmb3JtVXRpbDogUGxhdGZvcm1VdGlsO1xuICAgIHByaXZhdGUgdHJlZUdyaWRBUEk7XG4gICAgY29uc3RydWN0b3Ioc2VsZWN0aW9uU2VydmljZTogSWd4R3JpZFNlbGVjdGlvblNlcnZpY2UsIGNydWRTZXJ2aWNlOiBJZ3hHcmlkQ1JVRFNlcnZpY2UsIGdyaWRBUEk6IEdyaWRCYXNlQVBJU2VydmljZTxJZ3hHcmlkQmFzZURpcmVjdGl2ZSAmIEdyaWRUeXBlPiwgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZiwgZWxlbWVudDogRWxlbWVudFJlZiwgem9uZTogTmdab25lLCB0b3VjaE1hbmFnZXI6IEhhbW1lckdlc3R1cmVzTWFuYWdlciwgZG9jdW1lbnQ6IGFueSwgcGxhdGZvcm1VdGlsOiBQbGF0Zm9ybVV0aWwpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBsZXZlbDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBzaG93SW5kaWNhdG9yOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBpc0xvYWRpbmc6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHRvZ2dsZShldmVudDogRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBvbkxvYWRpbmdEYmxDbGljayhldmVudDogRXZlbnQpOiB2b2lkO1xufVxuIl19