import { AfterViewInit, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { IgxColumnComponent } from '../../columns/column.component';
import { ExpressionUI } from '../grid-filtering.service';
import { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';
import { IgxDropDownComponent } from '../../../drop-down/index';
import { IgxInputGroupComponent, IgxInputDirective } from '../../../input-group/index';
import { IFilteringOperation } from '../../../data-operations/filtering-condition';
import { IBaseEventArgs } from '../../../core/utils';
import { FilteringLogic } from '../../../data-operations/filtering-expression.interface';
import { DisplayDensity } from '../../../core/density';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export interface ILogicOperatorChangedArgs extends IBaseEventArgs {
    target: ExpressionUI;
    newValue: FilteringLogic;
}
/**
 * @hidden
 */
export declare class IgxExcelStyleDefaultExpressionComponent implements AfterViewInit {
    cdr: ChangeDetectorRef;
    private _dropDownOverlaySettings;
    column: IgxColumnComponent;
    expressionUI: ExpressionUI;
    expressionsList: Array<ExpressionUI>;
    grid: any;
    displayDensity: DisplayDensity;
    onExpressionRemoved: EventEmitter<ExpressionUI>;
    onLogicOperatorChanged: EventEmitter<ILogicOperatorChangedArgs>;
    protected inputGroupConditions: IgxInputGroupComponent;
    protected inputValuesDirective: IgxInputDirective;
    protected dropdownConditions: IgxDropDownComponent;
    protected logicOperatorButtonGroup: IgxButtonGroupComponent;
    protected get inputValuesElement(): IgxInputDirective;
    get isLast(): boolean;
    get isSingle(): boolean;
    get inputConditionsPlaceholder(): string;
    get inputValuePlaceholder(): string;
    get type(): "text" | "number";
    constructor(cdr: ChangeDetectorRef);
    ngAfterViewInit(): void;
    focus(): void;
    isConditionSelected(conditionName: string): boolean;
    getConditionName(condition: IFilteringOperation): string;
    getInputWidth(): string;
    get conditions(): string[];
    translateCondition(value: string): string;
    getIconName(): string;
    toggleCustomDialogDropDown(): void;
    getCondition(value: string): IFilteringOperation;
    onConditionsChanged(eventArgs: any): void;
    onValuesInput(eventArgs: any): void;
    onLogicOperatorButtonClicked(eventArgs: any, buttonIndex: number): void;
    onLogicOperatorKeyDown(eventArgs: any, buttonIndex: number): void;
    onRemoveButtonClick(): void;
    onInputConditionsKeyDown(eventArgs: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxExcelStyleDefaultExpressionComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxExcelStyleDefaultExpressionComponent, "igx-excel-style-default-expression", never, {
    "column": "column";
    "expressionUI": "expressionUI";
    "expressionsList": "expressionsList";
    "grid": "grid";
    "displayDensity": "displayDensity";
}, {
    "onExpressionRemoved": "onExpressionRemoved";
    "onLogicOperatorChanged": "onLogicOperatorChanged";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwtc3R5bGUtZGVmYXVsdC1leHByZXNzaW9uLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJleGNlbC1zdHlsZS1kZWZhdWx0LWV4cHJlc3Npb24uY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7O0FBYUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0Q0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBFdmVudEVtaXR0ZXIsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hDb2x1bW5Db21wb25lbnQgfSBmcm9tICcuLi8uLi9jb2x1bW5zL2NvbHVtbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgRXhwcmVzc2lvblVJIH0gZnJvbSAnLi4vZ3JpZC1maWx0ZXJpbmcuc2VydmljZSc7XG5pbXBvcnQgeyBJZ3hCdXR0b25Hcm91cENvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uL2J1dHRvbkdyb3VwL2J1dHRvbkdyb3VwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hEcm9wRG93bkNvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uL2Ryb3AtZG93bi9pbmRleCc7XG5pbXBvcnQgeyBJZ3hJbnB1dEdyb3VwQ29tcG9uZW50LCBJZ3hJbnB1dERpcmVjdGl2ZSB9IGZyb20gJy4uLy4uLy4uL2lucHV0LWdyb3VwL2luZGV4JztcbmltcG9ydCB7IElGaWx0ZXJpbmdPcGVyYXRpb24gfSBmcm9tICcuLi8uLi8uLi9kYXRhLW9wZXJhdGlvbnMvZmlsdGVyaW5nLWNvbmRpdGlvbic7XG5pbXBvcnQgeyBJQmFzZUV2ZW50QXJncyB9IGZyb20gJy4uLy4uLy4uL2NvcmUvdXRpbHMnO1xuaW1wb3J0IHsgRmlsdGVyaW5nTG9naWMgfSBmcm9tICcuLi8uLi8uLi9kYXRhLW9wZXJhdGlvbnMvZmlsdGVyaW5nLWV4cHJlc3Npb24uaW50ZXJmYWNlJztcbmltcG9ydCB7IERpc3BsYXlEZW5zaXR5IH0gZnJvbSAnLi4vLi4vLi4vY29yZS9kZW5zaXR5Jztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgaW50ZXJmYWNlIElMb2dpY09wZXJhdG9yQ2hhbmdlZEFyZ3MgZXh0ZW5kcyBJQmFzZUV2ZW50QXJncyB7XG4gICAgdGFyZ2V0OiBFeHByZXNzaW9uVUk7XG4gICAgbmV3VmFsdWU6IEZpbHRlcmluZ0xvZ2ljO1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneEV4Y2VsU3R5bGVEZWZhdWx0RXhwcmVzc2lvbkNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICAgIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgcHJpdmF0ZSBfZHJvcERvd25PdmVybGF5U2V0dGluZ3M7XG4gICAgY29sdW1uOiBJZ3hDb2x1bW5Db21wb25lbnQ7XG4gICAgZXhwcmVzc2lvblVJOiBFeHByZXNzaW9uVUk7XG4gICAgZXhwcmVzc2lvbnNMaXN0OiBBcnJheTxFeHByZXNzaW9uVUk+O1xuICAgIGdyaWQ6IGFueTtcbiAgICBkaXNwbGF5RGVuc2l0eTogRGlzcGxheURlbnNpdHk7XG4gICAgb25FeHByZXNzaW9uUmVtb3ZlZDogRXZlbnRFbWl0dGVyPEV4cHJlc3Npb25VST47XG4gICAgb25Mb2dpY09wZXJhdG9yQ2hhbmdlZDogRXZlbnRFbWl0dGVyPElMb2dpY09wZXJhdG9yQ2hhbmdlZEFyZ3M+O1xuICAgIHByb3RlY3RlZCBpbnB1dEdyb3VwQ29uZGl0aW9uczogSWd4SW5wdXRHcm91cENvbXBvbmVudDtcbiAgICBwcm90ZWN0ZWQgaW5wdXRWYWx1ZXNEaXJlY3RpdmU6IElneElucHV0RGlyZWN0aXZlO1xuICAgIHByb3RlY3RlZCBkcm9wZG93bkNvbmRpdGlvbnM6IElneERyb3BEb3duQ29tcG9uZW50O1xuICAgIHByb3RlY3RlZCBsb2dpY09wZXJhdG9yQnV0dG9uR3JvdXA6IElneEJ1dHRvbkdyb3VwQ29tcG9uZW50O1xuICAgIHByb3RlY3RlZCBnZXQgaW5wdXRWYWx1ZXNFbGVtZW50KCk6IElneElucHV0RGlyZWN0aXZlO1xuICAgIGdldCBpc0xhc3QoKTogYm9vbGVhbjtcbiAgICBnZXQgaXNTaW5nbGUoKTogYm9vbGVhbjtcbiAgICBnZXQgaW5wdXRDb25kaXRpb25zUGxhY2Vob2xkZXIoKTogc3RyaW5nO1xuICAgIGdldCBpbnB1dFZhbHVlUGxhY2Vob2xkZXIoKTogc3RyaW5nO1xuICAgIGdldCB0eXBlKCk6IFwidGV4dFwiIHwgXCJudW1iZXJcIjtcbiAgICBjb25zdHJ1Y3RvcihjZHI6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBmb2N1cygpOiB2b2lkO1xuICAgIGlzQ29uZGl0aW9uU2VsZWN0ZWQoY29uZGl0aW9uTmFtZTogc3RyaW5nKTogYm9vbGVhbjtcbiAgICBnZXRDb25kaXRpb25OYW1lKGNvbmRpdGlvbjogSUZpbHRlcmluZ09wZXJhdGlvbik6IHN0cmluZztcbiAgICBnZXRJbnB1dFdpZHRoKCk6IHN0cmluZztcbiAgICBnZXQgY29uZGl0aW9ucygpOiBzdHJpbmdbXTtcbiAgICB0cmFuc2xhdGVDb25kaXRpb24odmFsdWU6IHN0cmluZyk6IHN0cmluZztcbiAgICBnZXRJY29uTmFtZSgpOiBzdHJpbmc7XG4gICAgdG9nZ2xlQ3VzdG9tRGlhbG9nRHJvcERvd24oKTogdm9pZDtcbiAgICBnZXRDb25kaXRpb24odmFsdWU6IHN0cmluZyk6IElGaWx0ZXJpbmdPcGVyYXRpb247XG4gICAgb25Db25kaXRpb25zQ2hhbmdlZChldmVudEFyZ3M6IGFueSk6IHZvaWQ7XG4gICAgb25WYWx1ZXNJbnB1dChldmVudEFyZ3M6IGFueSk6IHZvaWQ7XG4gICAgb25Mb2dpY09wZXJhdG9yQnV0dG9uQ2xpY2tlZChldmVudEFyZ3M6IGFueSwgYnV0dG9uSW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgb25Mb2dpY09wZXJhdG9yS2V5RG93bihldmVudEFyZ3M6IGFueSwgYnV0dG9uSW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgb25SZW1vdmVCdXR0b25DbGljaygpOiB2b2lkO1xuICAgIG9uSW5wdXRDb25kaXRpb25zS2V5RG93bihldmVudEFyZ3M6IGFueSk6IHZvaWQ7XG59XG4iXX0=