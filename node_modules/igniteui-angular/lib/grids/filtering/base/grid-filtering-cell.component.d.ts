import { ChangeDetectorRef, TemplateRef, AfterViewInit, ElementRef, OnInit, DoCheck } from '@angular/core';
import { IgxColumnComponent } from '../../columns/column.component';
import { IFilteringExpression } from '../../../data-operations/filtering-expression.interface';
import { IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../../chips';
import { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class IgxGridFilteringCellComponent implements AfterViewInit, OnInit, DoCheck {
    cdr: ChangeDetectorRef;
    filteringService: IgxFilteringService;
    private baseClass;
    private currentTemplate;
    expressionsList: ExpressionUI[];
    moreFiltersCount: number;
    column: IgxColumnComponent;
    protected emptyFilter: TemplateRef<any>;
    protected defaultFilter: TemplateRef<any>;
    protected complexFilter: TemplateRef<any>;
    protected chipsArea: IgxChipsAreaComponent;
    protected moreIcon: ElementRef;
    protected ghostChip: IgxChipComponent;
    protected complexChip: IgxChipComponent;
    cssClass: string;
    constructor(cdr: ChangeDetectorRef, filteringService: IgxFilteringService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    onTabKeyDown(eventArgs: any): void;
    onShiftTabKeyDown(eventArgs: any): void;
    /**
     * Returns whether a chip with a given index is visible or not.
     */
    isChipVisible(index: number): boolean;
    /**
     * Updates the filtering cell area.
     */
    updateFilterCellArea(): void;
    get template(): TemplateRef<any>;
    /**
     * Gets the context passed to the filter template.
     * @memberof IgxGridFilteringCellComponent
     */
    get context(): {
        column: IgxColumnComponent;
    };
    /**
     * Chip clicked event handler.
     */
    onChipClicked(expression?: IFilteringExpression): void;
    /**
     * Chip removed event handler.
     */
    onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI): void;
    /**
     * Clears the filtering.
     */
    clearFiltering(): void;
    /**
     * Chip keydown event handler.
     */
    onChipKeyDown(eventArgs: KeyboardEvent, expression?: IFilteringExpression): void;
    /**
     * Returns the filtering indicator class.
     */
    filteringIndicatorClass(): {
        [x: string]: boolean;
    };
    /**
     * Focus a chip depending on the current visible template.
     */
    focusChip(focusFirst?: boolean): void;
    private removeExpression;
    private isMoreIconHidden;
    private updateVisibleFilters;
    private isFirstElementFocused;
    private isLastElementFocused;
    private focusFirstElement;
    private focusElement;
    private isColumnRightVisible;
    private isColumnLeftVisible;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridFilteringCellComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxGridFilteringCellComponent, "igx-grid-filtering-cell", never, {
    "column": "column";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1maWx0ZXJpbmctY2VsbC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZ3JpZC1maWx0ZXJpbmctY2VsbC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUVBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIFRlbXBsYXRlUmVmLCBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmLCBPbkluaXQsIERvQ2hlY2sgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneENvbHVtbkNvbXBvbmVudCB9IGZyb20gJy4uLy4uL2NvbHVtbnMvY29sdW1uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJRmlsdGVyaW5nRXhwcmVzc2lvbiB9IGZyb20gJy4uLy4uLy4uL2RhdGEtb3BlcmF0aW9ucy9maWx0ZXJpbmctZXhwcmVzc2lvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSUJhc2VDaGlwRXZlbnRBcmdzLCBJZ3hDaGlwc0FyZWFDb21wb25lbnQsIElneENoaXBDb21wb25lbnQgfSBmcm9tICcuLi8uLi8uLi9jaGlwcyc7XG5pbXBvcnQgeyBJZ3hGaWx0ZXJpbmdTZXJ2aWNlLCBFeHByZXNzaW9uVUkgfSBmcm9tICcuLi9ncmlkLWZpbHRlcmluZy5zZXJ2aWNlJztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hHcmlkRmlsdGVyaW5nQ2VsbENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uSW5pdCwgRG9DaGVjayB7XG4gICAgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBmaWx0ZXJpbmdTZXJ2aWNlOiBJZ3hGaWx0ZXJpbmdTZXJ2aWNlO1xuICAgIHByaXZhdGUgYmFzZUNsYXNzO1xuICAgIHByaXZhdGUgY3VycmVudFRlbXBsYXRlO1xuICAgIGV4cHJlc3Npb25zTGlzdDogRXhwcmVzc2lvblVJW107XG4gICAgbW9yZUZpbHRlcnNDb3VudDogbnVtYmVyO1xuICAgIGNvbHVtbjogSWd4Q29sdW1uQ29tcG9uZW50O1xuICAgIHByb3RlY3RlZCBlbXB0eUZpbHRlcjogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBwcm90ZWN0ZWQgZGVmYXVsdEZpbHRlcjogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBwcm90ZWN0ZWQgY29tcGxleEZpbHRlcjogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBwcm90ZWN0ZWQgY2hpcHNBcmVhOiBJZ3hDaGlwc0FyZWFDb21wb25lbnQ7XG4gICAgcHJvdGVjdGVkIG1vcmVJY29uOiBFbGVtZW50UmVmO1xuICAgIHByb3RlY3RlZCBnaG9zdENoaXA6IElneENoaXBDb21wb25lbnQ7XG4gICAgcHJvdGVjdGVkIGNvbXBsZXhDaGlwOiBJZ3hDaGlwQ29tcG9uZW50O1xuICAgIGNzc0NsYXNzOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IoY2RyOiBDaGFuZ2VEZXRlY3RvclJlZiwgZmlsdGVyaW5nU2VydmljZTogSWd4RmlsdGVyaW5nU2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcbiAgICBvblRhYktleURvd24oZXZlbnRBcmdzOiBhbnkpOiB2b2lkO1xuICAgIG9uU2hpZnRUYWJLZXlEb3duKGV2ZW50QXJnczogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgYSBjaGlwIHdpdGggYSBnaXZlbiBpbmRleCBpcyB2aXNpYmxlIG9yIG5vdC5cbiAgICAgKi9cbiAgICBpc0NoaXBWaXNpYmxlKGluZGV4OiBudW1iZXIpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGZpbHRlcmluZyBjZWxsIGFyZWEuXG4gICAgICovXG4gICAgdXBkYXRlRmlsdGVyQ2VsbEFyZWEoKTogdm9pZDtcbiAgICBnZXQgdGVtcGxhdGUoKTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjb250ZXh0IHBhc3NlZCB0byB0aGUgZmlsdGVyIHRlbXBsYXRlLlxuICAgICAqIEBtZW1iZXJvZiBJZ3hHcmlkRmlsdGVyaW5nQ2VsbENvbXBvbmVudFxuICAgICAqL1xuICAgIGdldCBjb250ZXh0KCk6IHtcbiAgICAgICAgY29sdW1uOiBJZ3hDb2x1bW5Db21wb25lbnQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDaGlwIGNsaWNrZWQgZXZlbnQgaGFuZGxlci5cbiAgICAgKi9cbiAgICBvbkNoaXBDbGlja2VkKGV4cHJlc3Npb24/OiBJRmlsdGVyaW5nRXhwcmVzc2lvbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2hpcCByZW1vdmVkIGV2ZW50IGhhbmRsZXIuXG4gICAgICovXG4gICAgb25DaGlwUmVtb3ZlZChldmVudEFyZ3M6IElCYXNlQ2hpcEV2ZW50QXJncywgaXRlbTogRXhwcmVzc2lvblVJKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDbGVhcnMgdGhlIGZpbHRlcmluZy5cbiAgICAgKi9cbiAgICBjbGVhckZpbHRlcmluZygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENoaXAga2V5ZG93biBldmVudCBoYW5kbGVyLlxuICAgICAqL1xuICAgIG9uQ2hpcEtleURvd24oZXZlbnRBcmdzOiBLZXlib2FyZEV2ZW50LCBleHByZXNzaW9uPzogSUZpbHRlcmluZ0V4cHJlc3Npb24pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGZpbHRlcmluZyBpbmRpY2F0b3IgY2xhc3MuXG4gICAgICovXG4gICAgZmlsdGVyaW5nSW5kaWNhdG9yQ2xhc3MoKToge1xuICAgICAgICBbeDogc3RyaW5nXTogYm9vbGVhbjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEZvY3VzIGEgY2hpcCBkZXBlbmRpbmcgb24gdGhlIGN1cnJlbnQgdmlzaWJsZSB0ZW1wbGF0ZS5cbiAgICAgKi9cbiAgICBmb2N1c0NoaXAoZm9jdXNGaXJzdD86IGJvb2xlYW4pOiB2b2lkO1xuICAgIHByaXZhdGUgcmVtb3ZlRXhwcmVzc2lvbjtcbiAgICBwcml2YXRlIGlzTW9yZUljb25IaWRkZW47XG4gICAgcHJpdmF0ZSB1cGRhdGVWaXNpYmxlRmlsdGVycztcbiAgICBwcml2YXRlIGlzRmlyc3RFbGVtZW50Rm9jdXNlZDtcbiAgICBwcml2YXRlIGlzTGFzdEVsZW1lbnRGb2N1c2VkO1xuICAgIHByaXZhdGUgZm9jdXNGaXJzdEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBmb2N1c0VsZW1lbnQ7XG4gICAgcHJpdmF0ZSBpc0NvbHVtblJpZ2h0VmlzaWJsZTtcbiAgICBwcml2YXRlIGlzQ29sdW1uTGVmdFZpc2libGU7XG59XG4iXX0=