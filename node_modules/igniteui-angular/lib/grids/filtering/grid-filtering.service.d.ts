import { OnDestroy } from '@angular/core';
import { IgxIconService } from '../../icon/icon.service';
import { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';
import { IgxGridBaseDirective } from '../grid-base.directive';
import { IFilteringExpression, FilteringLogic } from '../../data-operations/filtering-expression.interface';
import { IgxColumnComponent } from '../columns/column.component';
import { IFilteringOperation } from '../../data-operations/filtering-condition';
import { GridBaseAPIService } from '../api.service';
import { GridType } from '../common/grid.interface';
import { IgxDatePipeComponent } from '../common/pipes';
/**
 *@hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class ExpressionUI {
    expression: IFilteringExpression;
    beforeOperator: FilteringLogic;
    afterOperator: FilteringLogic;
    isSelected: boolean;
    isVisible: boolean;
}
/**
 *@hidden
 */
export declare class IgxFilteringService implements OnDestroy {
    private gridAPI;
    private iconService;
    private columnsWithComplexFilter;
    private areEventsSubscribed;
    private destroy$;
    private isFiltering;
    private columnToExpressionsMap;
    private _datePipe;
    private columnStartIndex;
    private _filterIconsRegistered;
    gridId: string;
    isFilterRowVisible: boolean;
    filteredColumn: IgxColumnComponent;
    selectedExpression: IFilteringExpression;
    columnToFocus: IgxColumnComponent;
    shouldFocusNext: boolean;
    columnToMoreIconHidden: Map<string, boolean>;
    grid: IgxGridBaseDirective;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>, iconService: IgxIconService);
    ngOnDestroy(): void;
    get displayContainerWidth(): number;
    get displayContainerScrollLeft(): number;
    get areAllColumnsInView(): boolean;
    get unpinnedFilterableColumns(): IgxColumnComponent[];
    get unpinnedColumns(): IgxColumnComponent[];
    get datePipe(): IgxDatePipeComponent;
    /**
     * Subscribe to grid's events.
     */
    subscribeToEvents(): void;
    /**
     * Internal method to create expressionsTree and filter grid used in both filter modes.
     */
    filterInternal(field: string, expressions?: FilteringExpressionsTree | Array<ExpressionUI>): void;
    /**
     * Execute filtering on the grid.
     */
    filter(field: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree, ignoreCase?: boolean): void;
    /**
     * Clear the filter of a given column.
     */
    clearFilter(field: string): void;
    /**
     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.
     */
    filterGlobal(value: any, condition: any, ignoreCase?: any): void;
    /**
     * Register filtering SVG icons in the icon service.
     */
    registerSVGIcons(): void;
    /**
     * Returns the ExpressionUI array for a given column.
     */
    getExpressions(columnId: string): ExpressionUI[];
    /**
     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.
     */
    refreshExpressions(): void;
    /**
     * Remove an ExpressionUI for a given column.
     */
    removeExpression(columnId: string, indexToRemove: number): void;
    /**
     * Generate filtering tree for a given column from existing ExpressionUIs.
     */
    createSimpleFilteringTree(columnId: string, expressionUIList?: any): FilteringExpressionsTree;
    /**
     * Returns whether a complex filter is applied to a given column.
     */
    isFilterComplex(columnId: string): boolean;
    /**
     * Returns the string representation of the FilteringLogic operator.
     */
    getOperatorAsString(operator: FilteringLogic): any;
    /**
     * Generate the label of a chip from a given filtering expression.
     */
    getChipLabel(expression: IFilteringExpression): any;
    /**
     * Updates the content of a filterCell.
     */
    updateFilteringCell(column: IgxColumnComponent): void;
    /**
     * Focus a chip in a filterCell.
     */
    focusFilterCellChip(column: IgxColumnComponent, focusFirst: boolean): void;
    /**
     * Focus the close button in the filtering row.
     */
    focusFilterRowCloseButton(): void;
    get filteredData(): any[];
    /**
     * Scrolls to a filterCell.
     */
    scrollToFilterCell(column: IgxColumnComponent, shouldFocusNext: boolean): void;
    private isFilteringTreeComplex;
    private getChildAndOperatorsCount;
    generateExpressionsList(expressions: IFilteringExpressionsTree | IFilteringExpression, operator: FilteringLogic, expressionsUIs: ExpressionUI[]): void;
    private generateExpressionsListRecursive;
    isFilteringExpressionsTreeEmpty(expressionTree: IFilteringExpressionsTree): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxFilteringService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<IgxFilteringService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1maWx0ZXJpbmcuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJncmlkLWZpbHRlcmluZy5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7O0FBYUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBK0dBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hJY29uU2VydmljZSB9IGZyb20gJy4uLy4uL2ljb24vaWNvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZSwgSUZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZSB9IGZyb20gJy4uLy4uL2RhdGEtb3BlcmF0aW9ucy9maWx0ZXJpbmctZXhwcmVzc2lvbnMtdHJlZSc7XG5pbXBvcnQgeyBJZ3hHcmlkQmFzZURpcmVjdGl2ZSB9IGZyb20gJy4uL2dyaWQtYmFzZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSUZpbHRlcmluZ0V4cHJlc3Npb24sIEZpbHRlcmluZ0xvZ2ljIH0gZnJvbSAnLi4vLi4vZGF0YS1vcGVyYXRpb25zL2ZpbHRlcmluZy1leHByZXNzaW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBJZ3hDb2x1bW5Db21wb25lbnQgfSBmcm9tICcuLi9jb2x1bW5zL2NvbHVtbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgSUZpbHRlcmluZ09wZXJhdGlvbiB9IGZyb20gJy4uLy4uL2RhdGEtb3BlcmF0aW9ucy9maWx0ZXJpbmctY29uZGl0aW9uJztcbmltcG9ydCB7IEdyaWRCYXNlQVBJU2VydmljZSB9IGZyb20gJy4uL2FwaS5zZXJ2aWNlJztcbmltcG9ydCB7IEdyaWRUeXBlIH0gZnJvbSAnLi4vY29tbW9uL2dyaWQuaW50ZXJmYWNlJztcbmltcG9ydCB7IElneERhdGVQaXBlQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tbW9uL3BpcGVzJztcbi8qKlxuICpAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEV4cHJlc3Npb25VSSB7XG4gICAgZXhwcmVzc2lvbjogSUZpbHRlcmluZ0V4cHJlc3Npb247XG4gICAgYmVmb3JlT3BlcmF0b3I6IEZpbHRlcmluZ0xvZ2ljO1xuICAgIGFmdGVyT3BlcmF0b3I6IEZpbHRlcmluZ0xvZ2ljO1xuICAgIGlzU2VsZWN0ZWQ6IGJvb2xlYW47XG4gICAgaXNWaXNpYmxlOiBib29sZWFuO1xufVxuLyoqXG4gKkBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4RmlsdGVyaW5nU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBncmlkQVBJO1xuICAgIHByaXZhdGUgaWNvblNlcnZpY2U7XG4gICAgcHJpdmF0ZSBjb2x1bW5zV2l0aENvbXBsZXhGaWx0ZXI7XG4gICAgcHJpdmF0ZSBhcmVFdmVudHNTdWJzY3JpYmVkO1xuICAgIHByaXZhdGUgZGVzdHJveSQ7XG4gICAgcHJpdmF0ZSBpc0ZpbHRlcmluZztcbiAgICBwcml2YXRlIGNvbHVtblRvRXhwcmVzc2lvbnNNYXA7XG4gICAgcHJpdmF0ZSBfZGF0ZVBpcGU7XG4gICAgcHJpdmF0ZSBjb2x1bW5TdGFydEluZGV4O1xuICAgIHByaXZhdGUgX2ZpbHRlckljb25zUmVnaXN0ZXJlZDtcbiAgICBncmlkSWQ6IHN0cmluZztcbiAgICBpc0ZpbHRlclJvd1Zpc2libGU6IGJvb2xlYW47XG4gICAgZmlsdGVyZWRDb2x1bW46IElneENvbHVtbkNvbXBvbmVudDtcbiAgICBzZWxlY3RlZEV4cHJlc3Npb246IElGaWx0ZXJpbmdFeHByZXNzaW9uO1xuICAgIGNvbHVtblRvRm9jdXM6IElneENvbHVtbkNvbXBvbmVudDtcbiAgICBzaG91bGRGb2N1c05leHQ6IGJvb2xlYW47XG4gICAgY29sdW1uVG9Nb3JlSWNvbkhpZGRlbjogTWFwPHN0cmluZywgYm9vbGVhbj47XG4gICAgZ3JpZDogSWd4R3JpZEJhc2VEaXJlY3RpdmU7XG4gICAgY29uc3RydWN0b3IoZ3JpZEFQSTogR3JpZEJhc2VBUElTZXJ2aWNlPElneEdyaWRCYXNlRGlyZWN0aXZlICYgR3JpZFR5cGU+LCBpY29uU2VydmljZTogSWd4SWNvblNlcnZpY2UpO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgZ2V0IGRpc3BsYXlDb250YWluZXJXaWR0aCgpOiBudW1iZXI7XG4gICAgZ2V0IGRpc3BsYXlDb250YWluZXJTY3JvbGxMZWZ0KCk6IG51bWJlcjtcbiAgICBnZXQgYXJlQWxsQ29sdW1uc0luVmlldygpOiBib29sZWFuO1xuICAgIGdldCB1bnBpbm5lZEZpbHRlcmFibGVDb2x1bW5zKCk6IElneENvbHVtbkNvbXBvbmVudFtdO1xuICAgIGdldCB1bnBpbm5lZENvbHVtbnMoKTogSWd4Q29sdW1uQ29tcG9uZW50W107XG4gICAgZ2V0IGRhdGVQaXBlKCk6IElneERhdGVQaXBlQ29tcG9uZW50O1xuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZSB0byBncmlkJ3MgZXZlbnRzLlxuICAgICAqL1xuICAgIHN1YnNjcmliZVRvRXZlbnRzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgbWV0aG9kIHRvIGNyZWF0ZSBleHByZXNzaW9uc1RyZWUgYW5kIGZpbHRlciBncmlkIHVzZWQgaW4gYm90aCBmaWx0ZXIgbW9kZXMuXG4gICAgICovXG4gICAgZmlsdGVySW50ZXJuYWwoZmllbGQ6IHN0cmluZywgZXhwcmVzc2lvbnM/OiBGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUgfCBBcnJheTxFeHByZXNzaW9uVUk+KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIGZpbHRlcmluZyBvbiB0aGUgZ3JpZC5cbiAgICAgKi9cbiAgICBmaWx0ZXIoZmllbGQ6IHN0cmluZywgdmFsdWU6IGFueSwgY29uZGl0aW9uT3JFeHByZXNzaW9uVHJlZT86IElGaWx0ZXJpbmdPcGVyYXRpb24gfCBJRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlLCBpZ25vcmVDYXNlPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2xlYXIgdGhlIGZpbHRlciBvZiBhIGdpdmVuIGNvbHVtbi5cbiAgICAgKi9cbiAgICBjbGVhckZpbHRlcihmaWVsZDogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBGaWx0ZXJzIGFsbCB0aGUgYElneENvbHVtbkNvbXBvbmVudGAgaW4gdGhlIGBJZ3hHcmlkQ29tcG9uZW50YCB3aXRoIHRoZSBzYW1lIGNvbmRpdGlvbi5cbiAgICAgKi9cbiAgICBmaWx0ZXJHbG9iYWwodmFsdWU6IGFueSwgY29uZGl0aW9uOiBhbnksIGlnbm9yZUNhc2U/OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGZpbHRlcmluZyBTVkcgaWNvbnMgaW4gdGhlIGljb24gc2VydmljZS5cbiAgICAgKi9cbiAgICByZWdpc3RlclNWR0ljb25zKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgRXhwcmVzc2lvblVJIGFycmF5IGZvciBhIGdpdmVuIGNvbHVtbi5cbiAgICAgKi9cbiAgICBnZXRFeHByZXNzaW9ucyhjb2x1bW5JZDogc3RyaW5nKTogRXhwcmVzc2lvblVJW107XG4gICAgLyoqXG4gICAgICogUmVjcmVhdGVzIGFsbCBFeHByZXNzaW9uVUlzIGZvciBhbGwgY29sdW1ucy4gRXhlY3V0ZWQgYWZ0ZXIgZmlsdGVyaW5nIHRvIHJlZnJlc2ggdGhlIGNhY2hlLlxuICAgICAqL1xuICAgIHJlZnJlc2hFeHByZXNzaW9ucygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbiBFeHByZXNzaW9uVUkgZm9yIGEgZ2l2ZW4gY29sdW1uLlxuICAgICAqL1xuICAgIHJlbW92ZUV4cHJlc3Npb24oY29sdW1uSWQ6IHN0cmluZywgaW5kZXhUb1JlbW92ZTogbnVtYmVyKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBmaWx0ZXJpbmcgdHJlZSBmb3IgYSBnaXZlbiBjb2x1bW4gZnJvbSBleGlzdGluZyBFeHByZXNzaW9uVUlzLlxuICAgICAqL1xuICAgIGNyZWF0ZVNpbXBsZUZpbHRlcmluZ1RyZWUoY29sdW1uSWQ6IHN0cmluZywgZXhwcmVzc2lvblVJTGlzdD86IGFueSk6IEZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgYSBjb21wbGV4IGZpbHRlciBpcyBhcHBsaWVkIHRvIGEgZ2l2ZW4gY29sdW1uLlxuICAgICAqL1xuICAgIGlzRmlsdGVyQ29tcGxleChjb2x1bW5JZDogc3RyaW5nKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIEZpbHRlcmluZ0xvZ2ljIG9wZXJhdG9yLlxuICAgICAqL1xuICAgIGdldE9wZXJhdG9yQXNTdHJpbmcob3BlcmF0b3I6IEZpbHRlcmluZ0xvZ2ljKTogYW55O1xuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIHRoZSBsYWJlbCBvZiBhIGNoaXAgZnJvbSBhIGdpdmVuIGZpbHRlcmluZyBleHByZXNzaW9uLlxuICAgICAqL1xuICAgIGdldENoaXBMYWJlbChleHByZXNzaW9uOiBJRmlsdGVyaW5nRXhwcmVzc2lvbik6IGFueTtcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjb250ZW50IG9mIGEgZmlsdGVyQ2VsbC5cbiAgICAgKi9cbiAgICB1cGRhdGVGaWx0ZXJpbmdDZWxsKGNvbHVtbjogSWd4Q29sdW1uQ29tcG9uZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBGb2N1cyBhIGNoaXAgaW4gYSBmaWx0ZXJDZWxsLlxuICAgICAqL1xuICAgIGZvY3VzRmlsdGVyQ2VsbENoaXAoY29sdW1uOiBJZ3hDb2x1bW5Db21wb25lbnQsIGZvY3VzRmlyc3Q6IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEZvY3VzIHRoZSBjbG9zZSBidXR0b24gaW4gdGhlIGZpbHRlcmluZyByb3cuXG4gICAgICovXG4gICAgZm9jdXNGaWx0ZXJSb3dDbG9zZUJ1dHRvbigpOiB2b2lkO1xuICAgIGdldCBmaWx0ZXJlZERhdGEoKTogYW55W107XG4gICAgLyoqXG4gICAgICogU2Nyb2xscyB0byBhIGZpbHRlckNlbGwuXG4gICAgICovXG4gICAgc2Nyb2xsVG9GaWx0ZXJDZWxsKGNvbHVtbjogSWd4Q29sdW1uQ29tcG9uZW50LCBzaG91bGRGb2N1c05leHQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIHByaXZhdGUgaXNGaWx0ZXJpbmdUcmVlQ29tcGxleDtcbiAgICBwcml2YXRlIGdldENoaWxkQW5kT3BlcmF0b3JzQ291bnQ7XG4gICAgZ2VuZXJhdGVFeHByZXNzaW9uc0xpc3QoZXhwcmVzc2lvbnM6IElGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUgfCBJRmlsdGVyaW5nRXhwcmVzc2lvbiwgb3BlcmF0b3I6IEZpbHRlcmluZ0xvZ2ljLCBleHByZXNzaW9uc1VJczogRXhwcmVzc2lvblVJW10pOiB2b2lkO1xuICAgIHByaXZhdGUgZ2VuZXJhdGVFeHByZXNzaW9uc0xpc3RSZWN1cnNpdmU7XG4gICAgaXNGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWVFbXB0eShleHByZXNzaW9uVHJlZTogSUZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZSk6IGJvb2xlYW47XG59XG4iXX0=