import { ElementRef } from '@angular/core';
import { GridBaseAPIService } from './api.service';
import { GridType } from './common/grid.interface';
/** @hidden */
import * as ɵngcc0 from '@angular/core';
export declare class IgxRowEditTemplateDirective {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxRowEditTemplateDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxRowEditTemplateDirective, "[igxRowEdit]", never, {}, {}, never>;
}
/** @hidden */
export declare class IgxRowEditTextDirective {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxRowEditTextDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxRowEditTextDirective, "[igxRowEditText]", never, {}, {}, never>;
}
/** @hidden */
export declare class IgxRowEditActionsDirective {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxRowEditActionsDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxRowEditActionsDirective, "[igxRowEditActions]", never, {}, {}, never>;
}
/** @hidden */
export declare class IgxRowEditTabStopDirective {
    api: GridBaseAPIService<any>;
    element: ElementRef;
    private currentCellIndex;
    constructor(api: GridBaseAPIService<any>, element: ElementRef);
    get grid(): GridType;
    handleTab(event: KeyboardEvent): void;
    handleEscape(event: KeyboardEvent): void;
    /**
     * Moves focus to first/last editable cell in the editable row and put the cell in edit mode.
     * If cell is out of view first scrolls to the cell
     * @param event keyboard event containing information about whether SHIFT key was pressed
     */
    private move;
    /**
     * Sets the cell in edit mode and focus its native element
     * @param cellIndex index of the cell to activate
     */
    private activateCell;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxRowEditTabStopDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IgxRowEditTabStopDirective, "[igxRowEditTabStop]", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5yb3dFZGl0LmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJncmlkLnJvd0VkaXQuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBSUE7OztBQUNBOzs7OztBQUdBOzs7OztBQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXFCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdyaWRCYXNlQVBJU2VydmljZSB9IGZyb20gJy4vYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgR3JpZFR5cGUgfSBmcm9tICcuL2NvbW1vbi9ncmlkLmludGVyZmFjZSc7XG4vKiogQGhpZGRlbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4Um93RWRpdFRlbXBsYXRlRGlyZWN0aXZlIHtcbn1cbi8qKiBAaGlkZGVuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hSb3dFZGl0VGV4dERpcmVjdGl2ZSB7XG59XG4vKiogQGhpZGRlbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4Um93RWRpdEFjdGlvbnNEaXJlY3RpdmUge1xufVxuLyoqIEBoaWRkZW4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneFJvd0VkaXRUYWJTdG9wRGlyZWN0aXZlIHtcbiAgICBhcGk6IEdyaWRCYXNlQVBJU2VydmljZTxhbnk+O1xuICAgIGVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBjdXJyZW50Q2VsbEluZGV4O1xuICAgIGNvbnN0cnVjdG9yKGFwaTogR3JpZEJhc2VBUElTZXJ2aWNlPGFueT4sIGVsZW1lbnQ6IEVsZW1lbnRSZWYpO1xuICAgIGdldCBncmlkKCk6IEdyaWRUeXBlO1xuICAgIGhhbmRsZVRhYihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgaGFuZGxlRXNjYXBlKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBNb3ZlcyBmb2N1cyB0byBmaXJzdC9sYXN0IGVkaXRhYmxlIGNlbGwgaW4gdGhlIGVkaXRhYmxlIHJvdyBhbmQgcHV0IHRoZSBjZWxsIGluIGVkaXQgbW9kZS5cbiAgICAgKiBJZiBjZWxsIGlzIG91dCBvZiB2aWV3IGZpcnN0IHNjcm9sbHMgdG8gdGhlIGNlbGxcbiAgICAgKiBAcGFyYW0gZXZlbnQga2V5Ym9hcmQgZXZlbnQgY29udGFpbmluZyBpbmZvcm1hdGlvbiBhYm91dCB3aGV0aGVyIFNISUZUIGtleSB3YXMgcHJlc3NlZFxuICAgICAqL1xuICAgIHByaXZhdGUgbW92ZTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBjZWxsIGluIGVkaXQgbW9kZSBhbmQgZm9jdXMgaXRzIG5hdGl2ZSBlbGVtZW50XG4gICAgICogQHBhcmFtIGNlbGxJbmRleCBpbmRleCBvZiB0aGUgY2VsbCB0byBhY3RpdmF0ZVxuICAgICAqL1xuICAgIHByaXZhdGUgYWN0aXZhdGVDZWxsO1xufVxuIl19