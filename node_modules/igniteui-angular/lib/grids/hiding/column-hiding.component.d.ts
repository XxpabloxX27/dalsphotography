import { ChangeDetectorRef, EventEmitter, OnDestroy } from '@angular/core';
import { IColumnVisibilityChangedEventArgs, IgxColumnHidingItemDirective } from './column-hiding-item.directive';
import { ColumnChooserBaseDirective } from '../column-chooser-base';
import * as ɵngcc0 from '@angular/core';
export declare class IgxColumnHidingComponent extends ColumnChooserBaseDirective implements OnDestroy {
    cdr: ChangeDetectorRef;
    /**
     * Returns a boolean indicating whether the `HIDE ALL` button is disabled.
     * ```html
     * <igx-column-hiding #columnHidingUI
     *     [columns]="grid.columns" [title]="'Column Hiding'">
     * </igx-column-hiding>
     * ```
     * ```typescript
     * @ViewChild("'columnHidingUI'")
     * public columnHiding: IgxColumnHidingComponent;
     * let isHideAlldisabled =  this.columnHiding.disableHideAll;
     * ```
     *@memberof IgxColumnHidingComponent
     */
    get disableHideAll(): boolean;
    /**
     * Returns a boolean indicating whether the `SHOW ALL` button is disabled.
     * ```typescript
     * let isShowAlldisabled =  this.columnHiding.disableShowAll;
     * ```
     * @memberof IgxColumnHidingComponent
     */
    get disableShowAll(): boolean;
    /**
     * Sets/gets the text of the button that shows all columns if they are hidden.
     * ```typescript
     * let showAllButtonText =  this.columnHiding.showAllText;
     * ```
     *
     * ```html
     * <igx-column-hiding [showAllText] = "'Show Columns'"></igx-column-hiding>
     * ```
     * @memberof IgxColumnHidingComponent
     */
    showAllText: string;
    /**
     * Sets/gets the text of the button that hides all columns if they are shown.
     * ```typescript
     * let hideAllButtonText =  this.columnHiding.hideAllText;
     * ```
     *
     * ```html
     * <igx-column-hiding [hideAllText] = "'Hide Columns'"></igx-column-hiding>
     * ```
     * @memberof IgxColumnHidingComponent
     */
    hideAllText: string;
    /**
     * An event that is emitted after the columns visibility is changed.
     * Provides references to the `column` and the `newValue` properties as event arguments.
     * ```html
     *  <igx-column-hiding (onColumnVisibilityChanged) = "onColumnVisibilityChanged($event)"></igx-column-hiding>
     * ```
     * @memberof IgxColumnHidingComponent
     */
    onColumnVisibilityChanged: EventEmitter<IColumnVisibilityChangedEventArgs>;
    /**
     * Gets the count of the hidden columns.
     * ```typescript
     * let hiddenColumnsCount =  this.columnHiding.hiddenColumnsCount;
     * ```
     * @memberof IgxColumnHidingComponent
     */
    get hiddenColumnsCount(): number;
    constructor(cdr: ChangeDetectorRef);
    /**
     *@hidden
     */
    get hidableColumns(): any[];
    private destroy$;
    /**
     *@hidden
     */
    protected createColumnItem(container: any, column: any): IgxColumnHidingItemDirective;
    /**
     * Shows all columns in the grid.
     * ```typescript
     * this.columnHiding.showAllColumns();
     * ```
     * @memberof IgxColumnHidingComponent
     */
    showAllColumns(): void;
    /**
     * Hides all columns in the grid.
     * ```typescript
     * this.columnHiding.hideAllColumns();
     * ```
     * @memberof IgxColumnHidingComponent
     */
    hideAllColumns(): void;
    /**
     * @hidden
     */
    onVisibilityChanged(args: IColumnVisibilityChangedEventArgs): void;
    /**
     *@hidden
     */
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxColumnHidingComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxColumnHidingComponent, "igx-column-hiding", never, {
    "showAllText": "showAllText";
    "hideAllText": "hideAllText";
    "disableHideAll": "disableHideAll";
    "disableShowAll": "disableShowAll";
}, {
    "onColumnVisibilityChanged": "onColumnVisibilityChanged";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWhpZGluZy5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiY29sdW1uLWhpZGluZy5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0dBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQ29sdW1uVmlzaWJpbGl0eUNoYW5nZWRFdmVudEFyZ3MsIElneENvbHVtbkhpZGluZ0l0ZW1EaXJlY3RpdmUgfSBmcm9tICcuL2NvbHVtbi1oaWRpbmctaXRlbS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQ29sdW1uQ2hvb3NlckJhc2VEaXJlY3RpdmUgfSBmcm9tICcuLi9jb2x1bW4tY2hvb3Nlci1iYXNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneENvbHVtbkhpZGluZ0NvbXBvbmVudCBleHRlbmRzIENvbHVtbkNob29zZXJCYXNlRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBjZHI6IENoYW5nZURldGVjdG9yUmVmO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgYEhJREUgQUxMYCBidXR0b24gaXMgZGlzYWJsZWQuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY29sdW1uLWhpZGluZyAjY29sdW1uSGlkaW5nVUlcbiAgICAgKiAgICAgW2NvbHVtbnNdPVwiZ3JpZC5jb2x1bW5zXCIgW3RpdGxlXT1cIidDb2x1bW4gSGlkaW5nJ1wiPlxuICAgICAqIDwvaWd4LWNvbHVtbi1oaWRpbmc+XG4gICAgICogYGBgXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIEBWaWV3Q2hpbGQoXCInY29sdW1uSGlkaW5nVUknXCIpXG4gICAgICogcHVibGljIGNvbHVtbkhpZGluZzogSWd4Q29sdW1uSGlkaW5nQ29tcG9uZW50O1xuICAgICAqIGxldCBpc0hpZGVBbGxkaXNhYmxlZCA9ICB0aGlzLmNvbHVtbkhpZGluZy5kaXNhYmxlSGlkZUFsbDtcbiAgICAgKiBgYGBcbiAgICAgKkBtZW1iZXJvZiBJZ3hDb2x1bW5IaWRpbmdDb21wb25lbnRcbiAgICAgKi9cbiAgICBnZXQgZGlzYWJsZUhpZGVBbGwoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGBTSE9XIEFMTGAgYnV0dG9uIGlzIGRpc2FibGVkLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgaXNTaG93QWxsZGlzYWJsZWQgPSAgdGhpcy5jb2x1bW5IaWRpbmcuZGlzYWJsZVNob3dBbGw7XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneENvbHVtbkhpZGluZ0NvbXBvbmVudFxuICAgICAqL1xuICAgIGdldCBkaXNhYmxlU2hvd0FsbCgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldHMvZ2V0cyB0aGUgdGV4dCBvZiB0aGUgYnV0dG9uIHRoYXQgc2hvd3MgYWxsIGNvbHVtbnMgaWYgdGhleSBhcmUgaGlkZGVuLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgc2hvd0FsbEJ1dHRvblRleHQgPSAgdGhpcy5jb2x1bW5IaWRpbmcuc2hvd0FsbFRleHQ7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1jb2x1bW4taGlkaW5nIFtzaG93QWxsVGV4dF0gPSBcIidTaG93IENvbHVtbnMnXCI+PC9pZ3gtY29sdW1uLWhpZGluZz5cbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4Q29sdW1uSGlkaW5nQ29tcG9uZW50XG4gICAgICovXG4gICAgc2hvd0FsbFRleHQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXRzL2dldHMgdGhlIHRleHQgb2YgdGhlIGJ1dHRvbiB0aGF0IGhpZGVzIGFsbCBjb2x1bW5zIGlmIHRoZXkgYXJlIHNob3duLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgaGlkZUFsbEJ1dHRvblRleHQgPSAgdGhpcy5jb2x1bW5IaWRpbmcuaGlkZUFsbFRleHQ7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1jb2x1bW4taGlkaW5nIFtoaWRlQWxsVGV4dF0gPSBcIidIaWRlIENvbHVtbnMnXCI+PC9pZ3gtY29sdW1uLWhpZGluZz5cbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4Q29sdW1uSGlkaW5nQ29tcG9uZW50XG4gICAgICovXG4gICAgaGlkZUFsbFRleHQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgYWZ0ZXIgdGhlIGNvbHVtbnMgdmlzaWJpbGl0eSBpcyBjaGFuZ2VkLlxuICAgICAqIFByb3ZpZGVzIHJlZmVyZW5jZXMgdG8gdGhlIGBjb2x1bW5gIGFuZCB0aGUgYG5ld1ZhbHVlYCBwcm9wZXJ0aWVzIGFzIGV2ZW50IGFyZ3VtZW50cy5cbiAgICAgKiBgYGBodG1sXG4gICAgICogIDxpZ3gtY29sdW1uLWhpZGluZyAob25Db2x1bW5WaXNpYmlsaXR5Q2hhbmdlZCkgPSBcIm9uQ29sdW1uVmlzaWJpbGl0eUNoYW5nZWQoJGV2ZW50KVwiPjwvaWd4LWNvbHVtbi1oaWRpbmc+XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneENvbHVtbkhpZGluZ0NvbXBvbmVudFxuICAgICAqL1xuICAgIG9uQ29sdW1uVmlzaWJpbGl0eUNoYW5nZWQ6IEV2ZW50RW1pdHRlcjxJQ29sdW1uVmlzaWJpbGl0eUNoYW5nZWRFdmVudEFyZ3M+O1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGNvdW50IG9mIHRoZSBoaWRkZW4gY29sdW1ucy5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGhpZGRlbkNvbHVtbnNDb3VudCA9ICB0aGlzLmNvbHVtbkhpZGluZy5oaWRkZW5Db2x1bW5zQ291bnQ7XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneENvbHVtbkhpZGluZ0NvbXBvbmVudFxuICAgICAqL1xuICAgIGdldCBoaWRkZW5Db2x1bW5zQ291bnQoKTogbnVtYmVyO1xuICAgIGNvbnN0cnVjdG9yKGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIGdldCBoaWRhYmxlQ29sdW1ucygpOiBhbnlbXTtcbiAgICBwcml2YXRlIGRlc3Ryb3kkO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBjcmVhdGVDb2x1bW5JdGVtKGNvbnRhaW5lcjogYW55LCBjb2x1bW46IGFueSk6IElneENvbHVtbkhpZGluZ0l0ZW1EaXJlY3RpdmU7XG4gICAgLyoqXG4gICAgICogU2hvd3MgYWxsIGNvbHVtbnMgaW4gdGhlIGdyaWQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHRoaXMuY29sdW1uSGlkaW5nLnNob3dBbGxDb2x1bW5zKCk7XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneENvbHVtbkhpZGluZ0NvbXBvbmVudFxuICAgICAqL1xuICAgIHNob3dBbGxDb2x1bW5zKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogSGlkZXMgYWxsIGNvbHVtbnMgaW4gdGhlIGdyaWQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHRoaXMuY29sdW1uSGlkaW5nLmhpZGVBbGxDb2x1bW5zKCk7XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneENvbHVtbkhpZGluZ0NvbXBvbmVudFxuICAgICAqL1xuICAgIGhpZGVBbGxDb2x1bW5zKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9uVmlzaWJpbGl0eUNoYW5nZWQoYXJnczogSUNvbHVtblZpc2liaWxpdHlDaGFuZ2VkRXZlbnRBcmdzKTogdm9pZDtcbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19