import { PipeTransform } from '@angular/core';
import { GridBaseAPIService } from '../api.service';
import { IgxGridBaseDirective } from '../grid-base.directive';
import { GridType } from './grid.interface';
import { DatePipe, DecimalPipe } from '@angular/common';
/**
 * @hidden
 * @internal
 */
import * as ɵngcc0 from '@angular/core';
export declare class IgxGridCellStyleClassesPipe implements PipeTransform {
    transform(cssClasses: {
        [prop: string]: any;
    }, value: any, data: any, field: string, index: number): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridCellStyleClassesPipe>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxGridCellStyleClassesPipe, "igxCellStyleClasses">;
}
/**
 * @hidden
 * @internal
 */
export declare class IgxGridCellStylesPipe implements PipeTransform {
    transform(styles: {
        [prop: string]: any;
    }, value: any, data: any, field: string, index: number): {
        [prop: string]: any;
    };
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridCellStylesPipe>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxGridCellStylesPipe, "igxCellStyles">;
}
/**
 * @hidden
 * @internal
 */
export declare class IgxGridNotGroupedPipe implements PipeTransform {
    transform(value: any[]): any[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridNotGroupedPipe>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxGridNotGroupedPipe, "igxNotGrouped">;
}
/**
 * @hidden
 * @internal
 */
export declare class IgxGridTopLevelColumns implements PipeTransform {
    transform(value: any[]): any[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridTopLevelColumns>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxGridTopLevelColumns, "igxTopLevel">;
}
/**
 * @hidden
 * @internal
 */
export declare class IgxGridFilterConditionPipe implements PipeTransform {
    transform(value: string): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridFilterConditionPipe>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxGridFilterConditionPipe, "filterCondition">;
}
/**
 * @hidden
 * @internal
 */
export declare class IgxGridTransactionPipe implements PipeTransform {
    private gridAPI;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseDirective & GridType>);
    transform(collection: any[], id: string, pipeTrigger: number): any[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridTransactionPipe>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxGridTransactionPipe, "gridTransaction">;
}
/**
 * @hidden
 * @internal
 */
export declare class IgxGridPaginatorOptionsPipe implements PipeTransform {
    transform(values: Array<number>): number[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxGridPaginatorOptionsPipe>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxGridPaginatorOptionsPipe, "paginatorOptions">;
}
/**
 * @hidden
 * @internal
 */
export declare class IgxHasVisibleColumnsPipe implements PipeTransform {
    transform(values: any[], hasVisibleColumns: any): any[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxHasVisibleColumnsPipe>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxHasVisibleColumnsPipe, "visibleColumns">;
}
/**
 * @hidden
 * @internal
 */
export declare class IgxDatePipeComponent extends DatePipe implements PipeTransform {
    private readonly DEFAULT_DATE_FORMAT;
    constructor(locale: string);
    transform(value: any, locale: string): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxDatePipeComponent>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxDatePipeComponent, "igxdate">;
}
/**
 * @hidden
 * @internal
 */
export declare class IgxDecimalPipeComponent extends DecimalPipe implements PipeTransform {
    constructor(locale: string);
    transform(value: any, locale: string): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxDecimalPipeComponent>;
    static ɵpipe: ɵngcc0.ɵɵPipeDefWithMeta<IgxDecimalPipeComponent, "igxdecimal">;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZXMuZC50cyIsInNvdXJjZXMiOlsicGlwZXMuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQVNBOzs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7OztBQVdBOzs7Ozs7Ozs7QUFPQTs7Ozs7Ozs7O0FBT0E7Ozs7Ozs7OztBQU9BOzs7Ozs7Ozs7OztBQVNBOzs7Ozs7Ozs7QUFPQTs7Ozs7Ozs7O0FBT0E7Ozs7Ozs7Ozs7O0FBU0E7Ozs7Ozs7Ozs7QUFRQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdyaWRCYXNlQVBJU2VydmljZSB9IGZyb20gJy4uL2FwaS5zZXJ2aWNlJztcbmltcG9ydCB7IElneEdyaWRCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi4vZ3JpZC1iYXNlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBHcmlkVHlwZSB9IGZyb20gJy4vZ3JpZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRGF0ZVBpcGUsIERlY2ltYWxQaXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbi8qKlxuICogQGhpZGRlblxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneEdyaWRDZWxsU3R5bGVDbGFzc2VzUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIHRyYW5zZm9ybShjc3NDbGFzc2VzOiB7XG4gICAgICAgIFtwcm9wOiBzdHJpbmddOiBhbnk7XG4gICAgfSwgdmFsdWU6IGFueSwgZGF0YTogYW55LCBmaWVsZDogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogc3RyaW5nO1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4R3JpZENlbGxTdHlsZXNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgdHJhbnNmb3JtKHN0eWxlczoge1xuICAgICAgICBbcHJvcDogc3RyaW5nXTogYW55O1xuICAgIH0sIHZhbHVlOiBhbnksIGRhdGE6IGFueSwgZmllbGQ6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IHtcbiAgICAgICAgW3Byb3A6IHN0cmluZ106IGFueTtcbiAgICB9O1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4R3JpZE5vdEdyb3VwZWRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgdHJhbnNmb3JtKHZhbHVlOiBhbnlbXSk6IGFueVtdO1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4R3JpZFRvcExldmVsQ29sdW1ucyBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIHRyYW5zZm9ybSh2YWx1ZTogYW55W10pOiBhbnlbXTtcbn1cbi8qKlxuICogQGhpZGRlblxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElneEdyaWRGaWx0ZXJDb25kaXRpb25QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgdHJhbnNmb3JtKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmc7XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hHcmlkVHJhbnNhY3Rpb25QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgcHJpdmF0ZSBncmlkQVBJO1xuICAgIGNvbnN0cnVjdG9yKGdyaWRBUEk6IEdyaWRCYXNlQVBJU2VydmljZTxJZ3hHcmlkQmFzZURpcmVjdGl2ZSAmIEdyaWRUeXBlPik7XG4gICAgdHJhbnNmb3JtKGNvbGxlY3Rpb246IGFueVtdLCBpZDogc3RyaW5nLCBwaXBlVHJpZ2dlcjogbnVtYmVyKTogYW55W107XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hHcmlkUGFnaW5hdG9yT3B0aW9uc1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgICB0cmFuc2Zvcm0odmFsdWVzOiBBcnJheTxudW1iZXI+KTogbnVtYmVyW107XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hIYXNWaXNpYmxlQ29sdW1uc1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgICB0cmFuc2Zvcm0odmFsdWVzOiBhbnlbXSwgaGFzVmlzaWJsZUNvbHVtbnM6IGFueSk6IGFueVtdO1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4RGF0ZVBpcGVDb21wb25lbnQgZXh0ZW5kcyBEYXRlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgREVGQVVMVF9EQVRFX0ZPUk1BVDtcbiAgICBjb25zdHJ1Y3Rvcihsb2NhbGU6IHN0cmluZyk7XG4gICAgdHJhbnNmb3JtKHZhbHVlOiBhbnksIGxvY2FsZTogc3RyaW5nKTogc3RyaW5nO1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4RGVjaW1hbFBpcGVDb21wb25lbnQgZXh0ZW5kcyBEZWNpbWFsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKGxvY2FsZTogc3RyaW5nKTtcbiAgICB0cmFuc2Zvcm0odmFsdWU6IGFueSwgbG9jYWxlOiBzdHJpbmcpOiBzdHJpbmc7XG59XG4iXX0=