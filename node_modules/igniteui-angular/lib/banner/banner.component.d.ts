import { EventEmitter, ElementRef } from '@angular/core';
import { AnimationSettings } from '../expansion-panel/expansion-panel.component';
import { IgxIconComponent } from '../icon/index';
import { IToggleView } from '../core/navigation';
import { CancelableEventArgs, IBaseEventArgs } from '../core/utils';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './banner.directives';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '../expansion-panel/expansion-panel.module';
import * as ɵngcc4 from '../icon/index';
import * as ɵngcc5 from '../directives/button/button.directive';
import * as ɵngcc6 from '../directives/ripple/ripple.directive';
export interface BannerEventArgs extends IBaseEventArgs {
    banner: IgxBannerComponent;
    event?: Event;
}
export interface BannerCancelEventArgs extends BannerEventArgs, CancelableEventArgs {
}
/**
 * **Ignite UI for Angular Banner** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/banner.html)
 *
 * The Ignite UI Banner provides a highly templateable and easy to use banner that can be shown in your application.
 *
 * Usage:
 *
 * ```html
 * <igx-banner #banner>
 *   Our privacy settings have changed.
 *  <igx-banner-actions>
 *      <button igxButton="raised">Read More</button>
 *      <button igxButton="raised">Accept and Continue</button>
 *  </igx-banner-actions>
 * </igx-banner>
 * ```
 */
export declare class IgxBannerComponent implements IToggleView {
    elementRef: ElementRef;
    private _bannerEvent;
    private _animationSettings;
    private _expansionPanel;
    private _bannerActionTemplate;
    /**
     * @hidden
     */
    bannerIcon: IgxIconComponent;
    /**
     * Fires after the banner shows up
     * ```typescript
     * public handleOpened(event) {
     *  ...
     * }
     * ```
     * ```html
     * <igx-banner (onOpened)="handleOpened($event)"></igx-banner>
     * ```
     */
    onOpened: EventEmitter<BannerEventArgs>;
    /**
     * Fires before the banner shows up
     * ```typescript
     * public handleOpening(event) {
     *  ...
     * }
     * ```
     * ```html
     * <igx-banner (onOpening)="handleOpening($event)"></igx-banner>
     * ```
     */
    onOpening: EventEmitter<BannerCancelEventArgs>;
    /**
     * Fires after the banner hides
     * ```typescript
     * public handleClosed(event) {
     *  ...
     * }
     * ```
     * ```html
     * <igx-banner (onClosed)="handleClosed($event)"></igx-banner>
     * ```
     */
    onClosed: EventEmitter<BannerEventArgs>;
    /**
     * Fires before the banner hides
     * ```typescript
     * public handleClosing(event) {
     *  ...
     * }
     * ```
     * ```html
     * <igx-banner (onClosing)="handleClosing($event)"></igx-banner>
     * ```
     */
    onClosing: EventEmitter<BannerCancelEventArgs>;
    /** @hidden */
    get useDefaultTemplate(): boolean;
    /**
     * Get the animation settings used by the banner open/close methods
     * ```typescript
     * let currentAnimations: AnimationSettings = banner.animationSettings
     * ```
     */
    get animationSettings(): AnimationSettings;
    /**
     * Set the animation settings used by the banner open/close methods
     * ```typescript
     * import { slideInLeft, slideOutRight } from 'igniteui-angular';
     * ...
     * banner.animationSettings: AnimationSettings = { openAnimation: slideInLeft, closeAnimation: slideOutRight };
     * ```
     */
    set animationSettings(settings: AnimationSettings);
    /**
     * Gets whether banner is collapsed
     *
     * ```typescript
     * const isCollapsed: boolean = banner.collapsed;
     * ```
     */
    get collapsed(): boolean;
    /**
     * Returns the native element of the banner component
     * ```typescript
     *  const myBannerElement: HTMLElement = banner.element;
     * ```
     */
    get element(): any;
    /**
     * @hidden
     */
    get displayStyle(): string;
    constructor(elementRef: ElementRef);
    /**
     * Opens the banner
     *
     * ```typescript
     *  myBanner.open();
     * ```
     *
     * ```html
     * <igx-banner #banner>
     * ...
     * </igx-banner>
     * <button (click)="banner.open()">Open Banner</button>
     * ```
     */
    open(event?: Event): void;
    /**
     * Closes the banner
     *
     * ```typescript
     *  myBanner.close();
     * ```
     *
     * ```html
     * <igx-banner #banner>
     * ...
     * </igx-banner>
     * <button (click)="banner.close()">Close Banner</button>
     * ```
     */
    close(event?: Event): void;
    /**
     * Toggles the banner
     *
     * ```typescript
     *  myBanner.toggle();
     * ```
     *
     * ```html
     * <igx-banner #banner>
     * ...
     * </igx-banner>
     * <button (click)="banner.toggle()">Toggle Banner</button>
     * ```
     */
    toggle(event?: Event): void;
    /** @hidden */
    onExpansionPanelOpen(): void;
    /** @hidden */
    onExpansionPanelClose(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IgxBannerComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IgxBannerComponent, "igx-banner", never, {
    "animationSettings": "animationSettings";
}, {
    "onOpened": "onOpened";
    "onOpening": "onOpening";
    "onClosed": "onClosed";
    "onClosing": "onClosing";
}, ["_bannerActionTemplate", "bannerIcon"]>;
}
/**
 * @hidden
 */
export declare class IgxBannerModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IgxBannerModule, [typeof IgxBannerComponent, typeof ɵngcc1.IgxBannerActionsDirective], [typeof ɵngcc2.CommonModule, typeof ɵngcc3.IgxExpansionPanelModule, typeof ɵngcc4.IgxIconModule, typeof ɵngcc5.IgxButtonModule, typeof ɵngcc6.IgxRippleModule], [typeof IgxBannerComponent, typeof ɵngcc1.IgxBannerActionsDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IgxBannerModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFubmVyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJiYW5uZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztBQUtBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUtBOzs7Ozs7O0FBS0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuaW1hdGlvblNldHRpbmdzIH0gZnJvbSAnLi4vZXhwYW5zaW9uLXBhbmVsL2V4cGFuc2lvbi1wYW5lbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4SWNvbkNvbXBvbmVudCB9IGZyb20gJy4uL2ljb24vaW5kZXgnO1xuaW1wb3J0IHsgSVRvZ2dsZVZpZXcgfSBmcm9tICcuLi9jb3JlL25hdmlnYXRpb24nO1xuaW1wb3J0IHsgQ2FuY2VsYWJsZUV2ZW50QXJncywgSUJhc2VFdmVudEFyZ3MgfSBmcm9tICcuLi9jb3JlL3V0aWxzJztcbmV4cG9ydCBpbnRlcmZhY2UgQmFubmVyRXZlbnRBcmdzIGV4dGVuZHMgSUJhc2VFdmVudEFyZ3Mge1xuICAgIGJhbm5lcjogSWd4QmFubmVyQ29tcG9uZW50O1xuICAgIGV2ZW50PzogRXZlbnQ7XG59XG5leHBvcnQgaW50ZXJmYWNlIEJhbm5lckNhbmNlbEV2ZW50QXJncyBleHRlbmRzIEJhbm5lckV2ZW50QXJncywgQ2FuY2VsYWJsZUV2ZW50QXJncyB7XG59XG4vKipcbiAqICoqSWduaXRlIFVJIGZvciBBbmd1bGFyIEJhbm5lcioqIC1cbiAqIFtEb2N1bWVudGF0aW9uXShodHRwczovL3d3dy5pbmZyYWdpc3RpY3MuY29tL3Byb2R1Y3RzL2lnbml0ZS11aS1hbmd1bGFyL2FuZ3VsYXIvY29tcG9uZW50cy9iYW5uZXIuaHRtbClcbiAqXG4gKiBUaGUgSWduaXRlIFVJIEJhbm5lciBwcm92aWRlcyBhIGhpZ2hseSB0ZW1wbGF0ZWFibGUgYW5kIGVhc3kgdG8gdXNlIGJhbm5lciB0aGF0IGNhbiBiZSBzaG93biBpbiB5b3VyIGFwcGxpY2F0aW9uLlxuICpcbiAqIFVzYWdlOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxpZ3gtYmFubmVyICNiYW5uZXI+XG4gKiAgIE91ciBwcml2YWN5IHNldHRpbmdzIGhhdmUgY2hhbmdlZC5cbiAqICA8aWd4LWJhbm5lci1hY3Rpb25zPlxuICogICAgICA8YnV0dG9uIGlneEJ1dHRvbj1cInJhaXNlZFwiPlJlYWQgTW9yZTwvYnV0dG9uPlxuICogICAgICA8YnV0dG9uIGlneEJ1dHRvbj1cInJhaXNlZFwiPkFjY2VwdCBhbmQgQ29udGludWU8L2J1dHRvbj5cbiAqICA8L2lneC1iYW5uZXItYWN0aW9ucz5cbiAqIDwvaWd4LWJhbm5lcj5cbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJZ3hCYW5uZXJDb21wb25lbnQgaW1wbGVtZW50cyBJVG9nZ2xlVmlldyB7XG4gICAgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICBwcml2YXRlIF9iYW5uZXJFdmVudDtcbiAgICBwcml2YXRlIF9hbmltYXRpb25TZXR0aW5ncztcbiAgICBwcml2YXRlIF9leHBhbnNpb25QYW5lbDtcbiAgICBwcml2YXRlIF9iYW5uZXJBY3Rpb25UZW1wbGF0ZTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgYmFubmVySWNvbjogSWd4SWNvbkNvbXBvbmVudDtcbiAgICAvKipcbiAgICAgKiBGaXJlcyBhZnRlciB0aGUgYmFubmVyIHNob3dzIHVwXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHB1YmxpYyBoYW5kbGVPcGVuZWQoZXZlbnQpIHtcbiAgICAgKiAgLi4uXG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWJhbm5lciAob25PcGVuZWQpPVwiaGFuZGxlT3BlbmVkKCRldmVudClcIj48L2lneC1iYW5uZXI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgb25PcGVuZWQ6IEV2ZW50RW1pdHRlcjxCYW5uZXJFdmVudEFyZ3M+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIGJlZm9yZSB0aGUgYmFubmVyIHNob3dzIHVwXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHB1YmxpYyBoYW5kbGVPcGVuaW5nKGV2ZW50KSB7XG4gICAgICogIC4uLlxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1iYW5uZXIgKG9uT3BlbmluZyk9XCJoYW5kbGVPcGVuaW5nKCRldmVudClcIj48L2lneC1iYW5uZXI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgb25PcGVuaW5nOiBFdmVudEVtaXR0ZXI8QmFubmVyQ2FuY2VsRXZlbnRBcmdzPjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyBhZnRlciB0aGUgYmFubmVyIGhpZGVzXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHB1YmxpYyBoYW5kbGVDbG9zZWQoZXZlbnQpIHtcbiAgICAgKiAgLi4uXG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWJhbm5lciAob25DbG9zZWQpPVwiaGFuZGxlQ2xvc2VkKCRldmVudClcIj48L2lneC1iYW5uZXI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgb25DbG9zZWQ6IEV2ZW50RW1pdHRlcjxCYW5uZXJFdmVudEFyZ3M+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIGJlZm9yZSB0aGUgYmFubmVyIGhpZGVzXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHB1YmxpYyBoYW5kbGVDbG9zaW5nKGV2ZW50KSB7XG4gICAgICogIC4uLlxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1iYW5uZXIgKG9uQ2xvc2luZyk9XCJoYW5kbGVDbG9zaW5nKCRldmVudClcIj48L2lneC1iYW5uZXI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgb25DbG9zaW5nOiBFdmVudEVtaXR0ZXI8QmFubmVyQ2FuY2VsRXZlbnRBcmdzPjtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIGdldCB1c2VEZWZhdWx0VGVtcGxhdGUoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGFuaW1hdGlvbiBzZXR0aW5ncyB1c2VkIGJ5IHRoZSBiYW5uZXIgb3Blbi9jbG9zZSBtZXRob2RzXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBjdXJyZW50QW5pbWF0aW9uczogQW5pbWF0aW9uU2V0dGluZ3MgPSBiYW5uZXIuYW5pbWF0aW9uU2V0dGluZ3NcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXQgYW5pbWF0aW9uU2V0dGluZ3MoKTogQW5pbWF0aW9uU2V0dGluZ3M7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBhbmltYXRpb24gc2V0dGluZ3MgdXNlZCBieSB0aGUgYmFubmVyIG9wZW4vY2xvc2UgbWV0aG9kc1xuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBpbXBvcnQgeyBzbGlkZUluTGVmdCwgc2xpZGVPdXRSaWdodCB9IGZyb20gJ2lnbml0ZXVpLWFuZ3VsYXInO1xuICAgICAqIC4uLlxuICAgICAqIGJhbm5lci5hbmltYXRpb25TZXR0aW5nczogQW5pbWF0aW9uU2V0dGluZ3MgPSB7IG9wZW5BbmltYXRpb246IHNsaWRlSW5MZWZ0LCBjbG9zZUFuaW1hdGlvbjogc2xpZGVPdXRSaWdodCB9O1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHNldCBhbmltYXRpb25TZXR0aW5ncyhzZXR0aW5nczogQW5pbWF0aW9uU2V0dGluZ3MpO1xuICAgIC8qKlxuICAgICAqIEdldHMgd2hldGhlciBiYW5uZXIgaXMgY29sbGFwc2VkXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgaXNDb2xsYXBzZWQ6IGJvb2xlYW4gPSBiYW5uZXIuY29sbGFwc2VkO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGdldCBjb2xsYXBzZWQoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBuYXRpdmUgZWxlbWVudCBvZiB0aGUgYmFubmVyIGNvbXBvbmVudFxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgY29uc3QgbXlCYW5uZXJFbGVtZW50OiBIVE1MRWxlbWVudCA9IGJhbm5lci5lbGVtZW50O1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGdldCBlbGVtZW50KCk6IGFueTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZ2V0IGRpc3BsYXlTdHlsZSgpOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZik7XG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIGJhbm5lclxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICBteUJhbm5lci5vcGVuKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1iYW5uZXIgI2Jhbm5lcj5cbiAgICAgKiAuLi5cbiAgICAgKiA8L2lneC1iYW5uZXI+XG4gICAgICogPGJ1dHRvbiAoY2xpY2spPVwiYmFubmVyLm9wZW4oKVwiPk9wZW4gQmFubmVyPC9idXR0b24+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgb3BlbihldmVudD86IEV2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIGJhbm5lclxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICBteUJhbm5lci5jbG9zZSgpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtYmFubmVyICNiYW5uZXI+XG4gICAgICogLi4uXG4gICAgICogPC9pZ3gtYmFubmVyPlxuICAgICAqIDxidXR0b24gKGNsaWNrKT1cImJhbm5lci5jbG9zZSgpXCI+Q2xvc2UgQmFubmVyPC9idXR0b24+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgY2xvc2UoZXZlbnQ/OiBFdmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyB0aGUgYmFubmVyXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogIG15QmFubmVyLnRvZ2dsZSgpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtYmFubmVyICNiYW5uZXI+XG4gICAgICogLi4uXG4gICAgICogPC9pZ3gtYmFubmVyPlxuICAgICAqIDxidXR0b24gKGNsaWNrKT1cImJhbm5lci50b2dnbGUoKVwiPlRvZ2dsZSBCYW5uZXI8L2J1dHRvbj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICB0b2dnbGUoZXZlbnQ/OiBFdmVudCk6IHZvaWQ7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBvbkV4cGFuc2lvblBhbmVsT3BlbigpOiB2b2lkO1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgb25FeHBhbnNpb25QYW5lbENsb3NlKCk6IHZvaWQ7XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWd4QmFubmVyTW9kdWxlIHtcbn1cbiJdfQ==