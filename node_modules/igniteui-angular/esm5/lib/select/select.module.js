import { __decorate } from "tslib";
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { IgxIconModule } from '../icon/index';
import { IgxDropDownModule } from './../drop-down/index';
import { IgxToggleModule } from './../directives/toggle/toggle.directive';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
import { IgxInputGroupModule } from '../input-group/input-group.component';
import { IgxButtonModule } from '../directives/button/button.directive';
import { IgxSelectComponent, IgxSelectToggleIconDirective, IgxSelectHeaderDirective, IgxSelectFooterDirective } from './select.component';
import { IgxSelectItemComponent } from './select-item.component';
import { IgxSelectItemNavigationDirective } from './select-navigation.directive';
import { IgxSelectGroupComponent } from './select-group.component';
/** @hidden */
var IgxSelectModule = /** @class */ (function () {
    function IgxSelectModule() {
    }
    IgxSelectModule = __decorate([
        NgModule({
            declarations: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,
                IgxSelectToggleIconDirective, IgxSelectGroupComponent, IgxSelectHeaderDirective,
                IgxSelectFooterDirective],
            exports: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,
                IgxSelectToggleIconDirective, IgxSelectGroupComponent, IgxSelectHeaderDirective,
                IgxSelectFooterDirective],
            imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,
                IgxToggleModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],
            providers: []
        })
    ], IgxSelectModule);
    return IgxSelectModule;
}());
export { IgxSelectModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvc2VsZWN0L3NlbGVjdC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUMxRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDeEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDM0UsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBRXhFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSw0QkFBNEIsRUFBRSx3QkFBd0IsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzFJLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2pGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRW5FLGNBQWM7QUFZZDtJQUFBO0lBQStCLENBQUM7SUFBbkIsZUFBZTtRQVgzQixRQUFRLENBQUM7WUFDTixZQUFZLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxzQkFBc0IsRUFBRSxnQ0FBZ0M7Z0JBQ3ZGLDRCQUE0QixFQUFFLHVCQUF1QixFQUFFLHdCQUF3QjtnQkFDL0Usd0JBQXdCLENBQUM7WUFDN0IsT0FBTyxFQUFFLENBQUMsa0JBQWtCLEVBQUUsc0JBQXNCLEVBQUUsZ0NBQWdDO2dCQUNqRiw0QkFBNEIsRUFBRSx1QkFBdUIsRUFBRSx3QkFBd0I7Z0JBQy9FLHdCQUF3QixDQUFDO1lBQzlCLE9BQU8sRUFBRSxDQUFDLGVBQWUsRUFBRSxZQUFZLEVBQUUsbUJBQW1CLEVBQUUsV0FBVyxFQUFFLG1CQUFtQjtnQkFDMUYsZUFBZSxFQUFFLGlCQUFpQixFQUFFLGVBQWUsRUFBRSxhQUFhLENBQUM7WUFDdkUsU0FBUyxFQUFFLEVBQUU7U0FDaEIsQ0FBQztPQUNXLGVBQWUsQ0FBSTtJQUFELHNCQUFDO0NBQUEsQUFBaEMsSUFBZ0M7U0FBbkIsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBJZ3hJY29uTW9kdWxlIH0gZnJvbSAnLi4vaWNvbi9pbmRleCc7XG5pbXBvcnQgeyBJZ3hEcm9wRG93bk1vZHVsZSB9IGZyb20gJy4vLi4vZHJvcC1kb3duL2luZGV4JztcbmltcG9ydCB7IElneFRvZ2dsZU1vZHVsZSB9IGZyb20gJy4vLi4vZGlyZWN0aXZlcy90b2dnbGUvdG9nZ2xlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJZ3hSaXBwbGVNb2R1bGUgfSBmcm9tICcuLi9kaXJlY3RpdmVzL3JpcHBsZS9yaXBwbGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IElneElucHV0R3JvdXBNb2R1bGUgfSBmcm9tICcuLi9pbnB1dC1ncm91cC9pbnB1dC1ncm91cC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4QnV0dG9uTW9kdWxlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy9idXR0b24vYnV0dG9uLmRpcmVjdGl2ZSc7XG5cbmltcG9ydCB7IElneFNlbGVjdENvbXBvbmVudCwgSWd4U2VsZWN0VG9nZ2xlSWNvbkRpcmVjdGl2ZSwgSWd4U2VsZWN0SGVhZGVyRGlyZWN0aXZlLCBJZ3hTZWxlY3RGb290ZXJEaXJlY3RpdmUgfSBmcm9tICcuL3NlbGVjdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4U2VsZWN0SXRlbUNvbXBvbmVudCB9IGZyb20gJy4vc2VsZWN0LWl0ZW0uY29tcG9uZW50JztcbmltcG9ydCB7IElneFNlbGVjdEl0ZW1OYXZpZ2F0aW9uRGlyZWN0aXZlIH0gZnJvbSAnLi9zZWxlY3QtbmF2aWdhdGlvbi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSWd4U2VsZWN0R3JvdXBDb21wb25lbnQgfSBmcm9tICcuL3NlbGVjdC1ncm91cC5jb21wb25lbnQnO1xuXG4vKiogQGhpZGRlbiAqL1xuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IFtJZ3hTZWxlY3RDb21wb25lbnQsIElneFNlbGVjdEl0ZW1Db21wb25lbnQsIElneFNlbGVjdEl0ZW1OYXZpZ2F0aW9uRGlyZWN0aXZlLFxuICAgICAgICBJZ3hTZWxlY3RUb2dnbGVJY29uRGlyZWN0aXZlLCBJZ3hTZWxlY3RHcm91cENvbXBvbmVudCwgSWd4U2VsZWN0SGVhZGVyRGlyZWN0aXZlLFxuICAgICAgICBJZ3hTZWxlY3RGb290ZXJEaXJlY3RpdmVdLFxuICAgIGV4cG9ydHM6IFtJZ3hTZWxlY3RDb21wb25lbnQsIElneFNlbGVjdEl0ZW1Db21wb25lbnQsIElneFNlbGVjdEl0ZW1OYXZpZ2F0aW9uRGlyZWN0aXZlLFxuICAgICAgICAgSWd4U2VsZWN0VG9nZ2xlSWNvbkRpcmVjdGl2ZSwgSWd4U2VsZWN0R3JvdXBDb21wb25lbnQsIElneFNlbGVjdEhlYWRlckRpcmVjdGl2ZSxcbiAgICAgICAgIElneFNlbGVjdEZvb3RlckRpcmVjdGl2ZV0sXG4gICAgaW1wb3J0czogW0lneFJpcHBsZU1vZHVsZSwgQ29tbW9uTW9kdWxlLCBJZ3hJbnB1dEdyb3VwTW9kdWxlLCBGb3Jtc01vZHVsZSwgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICAgICAgSWd4VG9nZ2xlTW9kdWxlLCBJZ3hEcm9wRG93bk1vZHVsZSwgSWd4QnV0dG9uTW9kdWxlLCBJZ3hJY29uTW9kdWxlXSxcbiAgICBwcm92aWRlcnM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIElneFNlbGVjdE1vZHVsZSB7IH1cbiJdfQ==