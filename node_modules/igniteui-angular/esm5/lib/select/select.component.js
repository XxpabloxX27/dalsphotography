import { __decorate, __extends, __param } from "tslib";
import { IgxInputDirective, IgxInputState } from './../directives/input/input.directive';
import { Component, ContentChildren, forwardRef, QueryList, ViewChild, Input, ContentChild, AfterContentInit, HostBinding, Directive, TemplateRef, ElementRef, ChangeDetectorRef, Optional, Injector, OnInit, AfterViewInit, OnDestroy, Inject, Type } from '@angular/core';
import { NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import { IgxInputGroupComponent } from '../input-group/input-group.component';
import { IgxDropDownComponent } from './../drop-down/drop-down.component';
import { IgxSelectItemComponent } from './select-item.component';
import { SelectPositioningStrategy } from './select-positioning-strategy';
import { AbsoluteScrollStrategy } from '../services/index';
import { IGX_DROPDOWN_BASE } from '../drop-down/drop-down.common';
import { IgxLabelDirective } from '../directives/label/label.directive';
import { IgxSelectionAPIService } from '../core/selection';
import { DisplayDensityToken } from '../core/density';
/** @hidden @internal */
var IgxSelectToggleIconDirective = /** @class */ (function () {
    function IgxSelectToggleIconDirective() {
    }
    IgxSelectToggleIconDirective = __decorate([
        Directive({
            selector: '[igxSelectToggleIcon]'
        })
    ], IgxSelectToggleIconDirective);
    return IgxSelectToggleIconDirective;
}());
export { IgxSelectToggleIconDirective };
/** @hidden @internal */
var IgxSelectHeaderDirective = /** @class */ (function () {
    function IgxSelectHeaderDirective() {
    }
    IgxSelectHeaderDirective = __decorate([
        Directive({
            selector: '[igxSelectHeader]'
        })
    ], IgxSelectHeaderDirective);
    return IgxSelectHeaderDirective;
}());
export { IgxSelectHeaderDirective };
/** @hidden @internal */
var IgxSelectFooterDirective = /** @class */ (function () {
    function IgxSelectFooterDirective() {
    }
    IgxSelectFooterDirective = __decorate([
        Directive({
            selector: '[igxSelectFooter]'
        })
    ], IgxSelectFooterDirective);
    return IgxSelectFooterDirective;
}());
export { IgxSelectFooterDirective };
var noop = function () { };
var Éµ0 = noop;
/**
 * **Ignite UI for Angular Select** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/select.html)
 *
 * The `igxSelect` provides an input with dropdown list allowing selection of a single item.
 *
 * Example:
 * ```html
 * <igx-select #select1 [placeholder]="'Pick One'">
 *   <label igxLabel>Select Label</label>
 *   <igx-select-item *ngFor="let item of items" [value]="item.field">
 *     {{ item.field }}
 *   </igx-select-item>
 * </igx-select>
 * ```
 */
var IgxSelectComponent = /** @class */ (function (_super) {
    __extends(IgxSelectComponent, _super);
    function IgxSelectComponent(elementRef, cdr, selection, _displayDensityOptions, _injector) {
        var _this = _super.call(this, elementRef, cdr, selection, _displayDensityOptions) || this;
        _this.elementRef = elementRef;
        _this.cdr = cdr;
        _this.selection = selection;
        _this._displayDensityOptions = _displayDensityOptions;
        _this._injector = _injector;
        _this.ngControl = null;
        /** @hidden @internal do not use the drop-down container class */
        _this.cssClass = false;
        /** @hidden @internal */
        _this.allowItemsFocus = false;
        /**
         * An @Input property that disables the `IgxSelectComponent`.
         * ```html
         * <igx-select [disabled]="'true'"></igx-select>
         * ```
         */
        _this.disabled = false;
        /** @hidden @internal */
        _this.maxHeight = '256px';
        /**
         * An @Input property that sets how the select will be styled.
         * The allowed values are `line`, `box` and `border`. The default is `line`.
         * ```html
         *<igx-select [type]="'box'"></igx-select>
         * ```
         */
        _this.type = 'line';
        /**
         * The custom template, if any, that should be used when rendering the select TOGGLE(open/close) button
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.select.toggleIconTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-select #select>
         *      ...
         *      <ng-template igxSelectToggleIcon let-collapsed>
         *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>
         *      </ng-template>
         *  </igx-select>
         * ```
         */
        _this.toggleIconTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering the HEADER for the select items list
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.select.headerTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-select #select>
         *      ...
         *      <ng-template igxSelectHeader>
         *          <div class="select__header">
         *              This is a custom header
         *          </div>
         *      </ng-template>
         *  </igx-select>
         * ```
         */
        _this.headerTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering the FOOTER for the select items list
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.select.footerTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-select #select>
         *      ...
         *      <ng-template igxSelectFooter>
         *          <div class="select__footer">
         *              This is a custom footer
         *          </div>
         *      </ng-template>
         *  </igx-select>
         * ```
         */
        _this.footerTemplate = null;
        //#region ControlValueAccessor
        /** @hidden @internal */
        _this._onChangeCallback = noop;
        /** @hidden @internal */
        _this._onTouchedCallback = noop;
        /** @hidden @internal */
        _this.writeValue = function (value) {
            _this.value = value;
        };
        return _this;
    }
    IgxSelectComponent_1 = IgxSelectComponent;
    Object.defineProperty(IgxSelectComponent.prototype, "value", {
        /**
         * An @Input property that gets/sets the component value.
         *
         * ```typescript
         * // get
         * let selectValue = this.select.value;
         * ```
         *
         * ```typescript
         * // set
         * this.select.value = 'London';
         * ```
         * ```html
         * <igx-select [value]="value"></igx-select>
         * ```
         */
        get: function () {
            return this._value;
        },
        set: function (v) {
            var _this = this;
            if (this._value === v) {
                return;
            }
            this._value = v;
            this.setSelection(this.items.find(function (x) { return x.value === _this.value; }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSelectComponent.prototype, "selectionValue", {
        /** @hidden @internal */
        get: function () {
            var selectedItem = this.selectedItem;
            return selectedItem ? selectedItem.itemText : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSelectComponent.prototype, "selectedItem", {
        /** @hidden @internal */
        get: function () {
            return this.selection.first_item(this.id);
        },
        enumerable: true,
        configurable: true
    });
    /** @hidden @internal */
    IgxSelectComponent.prototype.registerOnChange = function (fn) {
        this._onChangeCallback = fn;
    };
    /** @hidden @internal */
    IgxSelectComponent.prototype.registerOnTouched = function (fn) {
        this._onTouchedCallback = fn;
    };
    /** @hidden @internal */
    IgxSelectComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    //#endregion
    /** @hidden @internal */
    IgxSelectComponent.prototype.getEditElement = function () {
        return this.input.nativeElement;
    };
    /** @hidden @internal */
    IgxSelectComponent.prototype.selectItem = function (newSelection, event) {
        var oldSelection = this.selectedItem;
        if (event) {
            this.toggleDirective.close();
        }
        if (newSelection === null || newSelection === oldSelection || newSelection.disabled || newSelection.isHeader) {
            return;
        }
        var args = { oldSelection: oldSelection, newSelection: newSelection, cancel: false };
        this.onSelection.emit(args);
        if (args.cancel) {
            return;
        }
        this.setSelection(newSelection);
        this._value = newSelection.value;
        this.cdr.detectChanges();
        this._onChangeCallback(this.value);
    };
    /** @hidden @internal */
    IgxSelectComponent.prototype.getFirstItemElement = function () {
        return this.children.first.element.nativeElement;
    };
    /**
     * Opens the select
     *
     * ```typescript
     * this.select.open();
     * ```
     */
    IgxSelectComponent.prototype.open = function (overlaySettings) {
        if (this.disabled || this.items.length === 0) {
            return;
        }
        if (!this.selectedItem) {
            this.navigateFirst();
        }
        _super.prototype.open.call(this, Object.assign({}, this._overlayDefaults, this.overlaySettings, overlaySettings));
    };
    /** @hidden @internal */
    IgxSelectComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this._overlayDefaults = {
            modal: false,
            closeOnOutsideClick: false,
            positionStrategy: new SelectPositioningStrategy(this, { target: this.getEditElement() }),
            scrollStrategy: new AbsoluteScrollStrategy(),
            excludePositionTarget: true
        };
        this.children.changes.subscribe(function () {
            _this.setSelection(_this.items.find(function (x) { return x.value === _this.value; }));
            _this.cdr.detectChanges();
        });
        Promise.resolve().then(function () { return _this.children.notifyOnChanges(); });
    };
    /** @hidden @internal */
    IgxSelectComponent.prototype.onToggleOpening = function (event) {
        this.onOpening.emit(event);
        if (event.cancel) {
            return;
        }
        this.scrollToItem(this.selectedItem);
    };
    IgxSelectComponent.prototype.navigate = function (direction, currentIndex) {
        if (this.collapsed && this.selectedItem) {
            this.navigateItem(this.selectedItem.itemIndex);
        }
        _super.prototype.navigate.call(this, direction, currentIndex);
    };
    IgxSelectComponent.prototype.manageRequiredAsterisk = function () {
        if (this.ngControl && this.ngControl.control.validator) {
            // Run the validation with empty object to check if required is enabled.
            var error = this.ngControl.control.validator({});
            this.inputGroup.isRequired = error && error.required;
            this.cdr.markForCheck();
        }
    };
    IgxSelectComponent.prototype.setSelection = function (item) {
        if (item && item.value !== undefined && item.value !== null) {
            this.selection.set(this.id, new Set([item]));
        }
        else {
            this.selection.clear(this.id);
        }
    };
    /** @hidden @internal */
    IgxSelectComponent.prototype.onBlur = function () {
        this._onTouchedCallback();
        if (this.ngControl && !this.ngControl.valid) {
            this.input.valid = IgxInputState.INVALID;
        }
        else {
            this.input.valid = IgxInputState.INITIAL;
        }
        if (!this.collapsed) {
            this.toggleDirective.close();
        }
    };
    /** @hidden @internal */
    IgxSelectComponent.prototype.onFocus = function () {
        this._onTouchedCallback();
    };
    IgxSelectComponent.prototype.onStatusChanged = function () {
        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&
            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {
            if (this.inputGroup.isFocused) {
                this.input.valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;
            }
            else {
                this.input.valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;
            }
        }
        this.manageRequiredAsterisk();
    };
    /**
     * @hidden @internal
     */
    IgxSelectComponent.prototype.ngOnInit = function () {
        this.ngControl = this._injector.get(NgControl, null);
    };
    /**
     * @hidden @internal
     */
    IgxSelectComponent.prototype.ngAfterViewInit = function () {
        if (this.ngControl) {
            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));
            this.manageRequiredAsterisk();
        }
        this.cdr.detectChanges();
    };
    /**
     * @hidden @internal
     */
    IgxSelectComponent.prototype.ngOnDestroy = function () {
        this.selection.clear(this.id);
        if (this._statusChanges$) {
            this._statusChanges$.unsubscribe();
        }
    };
    /**
     * @hidden @internal
     * Prevent input blur - closing the items container on Header/Footer Template click.
     */
    IgxSelectComponent.prototype.mousedownHandler = function (event) {
        event.preventDefault();
    };
    var IgxSelectComponent_1;
    IgxSelectComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: IgxSelectionAPIService },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] },
        { type: Injector }
    ]; };
    __decorate([
        ViewChild('inputGroup', { read: IgxInputGroupComponent, static: true })
    ], IgxSelectComponent.prototype, "inputGroup", void 0);
    __decorate([
        ViewChild('input', { read: IgxInputDirective, static: true })
    ], IgxSelectComponent.prototype, "input", void 0);
    __decorate([
        ContentChildren(forwardRef(function () { return IgxSelectItemComponent; }), { descendants: true })
    ], IgxSelectComponent.prototype, "children", void 0);
    __decorate([
        ContentChild(forwardRef(function () { return IgxLabelDirective; }), { static: true })
    ], IgxSelectComponent.prototype, "label", void 0);
    __decorate([
        Input()
    ], IgxSelectComponent.prototype, "value", null);
    __decorate([
        Input()
    ], IgxSelectComponent.prototype, "placeholder", void 0);
    __decorate([
        Input()
    ], IgxSelectComponent.prototype, "disabled", void 0);
    __decorate([
        Input()
    ], IgxSelectComponent.prototype, "overlaySettings", void 0);
    __decorate([
        HostBinding('style.maxHeight')
    ], IgxSelectComponent.prototype, "maxHeight", void 0);
    __decorate([
        Input()
    ], IgxSelectComponent.prototype, "type", void 0);
    __decorate([
        ContentChild(IgxSelectToggleIconDirective, { read: TemplateRef })
    ], IgxSelectComponent.prototype, "toggleIconTemplate", void 0);
    __decorate([
        ContentChild(IgxSelectHeaderDirective, { read: TemplateRef, static: false })
    ], IgxSelectComponent.prototype, "headerTemplate", void 0);
    __decorate([
        ContentChild(IgxSelectFooterDirective, { read: TemplateRef, static: false })
    ], IgxSelectComponent.prototype, "footerTemplate", void 0);
    IgxSelectComponent = IgxSelectComponent_1 = __decorate([
        Component({
            selector: 'igx-select',
            template: "<igx-input-group #inputGroup class=\"input-group\" [disabled]=\"disabled\" (click)=\"toggle()\" [type]=\"type\" [displayDensity]=\"displayDensity\">\n    <ng-container ngProjectAs=\"[igxLabel]\">\n        <ng-content select=\"[igxLabel]\"></ng-content>\n    </ng-container>\n    <ng-container ngProjectAs=\"igx-prefix\">\n        <ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\n    </ng-container>\n    <input #input class=\"input\" type=\"text\" igxInput [igxSelectItemNavigation]=\"this\"\n        readonly=\"true\"\n        [attr.placeholder]=\"this.placeholder\"\n        [value]=\"this.selectionValue\"\n        role=\"combobox\"\n        aria-haspopup=\"listbox\"\n        [attr.aria-labelledby]=\"this.label ? this.label.id : ''\"\n        [attr.aria-expanded]=\"!this.collapsed\"\n        [attr.aria-owns]=\"this.listId\"\n        [attr.aria-activedescendant]=\"!this.collapsed ? this.focusedItem?.id : null\"\n        (blur)=\"onBlur()\"\n        (focus)=\"onFocus()\"\n    />\n    <ng-container ngProjectAs=\"igx-suffix\">\n            <ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\n    </ng-container>\n    <igx-suffix>\n            <ng-container *ngIf=\"toggleIconTemplate\">\n                <ng-container *ngTemplateOutlet=\"toggleIconTemplate; context: {$implicit: this.collapsed}\"></ng-container>\n                </ng-container>\n            <igx-icon *ngIf=\"!toggleIconTemplate\" fontSet=\"material\">{{ collapsed ? 'arrow_drop_down' : 'arrow_drop_up'}}</igx-icon>\n    </igx-suffix>\n</igx-input-group>\n<div igxToggle class=\"igx-drop-down__list\" (mousedown)=\"mousedownHandler($event);\" (onOpening)=\"onToggleOpening($event)\"\n    (onOpened)=\"onToggleOpened()\" (onClosing)=\"onToggleClosing($event)\" (onClosed)=\"onToggleClosed()\">\n\n    <div *ngIf=\"headerTemplate\" class=\"igx-drop-down__select-header\">\n        <ng-content *ngTemplateOutlet=\"headerTemplate\"></ng-content>\n    </div>\n\n    <div #scrollContainer class=\"igx-drop-down__list-scroll\" [style.maxHeight]=\"maxHeight\" [attr.id]=\"this.listId\" role=\"listbox\">\n        <ng-content select=\"igx-select-item, igx-select-item-group\"></ng-content>\n    </div>\n\n    <div *ngIf=\"footerTemplate\" class=\"igx-drop-down__select-footer\">\n        <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\n    </div>\n</div>\n",
            providers: [
                { provide: NG_VALUE_ACCESSOR, useExisting: IgxSelectComponent_1, multi: true },
                { provide: IGX_DROPDOWN_BASE, useExisting: IgxSelectComponent_1 }
            ],
            styles: ["\n        :host {\n            display: block;\n        }\n    "]
        }),
        __param(3, Optional()), __param(3, Inject(DisplayDensityToken))
    ], IgxSelectComponent);
    return IgxSelectComponent;
}(IgxDropDownComponent));
export { IgxSelectComponent };
export { Éµ0 };
//# sourceMappingURL=data:application/json;base64,