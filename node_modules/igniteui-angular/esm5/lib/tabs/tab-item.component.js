import { __decorate, __extends } from "tslib";
import { Component, ContentChild, ElementRef, HostBinding, HostListener, Input, TemplateRef, ViewChild, NgZone, AfterViewInit, OnDestroy } from '@angular/core';
import { IgxTabItemBase, IgxTabsBase } from './tabs.common';
import { IgxTabItemTemplateDirective } from './tabs.directives';
import ResizeObserver from 'resize-observer-polyfill';
var IgxTabItemComponent = /** @class */ (function (_super) {
    __extends(IgxTabItemComponent, _super);
    function IgxTabItemComponent(_tabs, _element, _ngZone) {
        var _this = _super.call(this) || this;
        _this._tabs = _tabs;
        _this._element = _element;
        _this._ngZone = _ngZone;
        _this._changesCount = 0; // changes and updates accordingly applied to the tab.
        _this._isSelected = false;
        _this._disabled = false;
        /**
         * @hidden @internal
         */
        _this.role = 'tab';
        /**
         * @hidden @internal
         */
        _this.id = 'igx-tab-item-' + _this.index;
        /**
         * @hidden @internal
         */
        _this.ariaLabel = _this.label;
        /**
         * @hidden @internal
         */
        _this.ariaDisabled = _this.disabled;
        /**
         * @hidden @internal
         */
        _this.ariaSelected = _this.isSelected;
        /**
         * @hidden @internal
         */
        _this.ariaControls = 'igx-tab-item-group-' + _this.index;
        _this._nativeTabItem = _element;
        return _this;
    }
    Object.defineProperty(IgxTabItemComponent.prototype, "icon", {
        /**
        * An @Input property that sets the value of the `icon`.
        * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.
        *```html
        *<igx-tab-item label="Tab 1" icon="home">
        *```
        */
        get: function () {
            return this.relatedGroup ? this.relatedGroup.icon : this._icon;
        },
        set: function (newValue) {
            if (this.relatedGroup) {
                this.relatedGroup.icon = newValue;
            }
            this._icon = newValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "label", {
        /**
        * An @Input property that sets the value of the `label`.
        *```html
        *<igx-tabs-item label="Tab 2" icon="folder">
        *```
        */
        get: function () {
            return this.relatedGroup ? this.relatedGroup.label : this._label;
        },
        set: function (newValue) {
            if (this.relatedGroup) {
                this.relatedGroup.label = newValue;
            }
            this._label = newValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "provideCssClassSelected", {
        get: function () {
            return this.isSelected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "provideCssClassDisabled", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "provideCssClass", {
        get: function () {
            return (!this.disabled && !this.isSelected);
        },
        enumerable: true,
        configurable: true
    });
    IgxTabItemComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this._ngZone.runOutsideAngular(function () {
            _this._resizeObserver = new ResizeObserver(function () {
                _this._tabs.transformIndicatorAnimation(_this._nativeTabItem.nativeElement, 0);
            });
        });
    };
    IgxTabItemComponent.prototype.ngOnDestroy = function () {
        var _this = this;
        this._ngZone.runOutsideAngular(function () {
            _this._resizeObserver.disconnect();
        });
    };
    /**
     * @hidden
     */
    IgxTabItemComponent.prototype.onClick = function (event) {
        this.select();
    };
    /**
     * @hidden
     */
    IgxTabItemComponent.prototype.onKeydownArrowRight = function (event) {
        this.onKeyDown(false);
    };
    /**
     * @hidden
     */
    IgxTabItemComponent.prototype.onKeydownArrowLeft = function (event) {
        this.onKeyDown(true);
    };
    /**
     * @hidden
     */
    IgxTabItemComponent.prototype.onKeydownHome = function (event) {
        event.preventDefault();
        this.onKeyDown(false, 0);
    };
    /**
     * @hidden
     */
    IgxTabItemComponent.prototype.onKeydownEnd = function (event) {
        event.preventDefault();
        this.onKeyDown(false, this._tabs.tabs.toArray().length - 1);
    };
    Object.defineProperty(IgxTabItemComponent.prototype, "changesCount", {
        /**
         * @hidden
         */
        get: function () {
            return this._changesCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "nativeTabItem", {
        /**
         * @hidden
         */
        get: function () {
            return this._nativeTabItem;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "disabled", {
        /**
        * 	Gets whether the tab is disabled.
        * ```
        * const disabledItem = this.myTabComponent.tabs.first.disabled;
        * ```
        */
        get: function () {
            return this.relatedGroup ? this.relatedGroup.disabled : this._disabled;
        },
        set: function (newValue) {
            if (this.relatedGroup) {
                this.relatedGroup.disabled = newValue;
            }
            else {
                this._disabled = newValue;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "isSelected", {
        /**
         * Gets whether the tab is selected.
         * ```typescript
         * const selectedItem = this.myTabComponent.tabs.first.isSelected;
         * ```
         */
        get: function () {
            return this.relatedGroup ? this.relatedGroup.isSelected : this._isSelected;
        },
        set: function (newValue) {
            if (!this.disabled && this.isSelected !== newValue) {
                this._tabs.performSelectionChange(newValue ? this : null);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxTabItemComponent.prototype.select = function () {
        if (!this.disabled && !this.isSelected) {
            this._tabs.performSelectionChange(this);
        }
    };
    Object.defineProperty(IgxTabItemComponent.prototype, "index", {
        /**
         * @hidden
         */
        get: function () {
            if (this._tabs.tabs) {
                return this._tabs.tabs.toArray().indexOf(this);
            }
            return -1;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxTabItemComponent.prototype.setSelectedInternal = function (newValue) {
        var _this = this;
        this._isSelected = newValue;
        this._ngZone.runOutsideAngular(function () {
            if (_this._resizeObserver) {
                if (_this._isSelected) {
                    _this._resizeObserver.observe(_this._element.nativeElement);
                }
                else {
                    _this._resizeObserver.disconnect();
                }
            }
        });
        this.tabindex = newValue ? 0 : -1;
    };
    IgxTabItemComponent.prototype.onKeyDown = function (isLeftArrow, index) {
        if (index === void 0) { index = null; }
        var tabsArray = this._tabs.tabs.toArray();
        if (index === null) {
            index = (isLeftArrow)
                ? (this._tabs.selectedIndex === 0) ? tabsArray.length - 1 : this._tabs.selectedIndex - 1
                : (this._tabs.selectedIndex === tabsArray.length - 1) ? 0 : this._tabs.selectedIndex + 1;
        }
        var tab = tabsArray[index];
        tab.select();
    };
    Object.defineProperty(IgxTabItemComponent.prototype, "template", {
        /**
         * @hidden
         */
        get: function () {
            if (this.relatedGroup && this.relatedGroup.customTabTemplate) {
                return this.relatedGroup.customTabTemplate;
            }
            if (this.customTabTemplateDir) {
                return this.customTabTemplateDir.template;
            }
            return this.defaultTabTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "context", {
        /**
         * @hidden
         */
        get: function () {
            return this.relatedGroup ? this.relatedGroup : this;
        },
        enumerable: true,
        configurable: true
    });
    IgxTabItemComponent.ctorParameters = function () { return [
        { type: IgxTabsBase },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    __decorate([
        Input()
    ], IgxTabItemComponent.prototype, "relatedGroup", void 0);
    __decorate([
        Input()
    ], IgxTabItemComponent.prototype, "icon", null);
    __decorate([
        Input()
    ], IgxTabItemComponent.prototype, "label", null);
    __decorate([
        ViewChild('defaultTabTemplate', { read: TemplateRef, static: true })
    ], IgxTabItemComponent.prototype, "defaultTabTemplate", void 0);
    __decorate([
        ContentChild(IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective })
    ], IgxTabItemComponent.prototype, "customTabTemplateDir", void 0);
    __decorate([
        HostBinding('class.igx-tabs__header-menu-item--selected')
    ], IgxTabItemComponent.prototype, "provideCssClassSelected", null);
    __decorate([
        HostBinding('class.igx-tabs__header-menu-item--disabled')
    ], IgxTabItemComponent.prototype, "provideCssClassDisabled", null);
    __decorate([
        HostBinding('class.igx-tabs__header-menu-item')
    ], IgxTabItemComponent.prototype, "provideCssClass", null);
    __decorate([
        HostBinding('attr.role')
    ], IgxTabItemComponent.prototype, "role", void 0);
    __decorate([
        HostBinding('attr.tabindex')
    ], IgxTabItemComponent.prototype, "tabindex", void 0);
    __decorate([
        HostBinding('attr.id')
    ], IgxTabItemComponent.prototype, "id", void 0);
    __decorate([
        HostBinding('attr.aria-label')
    ], IgxTabItemComponent.prototype, "ariaLabel", void 0);
    __decorate([
        HostBinding('attr.aria-disabled')
    ], IgxTabItemComponent.prototype, "ariaDisabled", void 0);
    __decorate([
        HostBinding('attr.aria-selected')
    ], IgxTabItemComponent.prototype, "ariaSelected", void 0);
    __decorate([
        HostBinding('attr.aria-controls')
    ], IgxTabItemComponent.prototype, "ariaControls", void 0);
    __decorate([
        HostListener('click', ['$event'])
    ], IgxTabItemComponent.prototype, "onClick", null);
    __decorate([
        HostListener('keydown.arrowright', ['$event'])
    ], IgxTabItemComponent.prototype, "onKeydownArrowRight", null);
    __decorate([
        HostListener('keydown.arrowleft', ['$event'])
    ], IgxTabItemComponent.prototype, "onKeydownArrowLeft", null);
    __decorate([
        HostListener('keydown.home', ['$event'])
    ], IgxTabItemComponent.prototype, "onKeydownHome", null);
    __decorate([
        HostListener('keydown.end', ['$event'])
    ], IgxTabItemComponent.prototype, "onKeydownEnd", null);
    __decorate([
        Input()
    ], IgxTabItemComponent.prototype, "disabled", null);
    __decorate([
        Input()
    ], IgxTabItemComponent.prototype, "isSelected", null);
    IgxTabItemComponent = __decorate([
        Component({
            selector: 'igx-tab-item',
            template: "<ng-template #defaultTabTemplate let-context>\n    <div *ngIf=\"context.icon\" class=\"igx-tabs__header-menu-item-icon\">\n        <igx-icon fontSet=\"material\">{{context.icon}}</igx-icon>\n        <igx-badge [value]=\"changesCount\" [hidden]=\"changesCount === 0\"></igx-badge>\n    </div>\n    <div *ngIf=\"context.label\" ngClass=\"igx-tabs__item-label\">{{context.label}}</div>\n</ng-template>\n<ng-container *ngTemplateOutlet=\"template; context: { $implicit: this.context }\">\n</ng-container>"
        })
    ], IgxTabItemComponent);
    return IgxTabItemComponent;
}(IgxTabItemBase));
export { IgxTabItemComponent };
//# sourceMappingURL=data:application/json;base64,