import { __values } from "tslib";
import { ExcelStrings } from './excel-strings';
/**
 * @hidden
 */
var RootRelsFile = /** @class */ (function () {
    function RootRelsFile() {
    }
    RootRelsFile.prototype.writeElement = function (folder, worksheetData) {
        folder.file('.rels', ExcelStrings.getRels());
    };
    return RootRelsFile;
}());
export { RootRelsFile };
/**
 * @hidden
 */
var AppFile = /** @class */ (function () {
    function AppFile() {
    }
    AppFile.prototype.writeElement = function (folder, worksheetData) {
        folder.file('app.xml', ExcelStrings.getApp());
    };
    return AppFile;
}());
export { AppFile };
/**
 * @hidden
 */
var CoreFile = /** @class */ (function () {
    function CoreFile() {
    }
    CoreFile.prototype.writeElement = function (folder, worksheetData) {
        folder.file('core.xml', ExcelStrings.getCore());
    };
    return CoreFile;
}());
export { CoreFile };
/**
 * @hidden
 */
var WorkbookRelsFile = /** @class */ (function () {
    function WorkbookRelsFile() {
    }
    WorkbookRelsFile.prototype.writeElement = function (folder, worksheetData) {
        var hasSharedStrings = worksheetData.isEmpty === false;
        folder.file('workbook.xml.rels', ExcelStrings.getWorkbookRels(hasSharedStrings));
    };
    return WorkbookRelsFile;
}());
export { WorkbookRelsFile };
/**
 * @hidden
 */
var ThemeFile = /** @class */ (function () {
    function ThemeFile() {
    }
    ThemeFile.prototype.writeElement = function (folder, worksheetData) {
        folder.file('theme1.xml', ExcelStrings.getTheme());
    };
    return ThemeFile;
}());
export { ThemeFile };
/**
 * @hidden
 */
var WorksheetFile = /** @class */ (function () {
    function WorksheetFile() {
    }
    WorksheetFile.prototype.writeElement = function (folder, worksheetData) {
        var sheetData = [];
        var cols = [];
        var dimension;
        var dictionary = worksheetData.dataDictionary;
        var freezePane = '';
        var maxOutlineLevel = 0;
        if (worksheetData.isEmpty) {
            sheetData.push('<sheetData/>');
            dimension = 'A1';
        }
        else {
            sheetData.push('<sheetData>');
            var height = worksheetData.options.rowHeight;
            var rowHeight = height ? ' ht="' + height + '" customHeight="1"' : '';
            sheetData.push("<row r=\"1\"" + rowHeight + ">");
            for (var i = 0; i < worksheetData.columnCount; i++) {
                var column = ExcelStrings.getExcelColumn(i) + 1;
                var value = dictionary.saveValue(worksheetData.keys[i], i, true);
                sheetData.push("<c r=\"" + column + "\" t=\"s\"><v>" + value + "</v></c>");
            }
            sheetData.push('</row>');
            for (var i = 1; i < worksheetData.rowCount; i++) {
                if (!worksheetData.isTreeGridData) {
                    sheetData.push("<row r=\"" + (i + 1) + "\"" + rowHeight + ">");
                }
                else {
                    var rowData = worksheetData.data[i - 1].originalRowData;
                    var sCollapsed = (!rowData.expanded) ? '' : (rowData.expanded === true) ? '' : " collapsed=\"1\"";
                    var sHidden = (rowData.parent && this.hasCollapsedParent(rowData)) ? " hidden=\"1\"" : '';
                    var rowOutlineLevel = rowData.level ? rowData.level : 0;
                    var sOutlineLevel = rowOutlineLevel > 0 ? " outlineLevel=\"" + rowOutlineLevel + "\"" : '';
                    maxOutlineLevel = maxOutlineLevel < rowOutlineLevel ? rowOutlineLevel : maxOutlineLevel;
                    sheetData.push("<row r=\"" + (i + 1) + "\"" + rowHeight + sOutlineLevel + sCollapsed + sHidden + ">");
                }
                for (var j = 0; j < worksheetData.columnCount; j++) {
                    var cellData = WorksheetFile.getCellData(worksheetData, i, j);
                    sheetData.push(cellData);
                }
                sheetData.push('</row>');
            }
            sheetData.push('</sheetData>');
            dimension = 'A1:' + ExcelStrings.getExcelColumn(worksheetData.columnCount - 1) + worksheetData.rowCount;
            cols.push('<cols>');
            for (var i = 0; i < worksheetData.columnCount; i++) {
                var width = dictionary.columnWidths[i];
                // Use the width provided in the options if it exists
                var widthInTwips = worksheetData.options.columnWidth ?
                    worksheetData.options.columnWidth :
                    Math.max(((width / 96) * 14.4), WorksheetFile.MIN_WIDTH);
                cols.push("<col min=\"" + (i + 1) + "\" max=\"" + (i + 1) + "\" width=\"" + widthInTwips + "\" customWidth=\"1\"/>");
            }
            cols.push('</cols>');
            if (worksheetData.indexOfLastPinnedColumn !== -1 &&
                !worksheetData.options.ignorePinning &&
                !worksheetData.options.ignoreColumnsOrder) {
                var frozenColumnCount = worksheetData.indexOfLastPinnedColumn + 1;
                var firstCell = ExcelStrings.getExcelColumn(frozenColumnCount) + '1';
                freezePane = "<pane xSplit=\"" + frozenColumnCount + "\" topLeftCell=\"" + firstCell + "\" activePane=\"topRight\" state=\"frozen\"/>";
            }
        }
        var hasTable = !worksheetData.isEmpty && worksheetData.options.exportAsTable;
        folder.file('sheet1.xml', ExcelStrings.getSheetXML(dimension, freezePane, cols.join(''), sheetData.join(''), hasTable, worksheetData.isTreeGridData, maxOutlineLevel));
    };
    WorksheetFile.prototype.hasCollapsedParent = function (rowData) {
        var result = !rowData.parent.expanded;
        while (rowData.parent) {
            result = result || !rowData.parent.expanded;
            rowData = rowData.parent;
        }
        return result;
    };
    /* tslint:disable member-ordering */
    WorksheetFile.getCellData = function (worksheetData, row, column) {
        var dictionary = worksheetData.dataDictionary;
        var columnName = ExcelStrings.getExcelColumn(column) + (row + 1);
        var columnHeader = worksheetData.keys[column];
        var rowData = worksheetData.data[row - 1].rowData;
        var cellValue = worksheetData.isSpecialData ? rowData : rowData[columnHeader];
        if (cellValue === undefined || cellValue === null) {
            return "<c r=\"" + columnName + "\" s=\"1\"/>";
        }
        else {
            var savedValue = dictionary.saveValue(cellValue, column, false);
            var isSavedAsString = savedValue !== -1;
            var value = isSavedAsString ? savedValue : cellValue;
            var type = isSavedAsString ? " t=\"s\"" : '';
            var format = isSavedAsString ? '' : " s=\"1\"";
            return "<c r=\"" + columnName + "\"" + type + format + "><v>" + value + "</v></c>";
        }
    };
    WorksheetFile.MIN_WIDTH = 8.34;
    return WorksheetFile;
}());
export { WorksheetFile };
/**
 * @hidden
 */
var StyleFile = /** @class */ (function () {
    function StyleFile() {
    }
    StyleFile.prototype.writeElement = function (folder, worksheetData) {
        folder.file('styles.xml', ExcelStrings.getStyles(worksheetData.dataDictionary && worksheetData.dataDictionary.hasNonStringValues));
    };
    return StyleFile;
}());
export { StyleFile };
/**
 * @hidden
 */
var WorkbookFile = /** @class */ (function () {
    function WorkbookFile() {
    }
    WorkbookFile.prototype.writeElement = function (folder, worksheetData) {
        folder.file('workbook.xml', ExcelStrings.getWorkbook());
    };
    return WorkbookFile;
}());
export { WorkbookFile };
/**
 * @hidden
 */
var ContentTypesFile = /** @class */ (function () {
    function ContentTypesFile() {
    }
    ContentTypesFile.prototype.writeElement = function (folder, worksheetData) {
        folder.file('[Content_Types].xml', ExcelStrings.getContentTypesXML(!worksheetData.isEmpty, worksheetData.options.exportAsTable));
    };
    return ContentTypesFile;
}());
export { ContentTypesFile };
/**
 * @hidden
 */
var SharedStringsFile = /** @class */ (function () {
    function SharedStringsFile() {
    }
    SharedStringsFile.prototype.writeElement = function (folder, worksheetData) {
        var e_1, _a;
        var dict = worksheetData.dataDictionary;
        var sortedValues = dict.getKeys();
        var sharedStrings = new Array(sortedValues.length);
        try {
            for (var sortedValues_1 = __values(sortedValues), sortedValues_1_1 = sortedValues_1.next(); !sortedValues_1_1.done; sortedValues_1_1 = sortedValues_1.next()) {
                var value = sortedValues_1_1.value;
                sharedStrings[dict.getSanitizedValue(value)] = '<si><t>' + value + '</t></si>';
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (sortedValues_1_1 && !sortedValues_1_1.done && (_a = sortedValues_1.return)) _a.call(sortedValues_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        folder.file('sharedStrings.xml', ExcelStrings.getSharedStringXML(dict.stringsCount, sortedValues.length, sharedStrings.join('')));
    };
    return SharedStringsFile;
}());
export { SharedStringsFile };
/**
 * @hidden
 */
var TablesFile = /** @class */ (function () {
    function TablesFile() {
    }
    TablesFile.prototype.writeElement = function (folder, worksheetData) {
        var columnCount = worksheetData.columnCount;
        var lastColumn = ExcelStrings.getExcelColumn(columnCount - 1) + worksheetData.rowCount;
        var dimension = 'A1:' + lastColumn;
        var values = worksheetData.keys;
        var sortString = '';
        var tableColumns = '<tableColumns count="' + columnCount + '">';
        for (var i = 0; i < columnCount; i++) {
            var value = values[i];
            tableColumns += '<tableColumn id="' + (i + 1) + '" name="' + value + '"/>';
        }
        tableColumns += '</tableColumns>';
        if (worksheetData.sort) {
            var sortingExpression = worksheetData.sort;
            var sc = ExcelStrings.getExcelColumn(values.indexOf(sortingExpression.fieldName));
            var dir = sortingExpression.dir - 1;
            sortString = "<sortState ref=\"A2:" + lastColumn + "\"><sortCondition descending=\"" + dir + "\" ref=\"" + sc + "1:" + sc + "15\"/></sortState>";
        }
        folder.file('table1.xml', ExcelStrings.getTablesXML(dimension, tableColumns, sortString));
    };
    return TablesFile;
}());
export { TablesFile };
/**
 * @hidden
 */
var WorksheetRelsFile = /** @class */ (function () {
    function WorksheetRelsFile() {
    }
    WorksheetRelsFile.prototype.writeElement = function (folder, worksheetData) {
        folder.file('sheet1.xml.rels', ExcelStrings.getWorksheetRels());
    };
    return WorksheetRelsFile;
}());
export { WorksheetRelsFile };
//# sourceMappingURL=data:application/json;base64,