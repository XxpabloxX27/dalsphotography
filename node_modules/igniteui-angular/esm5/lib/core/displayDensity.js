import { __decorate, __param } from "tslib";
import { InjectionToken, Input, Output, EventEmitter, Directive, NgModule, Optional, Inject } from '@angular/core';
/**
 * Defines the posible values of the components' display density.
 */
export var DisplayDensity;
(function (DisplayDensity) {
    DisplayDensity["comfortable"] = "comfortable";
    DisplayDensity["cosy"] = "cosy";
    DisplayDensity["compact"] = "compact";
})(DisplayDensity || (DisplayDensity = {}));
/**
 * Defines the DisplayDensity DI token.
 */
export var DisplayDensityToken = new InjectionToken('DisplayDensity');
/**
 * Base class containing all logic required for implementing DisplayDensity.
 */
var DisplayDensityBase = /** @class */ (function () {
    function DisplayDensityBase(displayDensityOptions) {
        this.displayDensityOptions = displayDensityOptions;
        this.onDensityChanged = new EventEmitter();
        this.oldDisplayDensityOptions = { displayDensity: DisplayDensity.comfortable };
        Object.assign(this.oldDisplayDensityOptions, displayDensityOptions);
    }
    Object.defineProperty(DisplayDensityBase.prototype, "displayDensity", {
        /**
         * Returns the theme of the component.
         * The default theme is `comfortable`.
         * Available options are `comfortable`, `cosy`, `compact`.
         * ```typescript
         * let componentTheme = this.component.displayDensity;
         * ```
         */
        get: function () {
            return this._displayDensity ||
                ((this.displayDensityOptions && this.displayDensityOptions.displayDensity) || DisplayDensity.comfortable);
        },
        /**
         * Sets the theme of the component.
         */
        set: function (val) {
            var currentDisplayDensity = this._displayDensity;
            this._displayDensity = val;
            if (currentDisplayDensity !== this._displayDensity) {
                var densityChangedArgs = {
                    oldDensity: currentDisplayDensity,
                    newDensity: this._displayDensity
                };
                this.onDensityChanged.emit(densityChangedArgs);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    DisplayDensityBase.prototype.ngOnInit = function () {
        this.initialDensity = this._displayDensity;
    };
    DisplayDensityBase.prototype.ngDoCheck = function () {
        if (!this._displayDensity && this.displayDensityOptions &&
            this.oldDisplayDensityOptions.displayDensity !== this.displayDensityOptions.displayDensity) {
            var densityChangedArgs = {
                oldDensity: this.oldDisplayDensityOptions.displayDensity,
                newDensity: this.displayDensityOptions.displayDensity
            };
            this.onDensityChanged.emit(densityChangedArgs);
            this.oldDisplayDensityOptions = Object.assign(this.oldDisplayDensityOptions, this.displayDensityOptions);
        }
    };
    /**
     * Given a style class of a component/element returns the modified version of it based
     * on the current display density.
     */
    DisplayDensityBase.prototype.getComponentDensityClass = function (baseStyleClass) {
        switch (this.displayDensity) {
            case DisplayDensity.cosy:
                return baseStyleClass + "--" + DisplayDensity.cosy;
            case DisplayDensity.compact:
                return baseStyleClass + "--" + DisplayDensity.compact;
            default:
                return baseStyleClass;
        }
    };
    DisplayDensityBase.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
    ]; };
    __decorate([
        Input()
    ], DisplayDensityBase.prototype, "displayDensity", null);
    __decorate([
        Output()
    ], DisplayDensityBase.prototype, "onDensityChanged", void 0);
    DisplayDensityBase = __decorate([
        Directive({
            selector: '[igxDisplayDensityBase]'
        })
        // tslint:disable-next-line: directive-class-suffix
        ,
        __param(0, Optional()), __param(0, Inject(DisplayDensityToken))
    ], DisplayDensityBase);
    return DisplayDensityBase;
}());
export { DisplayDensityBase };
var IgxDisplayDensityModule = /** @class */ (function () {
    function IgxDisplayDensityModule() {
    }
    IgxDisplayDensityModule = __decorate([
        NgModule({
            declarations: [
                DisplayDensityBase
            ],
            exports: [
                DisplayDensityBase
            ]
        })
    ], IgxDisplayDensityModule);
    return IgxDisplayDensityModule;
}());
export { IgxDisplayDensityModule };
//# sourceMappingURL=data:application/json;base64,