import { __decorate, __param } from "tslib";
import { Pipe, Inject } from '@angular/core';
import { IGX_DATE_PICKER_COMPONENT } from './date-picker.common';
import { DatePickerUtil } from './date-picker.utils';
/**
 * @hidden
 */
var DatePickerDisplayValuePipe = /** @class */ (function () {
    function DatePickerDisplayValuePipe(_datePicker) {
        this._datePicker = _datePicker;
    }
    DatePickerDisplayValuePipe.prototype.transform = function (value, args) {
        if (value !== '') {
            if (value === DatePickerUtil.maskToPromptChars(this._datePicker.inputMask)) {
                return '';
            }
            this._datePicker.rawDateString = value;
            return DatePickerUtil.trimUnderlines(value);
        }
        return '';
    };
    DatePickerDisplayValuePipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [IGX_DATE_PICKER_COMPONENT,] }] }
    ]; };
    DatePickerDisplayValuePipe = __decorate([
        Pipe({
            name: 'displayValue'
        }),
        __param(0, Inject(IGX_DATE_PICKER_COMPONENT))
    ], DatePickerDisplayValuePipe);
    return DatePickerDisplayValuePipe;
}());
export { DatePickerDisplayValuePipe };
/**
 * @hidden
 */
var DatePickerInputValuePipe = /** @class */ (function () {
    function DatePickerInputValuePipe(_datePicker) {
        this._datePicker = _datePicker;
    }
    DatePickerInputValuePipe.prototype.transform = function (value, args) {
        if (this._datePicker.invalidDate !== '') {
            return this._datePicker.invalidDate;
        }
        else {
            if (this._datePicker.value === null || this._datePicker.value === undefined) {
                return DatePickerUtil.maskToPromptChars(this._datePicker.inputMask);
            }
            else {
                return DatePickerUtil.addPromptCharsEditMode(this._datePicker.dateFormatParts, this._datePicker.value, value);
            }
        }
    };
    DatePickerInputValuePipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [IGX_DATE_PICKER_COMPONENT,] }] }
    ]; };
    DatePickerInputValuePipe = __decorate([
        Pipe({
            name: 'inputValue'
        }),
        __param(0, Inject(IGX_DATE_PICKER_COMPONENT))
    ], DatePickerInputValuePipe);
    return DatePickerInputValuePipe;
}());
export { DatePickerInputValuePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXIucGlwZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2RhdGUtcGlja2VyL2RhdGUtcGlja2VyLnBpcGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQWlCLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUQsT0FBTyxFQUFFLHlCQUF5QixFQUFlLE1BQU0sc0JBQXNCLENBQUM7QUFDOUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXJEOztHQUVHO0FBSUg7SUFDSSxvQ0FBdUQsV0FBd0I7UUFBeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7SUFBSSxDQUFDO0lBQ3BGLDhDQUFTLEdBQVQsVUFBVSxLQUFVLEVBQUUsSUFBVTtRQUM1QixJQUFJLEtBQUssS0FBSyxFQUFFLEVBQUU7WUFDZCxJQUFJLEtBQUssS0FBSyxjQUFjLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsRUFBRTtnQkFDeEUsT0FBTyxFQUFFLENBQUM7YUFDYjtZQUNELElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztZQUN2QyxPQUFPLGNBQWMsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDL0M7UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7O2dEQVZZLE1BQU0sU0FBQyx5QkFBeUI7O0lBRHBDLDBCQUEwQjtRQUh0QyxJQUFJLENBQUM7WUFDRixJQUFJLEVBQUUsY0FBYztTQUN2QixDQUFDO1FBRWUsV0FBQSxNQUFNLENBQUMseUJBQXlCLENBQUMsQ0FBQTtPQURyQywwQkFBMEIsQ0FZdEM7SUFBRCxpQ0FBQztDQUFBLEFBWkQsSUFZQztTQVpZLDBCQUEwQjtBQWN2Qzs7R0FFRztBQUlIO0lBQ0ksa0NBQXVELFdBQXdCO1FBQXhCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO0lBQUksQ0FBQztJQUNwRiw0Q0FBUyxHQUFULFVBQVUsS0FBVSxFQUFFLElBQVU7UUFDNUIsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsS0FBSyxFQUFFLEVBQUU7WUFDckMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQztTQUN2QzthQUFNO1lBQ0gsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEtBQUssU0FBUyxFQUFFO2dCQUN6RSxPQUFPLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ3ZFO2lCQUFNO2dCQUNILE9BQU8sY0FBYyxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQ2pIO1NBQ0o7SUFDTCxDQUFDOztnREFYWSxNQUFNLFNBQUMseUJBQXlCOztJQURwQyx3QkFBd0I7UUFIcEMsSUFBSSxDQUFDO1lBQ0YsSUFBSSxFQUFFLFlBQVk7U0FDckIsQ0FBQztRQUVlLFdBQUEsTUFBTSxDQUFDLHlCQUF5QixDQUFDLENBQUE7T0FEckMsd0JBQXdCLENBYXBDO0lBQUQsK0JBQUM7Q0FBQSxBQWJELElBYUM7U0FiWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlVHJhbnNmb3JtLCBQaXBlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElHWF9EQVRFX1BJQ0tFUl9DT01QT05FTlQsIElEYXRlUGlja2VyIH0gZnJvbSAnLi9kYXRlLXBpY2tlci5jb21tb24nO1xuaW1wb3J0IHsgRGF0ZVBpY2tlclV0aWwgfSBmcm9tICcuL2RhdGUtcGlja2VyLnV0aWxzJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBQaXBlKHtcbiAgICBuYW1lOiAnZGlzcGxheVZhbHVlJ1xufSlcbmV4cG9ydCBjbGFzcyBEYXRlUGlja2VyRGlzcGxheVZhbHVlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoSUdYX0RBVEVfUElDS0VSX0NPTVBPTkVOVCkgcHJpdmF0ZSBfZGF0ZVBpY2tlcjogSURhdGVQaWNrZXIpIHsgfVxuICAgIHRyYW5zZm9ybSh2YWx1ZTogYW55LCBhcmdzPzogYW55KTogYW55IHtcbiAgICAgICAgaWYgKHZhbHVlICE9PSAnJykge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBEYXRlUGlja2VyVXRpbC5tYXNrVG9Qcm9tcHRDaGFycyh0aGlzLl9kYXRlUGlja2VyLmlucHV0TWFzaykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9kYXRlUGlja2VyLnJhd0RhdGVTdHJpbmcgPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiBEYXRlUGlja2VyVXRpbC50cmltVW5kZXJsaW5lcyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBQaXBlKHtcbiAgICBuYW1lOiAnaW5wdXRWYWx1ZSdcbn0pXG5leHBvcnQgY2xhc3MgRGF0ZVBpY2tlcklucHV0VmFsdWVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgY29uc3RydWN0b3IoQEluamVjdChJR1hfREFURV9QSUNLRVJfQ09NUE9ORU5UKSBwcml2YXRlIF9kYXRlUGlja2VyOiBJRGF0ZVBpY2tlcikgeyB9XG4gICAgdHJhbnNmb3JtKHZhbHVlOiBhbnksIGFyZ3M/OiBhbnkpOiBhbnkge1xuICAgICAgICBpZiAodGhpcy5fZGF0ZVBpY2tlci5pbnZhbGlkRGF0ZSAhPT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kYXRlUGlja2VyLmludmFsaWREYXRlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2RhdGVQaWNrZXIudmFsdWUgPT09IG51bGwgfHwgdGhpcy5fZGF0ZVBpY2tlci52YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIERhdGVQaWNrZXJVdGlsLm1hc2tUb1Byb21wdENoYXJzKHRoaXMuX2RhdGVQaWNrZXIuaW5wdXRNYXNrKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIERhdGVQaWNrZXJVdGlsLmFkZFByb21wdENoYXJzRWRpdE1vZGUodGhpcy5fZGF0ZVBpY2tlci5kYXRlRm9ybWF0UGFydHMsIHRoaXMuX2RhdGVQaWNrZXIudmFsdWUsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==