import { __decorate } from "tslib";
import { AfterViewInit, Directive, ElementRef, EventEmitter, Input, NgModule, OnChanges, OnDestroy, Renderer2, SimpleChanges, AfterViewChecked, } from '@angular/core';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { DeprecateProperty } from '../../core/deprecateDecorators';
var IgxTextHighlightDirective = /** @class */ (function () {
    function IgxTextHighlightDirective(element, renderer) {
        var _this = this;
        this.element = element;
        this.renderer = renderer;
        this._div = null;
        this._observer = null;
        this._nodeWasRemoved = false;
        this._forceEvaluation = false;
        this._activeElementIndex = -1;
        this._defaultCssClass = 'igx-highlight';
        this._defaultActiveCssClass = 'igx-highlight--active';
        /**
         * Identifies the highlight within a unique group.
         * This allows it to have several different highlight groups,
         * with each of them having their own active highlight.
         *
         * ```html
         * <div
         *   igxTextHighlight
         *   [groupName]="myGroupName">
         * </div>
         * ```
         */
        this.groupName = '';
        this._value = '';
        this.destroy$ = new Subject();
        IgxTextHighlightDirective_1.onActiveElementChanged.pipe(takeUntil(this.destroy$)).subscribe(function (groupName) {
            if (_this.groupName === groupName) {
                if (_this._activeElementIndex !== -1) {
                    _this.deactivate();
                }
                _this.activateIfNecessary();
            }
        });
    }
    IgxTextHighlightDirective_1 = IgxTextHighlightDirective;
    Object.defineProperty(IgxTextHighlightDirective.prototype, "value", {
        /**
         * The underlying value of the element that will be highlighted.
         *
         * ```typescript
         * // get
         * const elementValue = this.textHighlight.value;
         * ```
         *
         * ```html
         * <!--set-->
         * <div
         *   igxTextHighlight
         *   [value]="newValue">
         * </div>
         * ```
         */
        get: function () {
            return this._value;
        },
        set: function (value) {
            if (value === undefined || value === null) {
                this._value = '';
            }
            else {
                this._value = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTextHighlightDirective.prototype, "lastSearchInfo", {
        /**
         * @hidden
         */
        get: function () {
            return this._lastSearchInfo;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Activates the highlight at a given index.
     * (if such index exists)
     */
    IgxTextHighlightDirective.setActiveHighlight = function (groupName, highlight) {
        IgxTextHighlightDirective_1.highlightGroupsMap.set(groupName, highlight);
        IgxTextHighlightDirective_1.onActiveElementChanged.emit(groupName);
    };
    /**
     * Clears any existing highlight.
     */
    IgxTextHighlightDirective.clearActiveHighlight = function (groupName) {
        IgxTextHighlightDirective_1.highlightGroupsMap.set(groupName, {
            index: -1
        });
        IgxTextHighlightDirective_1.onActiveElementChanged.emit(groupName);
    };
    /**
     * @hidden
     */
    IgxTextHighlightDirective.prototype.ngOnDestroy = function () {
        this.clearHighlight();
        if (this._observer !== null) {
            this._observer.disconnect();
        }
        this.destroy$.next(true);
        this.destroy$.complete();
    };
    /**
     * @hidden
     */
    IgxTextHighlightDirective.prototype.ngOnChanges = function (changes) {
        if (changes.value && !changes.value.firstChange) {
            this._valueChanged = true;
        }
        else if ((changes.row !== undefined && !changes.row.firstChange) ||
            (changes.column !== undefined && !changes.column.firstChange) ||
            (changes.page !== undefined && !changes.page.firstChange)) {
            if (this._activeElementIndex !== -1) {
                this.deactivate();
            }
            this.activateIfNecessary();
        }
    };
    /**
     * @hidden
     */
    IgxTextHighlightDirective.prototype.ngAfterViewInit = function () {
        this.parentElement = this.renderer.parentNode(this.element.nativeElement);
        if (IgxTextHighlightDirective_1.highlightGroupsMap.has(this.groupName) === false) {
            IgxTextHighlightDirective_1.highlightGroupsMap.set(this.groupName, {
                index: -1
            });
        }
        this._lastSearchInfo = {
            searchedText: '',
            content: this.value,
            matchCount: 0,
            caseSensitive: false,
            exactMatch: false
        };
        this._container = this.parentElement.firstElementChild;
    };
    /**
     * @hidden
     */
    IgxTextHighlightDirective.prototype.ngAfterViewChecked = function () {
        if (this._valueChanged) {
            this.highlight(this._lastSearchInfo.searchedText, this._lastSearchInfo.caseSensitive, this._lastSearchInfo.exactMatch);
            this.activateIfNecessary();
            this._valueChanged = false;
        }
    };
    /**
     * Clears the existing highlight and highlights the searched text.
     * Returns how many times the element contains the searched text.
     */
    IgxTextHighlightDirective.prototype.highlight = function (text, caseSensitive, exactMatch) {
        var caseSensitiveResolved = caseSensitive ? true : false;
        var exactMatchResolved = exactMatch ? true : false;
        if (this.searchNeedsEvaluation(text, caseSensitiveResolved, exactMatchResolved)) {
            this._lastSearchInfo.searchedText = text;
            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;
            this._lastSearchInfo.exactMatch = exactMatchResolved;
            this._lastSearchInfo.content = this.value;
            if (text === '' || text === undefined || text === null) {
                this.clearHighlight();
            }
            else {
                this.clearChildElements(true);
                this._lastSearchInfo.matchCount = this.getHighlightedText(text, caseSensitive, exactMatch);
            }
        }
        else if (this._nodeWasRemoved) {
            this._lastSearchInfo.searchedText = text;
            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;
            this._lastSearchInfo.exactMatch = exactMatchResolved;
        }
        return this._lastSearchInfo.matchCount;
    };
    /**
     * Clears any existing highlight.
     */
    IgxTextHighlightDirective.prototype.clearHighlight = function () {
        this.clearChildElements(false);
        this._lastSearchInfo.searchedText = '';
        this._lastSearchInfo.matchCount = 0;
    };
    /**
     * Activates the highlight if it is on the currently active row, column and page.
     */
    IgxTextHighlightDirective.prototype.activateIfNecessary = function () {
        var group = IgxTextHighlightDirective_1.highlightGroupsMap.get(this.groupName);
        var column = group.columnIndex === undefined ? group.column : group.columnIndex;
        var row = group.rowIndex === undefined ? group.row : group.rowIndex;
        if (column === this.column && row === this.row && group.page === this.page) {
            this.activate(group.index);
        }
    };
    /**
     * Attaches a MutationObserver to the parentElement and watches for when the container element is removed/readded to the DOM.
     * Should be used only when necessary as using many observers may lead to performance degradation.
     */
    IgxTextHighlightDirective.prototype.observe = function () {
        var _this = this;
        if (this._observer === null) {
            var callback = function (mutationList) {
                mutationList.forEach(function (mutation) {
                    var removedNodes = Array.from(mutation.removedNodes);
                    removedNodes.forEach(function (n) {
                        if (n === _this._container) {
                            _this._nodeWasRemoved = true;
                            _this.clearChildElements(false);
                        }
                    });
                    var addedNodes = Array.from(mutation.addedNodes);
                    addedNodes.forEach(function (n) {
                        if (n === _this.parentElement.firstElementChild && _this._nodeWasRemoved) {
                            _this._container = _this.parentElement.firstElementChild;
                            _this._nodeWasRemoved = false;
                            _this._forceEvaluation = true;
                            _this.highlight(_this._lastSearchInfo.searchedText, _this._lastSearchInfo.caseSensitive, _this._lastSearchInfo.exactMatch);
                            _this._forceEvaluation = false;
                            _this.activateIfNecessary();
                            _this._observer.disconnect();
                            _this._observer = null;
                        }
                    });
                });
            };
            this._observer = new MutationObserver(callback);
            this._observer.observe(this.parentElement, { childList: true });
        }
    };
    IgxTextHighlightDirective.prototype.activate = function (index) {
        this.deactivate();
        if (this._div !== null) {
            var spans = this._div.querySelectorAll('span');
            this._activeElementIndex = index;
            if (spans.length <= index) {
                return;
            }
            var elementToActivate = spans[index];
            this.renderer.addClass(elementToActivate, this._defaultActiveCssClass);
            this.renderer.addClass(elementToActivate, this.activeCssClass);
        }
    };
    IgxTextHighlightDirective.prototype.deactivate = function () {
        if (this._activeElementIndex === -1) {
            return;
        }
        var spans = this._div.querySelectorAll('span');
        if (spans.length <= this._activeElementIndex) {
            this._activeElementIndex = -1;
            return;
        }
        var elementToDeactivate = spans[this._activeElementIndex];
        this.renderer.removeClass(elementToDeactivate, this._defaultActiveCssClass);
        this.renderer.removeClass(elementToDeactivate, this.activeCssClass);
        this._activeElementIndex = -1;
    };
    IgxTextHighlightDirective.prototype.clearChildElements = function (originalContentHidden) {
        this.renderer.setProperty(this.element.nativeElement, 'hidden', originalContentHidden);
        if (this._div !== null) {
            this.renderer.removeChild(this.parentElement, this._div);
            this._div = null;
            this._activeElementIndex = -1;
        }
    };
    IgxTextHighlightDirective.prototype.getHighlightedText = function (searchText, caseSensitive, exactMatch) {
        this.appendDiv();
        var stringValue = String(this.value);
        var contentStringResolved = !caseSensitive ? stringValue.toLowerCase() : stringValue;
        var searchTextResolved = !caseSensitive ? searchText.toLowerCase() : searchText;
        var matchCount = 0;
        if (exactMatch) {
            if (contentStringResolved === searchTextResolved) {
                // tslint:disable-next-line:max-line-length
                this.appendSpan("<span class=\"" + this._defaultCssClass + " " + (this.cssClass ? this.cssClass : '') + "\">" + stringValue + "</span>");
                matchCount++;
            }
            else {
                this.appendText(stringValue);
            }
        }
        else {
            var foundIndex = contentStringResolved.indexOf(searchTextResolved, 0);
            var previousMatchEnd = 0;
            while (foundIndex !== -1) {
                var start = foundIndex;
                var end = foundIndex + searchTextResolved.length;
                this.appendText(stringValue.substring(previousMatchEnd, start));
                // tslint:disable-next-line:max-line-length
                this.appendSpan("<span class=\"" + this._defaultCssClass + " " + (this.cssClass ? this.cssClass : '') + "\">" + stringValue.substring(start, end) + "</span>");
                previousMatchEnd = end;
                matchCount++;
                foundIndex = contentStringResolved.indexOf(searchTextResolved, end);
            }
            this.appendText(stringValue.substring(previousMatchEnd, stringValue.length));
        }
        return matchCount;
    };
    IgxTextHighlightDirective.prototype.appendText = function (text) {
        var textElement = this.renderer.createText(text);
        this.renderer.appendChild(this._div, textElement);
    };
    IgxTextHighlightDirective.prototype.appendSpan = function (outerHTML) {
        var span = this.renderer.createElement('span');
        this.renderer.appendChild(this._div, span);
        this.renderer.setProperty(span, 'outerHTML', outerHTML);
    };
    IgxTextHighlightDirective.prototype.appendDiv = function () {
        this._div = this.renderer.createElement('div');
        if (this.containerClass) {
            this.renderer.addClass(this._div, this.containerClass);
        }
        this.renderer.appendChild(this.parentElement, this._div);
    };
    IgxTextHighlightDirective.prototype.searchNeedsEvaluation = function (text, caseSensitive, exactMatch) {
        var searchedText = this._lastSearchInfo.searchedText;
        return !this._nodeWasRemoved &&
            (searchedText === null ||
                searchedText !== text ||
                this._lastSearchInfo.content !== this.value ||
                this._lastSearchInfo.caseSensitive !== caseSensitive ||
                this._lastSearchInfo.exactMatch !== exactMatch ||
                this._forceEvaluation);
    };
    var IgxTextHighlightDirective_1;
    IgxTextHighlightDirective.onActiveElementChanged = new EventEmitter();
    IgxTextHighlightDirective.highlightGroupsMap = new Map();
    IgxTextHighlightDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input('cssClass')
    ], IgxTextHighlightDirective.prototype, "cssClass", void 0);
    __decorate([
        Input('activeCssClass')
    ], IgxTextHighlightDirective.prototype, "activeCssClass", void 0);
    __decorate([
        Input('containerClass')
    ], IgxTextHighlightDirective.prototype, "containerClass", void 0);
    __decorate([
        Input('groupName')
    ], IgxTextHighlightDirective.prototype, "groupName", void 0);
    __decorate([
        Input('value')
    ], IgxTextHighlightDirective.prototype, "value", null);
    __decorate([
        Input('row')
    ], IgxTextHighlightDirective.prototype, "row", void 0);
    __decorate([
        Input('column')
    ], IgxTextHighlightDirective.prototype, "column", void 0);
    __decorate([
        Input('page'),
        DeprecateProperty("IgxTextHighlightDirective 'page' input property is deprecated.")
    ], IgxTextHighlightDirective.prototype, "page", void 0);
    IgxTextHighlightDirective = IgxTextHighlightDirective_1 = __decorate([
        Directive({
            selector: '[igxTextHighlight]'
        })
    ], IgxTextHighlightDirective);
    return IgxTextHighlightDirective;
}());
export { IgxTextHighlightDirective };
/**
 * @hidden
 */
var IgxTextHighlightModule = /** @class */ (function () {
    function IgxTextHighlightModule() {
    }
    IgxTextHighlightModule = __decorate([
        NgModule({
            declarations: [IgxTextHighlightDirective],
            exports: [IgxTextHighlightDirective]
        })
    ], IgxTextHighlightModule);
    return IgxTextHighlightModule;
}());
export { IgxTextHighlightModule };
//# sourceMappingURL=data:application/json;base64,