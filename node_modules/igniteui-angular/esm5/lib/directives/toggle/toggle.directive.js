import { __decorate, __param, __read, __spread } from "tslib";
import { ChangeDetectorRef, Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, NgModule, OnDestroy, OnInit, Optional, Output, Inject } from '@angular/core';
import { IgxNavigationService, IToggleView } from '../../core/navigation';
import { IgxOverlayService } from '../../services/overlay/overlay';
import { ConnectedPositioningStrategy, AbsoluteScrollStrategy } from '../../services';
import { filter, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
var IgxToggleDirective = /** @class */ (function () {
    /**
     * @hidden
     */
    function IgxToggleDirective(elementRef, cdr, overlayService, navigationService) {
        var _this = this;
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.overlayService = overlayService;
        this.navigationService = navigationService;
        this.destroy$ = new Subject();
        this._overlaySubFilter = [
            filter(function (x) { return x.id === _this._overlayId; }),
            takeUntil(this.destroy$)
        ];
        /**
         * Emits an event after the toggle container is opened.
         *
         * ```typescript
         * onToggleOpened(event) {
         *    alert("Toggle opened!");
         * }
         * ```
         *
         * ```html
         * <div
         *   igxToggle
         *   (onOpened)='onToggleOpened($event)'>
         * </div>
         * ```
         */
        this.onOpened = new EventEmitter();
        /**
         * Emits an event before the toggle container is opened.
         *
         * ```typescript
         * onToggleOpening(event) {
         *  alert("Toggle opening!");
         * }
         * ```
         *
         * ```html
         * <div
         *   igxToggle
         *   (onOpening)='onToggleOpening($event)'>
         * </div>
         * ```
         */
        this.onOpening = new EventEmitter();
        /**
         * Emits an event after the toggle container is closed.
         *
         * ```typescript
         * onToggleClosed(event) {
         *  alert("Toggle closed!");
         * }
         * ```
         *
         * ```html
         * <div
         *   igxToggle
         *   (onClosed)='onToggleClosed($event)'>
         * </div>
         * ```
         */
        this.onClosed = new EventEmitter();
        /**
         * Emits an event before the toggle container is closed.
         *
         * ```typescript
         * onToggleClosing(event) {
         *  alert("Toggle closing!");
         * }
         * ```
         *
         * ```html
         * <div
         *  igxToggle
         *  (onClosing)='onToggleClosing($event)'>
         * </div>
         * ```
         */
        this.onClosing = new EventEmitter();
        this._collapsed = true;
        /**
         * Emits an event after the toggle element is appended to the overlay container.
         *
         * ```typescript
         * onAppended() {
         *  alert("Content appended!");
         * }
         * ```
         *
         * ```html
         * <div
         *   igxToggle
         *   (onAppended)='onToggleAppended()'>
         * </div>
         * ```
         */
        this.onAppended = new EventEmitter();
        this.overlayClosed = function () {
            _this._collapsed = true;
            _this.cdr.detectChanges();
            delete _this._overlayId;
            _this.unsubscribe();
            _this.onClosed.emit();
        };
    }
    Object.defineProperty(IgxToggleDirective.prototype, "collapsed", {
        /**
         * @hidden
         */
        get: function () {
            return this._collapsed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxToggleDirective.prototype, "element", {
        /**
         * @hidden
         */
        get: function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxToggleDirective.prototype, "hiddenClass", {
        /**
         * @hidden
         */
        get: function () {
            return this.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxToggleDirective.prototype, "defaultClass", {
        /**
         * @hidden
         */
        get: function () {
            return !this.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Opens the toggle.
     *
     * ```typescript
     * this.myToggle.open();
     * ```
     */
    IgxToggleDirective.prototype.open = function (overlaySettings) {
        var _a, _b, _c, _d;
        var _this = this;
        //  if there is open animation do nothing
        //  if toggle is not collapsed and there is no close animation do nothing
        var info = this.overlayService.getOverlayById(this._overlayId);
        var hasOpenAnimation = info ? info.openAnimationPlayer : false;
        var hasCloseAnimation = info ? info.closeAnimationPlayer : false;
        if (hasOpenAnimation || !(this._collapsed || hasCloseAnimation)) {
            return;
        }
        if (!info) {
            this._overlayId = this.overlayService.attach(this.elementRef, overlaySettings);
        }
        this._collapsed = false;
        this.cdr.detectChanges();
        var openEventArgs = { cancel: false };
        this.onOpening.emit(openEventArgs);
        if (openEventArgs.cancel) {
            this._collapsed = true;
            this.cdr.detectChanges();
            return;
        }
        this.unsubscribe();
        this._overlayAppendedSub = (_a = this.overlayService.onAppended).pipe.apply(_a, __spread(this._overlaySubFilter)).subscribe(function () {
            _this.onAppended.emit();
        });
        this._overlayOpenedSub = (_b = this.overlayService.onOpened).pipe.apply(_b, __spread(this._overlaySubFilter)).subscribe(function () {
            _this.onOpened.emit();
        });
        this._overlayClosingSub = (_c = this.overlayService
            .onClosing).pipe.apply(_c, __spread(this._overlaySubFilter)).subscribe(function (e) {
            var eventArgs = { cancel: false, event: e.event };
            _this.onClosing.emit(eventArgs);
            e.cancel = eventArgs.cancel;
            //  in case event is not canceled this will close the toggle and we need to unsubscribe.
            //  Otherwise if for some reason, e.g. close on outside click, close() gets called before
            //  onClosed was fired we will end with calling onClosing more than once
            if (!e.cancel) {
                _this.clearSubscription(_this._overlayClosingSub);
            }
        });
        this._overlayClosedSub = (_d = this.overlayService.onClosed).pipe.apply(_d, __spread(this._overlaySubFilter)).subscribe(this.overlayClosed);
        this.overlayService.show(this._overlayId, overlaySettings);
    };
    /**
     * Closes the toggle.
     *
     * ```typescript
     * this.myToggle.close();
     * ```
     */
    IgxToggleDirective.prototype.close = function () {
        //  if toggle is collapsed do nothing
        //  if there is close animation do nothing, toggle will close anyway
        var info = this.overlayService.getOverlayById(this._overlayId);
        var hasCloseAnimation = info ? info.closeAnimationPlayer : false;
        if (this._collapsed || hasCloseAnimation) {
            return;
        }
        this.overlayService.hide(this._overlayId);
    };
    /**
     * Opens or closes the toggle, depending on its current state.
     *
     * ```typescript
     * this.myToggle.toggle();
     * ```
     */
    IgxToggleDirective.prototype.toggle = function (overlaySettings) {
        //  if toggle is collapsed call open
        //  if there is close animation call open
        if (this.collapsed || this.isClosing) {
            this.open(overlaySettings);
        }
        else {
            this.close();
        }
    };
    Object.defineProperty(IgxToggleDirective.prototype, "isClosing", {
        /** @hidden @internal */
        get: function () {
            var info = this.overlayService.getOverlayById(this._overlayId);
            return info ? info.closeAnimationPlayer : false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Repositions the toggle.
     * ```typescript
     * this.myToggle.reposition();
     * ```
     */
    IgxToggleDirective.prototype.reposition = function () {
        this.overlayService.reposition(this._overlayId);
    };
    /**
     * Offsets the content along the corresponding axis by the provided amount
     */
    IgxToggleDirective.prototype.setOffset = function (deltaX, deltaY) {
        this.overlayService.setOffset(this._overlayId, deltaX, deltaY);
    };
    /**
     * @hidden
     */
    IgxToggleDirective.prototype.ngOnInit = function () {
        if (this.navigationService && this.id) {
            this.navigationService.add(this.id, this);
        }
    };
    /**
     * @hidden
     */
    IgxToggleDirective.prototype.ngOnDestroy = function () {
        if (this.navigationService && this.id) {
            this.navigationService.remove(this.id);
        }
        if (!this.collapsed && this._overlayId) {
            this.overlayService.hide(this._overlayId);
        }
        this.unsubscribe();
        this.destroy$.next(true);
        this.destroy$.complete();
    };
    IgxToggleDirective.prototype.unsubscribe = function () {
        this.clearSubscription(this._overlayOpenedSub);
        this.clearSubscription(this._overlayClosingSub);
        this.clearSubscription(this._overlayClosedSub);
        this.clearSubscription(this._overlayAppendedSub);
    };
    IgxToggleDirective.prototype.clearSubscription = function (subscription) {
        if (subscription && !subscription.closed) {
            subscription.unsubscribe();
        }
    };
    IgxToggleDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: IgxOverlayService, decorators: [{ type: Inject, args: [IgxOverlayService,] }] },
        { type: IgxNavigationService, decorators: [{ type: Optional }] }
    ]; };
    __decorate([
        Output()
    ], IgxToggleDirective.prototype, "onOpened", void 0);
    __decorate([
        Output()
    ], IgxToggleDirective.prototype, "onOpening", void 0);
    __decorate([
        Output()
    ], IgxToggleDirective.prototype, "onClosed", void 0);
    __decorate([
        Output()
    ], IgxToggleDirective.prototype, "onClosing", void 0);
    __decorate([
        Input()
    ], IgxToggleDirective.prototype, "id", void 0);
    __decorate([
        HostBinding('class.igx-toggle--hidden'),
        HostBinding('attr.aria-hidden')
    ], IgxToggleDirective.prototype, "hiddenClass", null);
    __decorate([
        HostBinding('class.igx-toggle')
    ], IgxToggleDirective.prototype, "defaultClass", null);
    __decorate([
        Output()
    ], IgxToggleDirective.prototype, "onAppended", void 0);
    IgxToggleDirective = __decorate([
        Directive({
            exportAs: 'toggle',
            selector: '[igxToggle]'
        }),
        __param(2, Inject(IgxOverlayService)),
        __param(3, Optional())
    ], IgxToggleDirective);
    return IgxToggleDirective;
}());
export { IgxToggleDirective };
var IgxToggleActionDirective = /** @class */ (function () {
    function IgxToggleActionDirective(element, navigationService) {
        this.element = element;
        this.navigationService = navigationService;
    }
    Object.defineProperty(IgxToggleActionDirective.prototype, "target", {
        /**
         * @hidden
         */
        get: function () {
            if (typeof this._target === 'string') {
                return this.navigationService.get(this._target);
            }
            return this._target;
        },
        /**
         * @hidden
         */
        set: function (target) {
            if (target !== null && target !== '') {
                this._target = target;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxToggleActionDirective.prototype.ngOnInit = function () {
        this._overlayDefaults = {
            positionStrategy: new ConnectedPositioningStrategy({ target: this.element.nativeElement }),
            scrollStrategy: new AbsoluteScrollStrategy(),
            closeOnOutsideClick: true,
            modal: false,
            excludePositionTarget: true
        };
    };
    /**
     * @hidden
     */
    IgxToggleActionDirective.prototype.onClick = function () {
        if (this.outlet) {
            this._overlayDefaults.outlet = this.outlet;
        }
        var clonedSettings = Object.assign({}, this._overlayDefaults, this.overlaySettings);
        this.updateOverlaySettings(clonedSettings);
        this.target.toggle(clonedSettings);
    };
    /**
     * Updates provided overlay settings
     * @param settings settings to update
     * @returns returns updated copy of provided overlay settings
     */
    IgxToggleActionDirective.prototype.updateOverlaySettings = function (settings) {
        if (settings && settings.positionStrategy) {
            var positionStrategyClone = settings.positionStrategy.clone();
            positionStrategyClone.settings.target = this.element.nativeElement;
            settings.positionStrategy = positionStrategyClone;
        }
        return settings;
    };
    IgxToggleActionDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: IgxNavigationService, decorators: [{ type: Optional }] }
    ]; };
    __decorate([
        Input()
    ], IgxToggleActionDirective.prototype, "overlaySettings", void 0);
    __decorate([
        Input('igxToggleOutlet')
    ], IgxToggleActionDirective.prototype, "outlet", void 0);
    __decorate([
        Input('igxToggleAction')
    ], IgxToggleActionDirective.prototype, "target", null);
    __decorate([
        HostListener('click')
    ], IgxToggleActionDirective.prototype, "onClick", null);
    IgxToggleActionDirective = __decorate([
        Directive({
            exportAs: 'toggle-action',
            selector: '[igxToggleAction]'
        }),
        __param(1, Optional())
    ], IgxToggleActionDirective);
    return IgxToggleActionDirective;
}());
export { IgxToggleActionDirective };
/**
 * Mark an element as an igxOverlay outlet container.
 * Directive instance is exported as `overlay-outlet` to be assigned to templates variables:
 * ```html
 * <div igxOverlayOutlet #outlet="overlay-outlet"></div>
 * ```
 */
var IgxOverlayOutletDirective = /** @class */ (function () {
    function IgxOverlayOutletDirective(element) {
        this.element = element;
    }
    Object.defineProperty(IgxOverlayOutletDirective.prototype, "nativeElement", {
        /** @hidden */
        get: function () {
            return this.element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    IgxOverlayOutletDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    IgxOverlayOutletDirective = __decorate([
        Directive({
            exportAs: 'overlay-outlet',
            selector: '[igxOverlayOutlet]'
        })
    ], IgxOverlayOutletDirective);
    return IgxOverlayOutletDirective;
}());
export { IgxOverlayOutletDirective };
/**
 * @hidden
 */
var IgxToggleModule = /** @class */ (function () {
    function IgxToggleModule() {
    }
    IgxToggleModule = __decorate([
        NgModule({
            declarations: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],
            exports: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],
            providers: [IgxNavigationService]
        })
    ], IgxToggleModule);
    return IgxToggleModule;
}());
export { IgxToggleModule };
//# sourceMappingURL=data:application/json;base64,