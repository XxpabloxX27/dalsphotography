import { __decorate, __extends, __param, __read, __spread } from "tslib";
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Component, Input, Output, NgModule, Optional, Inject, EventEmitter, HostBinding } from '@angular/core';
import { CurrentResourceStrings } from '../core/i18n/resources';
import { DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';
import { IgxSelectModule } from '../select/index';
import { IgxIconModule } from '../icon/index';
import { IgxButtonModule } from '../directives/button/button.directive';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
var IgxPaginatorComponent = /** @class */ (function (_super) {
    __extends(IgxPaginatorComponent, _super);
    function IgxPaginatorComponent(_displayDensityOptions) {
        var _this = _super.call(this, _displayDensityOptions) || this;
        _this._displayDensityOptions = _displayDensityOptions;
        _this._page = 0;
        _this.defaultSelectValues = [5, 10, 15, 25, 50, 100, 500];
        _this._perPage = 15;
        /**
        * An @Input property that sets if the pager in the paginator should be enabled.
        * ```html
        * <igx-paginator [pagerEnabled]="true"></igx-paginator>
        * ```
        * @memberof IgxPaginatorComponent
        */
        _this.pagerEnabled = true;
        /**
        * An @Input property that sets if the pager in the paginator should be hidden.
        * ```html
        * <igx-paginator [pagerHidden]="true"></igx-paginator>
        * ```
        * @memberof IgxPaginatorComponent
        */
        _this.pagerHidden = false;
        /**
        * An @Input property that sets if the dropdown in the paginator should be enabled.
        * ```html
        * <igx-paginator [dropdownEnabled]="true"></igx-paginator>
        * ```
        * @memberof IgxPaginatorComponent
        */
        _this.dropdownEnabled = true;
        /**
        * An @Input property that sets if the dropdown in the paginator should be hidden.
        * ```html
        * <igx-paginator [dropdownHidden]="true"></igx-paginator>
        * ```
        * @memberof IgxPaginatorComponent
        */
        _this.dropdownHidden = false;
        /**
        * An @Input property, sets number of label of the select.
        * The default is 'Items per page' localized string.
        * ```html
        * <igx-paginator label="My custom label"></igx-paginator>
        * ```
        * @memberof IgxPaginatorComponent
        */
        _this.selectLabel = CurrentResourceStrings.PaginatorResStrings.igx_paginator_label;
        /**
         *An event that is emitted when the select in the `IgxPaginatorComponent` changes its value.
        */
        _this.perPageChange = new EventEmitter();
        /**
         *An event that is emitted when the paginating is used.
        */
        _this.pageChange = new EventEmitter();
        return _this;
    }
    Object.defineProperty(IgxPaginatorComponent.prototype, "classCosy", {
        /**
         * Sets the class of the IgxPaginatorComponent based
         * on the provided displayDensity.
         */
        get: function () {
            return this.displayDensity === DisplayDensity.cosy;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxPaginatorComponent.prototype, "classCompact", {
        get: function () {
            return this.displayDensity === DisplayDensity.compact;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxPaginatorComponent.prototype, "classComfortable", {
        get: function () {
            return this.displayDensity === DisplayDensity.comfortable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxPaginatorComponent.prototype, "page", {
        /**
       * An @Input property, sets current page of the `IgxPaginatorComponent`.
       * The default is 0.
       * ```typescript
       * let page = this.paginator.page;
       * ```
       * @memberof IgxPaginatorComponent
       */
        get: function () {
            return this._page;
        },
        set: function (value) {
            this._page = value;
            this.pageChange.emit(this._page);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxPaginatorComponent.prototype, "perPage", {
        /**
       * An @Input property, sets number of visible items per page in the `IgxPaginatorComponent`.
       * The default is 15.
       * ```typescript
       * let itemsPerPage = this.paginator.perPage;
       * ```
       * @memberof IgxPaginatorComponent
       */
        get: function () {
            return this._perPage;
        },
        set: function (value) {
            this._perPage = Number(value);
            this.perPageChange.emit(this._perPage);
            this._selectOptions = this.sortUniqueOptions(this.defaultSelectValues, this._perPage);
            this.totalPages = Math.ceil(this.totalRecords / this._perPage);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxPaginatorComponent.prototype, "totalRecords", {
        /**
        * An @Input property that sets the total records.
        * ```typescript
        * let totalRecords = this.paginator.totalRecords;
        * ```
        * @memberof IgxPaginatorComponent
        */
        get: function () {
            return this._totalRecords;
        },
        set: function (value) {
            this._totalRecords = value;
            this.totalPages = Math.ceil(this.totalRecords / this.perPage);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxPaginatorComponent.prototype, "selectOptions", {
        /**
        * An @Input property that sets custom options in the select of the paginator
        * ```typescript
        * let options = this.paginator.selectOptions;
        * ```
        * @memberof IgxPaginatorComponent
        */
        get: function () {
            return this._selectOptions;
        },
        set: function (value) {
            this._selectOptions = this.sortUniqueOptions(value, this._perPage);
            this.defaultSelectValues = __spread(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxPaginatorComponent.prototype, "isLastPage", {
        /**
         * Returns if the current page is the last page.
         * ```typescript
         * const lastPage = this.paginator.isLastPage;
         * ```
         */
        get: function () {
            return this.page + 1 >= this.totalPages;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxPaginatorComponent.prototype, "isFirstPage", {
        /**
         * Returns if the current page is the first page.
         * ```typescript
         * const lastPage = this.paginator.isFirstPage;
         * ```
         */
        get: function () {
            return this.page === 0;
        },
        enumerable: true,
        configurable: true
    });
    IgxPaginatorComponent.prototype.sortUniqueOptions = function (values, newOption) {
        return Array.from(new Set(__spread(values, [newOption]))).sort(function (a, b) { return a - b; });
    };
    /**
     * Sets DisplayDensity for the <select> inside the paginator
     * @hidden
     */
    IgxPaginatorComponent.prototype.paginatorSelectDisplayDensity = function () {
        if (this.displayDensity === DisplayDensity.comfortable) {
            return DisplayDensity.cosy;
        }
        return DisplayDensity.compact;
    };
    /**
     * Goes to the next page of the `IgxPaginatorComponent`, if the paginator is not already at the last page.
     * ```typescript
     * this.paginator.nextPage();
     * ```
     * @memberof IgxPaginatorComponent
     */
    IgxPaginatorComponent.prototype.nextPage = function () {
        if (!this.isLastPage) {
            this.page += 1;
        }
    };
    /**
     * Goes to the previous page of the `IgxPaginatorComponent`, if the paginator is not already at the first page.
     * ```typescript
     * this.paginator.previousPage();
     * ```
     * @memberof IgxPaginatorComponent
     */
    IgxPaginatorComponent.prototype.previousPage = function () {
        if (!this.isFirstPage) {
            this.page -= 1;
        }
    };
    /**
     * Goes to the desired page index.
     * ```typescript
     * this.pagiantor.paginate(1);
     * ```
     * @param val
     * @memberof IgxPaginatorComponent
     */
    IgxPaginatorComponent.prototype.paginate = function (val) {
        if (val < 0 || val > this.totalPages - 1) {
            return;
        }
        this.page = val;
    };
    IgxPaginatorComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
    ]; };
    __decorate([
        HostBinding('class.igx-paginator--cosy')
    ], IgxPaginatorComponent.prototype, "classCosy", null);
    __decorate([
        HostBinding('class.igx-paginator--compact')
    ], IgxPaginatorComponent.prototype, "classCompact", null);
    __decorate([
        HostBinding('class.igx-paginator')
    ], IgxPaginatorComponent.prototype, "classComfortable", null);
    __decorate([
        Input()
    ], IgxPaginatorComponent.prototype, "page", null);
    __decorate([
        Input()
    ], IgxPaginatorComponent.prototype, "perPage", null);
    __decorate([
        Input()
    ], IgxPaginatorComponent.prototype, "totalRecords", null);
    __decorate([
        Input()
    ], IgxPaginatorComponent.prototype, "selectOptions", null);
    __decorate([
        Input()
    ], IgxPaginatorComponent.prototype, "pagerEnabled", void 0);
    __decorate([
        Input()
    ], IgxPaginatorComponent.prototype, "pagerHidden", void 0);
    __decorate([
        Input()
    ], IgxPaginatorComponent.prototype, "dropdownEnabled", void 0);
    __decorate([
        Input()
    ], IgxPaginatorComponent.prototype, "dropdownHidden", void 0);
    __decorate([
        Input()
    ], IgxPaginatorComponent.prototype, "selectLabel", void 0);
    __decorate([
        Output()
    ], IgxPaginatorComponent.prototype, "perPageChange", void 0);
    __decorate([
        Output()
    ], IgxPaginatorComponent.prototype, "pageChange", void 0);
    IgxPaginatorComponent = __decorate([
        Component({
            selector: 'igx-paginator',
            template: "<div class=\"igx-paginator__select\" [hidden]=\"dropdownHidden\">\n    <label class=\"igx-paginator__label\">{{ selectLabel }}</label>\n    <div class=\"igx-paginator__select-input\">\n        <igx-select [(ngModel)]=\"perPage\" [displayDensity]=\"paginatorSelectDisplayDensity()\" type=\"border\"\n            [disabled]=\"!dropdownEnabled\">\n            <igx-select-item [value]=\"val\" *ngFor=\"let val of selectOptions\">\n                {{val}}\n            </igx-select-item>\n        </igx-select>\n    </div>\n</div>\n<div class=\"igx-paginator__pager\" [hidden]=\"pagerHidden\">\n    <button [disabled]=\"isFirstPage || !pagerEnabled ? true: false\" (click)=\"paginate(0)\" igxButton=\"icon\" igxRipple igxRippleCentered=\"true\">\n        <igx-icon fontSet=\"material\">first_page</igx-icon>\n    </button>\n    <button [disabled]=\"isFirstPage || !pagerEnabled ? true: false\" (click)=\"previousPage()\" igxButton=\"icon\" igxRipple igxRippleCentered=\"true\">\n        <igx-icon fontSet=\"material\">chevron_left</igx-icon>\n    </button>\n    <div class='igx-paginator__pager-text'>\n        <span>{{ page + 1 }}</span>\n        <span>&nbsp;of&nbsp;</span>\n        <span>{{ totalPages }}</span>\n    </div>\n    <button [disabled]=\"isLastPage || !pagerEnabled ? true: false\" (click)=\"nextPage()\" igxRipple igxRippleCentered=\"true\" igxButton=\"icon\">\n        <igx-icon fontSet=\"material\">chevron_right</igx-icon>\n    </button>\n    <button [disabled]=\"isLastPage || !pagerEnabled ? true: false\" (click)=\"paginate(totalPages - 1)\" igxButton=\"icon\" igxRipple\n        igxRippleCentered=\"true\">\n        <igx-icon fontSet=\"material\">last_page</igx-icon>\n    </button>\n</div>\n"
        }),
        __param(0, Optional()), __param(0, Inject(DisplayDensityToken))
    ], IgxPaginatorComponent);
    return IgxPaginatorComponent;
}(DisplayDensityBase));
export { IgxPaginatorComponent };
var IgxPaginatorModule = /** @class */ (function () {
    function IgxPaginatorModule() {
    }
    IgxPaginatorModule = __decorate([
        NgModule({
            declarations: [IgxPaginatorComponent],
            exports: [IgxPaginatorComponent],
            imports: [CommonModule, IgxSelectModule, FormsModule, IgxIconModule, IgxButtonModule, IgxRippleModule]
        })
    ], IgxPaginatorModule);
    return IgxPaginatorModule;
}());
export { IgxPaginatorModule };
//# sourceMappingURL=data:application/json;base64,