import { __decorate, __extends } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
/**
 *@hidden
 */
var ItemPropertyValueChangedDirective = /** @class */ (function () {
    function ItemPropertyValueChangedDirective(propName) {
        this.valueChanged = new EventEmitter();
        this._propName = propName;
    }
    Object.defineProperty(ItemPropertyValueChangedDirective.prototype, "object", {
        get: function () {
            return this._object;
        },
        set: function (value) {
            if (value) {
                this._object = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ItemPropertyValueChangedDirective.prototype, "value", {
        get: function () {
            return (this.object) ? this.object[this._propName] : null;
        },
        set: function (value) {
            this.onValueChanged(value);
        },
        enumerable: true,
        configurable: true
    });
    ItemPropertyValueChangedDirective.prototype.onValueChanged = function (value) {
        var currentValue = this.value;
        if (value !== currentValue) {
            this.object[this._propName] = value;
            this.valueChanged.emit({ oldValue: currentValue, newValue: value });
        }
    };
    ItemPropertyValueChangedDirective.ctorParameters = function () { return [
        { type: String }
    ]; };
    __decorate([
        Input()
    ], ItemPropertyValueChangedDirective.prototype, "value", null);
    __decorate([
        Output()
    ], ItemPropertyValueChangedDirective.prototype, "valueChanged", void 0);
    ItemPropertyValueChangedDirective = __decorate([
        Directive()
    ], ItemPropertyValueChangedDirective);
    return ItemPropertyValueChangedDirective;
}());
export { ItemPropertyValueChangedDirective };
/** @hidden */
var ColumnChooserItemBaseDirective = /** @class */ (function (_super) {
    __extends(ColumnChooserItemBaseDirective, _super);
    function ColumnChooserItemBaseDirective(prop) {
        var _this = _super.call(this, prop) || this;
        _this.prop = prop;
        _this.indentation = 30;
        return _this;
    }
    Object.defineProperty(ColumnChooserItemBaseDirective.prototype, "column", {
        get: function () {
            return this.object;
        },
        set: function (value) {
            if (value) {
                this.object = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnChooserItemBaseDirective.prototype, "name", {
        get: function () {
            return (this.column) ? ((this.column.header) ? this.column.header : this.column.field) : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnChooserItemBaseDirective.prototype, "level", {
        get: function () {
            return this.column.level;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnChooserItemBaseDirective.prototype, "calcIndent", {
        get: function () {
            return this.indentation * this.level;
        },
        enumerable: true,
        configurable: true
    });
    ColumnChooserItemBaseDirective.ctorParameters = function () { return [
        { type: String }
    ]; };
    __decorate([
        Input()
    ], ColumnChooserItemBaseDirective.prototype, "column", null);
    __decorate([
        Input()
    ], ColumnChooserItemBaseDirective.prototype, "indentation", void 0);
    __decorate([
        Input()
    ], ColumnChooserItemBaseDirective.prototype, "container", void 0);
    ColumnChooserItemBaseDirective = __decorate([
        Directive()
    ], ColumnChooserItemBaseDirective);
    return ColumnChooserItemBaseDirective;
}(ItemPropertyValueChangedDirective));
export { ColumnChooserItemBaseDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWNob29zZXItaXRlbS1iYXNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9ncmlkcy9jb2x1bW4tY2hvb3Nlci1pdGVtLWJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFRdkU7O0dBRUc7QUFFSDtJQTBCSSwyQ0FBWSxRQUFnQjtRQUZyQixpQkFBWSxHQUFHLElBQUksWUFBWSxFQUEwQixDQUFDO1FBRzdELElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0lBQzlCLENBQUM7SUF4QkQsc0JBQUkscURBQU07YUFBVjtZQUNJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN4QixDQUFDO2FBRUQsVUFBVyxLQUFLO1lBQ1osSUFBSSxLQUFLLEVBQUU7Z0JBQ1AsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7YUFDeEI7UUFDTCxDQUFDOzs7T0FOQTtJQVNELHNCQUFJLG9EQUFLO2FBQVQ7WUFDSSxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzlELENBQUM7YUFFRCxVQUFVLEtBQUs7WUFDWCxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9CLENBQUM7OztPQUpBO0lBYVMsMERBQWMsR0FBeEIsVUFBeUIsS0FBSztRQUMxQixJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ2hDLElBQUksS0FBSyxLQUFLLFlBQVksRUFBRTtZQUN4QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDcEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQ3ZFO0lBQ0wsQ0FBQzs7OztJQXJCRDtRQURDLEtBQUssRUFBRTtrRUFHUDtJQU9EO1FBREMsTUFBTSxFQUFFOzJFQUN3RDtJQXhCL0MsaUNBQWlDO1FBRHRELFNBQVMsRUFBRTtPQUNVLGlDQUFpQyxDQXFDdEQ7SUFBRCx3Q0FBQztDQUFBLEFBckNELElBcUNDO1NBckNxQixpQ0FBaUM7QUF1Q3ZELGNBQWM7QUFFZDtJQUFvRCxrREFBaUM7SUFrQmpGLHdDQUFtQixJQUFZO1FBQS9CLFlBQ0ksa0JBQU0sSUFBSSxDQUFDLFNBQ2Q7UUFGa0IsVUFBSSxHQUFKLElBQUksQ0FBUTtRQUx4QixpQkFBVyxHQUFHLEVBQUUsQ0FBQzs7SUFPeEIsQ0FBQztJQWxCRCxzQkFBSSxrREFBTTthQUFWO1lBQ0ksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3ZCLENBQUM7YUFFRCxVQUFXLEtBQUs7WUFDWixJQUFJLEtBQUssRUFBRTtnQkFDUCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQzthQUN2QjtRQUNMLENBQUM7OztPQU5BO0lBa0JELHNCQUFJLGdEQUFJO2FBQVI7WUFDSSxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNoRyxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLGlEQUFLO2FBQVQ7WUFDSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQzdCLENBQUM7OztPQUFBO0lBRUQsc0JBQUksc0RBQVU7YUFBZDtZQUNJLE9BQU8sSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3pDLENBQUM7OztPQUFBOzs7O0lBOUJEO1FBREMsS0FBSyxFQUFFO2dFQUdQO0lBU0Q7UUFEQyxLQUFLLEVBQUU7dUVBQ2dCO0lBR3hCO1FBREMsS0FBSyxFQUFFO3FFQUNjO0lBaEJiLDhCQUE4QjtRQUQxQyxTQUFTLEVBQUU7T0FDQyw4QkFBOEIsQ0FpQzFDO0lBQUQscUNBQUM7Q0FBQSxBQWpDRCxDQUFvRCxpQ0FBaUMsR0FpQ3BGO1NBakNZLDhCQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQmFzZUV2ZW50QXJncyB9IGZyb20gJy4uL2NvcmUvdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElWYWx1ZUNoYW5nZWRFdmVudEFyZ3MgZXh0ZW5kcyBJQmFzZUV2ZW50QXJncyB7XG4gICAgb2xkVmFsdWU6IGFueTtcbiAgICBuZXdWYWx1ZTogYW55O1xufVxuXG4vKipcbiAqQGhpZGRlblxuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJdGVtUHJvcGVydHlWYWx1ZUNoYW5nZWREaXJlY3RpdmUge1xuICAgIHByaXZhdGUgX29iamVjdDogYW55O1xuICAgIHByaXZhdGUgX3Byb3BOYW1lOiBzdHJpbmc7XG5cbiAgICBnZXQgb2JqZWN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb2JqZWN0O1xuICAgIH1cblxuICAgIHNldCBvYmplY3QodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9vYmplY3QgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMub2JqZWN0KSA/IHRoaXMub2JqZWN0W3RoaXMuX3Byb3BOYW1lXSA6IG51bGw7XG4gICAgfVxuXG4gICAgc2V0IHZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMub25WYWx1ZUNoYW5nZWQodmFsdWUpO1xuICAgIH1cblxuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyB2YWx1ZUNoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPElWYWx1ZUNoYW5nZWRFdmVudEFyZ3M+KCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX3Byb3BOYW1lID0gcHJvcE5hbWU7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIG9uVmFsdWVDaGFuZ2VkKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm9iamVjdFt0aGlzLl9wcm9wTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMudmFsdWVDaGFuZ2VkLmVtaXQoeyBvbGRWYWx1ZTogY3VycmVudFZhbHVlLCBuZXdWYWx1ZTogdmFsdWUgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKiBAaGlkZGVuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBjbGFzcyBDb2x1bW5DaG9vc2VySXRlbUJhc2VEaXJlY3RpdmUgZXh0ZW5kcyBJdGVtUHJvcGVydHlWYWx1ZUNoYW5nZWREaXJlY3RpdmUge1xuICAgIEBJbnB1dCgpXG4gICAgZ2V0IGNvbHVtbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub2JqZWN0O1xuICAgIH1cblxuICAgIHNldCBjb2x1bW4odmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm9iamVjdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgaW5kZW50YXRpb24gPSAzMDtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGNvbnRhaW5lcjogYW55O1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIHByb3A6IHN0cmluZykge1xuICAgICAgICBzdXBlcihwcm9wKTtcbiAgICB9XG5cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmNvbHVtbikgPyAoKHRoaXMuY29sdW1uLmhlYWRlcikgPyB0aGlzLmNvbHVtbi5oZWFkZXIgOiB0aGlzLmNvbHVtbi5maWVsZCkgOiAnJztcbiAgICB9XG5cbiAgICBnZXQgbGV2ZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbHVtbi5sZXZlbDtcbiAgICB9XG5cbiAgICBnZXQgY2FsY0luZGVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZW50YXRpb24gKiB0aGlzLmxldmVsO1xuICAgIH1cbn1cbiJdfQ==