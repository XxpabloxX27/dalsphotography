import { __decorate } from "tslib";
import { Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { IgxColumnGroupComponent } from '../../columns/column-group.component';
/**
 * @hidden
 */
var IgxExcelStyleColumnMovingComponent = /** @class */ (function () {
    function IgxExcelStyleColumnMovingComponent() {
    }
    Object.defineProperty(IgxExcelStyleColumnMovingComponent.prototype, "visibleColumns", {
        get: function () {
            return this.grid.visibleColumns.filter(function (col) { return !(col instanceof IgxColumnGroupComponent); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxExcelStyleColumnMovingComponent.prototype, "canNotMoveLeft", {
        get: function () {
            return this.column.visibleIndex === 0 ||
                (this.grid.unpinnedColumns.indexOf(this.column) === 0 && this.column.disablePinning) ||
                (this.grid.unpinnedColumns.indexOf(this.column) === 0 && !this.isColumnPinnable) ||
                (this.column.level !== 0 && !this.findColumn(0, this.visibleColumns));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxExcelStyleColumnMovingComponent.prototype, "canNotMoveRight", {
        get: function () {
            return this.column.visibleIndex === this.visibleColumns.length - 1 ||
                (this.column.level !== 0 && !this.findColumn(1, this.visibleColumns));
        },
        enumerable: true,
        configurable: true
    });
    IgxExcelStyleColumnMovingComponent.prototype.onMoveButtonClicked = function (moveDirection) {
        var targetColumn;
        if (this.column.pinned) {
            if (this.column.isLastPinned && moveDirection === 1) {
                targetColumn = this.grid.unpinnedColumns[0];
                moveDirection = 0;
            }
            else {
                targetColumn = this.findColumn(moveDirection, this.grid.pinnedColumns);
            }
        }
        else if (this.grid.unpinnedColumns.indexOf(this.column) === 0 && moveDirection === 0) {
            targetColumn = this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1];
            if (targetColumn.parent) {
                targetColumn = targetColumn.topLevelParent;
            }
            moveDirection = 1;
        }
        else {
            targetColumn = this.findColumn(moveDirection, this.grid.unpinnedColumns);
        }
        this.grid.moveColumn(this.column, targetColumn, moveDirection);
    };
    IgxExcelStyleColumnMovingComponent.prototype.findColumn = function (moveDirection, columns) {
        var index = columns.indexOf(this.column);
        if (moveDirection === 0) {
            while (index > 0) {
                index--;
                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {
                    return columns[index];
                }
            }
        }
        else {
            while (index < columns.length - 1) {
                index++;
                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {
                    return columns[index];
                }
            }
        }
    };
    __decorate([
        Input()
    ], IgxExcelStyleColumnMovingComponent.prototype, "column", void 0);
    __decorate([
        Input()
    ], IgxExcelStyleColumnMovingComponent.prototype, "grid", void 0);
    __decorate([
        Input()
    ], IgxExcelStyleColumnMovingComponent.prototype, "displayDensity", void 0);
    __decorate([
        Input()
    ], IgxExcelStyleColumnMovingComponent.prototype, "isColumnPinnable", void 0);
    IgxExcelStyleColumnMovingComponent = __decorate([
        Component({
            changeDetection: ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            selector: 'igx-excel-style-column-moving',
            template: "<header>\n    {{ grid.resourceStrings.igx_grid_excel_filter_moving_header }}\n</header>\n<section class=\"igx-excel-filter__move-buttons\">\n    <button [displayDensity]=\"displayDensity\"\n        igxButton\n        [disabled]=\"canNotMoveLeft\"\n        (click)=\"onMoveButtonClicked(0)\">\n        <igx-icon>arrow_back</igx-icon>\n        <span>\n            {{ displayDensity==='compact'?\n            grid.resourceStrings.igx_grid_excel_filter_moving_left_short:\n            grid.resourceStrings.igx_grid_excel_filter_moving_left }}\n        </span>\n    </button>\n    <button [displayDensity]=\"displayDensity\"\n        igxButton\n        [disabled]=\"canNotMoveRight\"\n        (click)=\"onMoveButtonClicked(1)\">\n        <span>\n            {{ displayDensity==='compact'?\n            grid.resourceStrings.igx_grid_excel_filter_moving_right_short:\n            grid.resourceStrings.igx_grid_excel_filter_moving_right }}\n        </span>\n        <igx-icon>arrow_forwards</igx-icon>\n    </button>\n</section>\n"
        })
    ], IgxExcelStyleColumnMovingComponent);
    return IgxExcelStyleColumnMovingComponent;
}());
export { IgxExcelStyleColumnMovingComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwtc3R5bGUtY29sdW1uLW1vdmluZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2dyaWRzL2ZpbHRlcmluZy9leGNlbC1zdHlsZS9leGNlbC1zdHlsZS1jb2x1bW4tbW92aW5nLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSx1QkFBdUIsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJMUUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFL0U7O0dBRUc7QUFPSDtJQWNJO0lBQWUsQ0FBQztJQUVoQixzQkFBWSw4REFBYzthQUExQjtZQUNJLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsQ0FBQyxDQUFDLEdBQUcsWUFBWSx1QkFBdUIsQ0FBQyxFQUF6QyxDQUF5QyxDQUFDLENBQUM7UUFDN0YsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSw4REFBYzthQUFsQjtZQUNJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEtBQUssQ0FBQztnQkFDakMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQztnQkFDcEYsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztnQkFDaEYsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxJ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RUFBRTtzRUFDMEI7SUFHbEM7UUFEQyxLQUFLLEVBQUU7b0VBQzBCO0lBR2xDO1FBREMsS0FBSyxFQUFFOzhFQUM4QjtJQUd0QztRQURDLEtBQUssRUFBRTtnRkFDeUI7SUFaeEIsa0NBQWtDO1FBTjlDLFNBQVMsQ0FBQztZQUNQLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO1lBQy9DLG1CQUFtQixFQUFFLEtBQUs7WUFDMUIsUUFBUSxFQUFFLCtCQUErQjtZQUN6QywwZ0NBQXlEO1NBQzVELENBQUM7T0FDVyxrQ0FBa0MsQ0F1RTlDO0lBQUQseUNBQUM7Q0FBQSxBQXZFRCxJQXVFQztTQXZFWSxrQ0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4Q29sdW1uQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vY29sdW1ucy9jb2x1bW4uY29tcG9uZW50JztcbmltcG9ydCB7IElneEdyaWRCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vZ3JpZC1iYXNlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBEaXNwbGF5RGVuc2l0eSB9IGZyb20gJy4uLy4uLy4uL2NvcmUvZGVuc2l0eSc7XG5pbXBvcnQgeyBJZ3hDb2x1bW5Hcm91cENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2NvbHVtbnMvY29sdW1uLWdyb3VwLmNvbXBvbmVudCc7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5AQ29tcG9uZW50KHtcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgICBzZWxlY3RvcjogJ2lneC1leGNlbC1zdHlsZS1jb2x1bW4tbW92aW5nJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZXhjZWwtc3R5bGUtY29sdW1uLW1vdmluZy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgSWd4RXhjZWxTdHlsZUNvbHVtbk1vdmluZ0NvbXBvbmVudCB7XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBjb2x1bW46IElneENvbHVtbkNvbXBvbmVudDtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGdyaWQ6IElneEdyaWRCYXNlRGlyZWN0aXZlO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZGlzcGxheURlbnNpdHk6IERpc3BsYXlEZW5zaXR5O1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgaXNDb2x1bW5QaW5uYWJsZTogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKCkge31cblxuICAgIHByaXZhdGUgZ2V0IHZpc2libGVDb2x1bW5zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ncmlkLnZpc2libGVDb2x1bW5zLmZpbHRlcihjb2wgPT4gIShjb2wgaW5zdGFuY2VvZiBJZ3hDb2x1bW5Hcm91cENvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIGdldCBjYW5Ob3RNb3ZlTGVmdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sdW1uLnZpc2libGVJbmRleCA9PT0gMCB8fFxuICAgICAgICAgICAgKHRoaXMuZ3JpZC51bnBpbm5lZENvbHVtbnMuaW5kZXhPZih0aGlzLmNvbHVtbikgPT09IDAgJiYgdGhpcy5jb2x1bW4uZGlzYWJsZVBpbm5pbmcpIHx8XG4gICAgICAgICAgICAodGhpcy5ncmlkLnVucGlubmVkQ29sdW1ucy5pbmRleE9mKHRoaXMuY29sdW1uKSA9PT0gMCAmJiAhdGhpcy5pc0NvbHVtblBpbm5hYmxlKSB8fFxuICAgICAgICAgICAgKHRoaXMuY29sdW1uLmxldmVsICE9PSAwICYmICF0aGlzLmZpbmRDb2x1bW4oMCwgdGhpcy52aXNpYmxlQ29sdW1ucykpO1xuICAgIH1cblxuICAgIGdldCBjYW5Ob3RNb3ZlUmlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbHVtbi52aXNpYmxlSW5kZXggPT09IHRoaXMudmlzaWJsZUNvbHVtbnMubGVuZ3RoIC0gMSB8fFxuICAgICAgICAgICAgKHRoaXMuY29sdW1uLmxldmVsICE9PSAwICYmICF0aGlzLmZpbmRDb2x1bW4oMSwgdGhpcy52aXNpYmxlQ29sdW1ucykpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbk1vdmVCdXR0b25DbGlja2VkKG1vdmVEaXJlY3Rpb24pIHtcbiAgICAgICAgbGV0IHRhcmdldENvbHVtbjtcbiAgICAgICAgaWYgKHRoaXMuY29sdW1uLnBpbm5lZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29sdW1uLmlzTGFzdFBpbm5lZCAmJiBtb3ZlRGlyZWN0aW9uID09PSAxKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0Q29sdW1uID0gdGhpcy5ncmlkLnVucGlubmVkQ29sdW1uc1swXTtcbiAgICAgICAgICAgICAgICBtb3ZlRGlyZWN0aW9uID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0Q29sdW1uID0gdGhpcy5maW5kQ29sdW1uKG1vdmVEaXJlY3Rpb24sIHRoaXMuZ3JpZC5waW5uZWRDb2x1bW5zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmdyaWQudW5waW5uZWRDb2x1bW5zLmluZGV4T2YodGhpcy5jb2x1bW4pID09PSAwICYmIG1vdmVEaXJlY3Rpb24gPT09IDApIHtcbiAgICAgICAgICAgIHRhcmdldENvbHVtbiA9IHRoaXMuZ3JpZC5waW5uZWRDb2x1bW5zW3RoaXMuZ3JpZC5waW5uZWRDb2x1bW5zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgaWYgKHRhcmdldENvbHVtbi5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRDb2x1bW4gPSB0YXJnZXRDb2x1bW4udG9wTGV2ZWxQYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtb3ZlRGlyZWN0aW9uID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldENvbHVtbiA9IHRoaXMuZmluZENvbHVtbihtb3ZlRGlyZWN0aW9uLCB0aGlzLmdyaWQudW5waW5uZWRDb2x1bW5zKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdyaWQubW92ZUNvbHVtbih0aGlzLmNvbHVtbiwgdGFyZ2V0Q29sdW1uLCBtb3ZlRGlyZWN0aW9uKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZpbmRDb2x1bW4obW92ZURpcmVjdGlvbjogbnVtYmVyLCBjb2x1bW5zOiBJZ3hDb2x1bW5Db21wb25lbnRbXSkge1xuICAgICAgICBsZXQgaW5kZXggPSBjb2x1bW5zLmluZGV4T2YodGhpcy5jb2x1bW4pO1xuICAgICAgICBpZiAobW92ZURpcmVjdGlvbiA9PT0gMCkge1xuICAgICAgICAgICAgd2hpbGUgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgICAgIGluZGV4LS07XG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbnNbaW5kZXhdLmxldmVsID09PSB0aGlzLmNvbHVtbi5sZXZlbCAmJiBjb2x1bW5zW2luZGV4XS5wYXJlbnQgPT09IHRoaXMuY29sdW1uLnBhcmVudCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29sdW1uc1tpbmRleF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2hpbGUgKGluZGV4IDwgY29sdW1ucy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uc1tpbmRleF0ubGV2ZWwgPT09IHRoaXMuY29sdW1uLmxldmVsICYmIGNvbHVtbnNbaW5kZXhdLnBhcmVudCA9PT0gdGhpcy5jb2x1bW4ucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2x1bW5zW2luZGV4XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=