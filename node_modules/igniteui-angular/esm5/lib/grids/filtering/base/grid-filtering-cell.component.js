import { __decorate } from "tslib";
import { ChangeDetectorRef, Component, Input, TemplateRef, ViewChild, HostBinding, AfterViewInit, ElementRef, HostListener, OnInit, ChangeDetectionStrategy, DoCheck } from '@angular/core';
import { IgxChipsAreaComponent, IgxChipComponent } from '../../../chips';
import { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';
/**
 * @hidden
 */
var IgxGridFilteringCellComponent = /** @class */ (function () {
    function IgxGridFilteringCellComponent(cdr, filteringService) {
        this.cdr = cdr;
        this.filteringService = filteringService;
        this.baseClass = 'igx-grid__filtering-cell-indicator';
        this.currentTemplate = null;
        this.moreFiltersCount = 0;
        this.cssClass = 'igx-grid__filtering-cell';
        this.filteringService.subscribeToEvents();
    }
    IgxGridFilteringCellComponent.prototype.ngOnInit = function () {
        this.filteringService.columnToMoreIconHidden.set(this.column.field, true);
    };
    IgxGridFilteringCellComponent.prototype.ngAfterViewInit = function () {
        this.updateFilterCellArea();
    };
    IgxGridFilteringCellComponent.prototype.ngDoCheck = function () {
        this.updateFilterCellArea();
    };
    IgxGridFilteringCellComponent.prototype.onTabKeyDown = function (eventArgs) {
        if (this.isLastElementFocused()) {
            this.filteringService.grid.navigation.navigateNextFilterCell(this.column, eventArgs);
        }
        eventArgs.stopPropagation();
    };
    IgxGridFilteringCellComponent.prototype.onShiftTabKeyDown = function (eventArgs) {
        if (this.isFirstElementFocused()) {
            this.filteringService.grid.navigation.navigatePrevFilterCell(this.column, eventArgs);
        }
        eventArgs.stopPropagation();
    };
    /**
     * Returns whether a chip with a given index is visible or not.
     */
    IgxGridFilteringCellComponent.prototype.isChipVisible = function (index) {
        var expression = this.expressionsList[index];
        return !!(expression && expression.isVisible);
    };
    /**
     * Updates the filtering cell area.
     */
    IgxGridFilteringCellComponent.prototype.updateFilterCellArea = function () {
        this.expressionsList = this.filteringService.getExpressions(this.column.field);
        this.updateVisibleFilters();
    };
    Object.defineProperty(IgxGridFilteringCellComponent.prototype, "template", {
        get: function () {
            if (!this.column.filterable) {
                this.currentTemplate = null;
                return null;
            }
            if (this.column.filterCellTemplate) {
                this.currentTemplate = this.column.filterCellTemplate;
                return this.column.filterCellTemplate;
            }
            var expressionTree = this.column.filteringExpressionsTree;
            if (!expressionTree || expressionTree.filteringOperands.length === 0) {
                this.currentTemplate = this.emptyFilter;
                return this.emptyFilter;
            }
            if (this.filteringService.isFilterComplex(this.column.field)) {
                this.currentTemplate = this.complexFilter;
                return this.complexFilter;
            }
            this.currentTemplate = this.defaultFilter;
            return this.defaultFilter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridFilteringCellComponent.prototype, "context", {
        /**
         * Gets the context passed to the filter template.
         * @memberof IgxGridFilteringCellComponent
         */
        get: function () {
            return {
                column: this.column
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Chip clicked event handler.
     */
    IgxGridFilteringCellComponent.prototype.onChipClicked = function (expression) {
        if (expression) {
            this.expressionsList.forEach(function (item) {
                item.isSelected = (item.expression === expression);
            });
        }
        else if (this.expressionsList.length > 0) {
            this.expressionsList.forEach(function (item) {
                item.isSelected = false;
            });
            this.expressionsList[0].isSelected = true;
        }
        var index = this.filteringService.unpinnedFilterableColumns.indexOf(this.column);
        if (index >= 0 && !this.isColumnRightVisible(index)) {
            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], true);
        }
        else if (index >= 0 && !this.isColumnLeftVisible(index)) {
            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], false);
        }
        this.filteringService.filteredColumn = this.column;
        this.filteringService.isFilterRowVisible = true;
        this.filteringService.selectedExpression = expression;
    };
    /**
     * Chip removed event handler.
     */
    IgxGridFilteringCellComponent.prototype.onChipRemoved = function (eventArgs, item) {
        var indexToRemove = this.expressionsList.indexOf(item);
        this.removeExpression(indexToRemove);
        this.focusChip();
    };
    /**
     * Clears the filtering.
     */
    IgxGridFilteringCellComponent.prototype.clearFiltering = function () {
        this.filteringService.clearFilter(this.column.field);
        this.cdr.detectChanges();
    };
    /**
     * Chip keydown event handler.
     */
    IgxGridFilteringCellComponent.prototype.onChipKeyDown = function (eventArgs, expression) {
        if (eventArgs.key === "Enter" /* ENTER */) {
            eventArgs.preventDefault();
            this.onChipClicked(expression);
        }
    };
    /**
     * Returns the filtering indicator class.
     */
    IgxGridFilteringCellComponent.prototype.filteringIndicatorClass = function () {
        var _a;
        return _a = {},
            _a[this.baseClass] = !this.isMoreIconHidden(),
            _a[this.baseClass + "--hidden"] = this.isMoreIconHidden(),
            _a;
    };
    /**
     * Focus a chip depending on the current visible template.
     */
    IgxGridFilteringCellComponent.prototype.focusChip = function (focusFirst) {
        if (focusFirst === void 0) { focusFirst = false; }
        if (this.currentTemplate === this.defaultFilter) {
            if (focusFirst) {
                this.focusFirstElement();
            }
            else {
                this.focusElement();
            }
        }
        else if (this.currentTemplate === this.emptyFilter) {
            this.ghostChip.elementRef.nativeElement.querySelector(".igx-chip__item").focus();
        }
        else if (this.currentTemplate === this.complexFilter) {
            this.complexChip.elementRef.nativeElement.querySelector(".igx-chip__item").focus();
        }
    };
    IgxGridFilteringCellComponent.prototype.removeExpression = function (indexToRemove) {
        if (indexToRemove === 0 && this.expressionsList.length === 1) {
            this.clearFiltering();
            return;
        }
        this.filteringService.removeExpression(this.column.field, indexToRemove);
        this.updateVisibleFilters();
        this.filteringService.filterInternal(this.column.field);
    };
    IgxGridFilteringCellComponent.prototype.isMoreIconHidden = function () {
        return this.filteringService.columnToMoreIconHidden.get(this.column.field);
    };
    IgxGridFilteringCellComponent.prototype.updateVisibleFilters = function () {
        this.expressionsList.forEach(function (ex) { return ex.isVisible = true; });
        if (this.moreIcon) {
            this.filteringService.columnToMoreIconHidden.set(this.column.field, true);
        }
        this.cdr.detectChanges();
        if (this.chipsArea && this.expressionsList.length > 1) {
            var areaWidth = this.chipsArea.element.nativeElement.offsetWidth;
            var viewWidth = 0;
            var chipsAreaElements = this.chipsArea.element.nativeElement.children;
            var visibleChipsCount = 0;
            var moreIconWidth = this.moreIcon.nativeElement.offsetWidth -
                parseInt(document.defaultView.getComputedStyle(this.moreIcon.nativeElement)['margin-left'], 10);
            for (var index = 0; index < chipsAreaElements.length - 1; index++) {
                if (viewWidth + chipsAreaElements[index].offsetWidth < areaWidth) {
                    viewWidth += chipsAreaElements[index].offsetWidth;
                    if (index % 2 === 0) {
                        visibleChipsCount++;
                    }
                    else {
                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-left'], 10);
                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-right'], 10);
                    }
                }
                else {
                    if (index % 2 !== 0 && viewWidth + moreIconWidth > areaWidth) {
                        visibleChipsCount--;
                    }
                    else if (visibleChipsCount > 0 && viewWidth - chipsAreaElements[index - 1].offsetWidth + moreIconWidth > areaWidth) {
                        visibleChipsCount--;
                    }
                    this.moreFiltersCount = this.expressionsList.length - visibleChipsCount;
                    this.filteringService.columnToMoreIconHidden.set(this.column.field, false);
                    break;
                }
            }
            for (var i = visibleChipsCount; i < this.expressionsList.length; i++) {
                this.expressionsList[i].isVisible = false;
            }
            this.cdr.detectChanges();
        }
    };
    IgxGridFilteringCellComponent.prototype.isFirstElementFocused = function () {
        return !(this.chipsArea && this.chipsArea.chipsList.length > 0 &&
            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(".igx-chip__item") !== document.activeElement);
    };
    IgxGridFilteringCellComponent.prototype.isLastElementFocused = function () {
        if (this.chipsArea) {
            if (this.isMoreIconHidden() && this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(".igx-chip__remove") !==
                document.activeElement) {
                return false;
            }
            else if (!this.isMoreIconHidden() && this.moreIcon.nativeElement !== document.activeElement) {
                return false;
            }
        }
        return true;
    };
    IgxGridFilteringCellComponent.prototype.focusFirstElement = function () {
        if (this.chipsArea.chipsList.length > 0) {
            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(".igx-chip__item").focus();
        }
        else {
            this.moreIcon.nativeElement.focus();
        }
    };
    IgxGridFilteringCellComponent.prototype.focusElement = function () {
        if (this.filteringService.shouldFocusNext) {
            if (!this.isMoreIconHidden() && this.chipsArea.chipsList.length === 0) {
                this.moreIcon.nativeElement.focus();
            }
            else {
                this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(".igx-chip__item").focus();
            }
        }
        else {
            if (!this.isMoreIconHidden()) {
                this.moreIcon.nativeElement.focus();
            }
            else {
                this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(".igx-chip__remove").focus();
            }
        }
    };
    IgxGridFilteringCellComponent.prototype.isColumnRightVisible = function (columnIndex) {
        if (this.filteringService.areAllColumnsInView) {
            return true;
        }
        var currentColumnRight = 0;
        for (var index = 0; index < this.filteringService.unpinnedColumns.length; index++) {
            currentColumnRight += parseInt(this.filteringService.unpinnedColumns[index].width, 10);
            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {
                break;
            }
        }
        var width = this.filteringService.displayContainerWidth + this.filteringService.displayContainerScrollLeft;
        return currentColumnRight <= width;
    };
    IgxGridFilteringCellComponent.prototype.isColumnLeftVisible = function (columnIndex) {
        if (this.filteringService.areAllColumnsInView) {
            return true;
        }
        var currentColumnLeft = 0;
        for (var index = 0; index < this.filteringService.unpinnedColumns.length; index++) {
            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {
                break;
            }
            currentColumnLeft += parseInt(this.filteringService.unpinnedColumns[index].width, 10);
        }
        return currentColumnLeft >= this.filteringService.displayContainerScrollLeft;
    };
    IgxGridFilteringCellComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: IgxFilteringService }
    ]; };
    __decorate([
        Input()
    ], IgxGridFilteringCellComponent.prototype, "column", void 0);
    __decorate([
        ViewChild('emptyFilter', { read: TemplateRef, static: true })
    ], IgxGridFilteringCellComponent.prototype, "emptyFilter", void 0);
    __decorate([
        ViewChild('defaultFilter', { read: TemplateRef, static: true })
    ], IgxGridFilteringCellComponent.prototype, "defaultFilter", void 0);
    __decorate([
        ViewChild('complexFilter', { read: TemplateRef, static: true })
    ], IgxGridFilteringCellComponent.prototype, "complexFilter", void 0);
    __decorate([
        ViewChild('chipsArea', { read: IgxChipsAreaComponent })
    ], IgxGridFilteringCellComponent.prototype, "chipsArea", void 0);
    __decorate([
        ViewChild('moreIcon', { read: ElementRef })
    ], IgxGridFilteringCellComponent.prototype, "moreIcon", void 0);
    __decorate([
        ViewChild('ghostChip', { read: IgxChipComponent })
    ], IgxGridFilteringCellComponent.prototype, "ghostChip", void 0);
    __decorate([
        ViewChild('complexChip', { read: IgxChipComponent })
    ], IgxGridFilteringCellComponent.prototype, "complexChip", void 0);
    __decorate([
        HostBinding('class.igx-grid__filtering-cell')
    ], IgxGridFilteringCellComponent.prototype, "cssClass", void 0);
    __decorate([
        HostListener('keydown.tab', ['$event'])
    ], IgxGridFilteringCellComponent.prototype, "onTabKeyDown", null);
    __decorate([
        HostListener('keydown.shift.tab', ['$event'])
    ], IgxGridFilteringCellComponent.prototype, "onShiftTabKeyDown", null);
    IgxGridFilteringCellComponent = __decorate([
        Component({
            changeDetection: ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            selector: 'igx-grid-filtering-cell',
            template: "<ng-template #emptyFilter>\n        <igx-chips-area [attr.draggable]=\"false\" class=\"igx-filtering-chips\">\n            <igx-chip #ghostChip [attr.draggable]=\"false\" (click)=\"onChipClicked()\" (keydown)=\"onChipKeyDown($event)\" [displayDensity]=\"'cosy'\">\n                <igx-icon [attr.draggable]=\"false\" igxPrefix>filter_list</igx-icon>\n                <span [attr.draggable]=\"false\">{{filteringService.grid.resourceStrings.igx_grid_filter}}</span>\n            </igx-chip>\n        </igx-chips-area>\n</ng-template>\n\n<ng-template #defaultFilter>\n    <igx-chips-area #chipsArea class=\"igx-filtering-chips\">\n        <ng-container *ngFor=\"let item of expressionsList; let last = last; let index = index;\" >\n            <igx-chip\n                *ngIf=\"isChipVisible(index)\"\n                [removable]=\"true\"\n                [displayDensity]=\"'cosy'\"\n                (click)=\"onChipClicked(item.expression)\"\n                (keydown)=\"onChipKeyDown($event, item.expression)\"\n                (onRemove)=\"onChipRemoved($event, item)\">\n                <igx-icon igxPrefix\n                    fontSet=\"filtering-icons\"\n                    [name]=\"item.expression.condition.iconName\">\n                </igx-icon>\n                <span #label>\n                    {{filteringService.getChipLabel(item.expression)}}\n                </span>\n            </igx-chip>\n            <span class=\"igx-filtering-chips__connector\" *ngIf=\"!last && isChipVisible(index + 1)\">{{filteringService.getOperatorAsString(item.afterOperator)}}</span>\n        </ng-container>\n        <div #moreIcon [ngClass]=\"filteringIndicatorClass()\" (click)=\"onChipClicked()\" (keydown)=\"onChipKeyDown($event)\" tabindex=\"0\">\n            <igx-icon>filter_list</igx-icon>\n            <igx-badge [value]=\"moreFiltersCount\"></igx-badge>\n        </div>\n    </igx-chips-area>\n</ng-template>\n\n<ng-template #complexFilter>\n    <igx-chip #complexChip [removable]=\"true\" [displayDensity]=\"'cosy'\" (onRemove)=\"clearFiltering()\">\n        <igx-icon igxPrefix>filter_list</igx-icon>\n        <span>{{filteringService.grid.resourceStrings.igx_grid_complex_filter}}</span>\n    </igx-chip>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template; context: context\"></ng-container>\n"
        })
    ], IgxGridFilteringCellComponent);
    return IgxGridFilteringCellComponent;
}());
export { IgxGridFilteringCellComponent };
//# sourceMappingURL=data:application/json;base64,