import { __decorate } from "tslib";
import { Pipe } from '@angular/core';
import { cloneArray } from '../../core/utils';
import { DataUtil } from '../../data-operations/data-util';
import { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';
import { GridBaseAPIService } from '../api.service';
/**
 *@hidden
 */
var IgxGridSortingPipe = /** @class */ (function () {
    function IgxGridSortingPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    IgxGridSortingPipe.prototype.transform = function (collection, expressions, sorting, id, pipeTrigger) {
        var grid = this.gridAPI.grid;
        var result;
        if (!expressions.length) {
            result = collection;
        }
        else {
            result = DataUtil.sort(cloneArray(collection), expressions, sorting);
        }
        grid.filteredSortedData = result;
        return result;
    };
    IgxGridSortingPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService }
    ]; };
    IgxGridSortingPipe = __decorate([
        Pipe({
            name: 'gridSort',
            pure: true
        })
    ], IgxGridSortingPipe);
    return IgxGridSortingPipe;
}());
export { IgxGridSortingPipe };
/**
 *@hidden
 */
var IgxGridGroupingPipe = /** @class */ (function () {
    function IgxGridGroupingPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    IgxGridGroupingPipe.prototype.transform = function (collection, expression, expansion, defaultExpanded, id, groupsRecords, pipeTrigger) {
        var state = { expressions: [], expansion: [], defaultExpanded: defaultExpanded };
        var grid = this.gridAPI.grid;
        state.expressions = grid.groupingExpressions;
        var result;
        var fullResult = { data: [], metadata: [] };
        if (!state.expressions.length) {
            // empty the array without changing reference
            groupsRecords.splice(0, groupsRecords.length);
            result = {
                data: collection,
                metadata: collection
            };
        }
        else {
            state.expansion = grid.groupingExpansionState;
            state.defaultExpanded = grid.groupsExpanded;
            result = DataUtil.group(cloneArray(collection), state, grid, groupsRecords, fullResult);
        }
        grid.groupingFlatResult = result.data;
        grid.groupingResult = fullResult.data;
        grid.groupingMetadata = fullResult.metadata;
        return result;
    };
    IgxGridGroupingPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService }
    ]; };
    IgxGridGroupingPipe = __decorate([
        Pipe({
            name: 'gridGroupBy',
            pure: true
        })
    ], IgxGridGroupingPipe);
    return IgxGridGroupingPipe;
}());
export { IgxGridGroupingPipe };
/**
 *@hidden
 */
var IgxGridPagingPipe = /** @class */ (function () {
    function IgxGridPagingPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    IgxGridPagingPipe.prototype.transform = function (collection, page, perPage, id, pipeTrigger) {
        if (page === void 0) { page = 0; }
        if (perPage === void 0) { perPage = 15; }
        if (!this.gridAPI.grid.paging) {
            return collection;
        }
        var state = {
            index: page,
            recordsPerPage: perPage
        };
        DataUtil.correctPagingState(state, collection.data.length);
        var result = {
            data: DataUtil.page(cloneArray(collection.data), state),
            metadata: DataUtil.page(cloneArray(collection.metadata), state)
        };
        if (this.gridAPI.grid.page !== state.index) {
            this.gridAPI.grid.page = state.index;
        }
        this.gridAPI.grid.pagingState = state;
        return result;
    };
    IgxGridPagingPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService }
    ]; };
    IgxGridPagingPipe = __decorate([
        Pipe({
            name: 'gridPaging',
            pure: true
        })
    ], IgxGridPagingPipe);
    return IgxGridPagingPipe;
}());
export { IgxGridPagingPipe };
/**
 *@hidden
 */
var IgxGridFilteringPipe = /** @class */ (function () {
    function IgxGridFilteringPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    IgxGridFilteringPipe.prototype.transform = function (collection, expressionsTree, filterStrategy, advancedExpressionsTree, id, pipeTrigger, filteringPipeTrigger) {
        var grid = this.gridAPI.grid;
        var state = {
            expressionsTree: expressionsTree,
            strategy: filterStrategy,
            advancedExpressionsTree: advancedExpressionsTree
        };
        if (FilteringExpressionsTree.empty(state.expressionsTree) && FilteringExpressionsTree.empty(state.advancedExpressionsTree)) {
            return collection;
        }
        var result = DataUtil.filter(cloneArray(collection), state);
        grid.filteredData = result;
        return result;
    };
    IgxGridFilteringPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService }
    ]; };
    IgxGridFilteringPipe = __decorate([
        Pipe({
            name: 'gridFiltering',
            pure: true
        })
    ], IgxGridFilteringPipe);
    return IgxGridFilteringPipe;
}());
export { IgxGridFilteringPipe };
//# sourceMappingURL=data:application/json;base64,