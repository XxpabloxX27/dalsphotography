import { __decorate, __extends, __read, __spread, __values } from "tslib";
import { GridBaseAPIService } from '../api.service';
import { DataUtil } from '../../data-operations/data-util';
import { cloneArray } from '../../core/utils';
import { Injectable } from '@angular/core';
var IgxGridAPIService = /** @class */ (function (_super) {
    __extends(IgxGridAPIService, _super);
    function IgxGridAPIService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IgxGridAPIService.prototype.groupBy = function (expression) {
        var groupingState = cloneArray(this.grid.groupingExpressions);
        var sortingState = cloneArray(this.grid.sortingExpressions);
        this.prepare_sorting_expression([sortingState, groupingState], expression);
        this.grid.groupingExpressions = groupingState;
        this.arrange_sorting_expressions();
    };
    IgxGridAPIService.prototype.groupBy_multiple = function (expressions) {
        var e_1, _a;
        var groupingState = cloneArray(this.grid.groupingExpressions);
        var sortingState = cloneArray(this.grid.sortingExpressions);
        try {
            for (var expressions_1 = __values(expressions), expressions_1_1 = expressions_1.next(); !expressions_1_1.done; expressions_1_1 = expressions_1.next()) {
                var each = expressions_1_1.value;
                this.prepare_sorting_expression([sortingState, groupingState], each);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (expressions_1_1 && !expressions_1_1.done && (_a = expressions_1.return)) _a.call(expressions_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.grid.groupingExpressions = groupingState;
        this.arrange_sorting_expressions();
    };
    IgxGridAPIService.prototype.clear_groupby = function (name) {
        var e_2, _a;
        var _this = this;
        var groupingState = cloneArray(this.grid.groupingExpressions);
        var sortingState = cloneArray(this.grid.sortingExpressions);
        if (name) {
            var names_1 = typeof name === 'string' ? [name] : name;
            var groupedCols = groupingState.filter(function (state) { return names_1.indexOf(state.fieldName) < 0; });
            var newSortingExpr = sortingState.filter(function (state) { return names_1.indexOf(state.fieldName) < 0; });
            this.grid.groupingExpressions = groupedCols;
            this.grid.sortingExpressions = newSortingExpr;
            names_1.forEach(function (colName) {
                var grExprIndex = groupingState.findIndex(function (exp) { return exp.fieldName === colName; });
                var grpExpandState = _this.grid.groupingExpansionState;
                /* remove expansion states related to the cleared group
                and all with deeper hierarchy than the cleared group */
                _this.grid.groupingExpansionState = grpExpandState
                    .filter(function (val) {
                    return val.hierarchy && val.hierarchy.length <= grExprIndex;
                });
            });
        }
        else {
            // clear all
            this.grid.groupingExpressions = [];
            this.grid.groupingExpansionState = [];
            var _loop_1 = function (grExpr) {
                var sortExprIndex = sortingState.findIndex(function (exp) { return exp.fieldName === grExpr.fieldName; });
                if (sortExprIndex > -1) {
                    sortingState.splice(sortExprIndex, 1);
                }
            };
            try {
                for (var groupingState_1 = __values(groupingState), groupingState_1_1 = groupingState_1.next(); !groupingState_1_1.done; groupingState_1_1 = groupingState_1.next()) {
                    var grExpr = groupingState_1_1.value;
                    _loop_1(grExpr);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (groupingState_1_1 && !groupingState_1_1.done && (_a = groupingState_1.return)) _a.call(groupingState_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            this.grid.sortingExpressions = sortingState;
        }
    };
    IgxGridAPIService.prototype.groupBy_get_expanded_for_group = function (groupRow) {
        var grState = this.grid.groupingExpansionState;
        var hierarchy = DataUtil.getHierarchy(groupRow);
        return grState.find(function (state) {
            return DataUtil.isHierarchyMatch(state.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy);
        });
    };
    IgxGridAPIService.prototype.groupBy_is_row_in_group = function (groupRow, rowID) {
        var grid = this.grid;
        var rowInGroup = false;
        groupRow.records.forEach(function (row) {
            if (grid.primaryKey ? row[grid.primaryKey] === rowID : row === rowID) {
                rowInGroup = true;
            }
        });
        return rowInGroup;
    };
    IgxGridAPIService.prototype.groupBy_toggle_group = function (groupRow) {
        var grid = this.grid;
        if (grid.crudService.isInEditMode) {
            grid.endEdit(true);
        }
        var expansionState = grid.groupingExpansionState;
        var state = this.groupBy_get_expanded_for_group(groupRow);
        if (state) {
            state.expanded = !state.expanded;
        }
        else {
            expansionState.push({
                expanded: !grid.groupsExpanded,
                hierarchy: DataUtil.getHierarchy(groupRow)
            });
        }
        this.grid.groupingExpansionState = __spread(expansionState);
        if (grid.rowEditable) {
            grid.repositionRowEditingOverlay(grid.rowInEditMode);
        }
    };
    IgxGridAPIService.prototype.groupBy_fully_expand_group = function (groupRow) {
        var state = this.groupBy_get_expanded_for_group(groupRow);
        var expanded = state ? state.expanded : this.grid.groupsExpanded;
        if (!expanded) {
            this.groupBy_toggle_group(groupRow);
        }
        if (groupRow.groupParent) {
            this.groupBy_fully_expand_group(groupRow.groupParent);
        }
    };
    IgxGridAPIService.prototype.remove_grouping_expression = function (fieldName) {
        var groupingExpressions = this.grid.groupingExpressions;
        var index = groupingExpressions.findIndex(function (expr) { return expr.fieldName === fieldName; });
        if (index !== -1) {
            groupingExpressions.splice(index, 1);
        }
    };
    IgxGridAPIService.prototype.arrange_sorting_expressions = function () {
        var groupingState = this.grid.groupingExpressions;
        this.grid.sortingExpressions.sort(function (a, b) {
            var groupExprA = groupingState.find(function (expr) { return expr.fieldName === a.fieldName; });
            var groupExprB = groupingState.find(function (expr) { return expr.fieldName === b.fieldName; });
            if (groupExprA && groupExprB) {
                return groupingState.indexOf(groupExprA) > groupingState.indexOf(groupExprB) ? 1 : -1;
            }
            else if (groupExprA) {
                return -1;
            }
            else if (groupExprB) {
                return 1;
            }
            else {
                return 0;
            }
        });
    };
    IgxGridAPIService.prototype.get_groupBy_record_id = function (gRow) {
        var recordId = '{ ';
        var hierrarchy = DataUtil.getHierarchy(gRow);
        for (var i = 0; i < hierrarchy.length; i++) {
            var groupByKey = hierrarchy[i];
            recordId += "'" + groupByKey.fieldName + "': '" + groupByKey.value + "'";
            if (i < hierrarchy.length - 1) {
                recordId += ', ';
            }
        }
        recordId += ' }';
        return recordId;
    };
    IgxGridAPIService = __decorate([
        Injectable()
    ], IgxGridAPIService);
    return IgxGridAPIService;
}(GridBaseAPIService));
export { IgxGridAPIService };
//# sourceMappingURL=data:application/json;base64,