import { __decorate, __extends, __read, __spread } from "tslib";
import { IgxGridCellComponent } from '../cell.component';
import { GridBaseAPIService } from '../api.service';
import { ChangeDetectorRef, ElementRef, ChangeDetectionStrategy, Component, OnInit, HostListener, NgZone } from '@angular/core';
import { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';
import { HammerGesturesManager } from '../../core/touch';
import { PlatformUtil } from '../../core/utils';
var IgxHierarchicalGridCellComponent = /** @class */ (function (_super) {
    __extends(IgxHierarchicalGridCellComponent, _super);
    function IgxHierarchicalGridCellComponent(selectionService, crudService, gridAPI, cdr, helement, zone, touchManager, platformUtil) {
        var _this = _super.call(this, selectionService, crudService, gridAPI, cdr, helement, zone, touchManager, platformUtil) || this;
        _this.selectionService = selectionService;
        _this.crudService = crudService;
        _this.gridAPI = gridAPI;
        _this.cdr = cdr;
        _this.helement = helement;
        _this.zone = zone;
        _this.platformUtil = platformUtil;
        return _this;
    }
    IgxHierarchicalGridCellComponent.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
        this._rootGrid = this._getRootGrid();
    };
    IgxHierarchicalGridCellComponent.prototype._getRootGrid = function () {
        var currGrid = this.grid;
        while (currGrid.parent) {
            currGrid = currGrid.parent;
        }
        return currGrid;
    };
    // TODO: Extend the new selection service to avoid complete traversal
    IgxHierarchicalGridCellComponent.prototype._clearAllHighlights = function () {
        __spread([this._rootGrid], this._rootGrid.getChildGrids(true)).forEach(function (grid) {
            grid.selectionService.clear();
            grid.selectionService.activeElement = null;
            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');
            grid.highlightedRowID = null;
            grid.cdr.markForCheck();
        });
    };
    /**
     * @hidden
     * @internal
     */
    IgxHierarchicalGridCellComponent.prototype.onFocus = function (event) {
        if (this.focused) {
            return;
        }
        this._clearAllHighlights();
        var currentElement = this.grid.nativeElement;
        var parentGrid = this.grid;
        var childGrid;
        // add highligh to the current grid
        if (this._rootGrid.id !== currentElement.id) {
            currentElement.classList.add('igx-grid__tr--highlighted');
        }
        // add highligh to the current grid
        while (this._rootGrid.id !== parentGrid.id) {
            childGrid = parentGrid;
            parentGrid = parentGrid.parent;
            var parentRowID = parentGrid.hgridAPI.getParentRowId(childGrid);
            parentGrid.highlightedRowID = parentRowID;
        }
        _super.prototype.onFocus.call(this, event);
    };
    // TODO: Refactor
    /**
     * @hidden
     * @internal
     */
    IgxHierarchicalGridCellComponent.prototype.dispatchEvent = function (event) {
        var key = event.key.toLowerCase();
        if (event.altKey && !this.row.added) {
            var collapse = this.row.expanded && (key === 'left' || key === 'arrowleft' || key === 'up' || key === 'arrowup');
            var expand = !this.row.expanded && (key === 'right' || key === 'arrowright' || key === 'down' || key === 'arrowdown');
            if (collapse) {
                this.gridAPI.set_row_expansion_state(this.row.rowID, false, event);
            }
            else if (expand) {
                this.gridAPI.set_row_expansion_state(this.row.rowID, true, event);
            }
            return;
        }
        _super.prototype.dispatchEvent.call(this, event);
    };
    IgxHierarchicalGridCellComponent.ctorParameters = function () { return [
        { type: IgxGridSelectionService },
        { type: IgxGridCRUDService },
        { type: GridBaseAPIService },
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone },
        { type: HammerGesturesManager },
        { type: PlatformUtil }
    ]; };
    __decorate([
        HostListener('focus', ['$event'])
    ], IgxHierarchicalGridCellComponent.prototype, "onFocus", null);
    IgxHierarchicalGridCellComponent = __decorate([
        Component({
            changeDetection: ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            selector: 'igx-hierarchical-grid-cell',
            template: "<ng-template #defaultCell>\n    <div igxTextHighlight style=\"pointer-events: none\" [cssClass]=\"highlightClass\" [activeCssClass]=\"activeHighlightClass\" [groupName]=\"gridID\"\n        [value]=\"formatter ? formatter(value) : column.dataType === 'number' ? (value | igxdecimal: grid.locale) : column.dataType === 'date' ? (value | igxdate: grid.locale) : value\"\n        [row]=\"rowData\" [column]=\"this.column.field\" [containerClass]=\"'igx-grid__td-text'\"\n        class=\"igx-grid__td-text\">{{ formatter ? formatter(value) : column.dataType === 'number' ? (value | igxdecimal:\n        grid.locale) : column.dataType === 'date' ? (value | igxdate: grid.locale) : value }}</div>\n</ng-template>\n<ng-template #inlineEditor let-cell=\"cell\">\n    <ng-container *ngIf=\"column.dataType === 'string'\">\n        <igx-input-group displayDensity=\"compact\">\n            <input igxInput [value]=\"editValue\" (input)=\"editValue = $event.target.value\" [igxFocus]=\"focused\" />\n        </igx-input-group>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'number'\">\n        <igx-input-group displayDensity=\"compact\">\n            <input igxInput [value]=\"editValue\" (input)=\"editValue = $event.target.value\" [igxFocus]=\"focused\" type=\"number\">\n        </igx-input-group>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'boolean'\">\n        <igx-checkbox (change)=\"editValue = $event.checked\" [value]=\"editValue\" [checked]=\"editValue\"\n            [igxFocus]=\"focused\" [disableRipple]=\"true\"></igx-checkbox>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'date'\">\n        <igx-date-picker [style.width.%]=\"100\" [outlet]=\"grid.outletDirective\" mode=\"dropdown\"\n            [locale]=\"grid.locale\" [(value)]=\"editValue\" [igxFocus]=\"focused\" [labelVisibility]=\"false\">\n        </igx-date-picker>\n    </ng-container>\n</ng-template>\n<ng-container *ngTemplateOutlet=\"template; context: context\">\n</ng-container>\n",
            providers: [HammerGesturesManager]
        })
    ], IgxHierarchicalGridCellComponent);
    return IgxHierarchicalGridCellComponent;
}(IgxGridCellComponent));
export { IgxHierarchicalGridCellComponent };
//# sourceMappingURL=data:application/json;base64,