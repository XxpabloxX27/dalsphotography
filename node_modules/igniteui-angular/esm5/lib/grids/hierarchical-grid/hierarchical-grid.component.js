import { __decorate, __extends, __read, __spread } from "tslib";
import { ChangeDetectionStrategy, Component, HostBinding, Input, forwardRef, TemplateRef, ViewChild, ViewChildren, ContentChildren, ElementRef, EventEmitter, Output } from '@angular/core';
import { IgxGridBaseDirective } from '../grid-base.directive';
import { GridBaseAPIService } from '../api.service';
import { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';
import { IgxRowIslandComponent } from './row-island.component';
import { IgxChildGridRowComponent } from './child-grid-row.component';
import { IgxFilteringService } from '../filtering/grid-filtering.service';
import { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';
import { IgxGridSummaryService } from '../summaries/grid-summary.service';
import { IgxHierarchicalGridBaseDirective } from './hierarchical-grid-base.directive';
import { takeUntil } from 'rxjs/operators';
import { IgxTemplateOutletDirective } from '../../directives/template-outlet/template_outlet.directive';
import { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';
import { IgxTransactionService } from '../../services/index';
import { IgxForOfSyncService, IgxForOfScrollSyncService } from '../../directives/for-of/for_of.sync.service';
import { IgxRowIslandAPIService } from './row-island-api.service';
import { DeprecateProperty } from '../../core/deprecateDecorators';
var NEXT_ID = 0;
var IgxHierarchicalGridComponent = /** @class */ (function (_super) {
    __extends(IgxHierarchicalGridComponent, _super);
    function IgxHierarchicalGridComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         *@hidden
         *@deprecated
         */
        _this.hierarchicalStateChange = new EventEmitter();
        /**
         * @hidden
         */
        _this.childLayoutKeys = [];
        /**
         * @hidden
         */
        _this.highlightedRowID = null;
        /**
         * @hidden
         */
        _this.updateOnRender = false;
        /**
         * @hidden
         */
        _this.parent = null;
        _this._filteredData = null;
        _this.h_id = "igx-hierarchical-grid-" + NEXT_ID++;
        _this.childGridTemplates = new Map();
        _this.scrollTop = 0;
        _this.scrollLeft = 0;
        return _this;
    }
    IgxHierarchicalGridComponent_1 = IgxHierarchicalGridComponent;
    Object.defineProperty(IgxHierarchicalGridComponent.prototype, "id", {
        /**
         * Sets the value of the `id` attribute. If not provided it will be automatically generated.
         * ```html
         * <igx-hierarchical-grid [id]="'igx-hgrid-1'" [data]="Data" [autoGenerate]="true"></igx-hierarchical-grid>
         * ```
         * @memberof IgxHierarchicalGridComponent
         */
        get: function () {
            return this.h_id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHierarchicalGridComponent.prototype, "data", {
        /**
         * Returns an array of data set to the `IgxHierarchicalGridComponent`.
         * ```typescript
         * let filteredData = this.grid.filteredData;
         * ```
         * @memberof IgxHierarchicalGridComponent
         */
        get: function () {
            return this._data;
        },
        /**
         * An @Input property that lets you fill the `IgxHierarchicalGridComponent` with an array of data.
         * ```html
         * <igx-hierarchical-grid [data]="Data" [autoGenerate]="true"></igx-hierarchical-grid>
         * ```
         * @memberof IgxHierarchicalGridComponent
         */
        set: function (value) {
            this._data = value || [];
            this.summaryService.clearSummaryCache();
            if (this.shouldGenerate) {
                this.setupColumns();
                this.reflow();
            }
            this.cdr.markForCheck();
            if (this.parent && (this.height === null || this.height.indexOf('%') !== -1)) {
                // If the height will change based on how much data there is, recalculate sizes in igxForOf.
                this.notifyChanges(true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHierarchicalGridComponent.prototype, "hierarchicalState", {
        /**
         *@hidden
         *@deprecated
         * Sets the state of the `IgxHierarchicalGridComponent` containing which rows are expanded.
        */
        get: function () {
            var res = Array.from(this.expansionStates.entries()).filter(function (_a) {
                var v = _a[1];
                return v === true;
            }).map(function (_a) {
                var _b = __read(_a, 1), k = _b[0];
                return k;
            });
            return res;
        },
        set: function (val) {
            var _this = this;
            if (this.hasChildrenKey) {
                val = val.filter(function (item) {
                    var rec = _this.primaryKey ? _this.data.find(function (x) { return x[_this.primaryKey] === item.rowID; }) : item.rowID;
                    return rec[_this.hasChildrenKey];
                });
            }
            var expansionStates = new Map();
            val.forEach(function (item) {
                var rec = _this.primaryKey ? _this.data.find(function (x) { return x[_this.primaryKey] === item.rowID; }) : item.rowID;
                expansionStates.set(rec, true);
            });
            this.expansionStates = expansionStates;
            if (this.parent) {
                this.notifyChanges(true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHierarchicalGridComponent.prototype, "filteredData", {
        /**
         * Returns an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.
         * ```typescript
         * let filteredData = this.grid.filteredData;
         * ```
         * @memberof IgxHierarchicalGridComponent
         */
        get: function () {
            return this._filteredData;
        },
        /**
         * Sets an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.
         * ```typescript
         * this.grid.filteredData = [{
         *       ID: 1,
         *       Name: "A"
         * }];
         * ```
         * @memberof IgxHierarchicalGridComponent
         */
        set: function (value) {
            this._filteredData = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHierarchicalGridComponent.prototype, "expandChildren", {
        /**
         * Gets if all immediate children of the `IgxHierarchicalGridComponent` previously have been set to be expanded/collapsed.
         * If previously set and some rows have been manually expanded/collapsed it will still return the last set value.
         * ```typescript
         * const expanded = this.grid.expandChildren;
         * ```
         * @memberof IgxHierarchicalGridComponent
         */
        get: function () {
            return this._defaultExpandState;
        },
        /**
         * Sets if all immediate children of the `IgxHierarchicalGridComponent` should be expanded/collapsed.
         * Defult value is false.
         * ```html
         * <igx-hierarchical-grid [id]="'igx-grid-1'" [data]="Data" [autoGenerate]="true" [expandChildren]="true"></igx-hierarchical-grid>
         * ```
         * @memberof IgxHierarchicalGridComponent
         */
        set: function (value) {
            this._defaultExpandState = value;
            this.expansionStates = new Map();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHierarchicalGridComponent.prototype, "foreignKey", {
        /**
         * Gets the unique identifier of the parent row. It may be a `string` or `number` if `primaryKey` of the
         * parent grid is set or an object reference of the parent record otherwise.
         * ```typescript
         * const foreignKey = this.grid.foreignKey;
         * ```
         * @memberof IgxHierarchicalGridComponent
         */
        get: function () {
            if (!this.parent) {
                return null;
            }
            return this.parent.hgridAPI.getParentRowId(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHierarchicalGridComponent.prototype, "hasExpandableChildren", {
        /**
         * @hidden
         */
        get: function () {
            return !!this.childLayoutKeys.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxHierarchicalGridComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this._transactions instanceof IgxTransactionService) {
            // transaction service cannot be injected in a derived class in a factory manner
            this._transactions = new IgxTransactionService();
        }
        this.expansionStatesChange.pipe(takeUntil(this.destroy$)).subscribe(function (value) {
            var res = Array.from(value.entries()).filter(function (_a) {
                var v = _a[1];
                return v === true;
            }).map(function (_a) {
                var _b = __read(_a, 1), k = _b[0];
                return k;
            });
            _this.hierarchicalStateChange.emit(res);
        });
        _super.prototype.ngOnInit.call(this);
    };
    IgxHierarchicalGridComponent.prototype.ngDoCheck = function () {
        if (this._cdrRequestRepaint && !this._init) {
            this.updateSizes();
        }
        _super.prototype.ngDoCheck.call(this);
    };
    /**
     * @hidden
     */
    IgxHierarchicalGridComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        _super.prototype.ngAfterViewInit.call(this);
        this.verticalScrollContainer.getScroll().addEventListener('scroll', this.hg_verticalScrollHandler.bind(this));
        this.headerContainer.getScroll().addEventListener('scroll', this.hg_horizontalScrollHandler.bind(this));
        this.verticalScrollContainer.onBeforeViewDestroyed.pipe(takeUntil(this.destroy$)).subscribe(function (view) {
            var rowData = view.context.$implicit;
            if (_this.isChildGridRecord(rowData)) {
                var cachedData = _this.childGridTemplates.get(rowData.rowID);
                if (cachedData) {
                    var tmlpOutlet = cachedData.owner;
                    tmlpOutlet._viewContainerRef.detach(0);
                }
            }
        });
        if (this.parent) {
            this._displayDensity = this.rootGrid._displayDensity;
            this.rootGrid.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(function () {
                _this._displayDensity = _this.rootGrid._displayDensity;
                _this.notifyChanges(true);
                _this.cdr.markForCheck();
            });
            this.childLayoutKeys = this.parentIsland.children.map(function (item) { return item.key; });
        }
        this.toolbarCustomContentTemplates = this.parentIsland ?
            this.parentIsland.toolbarCustomContentTemplates :
            this.toolbarCustomContentTemplates;
        this.headSelectorsTemplates = this.parentIsland ?
            this.parentIsland.headSelectorsTemplates :
            this.headSelectorsTemplates;
        this.rowSelectorsTemplates = this.parentIsland ?
            this.parentIsland.rowSelectorsTemplates :
            this.rowSelectorsTemplates;
        this.dragIndicatorIconTemplate = this.parentIsland ?
            this.parentIsland.dragIndicatorIconTemplate :
            this.dragIndicatorIconTemplate;
        this.rowExpandedIndicatorTemplate = this.rootGrid.rowExpandedIndicatorTemplate;
        this.rowCollapsedIndicatorTemplate = this.rootGrid.rowCollapsedIndicatorTemplate;
        this.headerCollapseIndicatorTemplate = this.rootGrid.headerCollapseIndicatorTemplate;
        this.headerExpandIndicatorTemplate = this.rootGrid.headerExpandIndicatorTemplate;
        this.hasChildrenKey = this.parentIsland ?
            this.parentIsland.hasChildrenKey || this.rootGrid.hasChildrenKey :
            this.rootGrid.hasChildrenKey;
        this.showExpandAll = this.parentIsland ?
            this.parentIsland.showExpandAll : this.rootGrid.showExpandAll;
    };
    IgxHierarchicalGridComponent.prototype.updateSizes = function () {
        if (document.body.contains(this.nativeElement) && this.isPercentWidth) {
            this.reflow();
            this.hgridAPI.getChildGrids(false).forEach(function (grid) {
                grid.updateSizes();
            });
        }
    };
    IgxHierarchicalGridComponent.prototype._shouldAutoSize = function (renderedHeight) {
        if (this.isPercentHeight && this.parent) {
            return true;
        }
        return _super.prototype._shouldAutoSize.call(this, renderedHeight);
    };
    Object.defineProperty(IgxHierarchicalGridComponent.prototype, "outletDirective", {
        get: function () {
            return this.rootGrid._outletDirective;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxHierarchicalGridComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.updateColumnList(false);
        this.childLayoutKeys = this.parent ?
            this.parentIsland.children.map(function (item) { return item.key; }) :
            this.childLayoutKeys = this.childLayoutList.map(function (item) { return item.key; });
        this.childLayoutList.notifyOnChanges();
        this.childLayoutList.changes.pipe(takeUntil(this.destroy$)).subscribe(function () {
            return _this.onRowIslandChange();
        });
        _super.prototype.ngAfterContentInit.call(this);
    };
    /** @hidden */
    IgxHierarchicalGridComponent.prototype.featureColumnsWidth = function () {
        return _super.prototype.featureColumnsWidth.call(this, this.headerHierarchyExpander);
    };
    /**
    * @hidden
    */
    IgxHierarchicalGridComponent.prototype.onRowIslandChange = function () {
        if (this.parent) {
            this.childLayoutKeys = this.parentIsland.children.filter(function (item) { return !item._destroyed; }).map(function (item) { return item.key; });
        }
        else {
            this.childLayoutKeys = this.childLayoutList.filter(function (item) { return !item._destroyed; }).map(function (item) { return item.key; });
        }
        if (!this.cdr.destroyed) {
            this.cdr.detectChanges();
        }
    };
    IgxHierarchicalGridComponent.prototype.onColumnsChanged = function (change) {
        var _this = this;
        this.updateColumnList();
        var cols = change.filter(function (c) { return c.gridAPI.grid === _this; });
        if (cols.length > 0 || this.autoGenerate) {
            this.columnList.reset(cols);
            _super.prototype.onColumnsChanged.call(this, this.columnList);
        }
    };
    IgxHierarchicalGridComponent.prototype.updateColumnList = function (recalcColSizes) {
        if (recalcColSizes === void 0) { recalcColSizes = true; }
        var childLayouts = this.parent ? this.childLayoutList : this.allLayoutList;
        var nestedColumns = childLayouts.map(function (layout) {
            return layout.columnList.toArray();
        });
        var colsArray = [].concat.apply([], nestedColumns);
        var colLength = this.columnList.length;
        if (colsArray.length > 0) {
            var topCols = this.columnList.filter(function (item) {
                return colsArray.indexOf(item) === -1;
            });
            this.columnList.reset(topCols);
            if (recalcColSizes && this.columnList.length !== colLength) {
                this.calculateGridSizes(false);
            }
        }
    };
    IgxHierarchicalGridComponent.prototype.ngOnDestroy = function () {
        if (!this.parent) {
            this.hgridAPI.getChildGrids(true).forEach(function (grid) {
                if (!grid.childRow.cdr.destroyed) {
                    grid.childRow.cdr.destroy();
                }
            });
        }
        if (this.parent && this.selectionService.activeElement) {
            // in case selection is in destroyed child grid, selection should be cleared.
            this._clearSeletionHighlights();
        }
        _super.prototype.ngOnDestroy.call(this);
    };
    IgxHierarchicalGridComponent.prototype._clearSeletionHighlights = function () {
        __spread([this.rootGrid], this.rootGrid.getChildGrids(true)).forEach(function (grid) {
            grid.selectionService.clear();
            grid.selectionService.activeElement = null;
            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');
            grid.highlightedRowID = null;
            grid.cdr.markForCheck();
        });
    };
    Object.defineProperty(IgxHierarchicalGridComponent.prototype, "template", {
        /**
        * @hidden
        */
        get: function () {
            if (this.filteredData && this.filteredData.length === 0) {
                return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;
            }
            if (this.isLoading && (!this.data || this.dataLength === 0)) {
                return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;
            }
            if (this.dataLength === 0) {
                return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxHierarchicalGridComponent.prototype.isRowHighlighted = function (rowData) {
        return this.highlightedRowID === rowData.rowID;
    };
    /**
     * @hidden
     */
    IgxHierarchicalGridComponent.prototype.isHierarchicalRecord = function (record) {
        return this.childLayoutList.length !== 0 && record[this.childLayoutList.first.key];
    };
    /**
     * @hidden
     */
    IgxHierarchicalGridComponent.prototype.isChildGridRecord = function (record) {
        // Can be null when there is defined layout but no child data was found
        return record.childGridsData !== undefined;
    };
    /**
     * @hidden
     */
    IgxHierarchicalGridComponent.prototype.trackChanges = function (index, rec) {
        if (rec.childGridsData !== undefined) {
            // if is child rec
            return rec.rowID;
        }
        return rec;
    };
    /**
     * @hidden
     */
    IgxHierarchicalGridComponent.prototype.getContext = function (rowData) {
        if (this.isChildGridRecord(rowData)) {
            var cachedData = this.childGridTemplates.get(rowData.rowID);
            if (cachedData) {
                var view = cachedData.view;
                var tmlpOutlet = cachedData.owner;
                return {
                    $implicit: rowData,
                    moveView: view,
                    owner: tmlpOutlet,
                    index: this.dataView.indexOf(rowData)
                };
            }
            else {
                var rowID = this.primaryKey ? rowData.rowID : this.data.indexOf(rowData.rowID);
                // child rows contain unique grids, hence should have unique templates
                return {
                    $implicit: rowData,
                    templateID: 'childRow-' + rowID,
                    index: this.dataView.indexOf(rowData)
                };
            }
        }
        else {
            return {
                $implicit: rowData,
                templateID: 'dataRow',
                index: this.dataView.indexOf(rowData)
            };
        }
    };
    Object.defineProperty(IgxHierarchicalGridComponent.prototype, "rootGrid", {
        /**
         * @hidden
        */
        get: function () {
            var currGrid = this;
            while (currGrid.parent) {
                currGrid = currGrid.parent;
            }
            return currGrid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHierarchicalGridComponent.prototype, "iconTemplate", {
        /**
         * @hidden
        */
        get: function () {
            var expanded = this.hasExpandedRecords() && this.hasExpandableChildren;
            if (!expanded && this.showExpandAll) {
                return this.headerCollapseIndicatorTemplate || this.defaultCollapsedTemplate;
            }
            else {
                return this.headerExpandIndicatorTemplate || this.defaultExpandedTemplate;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * @internal
     */
    IgxHierarchicalGridComponent.prototype.getDragGhostCustomTemplate = function () {
        if (this.parentIsland) {
            return this.parentIsland.getDragGhostCustomTemplate();
        }
        return _super.prototype.getDragGhostCustomTemplate.call(this);
    };
    /**
     * @hidden
    */
    IgxHierarchicalGridComponent.prototype.initColumns = function (collection, cb) {
        if (cb === void 0) { cb = null; }
        if (this.hasColumnLayouts) {
            // invalid configuration - hierarchical grid should not allow column layouts
            // remove column layouts
            var nonColumnLayoutColumns = this.columnList.filter(function (col) { return !col.columnLayout && !col.columnLayoutChild; });
            this.columnList.reset(nonColumnLayoutColumns);
        }
        _super.prototype.initColumns.call(this, collection, cb);
    };
    /**
     * @hidden
     * Gets the visible content height that includes header + tbody + footer.
     * For hierarchical child grid it may be scrolled and not fully visible.
     */
    IgxHierarchicalGridComponent.prototype.getVisibleContentHeight = function () {
        var height = _super.prototype.getVisibleContentHeight.call(this);
        if (this.parent) {
            var rootHeight = this.rootGrid.getVisibleContentHeight();
            var topDiff = this.nativeElement.getBoundingClientRect().top - this.rootGrid.nativeElement.getBoundingClientRect().top;
            height = rootHeight - topDiff > height ? height : rootHeight - topDiff;
        }
        return height;
    };
    /**
     * @hidden
    */
    IgxHierarchicalGridComponent.prototype.toggleAll = function () {
        var expanded = this.hasExpandedRecords() && this.hasExpandableChildren;
        if (!expanded && this.showExpandAll) {
            this.expandAll();
        }
        else {
            this.collapseAll();
        }
    };
    /**
     * @hidden
     * @internal
     */
    IgxHierarchicalGridComponent.prototype.hasExpandedRecords = function () {
        if (this.expandChildren) {
            return true;
        }
        var hasExpandedEntry = false;
        this.expansionStates.forEach(function (value, key) {
            if (value) {
                hasExpandedEntry = value;
            }
        });
        return hasExpandedEntry;
    };
    IgxHierarchicalGridComponent.prototype.getDefaultExpandState = function (record) {
        return this.expandChildren;
    };
    /**
    * @hidden
    */
    IgxHierarchicalGridComponent.prototype.isExpanded = function (record) {
        return this.gridAPI.get_row_expansion_state(record);
    };
    /**
     * @hidden
     */
    IgxHierarchicalGridComponent.prototype.viewCreatedHandler = function (args) {
        if (this.isChildGridRecord(args.context.$implicit)) {
            var key = args.context.$implicit.rowID;
            this.childGridTemplates.set(key, args);
        }
    };
    /**
     * @hidden
     */
    IgxHierarchicalGridComponent.prototype.viewMovedHandler = function (args) {
        var _this = this;
        if (this.isChildGridRecord(args.context.$implicit)) {
            // view was moved, update owner in cache
            var key = args.context.$implicit.rowID;
            var cachedData = this.childGridTemplates.get(key);
            cachedData.owner = args.owner;
            this.childLayoutList.forEach(function (layout) {
                var relatedGrid = _this.hgridAPI.getChildGridByID(layout.key, args.context.$implicit.rowID);
                if (relatedGrid && relatedGrid.updateOnRender) {
                    // Detect changes if `expandChildren` has changed when the grid wasn't visible. This is for performance reasons.
                    relatedGrid.notifyChanges(true);
                    relatedGrid.updateOnRender = false;
                }
            });
            var childGrids = this.getChildGrids(true);
            childGrids.forEach(function (grid) {
                if (grid.isPercentWidth) {
                    grid.notifyChanges(true);
                }
                grid.updateScrollPosition();
            });
        }
    };
    /**
     * @hidden
     */
    IgxHierarchicalGridComponent.prototype.updateScrollPosition = function () {
        var vScr = this.verticalScrollContainer.getScroll();
        var hScr = this.headerContainer.getScroll();
        if (vScr) {
            vScr.scrollTop = this.scrollTop;
        }
        if (hScr) {
            hScr.scrollLeft = this.scrollLeft;
        }
    };
    IgxHierarchicalGridComponent.prototype.getChildGrids = function (inDeph) {
        return this.hgridAPI.getChildGrids(inDeph);
    };
    IgxHierarchicalGridComponent.prototype.generateDataFields = function (data) {
        var _this = this;
        return _super.prototype.generateDataFields.call(this, data).filter(function (field) {
            var layoutsList = _this.parentIsland ? _this.parentIsland.children : _this.childLayoutList;
            var keys = layoutsList.map(function (item) { return item.key; });
            return keys.indexOf(field) === -1;
        });
    };
    IgxHierarchicalGridComponent.prototype.hg_verticalScrollHandler = function (event) {
        this.scrollTop = event.target.scrollTop;
    };
    IgxHierarchicalGridComponent.prototype.onContainerScroll = function () {
        this.hideOverlays();
    };
    IgxHierarchicalGridComponent.prototype.hg_horizontalScrollHandler = function (event) {
        this.scrollLeft = event.target.scrollLeft;
    };
    var IgxHierarchicalGridComponent_1;
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], IgxHierarchicalGridComponent.prototype, "id", null);
    __decorate([
        Input()
    ], IgxHierarchicalGridComponent.prototype, "data", null);
    __decorate([
        Input(),
        DeprecateProperty("'hierarchicalState' property is deprecated. Use 'expansionStates' instead.")
    ], IgxHierarchicalGridComponent.prototype, "hierarchicalState", null);
    __decorate([
        Output(),
        DeprecateProperty("'hierarchicalStateChange' @Output property is deprecated. Use 'expansionStates' instead.")
    ], IgxHierarchicalGridComponent.prototype, "hierarchicalStateChange", void 0);
    __decorate([
        Input()
    ], IgxHierarchicalGridComponent.prototype, "expandChildren", null);
    __decorate([
        ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false })
    ], IgxHierarchicalGridComponent.prototype, "childLayoutList", void 0);
    __decorate([
        ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: true })
    ], IgxHierarchicalGridComponent.prototype, "allLayoutList", void 0);
    __decorate([
        ViewChild('hierarchical_record_template', { read: TemplateRef, static: true })
    ], IgxHierarchicalGridComponent.prototype, "hierarchicalRecordTemplate", void 0);
    __decorate([
        ViewChild('child_record_template', { read: TemplateRef, static: true })
    ], IgxHierarchicalGridComponent.prototype, "childTemplate", void 0);
    __decorate([
        ViewChild('headerHierarchyExpander', { read: ElementRef, static: true })
    ], IgxHierarchicalGridComponent.prototype, "headerHierarchyExpander", void 0);
    __decorate([
        ViewChildren(IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective })
    ], IgxHierarchicalGridComponent.prototype, "templateOutlets", void 0);
    __decorate([
        ViewChildren(IgxChildGridRowComponent, { read: IgxChildGridRowComponent })
    ], IgxHierarchicalGridComponent.prototype, "hierarchicalRows", void 0);
    IgxHierarchicalGridComponent = IgxHierarchicalGridComponent_1 = __decorate([
        Component({
            changeDetection: ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            selector: 'igx-hierarchical-grid',
            template: "<igx-grid-toolbar role=\"rowgroup\" [style.max-width.px]='outerWidth' [style.flex-basis.px]=\"outerWidth\" *ngIf=\"showToolbar\" [gridID]=\"id\"\n    [displayDensity]=\"displayDensity\" #toolbar>\n</igx-grid-toolbar>\n\n<div class=\"igx-grid__thead\">\n    <div class=\"igx-grid__thead-wrapper\" role=\"rowgroup\" [style.width.px]='calcWidth' #theadRow>\n        <div class=\"igx-grid__tr\" role=\"row\" [style.width.px]='calcWidth'>\n            <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length <= 0\"\n                [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\" id=\"left\"\n                class=\"igx-grid__scroll-on-drag-left\"></span>\n            <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length > 0\"\n                [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\" id=\"left\"\n                class=\"igx-grid__scroll-on-drag-pinned\" [style.left.px]=\"pinnedWidth\"></span>\n            <div #headerHierarchyExpander (click)=\"toggleAll()\" [hidden]='!hasExpandableChildren || !hasVisibleColumns' [ngClass]=\"{\n                'igx-grid__hierarchical-expander igx-grid__hierarchical-expander--header': hasExpandableChildren,\n                'igx-grid__hierarchical-expander--push': filteringService.isFilterRowVisible,\n                'igx-grid__hierarchical-expander--no-border': isRowSelectable || rowDraggable\n            }\">\n                <ng-container *ngTemplateOutlet=\"iconTemplate; context: { $implicit: this }\"></ng-container>\n            </div>\n            <ng-container *ngIf=\"rowDraggable\">\n                <div class=\"igx-grid__drag-indicator\" [ngClass]=\"{\n                        'igx-grid__drag-indicator--header': !isRowSelectable\n                    }\" #headerDragContainer>\n                    <div style=\"visibility: hidden;\">\n                        <ng-container\n                            *ngTemplateOutlet=\"this.dragIndicatorIconTemplate ? this.dragIndicatorIconTemplate : this.dragIndicatorIconBase\">\n                        </ng-container>\n                    </div>\n                </div>\n            </ng-container>\n            <ng-container *ngIf=\"showRowSelectors\">\n                <div class=\"igx-grid__cbx-selection\" (click)=\"onHeaderSelectorClick($event)\" #headerSelectorContainer [ngClass]=\"{\n                        'igx-grid__cbx-selection--push': filteringService.isFilterRowVisible\n                    }\">\n                    <ng-template #headSelector\n                        *ngTemplateOutlet=\"\n                        this.headSelectorTemplate ? this.headSelectorTemplate : headSelectorBaseTemplate;\n                        context: { $implicit: {\n                                        selectedCount: this.selectionService.filteredSelectedRowIds.length,\n                                        totalCount: this.totalRowsCountAfterFilter,\n                                        selectAll: selectAllRows.bind(this),\n                                        deselectAll: deselectAllRows.bind(this) }}\">\n                    </ng-template>\n                </div>\n            </ng-container>\n            <ng-container *ngIf=\"pinnedColumns.length > 0\">\n                <ng-template ngFor let-col [ngForOf]=\"pinnedColumns | igxTopLevel\">\n                    <igx-grid-header-group [column]=\"col\" [gridID]=\"id\" [style.min-width]=\"getHeaderGroupWidth(col)\"\n                        [style.flex-basis]=\"getHeaderGroupWidth(col)\"></igx-grid-header-group>\n                </ng-template>\n            </ng-container>\n            <ng-template igxGridFor let-col [igxGridForOf]=\"unpinnedColumns | igxTopLevel\"\n                [igxForScrollOrientation]=\"'horizontal'\" [igxForScrollContainer]=\"parentVirtDir\"\n                [igxForContainerSize]='unpinnedWidth' [igxForTrackBy]='trackColumnChanges'\n                [igxForSizePropName]='\"calcPixelWidth\"' #hContainer>\n                <igx-grid-header-group [column]=\"col\" [gridID]=\"id\" [style.min-width]=\"getHeaderGroupWidth(col)\"\n                    [style.flex-basis]=\"getHeaderGroupWidth(col)\"></igx-grid-header-group>\n            </ng-template>\n        </div>\n        <igx-grid-filtering-row #filteringRow [style.width.px]='calcWidth' *ngIf=\"filteringService.isFilterRowVisible\"\n            [column]=\"filteringService.filteredColumn\"></igx-grid-filtering-row>\n    </div>\n    <div [style.display]=\"shouldOverlayLoading ? 'flex' : 'none'\" #loadingOverlay>\n        <igx-circular-bar [indeterminate]=\"true\">\n        </igx-circular-bar>\n    </div>\n    <span *ngIf=\"hasMovableColumns && draggedColumn\" [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\"\n        id=\"right\" class=\"igx-grid__scroll-on-drag-right\"></span>\n    <div class=\"igx-grid__thead-thumb\" [hidden]='!hasVerticalSroll()' [style.width.px]=\"scrollWidth\"></div>\n</div>\n\n<div igxGridBody (keydown.control.c)=\"copyHandlerIE()\" (copy)=\"copyHandler($event)\" class=\"igx-grid__tbody\">\n    <div class=\"igx-grid__tbody-content\" (onDragStop)=\"selectionService.dragMode = $event\"\n        (onDragScroll)=\"dragScroll($event)\" [igxGridDragSelect]=\"selectionService.dragMode\" role=\"rowgroup\"\n        [style.height.px]='calcHeight' [style.width.px]='calcWidth' #tbody (scroll)='scrollHandler($event)'>\n        <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length <= 0\"\n            [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\" id=\"left\"\n            class=\"igx-grid__scroll-on-drag-left\"></span>\n        <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length > 0\"\n            [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\" id=\"left\"\n            class=\"igx-grid__scroll-on-drag-pinned\" [style.left.px]=\"pinnedWidth\"></span>\n        <ng-template igxGridFor let-rowData [igxGridForOf]=\"data\n        | gridTransaction:id:pipeTrigger\n        | visibleColumns:hasVisibleColumns\n        | gridFiltering:filteringExpressionsTree:filterStrategy:advancedFilteringExpressionsTree:id:pipeTrigger:filteringPipeTrigger\n        | gridSort:sortingExpressions:sortStrategy:id:pipeTrigger\n        | gridHierarchicalPaging:page:perPage:id:pipeTrigger\n        | gridHierarchical:expansionStates:id:primaryKey:childLayoutKeys:pipeTrigger\" let-rowIndex=\"index\"\n            [igxForScrollOrientation]=\"'vertical'\" [igxForScrollContainer]='verticalScroll'\n            [igxForContainerSize]='calcHeight' [igxForItemSize]=\"renderedRowHeight\" [igxForTrackBy]='trackChanges'\n            #verticalScrollContainer (onChunkPreload)=\"dataLoading($event)\">\n            <ng-template #hierarchical_record_template>\n                <igx-hierarchical-grid-row [gridID]=\"id\" [index]=\"rowIndex\" [rowData]=\"rowData\" #row>\n                </igx-hierarchical-grid-row>\n            </ng-template>\n            <ng-template #child_record_template let-rowIndex=\"index\" let-rowData>\n                <div style=\"overflow:auto;width: 100%;\" [attr.data-rowindex]='rowIndex' (scroll)='onContainerScroll()'\n                    [ngClass]=\"{\n                    'igx-grid__tr-container': true,\n                    'igx-grid__tr--highlighted':isRowHighlighted(rowData)\n                }\">\n                    <igx-child-grid-row *ngFor=\"let layout of childLayoutList\" [parentGridID]=\"id\" [index]=\"rowIndex\"\n                        [rowData]=\"rowData\" [layout]='layout' #row>\n                    </igx-child-grid-row>\n                </div>\n            </ng-template>\n            <ng-template\n            [igxTemplateOutlet]='(isHierarchicalRecord(rowData) ? hierarchical_record_template : (isChildGridRecord(rowData) && isExpanded(rowData) ? child_record_template : hierarchical_record_template))'\n            [igxTemplateOutletContext]='getContext(rowData)' (onViewCreated)='viewCreatedHandler($event)'\n            (onViewMoved)='viewMovedHandler($event)' (onCachedViewLoaded)='cachedViewLoaded($event)'\n            (onBeforeViewDetach)='viewDetachHandler($event)'></ng-template>\n            <!-- <ng-container *igxTemplateOutlet=\"(isHierarchicalRecord(rowData) ? hierarchical_record_template : (isChildGridRecord(rowData) && isExpanded(rowData) ? child_record_template : hierarchical_record_template)); context: getContext(rowData)\"></ng-container> -->\n        </ng-template>\n        <ng-container *ngTemplateOutlet=\"template\"></ng-container>\n        <span *ngIf=\"hasMovableColumns && draggedColumn\" [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\"\n            id=\"right\" class=\"igx-grid__scroll-on-drag-right\"></span>\n        <div class=\"igx-grid__row-editing-outlet\" igxOverlayOutlet #igxRowEditingOverlayOutlet></div>\n    </div>\n    <span *ngIf=\"hasMovableColumns && draggedColumn\" [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\"\n        id=\"right\" class=\"igx-grid__scroll-on-drag-right\"></span>\n    <div [hidden]='!hasVerticalSroll()' class=\"igx-grid__tbody-scrollbar\" [style.width.px]=\"scrollWidth\"\n        [style.height.px]='calcHeight'>\n        <ng-template igxGridFor [igxGridForOf]='[]' #verticalScrollHolder></ng-template>\n    </div>\n</div>\n\n\n<div class=\"igx-grid__tfoot\" role=\"rowgroup\" [style.height.px]='summariesHeight' #tfoot>\n    <igx-grid-summary-row [style.width.px]='calcWidth' [style.height.px]='summariesHeight'\n        *ngIf=\"hasSummarizedColumns && rootSummariesEnabled\" [gridID]=\"id\"\n        [summaries]=\"id | igxGridSummaryDataPipe:summaryService.retriggerRootPipe\" [index]=\"0\"\n        class=\"igx-grid__summaries\" #summaryRow>\n    </igx-grid-summary-row>\n    <div class=\"igx-grid__tfoot-thumb\" [hidden]='!hasVerticalSroll()' [style.height.px]='summariesHeight'\n        [style.width.px]=\"scrollWidth\"></div>\n</div>\n\n<div class=\"igx-grid__scroll\" [style.height]=\"'18px'\" #scr [hidden]=\"isHorizontalScrollHidden\">\n    <div class=\"igx-grid__scroll-start\" [style.width.px]='pinnedWidth' [hidden]=\"pinnedWidth === 0\"></div>\n    <div class=\"igx-grid__scroll-main\" [style.width.px]='unpinnedWidth'>\n        <ng-template igxGridFor [igxGridForOf]='[]' #scrollContainer>\n        </ng-template>\n    </div>\n</div>\n\n<div class=\"igx-grid__footer\" #footer>\n    <ng-content select=\"igx-grid-footer\"></ng-content>\n    <ng-container *ngIf=\"paging && totalRecords\">\n        <ng-container\n            *ngTemplateOutlet=\"paginationTemplate ? paginationTemplate : defaultPaginator; context: {$implicit: this}\">\n        </ng-container>\n    </ng-container>\n</div>\n\n<ng-template #defaultPaginator>\n    <igx-paginator [displayDensity]=\"displayDensity\" [(page)]=\"page\" [totalRecords]=\"totalRecords\" [(perPage)]=\"perPage\">\n    </igx-paginator>\n</ng-template>\n\n<ng-template #emptyFilteredGrid>\n    <span class=\"igx-grid__tbody-message\">{{emptyFilteredGridMessage}}</span>\n</ng-template>\n\n<ng-template #defaultEmptyGrid>\n    <span class=\"igx-grid__tbody-message\">{{emptyGridMessage}}</span>\n</ng-template>\n\n<ng-template #defaultLoadingGrid>\n    <div class=\"igx-grid__loading\">\n        <igx-circular-bar [indeterminate]=\"true\">\n        </igx-circular-bar>\n    </div>\n</ng-template>\n\n<ng-template #defaultCollapsedTemplate>\n    <igx-icon role=\"button\" fontSet=\"material\">unfold_more</igx-icon>\n</ng-template>\n\n<ng-template #defaultExpandedTemplate>\n    <igx-icon role=\"button\" [isActive]='hasExpandedRecords() && hasExpandableChildren' fontSet=\"material\">unfold_less</igx-icon>\n</ng-template>\n\n<div *ngIf=\"rowEditable\" igxToggle>\n    <div [className]=\"bannerClass\">\n        <ng-container\n            *ngTemplateOutlet=\"rowEditContainer; context: { rowChangesCount: rowChangesCount, endEdit: endEdit.bind(this) }\">\n        </ng-container>\n    </div>\n</div>\n<ng-template #defaultRowEditText>\n    You have {{ rowChangesCount }} changes in this row\n</ng-template>\n<ng-template #defaultRowEditActions>\n    <button igxButton igxRowEditTabStop (click)=\"endEdit(false, $event)\">Cancel</button>\n    <button igxButton igxRowEditTabStop (click)=\"endEdit(true, $event)\">Done</button>\n</ng-template>\n<ng-template #defaultRowEditTemplate>\n    <div class=\"igx-banner__message\">\n        <span class=\"igx-banner__text\">\n            <ng-container\n                *ngTemplateOutlet=\"rowEditText ? rowEditText : defaultRowEditText; context: { $implicit: rowChangesCount }\">\n            </ng-container>\n        </span>\n    </div>\n    <div class=\"igx-banner__actions\">\n        <div class=\"igx-banner__row\">\n            <ng-container\n                *ngTemplateOutlet=\"rowEditActions ? rowEditActions : defaultRowEditActions; context: { $implicit: endEdit.bind(this) }\">\n            </ng-container>\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #dragIndicatorIconBase>\n    <igx-icon fontSet=\"material\">drag_indicator</igx-icon>\n</ng-template>\n\n<ng-template #headSelectorBaseTemplate igxHeadSelector let-context>\n    <div class=\"igx-grid__cbx-padding\">\n        <igx-checkbox\n            [readonly]=\"true\"\n            [checked]=\"context.selectedCount > 0 && context.totalCount === context.selectedCount\"\n            disableRipple=\"true\"\n            [ngStyle]=\"{'visibility': isMultiRowSelectionEnabled? 'visible' : 'hidden' }\"\n            [indeterminate]=\"context.selectedCount > 0 && context.selectedCount !== context.totalCount\"\n            [aria-label]=\"headSelectorBaseAriaLabel\"\n            #headerCheckbox>\n        </igx-checkbox>\n    </div>\n</ng-template>\n\n<igx-grid-column-resizer *ngIf=\"colResizingService.showResizer\"></igx-grid-column-resizer>\n<div class=\"igx-grid__loading-outlet\" #igxLoadingOverlayOutlet igxOverlayOutlet></div>\n<div class=\"igx-grid__outlet\" #igxFilteringOverlayOutlet igxOverlayOutlet (keydown)=\"gridOutletKeyboardHandler($event)\"></div>\n",
            providers: [
                IgxGridSelectionService,
                IgxGridCRUDService,
                { provide: GridBaseAPIService, useClass: IgxHierarchicalGridAPIService },
                { provide: IgxGridBaseDirective, useExisting: forwardRef(function () { return IgxHierarchicalGridComponent_1; }) },
                IgxGridSummaryService,
                IgxFilteringService,
                IgxHierarchicalGridNavigationService,
                IgxForOfSyncService,
                IgxForOfScrollSyncService,
                IgxRowIslandAPIService
            ]
        })
    ], IgxHierarchicalGridComponent);
    return IgxHierarchicalGridComponent;
}(IgxHierarchicalGridBaseDirective));
export { IgxHierarchicalGridComponent };
//# sourceMappingURL=data:application/json;base64,