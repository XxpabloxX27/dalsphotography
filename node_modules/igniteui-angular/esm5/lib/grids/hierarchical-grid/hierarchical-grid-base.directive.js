import { __decorate, __extends, __param } from "tslib";
import { ElementRef, NgZone, ChangeDetectorRef, IterableDiffers, ViewContainerRef, Inject, ComponentFactoryResolver, Optional, Input, ViewChild, TemplateRef, Directive } from '@angular/core';
import { IgxGridBaseDirective, IgxGridTransaction } from '../grid-base.directive';
import { GridBaseAPIService } from '../api.service';
import { IgxFilteringService } from '../filtering/grid-filtering.service';
import { DisplayDensityToken } from '../../core/displayDensity';
import { IgxSummaryOperand } from '../summaries/grid-summary';
import { IgxOverlayService, IgxTransactionService, Transaction, TransactionService, State } from '../../services/index';
import { DOCUMENT } from '@angular/common';
import { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';
import { IgxGridSummaryService } from '../summaries/grid-summary.service';
import { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';
import { IgxColumnResizingService } from '../resizing/resizing.service';
import { IgxColumnGroupComponent } from '../columns/column-group.component';
import { IgxColumnComponent } from '../columns/column.component';
export var IgxHierarchicalTransactionServiceFactory = {
    provide: IgxGridTransaction,
    useFactory: hierarchicalTransactionServiceFactory
};
export function hierarchicalTransactionServiceFactory() {
    return new IgxTransactionService();
}
var IgxHierarchicalGridBaseDirective = /** @class */ (function (_super) {
    __extends(IgxHierarchicalGridBaseDirective, _super);
    function IgxHierarchicalGridBaseDirective(selectionService, crudService, colResizingService, gridAPI, transactionFactory, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation, filteringService, overlayService, summaryService, _displayDensityOptions) {
        var _this = _super.call(this, selectionService, crudService, colResizingService, gridAPI, transactionFactory, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation, filteringService, overlayService, summaryService, _displayDensityOptions) || this;
        _this.selectionService = selectionService;
        _this.colResizingService = colResizingService;
        _this.transactionFactory = transactionFactory;
        _this.document = document;
        _this.overlayService = overlayService;
        _this.summaryService = summaryService;
        _this._displayDensityOptions = _displayDensityOptions;
        _this.showExpandAll = false;
        _this.hgridAPI = gridAPI;
        return _this;
    }
    Object.defineProperty(IgxHierarchicalGridBaseDirective.prototype, "maxLevelHeaderDepth", {
        /**
         * @hidden
         */
        get: function () {
            if (this._maxLevelHeaderDepth === null) {
                this._maxLevelHeaderDepth = this.columnList.reduce(function (acc, col) { return Math.max(acc, col.level); }, 0);
            }
            return this._maxLevelHeaderDepth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHierarchicalGridBaseDirective.prototype, "outlet", {
        /**
        * @hidden
        */
        get: function () {
            return this.rootGrid ? this.rootGrid.outletDirective : this.outletDirective;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxHierarchicalGridBaseDirective.prototype.createColumnsList = function (cols) {
        var _this = this;
        var columns = [];
        var topLevelCols = this.onlyTopLevel(cols);
        topLevelCols.forEach(function (col) {
            var ref = _this._createColumn(col);
            ref.changeDetectorRef.detectChanges();
            columns.push(ref.instance);
        });
        var result = flatten(columns);
        this.columnList.reset(result);
        this.columnList.notifyOnChanges();
        this.initPinning();
    };
    IgxHierarchicalGridBaseDirective.prototype._createColumn = function (col) {
        var ref;
        if (col instanceof IgxColumnGroupComponent) {
            ref = this._createColGroupComponent(col);
        }
        else {
            ref = this._createColComponent(col);
        }
        return ref;
    };
    IgxHierarchicalGridBaseDirective.prototype._createColGroupComponent = function (col) {
        var _this = this;
        var factoryGroup = this.resolver.resolveComponentFactory(IgxColumnGroupComponent);
        var ref = this.viewRef.createComponent(factoryGroup, null, this.viewRef.injector);
        ref.changeDetectorRef.detectChanges();
        factoryGroup.inputs.forEach(function (input) {
            var propName = input.propName;
            ref.instance[propName] = col[propName];
        });
        if (col.children.length > 0) {
            var newChildren_1 = [];
            col.children.forEach(function (child) {
                var newCol = _this._createColumn(child).instance;
                newCol.parent = ref.instance;
                newChildren_1.push(newCol);
            });
            ref.instance.children.reset(newChildren_1);
            ref.instance.children.notifyOnChanges();
        }
        return ref;
    };
    IgxHierarchicalGridBaseDirective.prototype._createColComponent = function (col) {
        var factoryColumn = this.resolver.resolveComponentFactory(IgxColumnComponent);
        var ref = this.viewRef.createComponent(factoryColumn, null, this.viewRef.injector);
        factoryColumn.inputs.forEach(function (input) {
            var propName = input.propName;
            if (!(col[propName] instanceof IgxSummaryOperand)) {
                ref.instance[propName] = col[propName];
            }
            else {
                ref.instance[propName] = col[propName].constructor;
            }
        });
        return ref;
    };
    IgxHierarchicalGridBaseDirective.prototype.getGridsForIsland = function (rowIslandID) {
        return this.hgridAPI.getChildGridsForRowIsland(rowIslandID);
    };
    IgxHierarchicalGridBaseDirective.prototype.getChildGrid = function (path) {
        if (!path) {
            return;
        }
        return this.hgridAPI.getChildGrid(path);
    };
    IgxHierarchicalGridBaseDirective.ctorParameters = function () { return [
        { type: IgxGridSelectionService },
        { type: IgxGridCRUDService },
        { type: IgxColumnResizingService },
        { type: GridBaseAPIService },
        { type: undefined, decorators: [{ type: Inject, args: [IgxGridTransaction,] }] },
        { type: ElementRef },
        { type: NgZone },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: ChangeDetectorRef },
        { type: ComponentFactoryResolver },
        { type: IterableDiffers },
        { type: ViewContainerRef },
        { type: IgxHierarchicalGridNavigationService },
        { type: IgxFilteringService },
        { type: IgxOverlayService, decorators: [{ type: Inject, args: [IgxOverlayService,] }] },
        { type: IgxGridSummaryService },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
    ]; };
    __decorate([
        Input()
    ], IgxHierarchicalGridBaseDirective.prototype, "expandChildren", void 0);
    __decorate([
        Input()
    ], IgxHierarchicalGridBaseDirective.prototype, "hasChildrenKey", void 0);
    __decorate([
        Input()
    ], IgxHierarchicalGridBaseDirective.prototype, "showExpandAll", void 0);
    __decorate([
        ViewChild('dragIndicatorIconBase', { read: TemplateRef, static: true })
    ], IgxHierarchicalGridBaseDirective.prototype, "dragIndicatorIconBase", void 0);
    IgxHierarchicalGridBaseDirective = __decorate([
        Directive({
            selector: '[igxHierarchicalGridBase]'
        }),
        __param(4, Inject(IgxGridTransaction)),
        __param(7, Inject(DOCUMENT)),
        __param(14, Inject(IgxOverlayService)),
        __param(16, Optional()), __param(16, Inject(DisplayDensityToken))
    ], IgxHierarchicalGridBaseDirective);
    return IgxHierarchicalGridBaseDirective;
}(IgxGridBaseDirective));
export { IgxHierarchicalGridBaseDirective };
function flatten(arr) {
    var result = [];
    arr.forEach(function (el) {
        result.push(el);
        if (el.children) {
            result = result.concat(flatten(el.children.toArray()));
        }
    });
    return result;
}
//# sourceMappingURL=data:application/json;base64,