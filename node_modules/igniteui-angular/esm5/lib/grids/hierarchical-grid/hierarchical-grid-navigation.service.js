import { __decorate, __extends } from "tslib";
import { IgxGridNavigationService } from '../grid-navigation.service';
import { first } from 'rxjs/operators';
import { isIE } from '../../core/utils';
import { FilterMode } from '../common/enums';
import { Injectable } from '@angular/core';
var IgxHierarchicalGridNavigationService = /** @class */ (function (_super) {
    __extends(IgxHierarchicalGridNavigationService, _super);
    function IgxHierarchicalGridNavigationService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IgxHierarchicalGridNavigationService.prototype.getCellSelector = function (visibleIndex, isSummary) {
        if (isSummary === void 0) { isSummary = false; }
        return isSummary ? 'igx-grid-summary-cell' : 'igx-hierarchical-grid-cell';
    };
    IgxHierarchicalGridNavigationService.prototype.getRowSelector = function () {
        return 'igx-hierarchical-grid-row';
    };
    IgxHierarchicalGridNavigationService.prototype.getRowByIndex = function (index) {
        var row = _super.prototype.getRowByIndex.call(this, index);
        return row;
    };
    IgxHierarchicalGridNavigationService.prototype.getChildContainer = function (grid) {
        var currGrid = grid || this.grid;
        return currGrid.nativeElement.parentNode.parentNode.parentNode;
    };
    IgxHierarchicalGridNavigationService.prototype.getChildGridRowContainer = function (grid) {
        var currGrid = grid || this.grid;
        return currGrid.nativeElement.parentNode.parentNode;
    };
    IgxHierarchicalGridNavigationService.prototype.getChildGrid = function (childGridID, grid) {
        var cgrid = grid.hgridAPI.getChildGrids(true).filter(function (g) { return g.id === childGridID; })[0];
        return cgrid;
    };
    IgxHierarchicalGridNavigationService.prototype._isScrolledToBottom = function (grid) {
        var scrollTop = grid.verticalScrollContainer.scrollPosition;
        var scrollHeight = grid.verticalScrollContainer.getScroll().scrollHeight;
        return scrollHeight === 0 || Math.round(scrollTop + grid.verticalScrollContainer.igxForContainerSize) === scrollHeight;
    };
    IgxHierarchicalGridNavigationService.prototype.getIsChildAtIndex = function (index) {
        return this.grid.isChildGridRecord(this.grid.dataView[index]);
    };
    IgxHierarchicalGridNavigationService.prototype.getCellElementByVisibleIndex = function (rowIndex, visibleColumnIndex, isSummary) {
        if (isSummary === void 0) { isSummary = false; }
        var cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);
        if (isSummary) {
            var summaryRow = this.grid.summariesRowList.toArray()[0].nativeElement;
            return summaryRow.querySelector(cellSelector + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
        }
        var row = this.getRowByIndex(rowIndex);
        return row.querySelector(cellSelector + "[data-rowindex=\"" + rowIndex + "\"][data-visibleIndex=\"" + visibleColumnIndex + "\"]");
    };
    IgxHierarchicalGridNavigationService.prototype.navigateUp = function (rowElement, selectedNode) {
        var _this = this;
        if (selectedNode.isSummaryRow) {
            return;
        }
        var prevElem = rowElement.previousElementSibling;
        var visibleColumnIndex = selectedNode.column;
        var currentRowIndex = selectedNode.row;
        if (prevElem) {
            var nodeName = prevElem.children[0].nodeName.toLowerCase();
            var isElemChildGrid = nodeName.toLowerCase() === 'igx-child-grid-row';
            if (isElemChildGrid) {
                this.focusPrevChild(prevElem, visibleColumnIndex, this.grid);
            }
            else {
                if (this.grid.parent !== null) {
                    // currently navigating in child grid
                    this._navigateUpInChild(rowElement, currentRowIndex, visibleColumnIndex);
                }
                else {
                    _super.prototype.navigateUp.call(this, rowElement, selectedNode);
                }
            }
        }
        else if (currentRowIndex !== 0) {
            // handle scenario when prev item is child grid but is not yet in view
            var isPrevChildGrid = this.getIsChildAtIndex(currentRowIndex - 1);
            if (!isPrevChildGrid) {
                _super.prototype.navigateUp.call(this, rowElement, selectedNode);
            }
            else {
                this.scrollGrid(this.grid, -rowElement.offsetHeight, function () {
                    rowElement = _this.getRowByIndex(currentRowIndex);
                    _this.navigateUp(rowElement, selectedNode);
                });
            }
        }
        else if (this.grid.parent !== null &&
            currentRowIndex === 0) {
            // move to prev row in sibling layout or parent
            this.focusPrev(visibleColumnIndex);
        }
    };
    IgxHierarchicalGridNavigationService.prototype.navigateDown = function (rowElement, selectedNode) {
        if (selectedNode.isSummaryRow) {
            return;
        }
        var nextElem = rowElement.nextElementSibling;
        var visibleColumnIndex = selectedNode.column;
        var currentRowIndex = selectedNode.row;
        if (nextElem) {
            // next elem is in DOM
            var nodeName = nextElem.children[0].nodeName.toLowerCase();
            var isNextElemChildGrid = nodeName.toLowerCase() === 'igx-child-grid-row';
            if (isNextElemChildGrid) {
                this.focusNextChild(nextElem, visibleColumnIndex, this.grid);
            }
            else {
                if (this.grid.parent !== null) {
                    // currently navigating in child grid
                    this._navigateDownInChild(rowElement, currentRowIndex, visibleColumnIndex);
                }
                else {
                    _super.prototype.navigateDown.call(this, rowElement, selectedNode);
                }
            }
        }
        else if (currentRowIndex !== this.grid.dataView.length - 1) {
            // scroll next in view
            _super.prototype.navigateDown.call(this, rowElement, selectedNode);
        }
        else if (this.grid.parent !== null &&
            currentRowIndex === this.grid.dataView.length - 1) {
            // move to next row in sibling layout or in parent
            this.focusNext(visibleColumnIndex);
        }
    };
    IgxHierarchicalGridNavigationService.prototype.navigateTop = function (visibleColumnIndex) {
        var _this = this;
        if (this.grid.parent !== null) {
            // navigating in child
            var childContainer = this.grid.nativeElement.parentNode.parentNode;
            var diff = childContainer.getBoundingClientRect().top - this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top;
            var topIsVisible = diff >= 0;
            var scrollable = this.getNextScrollable(this.grid);
            if (!topIsVisible) {
                this.scrollGrid(scrollable.grid, diff, function () { return _super.prototype.navigateTop.call(_this, visibleColumnIndex); });
            }
            else {
                _super.prototype.navigateTop.call(this, visibleColumnIndex);
            }
        }
        else {
            _super.prototype.navigateTop.call(this, visibleColumnIndex);
        }
    };
    IgxHierarchicalGridNavigationService.prototype.navigateBottom = function (visibleColumnIndex) {
        var _this = this;
        // handle scenario where last index is child grid
        // in that case focus cell in last data row
        var lastIndex = this.grid.dataView.length - 1;
        if (this.getIsChildAtIndex(lastIndex)) {
            var targetIndex_1 = lastIndex - 1;
            var scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex_1, true);
            var verticalScrollTop = this.grid.verticalScrollContainer.scrollPosition;
            var cellSelector_1 = this.getCellSelector(visibleColumnIndex);
            if (verticalScrollTop === scrTopPosition) {
                var cells = this.getRowByIndex(targetIndex_1).querySelectorAll(cellSelector_1 + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
                cells[cells.length - 1].focus();
            }
            else {
                this.scrollGrid(this.grid, scrTopPosition - verticalScrollTop, function () {
                    var cells = _this.getRowByIndex(targetIndex_1).querySelectorAll(cellSelector_1 + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
                    if (cells.length > 0) {
                        cells[cells.length - 1].focus();
                    }
                });
            }
        }
        else if (this.grid.parent !== null) {
            var childContainer = this.grid.nativeElement.parentNode.parentNode;
            var diff = childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;
            var endIsVisible = diff < 0;
            var scrollable = this.getNextScrollableDown(this.grid);
            if (!endIsVisible) {
                this.scrollGrid(scrollable.grid, diff, function () { return _super.prototype.navigateBottom.call(_this, visibleColumnIndex); });
            }
            else {
                _super.prototype.navigateBottom.call(this, visibleColumnIndex);
            }
        }
        else {
            _super.prototype.navigateBottom.call(this, visibleColumnIndex);
        }
    };
    IgxHierarchicalGridNavigationService.prototype.goToLastCell = function () {
        var _this = this;
        // handle scenario where last index is child grid
        // in that case focus last cell in last data row
        var lastIndex = this.grid.dataView.length - 1;
        if (this.getIsChildAtIndex(lastIndex)) {
            var targetIndex_2 = lastIndex - 1;
            var scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex_2, true);
            var verticalScrollTop = this.grid.verticalScrollContainer.scrollPosition;
            if (verticalScrollTop === scrTopPosition) {
                this.onKeydownEnd(targetIndex_2);
            }
            else {
                this.scrollGrid(this.grid, scrTopPosition - verticalScrollTop, function () {
                    _this.onKeydownEnd(targetIndex_2);
                });
            }
        }
        else {
            _super.prototype.goToLastCell.call(this);
        }
    };
    IgxHierarchicalGridNavigationService.prototype.onKeydownEnd = function (rowIndex, isSummary) {
        var _this = this;
        if (isSummary === void 0) { isSummary = false; }
        if (this.grid.parent && !isSummary) {
            // handle scenario where last child row might not be in view
            // parent should scroll to child grid end
            var childContainer = this.grid.nativeElement.parentNode.parentNode;
            var diffBottom = childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;
            var row = this.grid.getRowByIndex(rowIndex).element.nativeElement;
            var rowBottom = row.getBoundingClientRect().bottom;
            var rowIsVisible = rowBottom <= this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;
            var gridTop = this._getMaxTop(this.grid);
            var diffTop = row.getBoundingClientRect().bottom -
                row.offsetHeight - gridTop;
            var endIsVisible = diffBottom <= 0;
            var topVisible = diffTop >= 0;
            if (!endIsVisible && !rowIsVisible) {
                this.scrollGrid(this.grid.parent, diffBottom, function () { return _super.prototype.onKeydownEnd.call(_this, rowIndex); });
            }
            else if (!topVisible) {
                var scrGrid = this.grid.verticalScrollContainer.scrollPosition !== 0 ? this.grid :
                    this.getNextScrollable(this.grid).grid;
                var topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >
                    this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : this.grid.rootGrid;
                this.scrollGrid(topGrid, diffTop, function () { return _super.prototype.onKeydownEnd.call(_this, rowIndex); });
            }
            else {
                _super.prototype.onKeydownEnd.call(this, rowIndex, isSummary);
            }
        }
        else {
            _super.prototype.onKeydownEnd.call(this, rowIndex, isSummary);
        }
    };
    IgxHierarchicalGridNavigationService.prototype.goToFirstCell = function () {
        var _this = this;
        var verticalScroll = this.grid.verticalScrollContainer.getScroll();
        var horizontalScroll = this.grid.dataRowList.first.virtDirRow.getScroll();
        if (verticalScroll.scrollTop === 0 && this.grid.parent) {
            // scroll parent so that current child is in view
            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {
                this.navigateTop(0);
            }
            else {
                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);
                this.grid.parentVirtDir.onChunkLoad
                    .pipe(first())
                    .subscribe(function () {
                    _this.navigateTop(0);
                });
            }
        }
        else {
            _super.prototype.goToFirstCell.call(this);
        }
    };
    IgxHierarchicalGridNavigationService.prototype.performTab = function (currentRowEl, selectedNode) {
        var _this = this;
        if (this.grid.rowInEditMode) {
            _super.prototype.performTab.call(this, currentRowEl, selectedNode);
            return;
        }
        var rowIndex = selectedNode.row;
        var visibleColumnIndex = selectedNode.column;
        var isSummaryRow = selectedNode.isSummaryRow;
        var summaryRows = this.grid.summariesRowList.toArray();
        var hasSummaries = summaryRows.length > 0;
        var isLastDataRow = rowIndex === this.grid.dataView.length - 1;
        var nextIsDataRow = this.grid.dataRowList.find(function (row) { return row.index === rowIndex + 1; });
        var isLastColumn = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex;
        var isLastSummaryRow = hasSummaries && isSummaryRow;
        var nextIndex = rowIndex + 1;
        var virt = this.grid.verticalScrollContainer;
        var isNextChild = nextIndex <= virt.igxForOf.length - 1 &&
            this.grid.isChildGridRecord(virt.igxForOf[nextIndex]);
        if (!nextIsDataRow && !(isLastDataRow && hasSummaries) && isLastColumn && !isSummaryRow) {
            // navigating in child, next is not summary
            var childContainer = this.getChildGridRowContainer();
            var nextIsSiblingChild = this.grid.parent ? !!childContainer.nextElementSibling : false;
            if (nextIsSiblingChild) {
                this.focusNextChildDOMElem(childContainer, this.grid.parent);
            }
            else if (isNextChild) {
                var isInView = virt.state.startIndex + virt.state.chunkSize > nextIndex;
                if (!isInView) {
                    this.scrollGrid(this.grid, 'next', function () {
                        _this.focusNextChildDOMElem(currentRowEl, _this.grid);
                    });
                }
                else {
                    this.focusNextChildDOMElem(currentRowEl, this.grid);
                }
            }
            else if (this.grid.parent && this.grid.parent.summariesRowList.length > 0) {
                this._navigateToNextParentRow(currentRowEl);
            }
            else {
                this.navigateDown(currentRowEl, { row: rowIndex, column: 0 });
            }
        }
        else if (isLastSummaryRow && isLastColumn && this.grid.parent) {
            this._navigateToNextParentRow(currentRowEl);
        }
        else if (isLastDataRow && hasSummaries && isLastColumn && this.grid.parent) {
            // navigating in child rows, next is child grid's summary row
            this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid.parent, true);
        }
        else {
            _super.prototype.performTab.call(this, currentRowEl, selectedNode);
        }
    };
    IgxHierarchicalGridNavigationService.prototype._navigateToNextParentRow = function (currentRowEl) {
        // next is parent summary or next parent row
        var parent = this.grid.parent;
        var parentHasSummary = parent.summariesRowList.length > 0;
        var parentRowIndex = parseInt(this.getClosestElemByTag(currentRowEl, 'igx-child-grid-row').parentNode.getAttribute('data-rowindex'), 10);
        var isLastRowInParent = parent.dataView.length - 1 === parentRowIndex;
        // check if next is sibling
        var childRowContainer = this.getChildGridRowContainer(this.grid);
        var nextIsSiblingChild = !!childRowContainer.nextElementSibling;
        if (isLastRowInParent && parentHasSummary && !nextIsSiblingChild) {
            // next is parent summary
            var parentSummary = parent.summariesRowList.first.nativeElement;
            parent.navigation.focusNextRow(parentSummary, 0, parent, true);
        }
        else {
            // next is sibling or parent
            this.focusNext(0);
        }
    };
    IgxHierarchicalGridNavigationService.prototype.focusNextChildDOMElem = function (currentRowEl, grid) {
        var gridElem = currentRowEl.nextElementSibling.querySelector('igx-hierarchical-grid');
        var childGridID = gridElem.getAttribute('id');
        var childGrid = this.getChildGrid(childGridID, grid);
        if (childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {
            childGrid.navigation.moveFocusToFilterCell(true);
            return;
        }
        this.focusNextChild(currentRowEl.nextElementSibling, 0, grid);
    };
    IgxHierarchicalGridNavigationService.prototype.navigatePrevFilterCell = function (column, eventArgs) {
        if (column.visibleIndex === 0 && this.grid.parent) {
            eventArgs.preventDefault();
            var targetGrid = this.grid.parent;
            var prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;
            if (prevSiblingChild) {
                var gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];
                targetGrid = this.getChildGrid(gridElem.getAttribute('id'), this.grid.parent);
            }
            this.focusPrev(targetGrid.unpinnedColumns[targetGrid.unpinnedColumns.length - 1].visibleIndex);
        }
        else {
            _super.prototype.navigatePrevFilterCell.call(this, column, eventArgs);
        }
    };
    IgxHierarchicalGridNavigationService.prototype.navigateNextFilterCell = function (column, eventArgs) {
        var cols = this.grid.filteringService.unpinnedFilterableColumns;
        var nextFilterableIndex = cols.indexOf(column) + 1;
        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {
            // next is not filter cell
            var dataRows = this.grid.rowList.toArray();
            var hasRows = dataRows.length !== 0;
            var summaryRows = this.grid.summariesRowList.toArray();
            var hasSummaries = summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0;
            if (hasRows) {
                this.focusNextRow(dataRows[0].nativeElement, 0, this.grid, false);
            }
            else if (hasSummaries) {
                this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid, true);
            }
            else {
                this.focusNext(0);
            }
            eventArgs.preventDefault();
        }
        else {
            _super.prototype.navigateNextFilterCell.call(this, column, eventArgs);
        }
    };
    IgxHierarchicalGridNavigationService.prototype.performShiftTabKey = function (currentRowEl, selectedNode) {
        var _this = this;
        if (this.grid.rowInEditMode) {
            _super.prototype.performShiftTabKey.call(this, currentRowEl, selectedNode);
            return;
        }
        var rowIndex = selectedNode.row;
        var visibleColumnIndex = selectedNode.column;
        var isSummary = selectedNode.isSummaryRow;
        if (visibleColumnIndex === 0 && rowIndex === 0 && this.grid.parent && !isSummary) {
            if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {
                this.moveFocusToFilterCell();
            }
            else {
                var prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;
                if (prevSiblingChild) {
                    var gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];
                    this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);
                }
                else {
                    var selNode = {
                        row: rowIndex,
                        column: this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex
                    };
                    this.navigateUp(currentRowEl, selNode);
                }
            }
        }
        else if (visibleColumnIndex === 0 && currentRowEl.previousElementSibling &&
            currentRowEl.previousElementSibling.children[0].tagName.toLowerCase() === 'igx-child-grid-row') {
            var gridElem = this.getLastGridElem(currentRowEl.previousElementSibling);
            this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);
        }
        else if (visibleColumnIndex === 0 && isSummary) {
            var lastRowIndex_1 = this.grid.dataView.length - 1;
            if (lastRowIndex_1 === -1) {
                // no child data
                if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {
                    this.moveFocusToFilterCell();
                }
                else {
                    var selNode = {
                        row: rowIndex,
                        column: this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex
                    };
                    this.navigateUp(currentRowEl, selNode);
                }
            }
            else if (!this.getIsChildAtIndex(lastRowIndex_1)) {
                _super.prototype.goToLastCell.call(this);
            }
            else {
                var scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(lastRowIndex_1, true);
                var verticalScrollTop = this.grid.verticalScrollContainer.scrollPosition;
                if (verticalScrollTop === scrTopPosition || isNaN(scrTopPosition)) {
                    var closestChild = this.getLastGridElem(this.grid.getRowByIndex(lastRowIndex_1).nativeElement.parentElement);
                    this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);
                }
                else {
                    this.scrollGrid(this.grid, scrTopPosition - verticalScrollTop, function () {
                        var closestChild = _this.getLastGridElem(_this.grid.getRowByIndex(lastRowIndex_1).nativeElement.parentElement);
                        _this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);
                    });
                }
            }
        }
        else {
            _super.prototype.performShiftTabKey.call(this, currentRowEl, selectedNode);
        }
    };
    IgxHierarchicalGridNavigationService.prototype.getFocusableGrid = function () {
        return (isIE() && this.grid.rootGrid) ? this.grid.rootGrid : this.grid;
    };
    IgxHierarchicalGridNavigationService.prototype.getLastGridElem = function (trContainer) {
        var children = trContainer.children;
        var closestChild = children[children.length - 1].children[0].children[0];
        return closestChild;
    };
    IgxHierarchicalGridNavigationService.prototype.performShiftTabIntoChild = function (gridElem, currentRowEl, rowIndex) {
        var childGridID = gridElem.getAttribute('id');
        var childGrid = this.getChildGrid(childGridID, this.grid) || this.getChildGrid(childGridID, this.grid.parent);
        var lastIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;
        var summaryRows = childGrid.summariesRowList.toArray();
        if (summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0) {
            // move focus to last summary row cell
            var summaryRow = summaryRows[0].nativeElement;
            this.focusPrevRow(summaryRow, lastIndex, childGrid, true, true);
        }
        else if (childGrid.rowList.length === 0 &&
            childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {
            // move to filter cell
            childGrid.navigation.moveFocusToFilterCell();
        }
        else if (childGrid.rowList.length === 0) {
            // move to prev child or parent row
            var prevChild = this.getSibling(childGrid);
            if (prevChild) {
                this.performShiftTabIntoChild(prevChild, currentRowEl, rowIndex);
            }
            else {
                var selNode = {
                    row: rowIndex,
                    column: this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex
                };
                this.navigateUp(currentRowEl, selNode);
            }
        }
        else {
            // move to prev cell
            childGrid.navigation.goToLastCell();
        }
    };
    IgxHierarchicalGridNavigationService.prototype.getSibling = function (childGrid) {
        var prevChildRow = childGrid.childRow.nativeElement.previousElementSibling;
        if (prevChildRow) {
            return prevChildRow.children[0].children[0];
        }
        return null;
    };
    IgxHierarchicalGridNavigationService.prototype.focusNextChild = function (elem, visibleColumnIndex, grid) {
        var _this = this;
        var gridElem = elem.querySelector('igx-hierarchical-grid');
        var childGridID = gridElem.getAttribute('id');
        var childGrid = this.getChildGrid(childGridID, grid);
        if (childGrid.rowList.length === 0) {
            this.focusNext(visibleColumnIndex, childGrid);
            return;
        }
        // Update column index since the next child can have in general less columns than visibleColumnIndex value.
        var lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;
        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);
        if (childGrid.verticalScrollContainer.state.startIndex !== 0) {
            // scroll to top
            this.scrollGrid(childGrid, 'top', function () { return _this.focusNextRow(elem, visibleColumnIndex, childGrid); });
        }
        else {
            this.focusNextRow(elem, visibleColumnIndex, childGrid);
        }
    };
    IgxHierarchicalGridNavigationService.prototype.focusPrevChild = function (elem, visibleColumnIndex, grid) {
        var _this = this;
        var grids = [];
        var gridElems = Array.from(elem.querySelectorAll('igx-hierarchical-grid'));
        var childLevel = grid.childLayoutList.first.level;
        gridElems.forEach(function (hg) {
            var parentRow = _this.getClosestElemByTag(hg, 'igx-child-grid-row');
            if (parentRow && parseInt(parentRow.getAttribute('data-level'), 10) === childLevel) {
                grids.push(hg);
            }
        });
        var gridElem = grids[grids.length - 1];
        var childGridID = gridElem.getAttribute('id');
        var childGrid = this.getChildGrid(childGridID, grid);
        if (childGrid.rowList.length === 0) {
            this.focusPrev(visibleColumnIndex, childGrid);
            return;
        }
        // Update column index since the previous child can have in general less columns than visibleColumnIndex value.
        var lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;
        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);
        var isScrolledToBottom = this._isScrolledToBottom(childGrid);
        var lastIndex = childGrid.dataView.length - 1;
        if (!isScrolledToBottom) {
            // scroll to end
            this.scrollGrid(childGrid, 'bottom', function () { return _this.focusPrevChild(elem, visibleColumnIndex, grid); });
        }
        else {
            var lastRowInChild = childGrid.getRowByIndex(lastIndex);
            var isChildGrid = lastRowInChild.nativeElement.nodeName.toLowerCase() === 'igx-child-grid-row';
            if (isChildGrid) {
                this.focusPrevChild(lastRowInChild.nativeElement.parentNode, visibleColumnIndex, childGrid);
            }
            else {
                this.focusPrevRow(lastRowInChild.nativeElement, visibleColumnIndex, childGrid, true);
            }
        }
    };
    IgxHierarchicalGridNavigationService.prototype.focusPrev = function (visibleColumnIndex, grid) {
        var _this = this;
        var currGrid = grid || this.grid;
        var parentContainer = this.getChildContainer(currGrid);
        var childRowContainer = this.getChildGridRowContainer(currGrid);
        var prevIsSiblingChild = !!childRowContainer.previousElementSibling;
        var prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;
        if (prev) {
            if (prevIsSiblingChild) {
                this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);
            }
            else {
                this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);
            }
        }
        else {
            this.scrollGrid(currGrid.parent, 'prev', function () {
                parentContainer = _this.getChildContainer(grid);
                childRowContainer = _this.getChildGridRowContainer(grid);
                prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;
                if (prevIsSiblingChild) {
                    _this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);
                }
                else {
                    _this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);
                }
            });
        }
    };
    IgxHierarchicalGridNavigationService.prototype.getNextParentInfo = function (grid) {
        // find next parent that is not at bottom
        var currGrid = grid.parent;
        var nextElem = this.getChildContainer(grid).nextElementSibling;
        while (!nextElem && currGrid.parent !== null) {
            nextElem = this.getChildContainer(currGrid).nextElementSibling;
            currGrid = currGrid.parent;
        }
        return { grid: currGrid, nextElement: nextElem };
    };
    IgxHierarchicalGridNavigationService.prototype.getNextScrollable = function (grid) {
        var currGrid = grid.parent;
        if (!currGrid) {
            return { grid: grid, prev: null };
        }
        var nonScrollable = currGrid.verticalScrollContainer.scrollPosition === 0;
        var prev = grid;
        while (nonScrollable && currGrid.parent !== null) {
            prev = currGrid;
            currGrid = currGrid.parent;
            nonScrollable = currGrid.verticalScrollContainer.scrollPosition === 0;
        }
        return { grid: currGrid, prev: prev };
    };
    IgxHierarchicalGridNavigationService.prototype.focusNext = function (visibleColumnIndex, grid) {
        var _this = this;
        var currGrid = grid || this.grid;
        var parentInfo = this.getNextParentInfo(currGrid);
        var nextParentGrid = parentInfo.grid;
        var nextParentElem = parentInfo.nextElement;
        var childRowContainer = this.getChildGridRowContainer(currGrid);
        var nextIsSiblingChild = !!childRowContainer.nextElementSibling;
        var next = childRowContainer.nextElementSibling || nextParentElem;
        var verticalScroll = nextParentGrid.verticalScrollContainer.getScroll();
        var parentState = nextParentGrid.verticalScrollContainer.state;
        var atLastChunk = parentState.startIndex + parentState.chunkSize ===
            nextParentGrid.dataView.length;
        if (next) {
            if (nextIsSiblingChild) {
                this.focusNextChild(next, visibleColumnIndex, nextParentGrid);
            }
            else {
                this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);
            }
        }
        else if (verticalScroll.scrollTop !==
            verticalScroll.scrollHeight - nextParentGrid.verticalScrollContainer.igxForContainerSize && !atLastChunk) {
            this.scrollGrid(nextParentGrid, 'next', function () {
                nextParentElem = parentInfo.nextElement;
                childRowContainer = _this.getChildGridRowContainer();
                next = childRowContainer.nextElementSibling || nextParentElem;
                if (next && nextIsSiblingChild) {
                    _this.focusNextChild(next, visibleColumnIndex, nextParentGrid);
                }
                else if (next) {
                    _this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);
                }
            });
        }
    };
    IgxHierarchicalGridNavigationService.prototype.getNextScrollableDown = function (grid) {
        var currGrid = grid.parent;
        if (!currGrid) {
            return { grid: grid, prev: null };
        }
        var scrollTop = currGrid.verticalScrollContainer.scrollPosition;
        var scrollHeight = currGrid.verticalScrollContainer.getScroll().scrollHeight;
        var nonScrollable = scrollHeight === 0 ||
            Math.round(scrollTop + currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;
        var prev = grid;
        while (nonScrollable && currGrid.parent !== null) {
            prev = currGrid;
            currGrid = currGrid.parent;
            scrollTop = currGrid.verticalScrollContainer.scrollPosition;
            scrollHeight = currGrid.verticalScrollContainer.getScroll().scrollHeight;
            nonScrollable = scrollHeight === 0 ||
                Math.round(scrollTop + currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;
        }
        return { grid: currGrid, prev: prev };
    };
    IgxHierarchicalGridNavigationService.prototype._getMinBottom = function (grid) {
        var currGrid = grid;
        var bottom = currGrid.tbody.nativeElement.getBoundingClientRect().bottom;
        while (currGrid.parent) {
            currGrid = currGrid.parent;
            bottom = Math.min(bottom, currGrid.tbody.nativeElement.getBoundingClientRect().bottom);
        }
        return bottom;
    };
    IgxHierarchicalGridNavigationService.prototype._getMaxTop = function (grid) {
        var currGrid = grid;
        var top = currGrid.tbody.nativeElement.getBoundingClientRect().top;
        while (currGrid.parent) {
            currGrid = currGrid.parent;
            top = Math.max(top, currGrid.tbody.nativeElement.getBoundingClientRect().top);
        }
        return top;
    };
    IgxHierarchicalGridNavigationService.prototype.focusNextRow = function (elem, visibleColumnIndex, grid, isSummary) {
        var _this = this;
        var lastCellIndex = grid.unpinnedColumns[grid.unpinnedColumns.length - 1].visibleIndex;
        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);
        var cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);
        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex) || grid.rowList.length === 0) {
            var cell_1 = elem.querySelector(cellSelector + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
            var closestScrollableGrid = this.getNextScrollableDown(grid).grid;
            // const diff = cell.getBoundingClientRect().bottom - grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;
            var gridBottom = this._getMinBottom(grid);
            var diff = cell_1.getBoundingClientRect().bottom - gridBottom;
            var inView = diff <= 0;
            var scrollTop = closestScrollableGrid.verticalScrollContainer.scrollPosition;
            var scrollHeight = closestScrollableGrid.verticalScrollContainer.getScroll().scrollHeight;
            var canScroll = !(scrollHeight === 0 ||
                Math.round(scrollTop + closestScrollableGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight);
            if (!inView && canScroll) {
                this.scrollGrid(closestScrollableGrid, diff, function () { return cell_1.focus({ preventScroll: true }); });
            }
            else {
                cell_1.focus({ preventScroll: true });
            }
        }
        else {
            this.horizontalScrollGridToIndex(grid, visibleColumnIndex, function () {
                _this.focusNextRow(elem, visibleColumnIndex, grid, isSummary);
            });
        }
    };
    IgxHierarchicalGridNavigationService.prototype.getColumnUnpinnedIndex = function (visibleColumnIndex, grid) {
        var currGrid = grid || this.grid;
        var column = currGrid.unpinnedColumns.find(function (col) { return !col.columnGroup && col.visibleIndex === visibleColumnIndex; });
        return currGrid.pinnedColumns.length ? currGrid.unpinnedColumns.filter(function (c) { return !c.columnGroup; }).indexOf(column) :
            visibleColumnIndex;
    };
    IgxHierarchicalGridNavigationService.prototype.focusPrevRow = function (elem, visibleColumnIndex, grid, inChild, isSummary) {
        var _this = this;
        var lastCellIndex = grid.unpinnedColumns[grid.unpinnedColumns.length - 1].visibleIndex;
        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);
        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex)) {
            var cellSelector_2 = this.getCellSelector(visibleColumnIndex, isSummary);
            var cells = elem.querySelectorAll(cellSelector_2 + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
            var cell_2 = cells[cells.length - 1];
            var rIndex_1 = parseInt(elem.getAttribute('data-rowindex'), 10);
            var scrGrid = grid.verticalScrollContainer.scrollPosition !== 0 ? grid :
                this.getNextScrollable(grid).grid;
            var topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >
                grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : grid.rootGrid;
            var gridTop = this._getMaxTop(grid);
            var scrTop = scrGrid.verticalScrollContainer.scrollPosition;
            var diff = cell_2.getBoundingClientRect().bottom -
                cell_2.offsetHeight - gridTop;
            if (scrTop !== 0 && diff < 0 && !inChild) {
                this.scrollGrid(scrGrid, diff, function () {
                    var el = !isSummary ? grid.navigation.getRowByIndex(rIndex_1) : elem;
                    cell_2 = el.querySelectorAll(cellSelector_2 + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]")[0];
                    cell_2.focus({ preventScroll: true });
                });
            }
            else if (diff < 0 && inChild) {
                this.scrollGrid(topGrid, diff, function () {
                    cell_2.focus({ preventScroll: true });
                });
            }
            else {
                cell_2.focus({ preventScroll: true });
            }
        }
        else {
            this.horizontalScrollGridToIndex(grid, visibleColumnIndex, function () {
                _this.focusPrevRow(elem, visibleColumnIndex, grid, inChild, isSummary);
            });
        }
    };
    IgxHierarchicalGridNavigationService.prototype.horizontalScrollGridToIndex = function (grid, visibleColumnIndex, callBackFunc) {
        var unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex, grid);
        grid.parentVirtDir.onChunkLoad
            .pipe(first())
            .subscribe(callBackFunc);
        if (grid.dataRowList.length > 0) {
            grid.dataRowList.first.virtDirRow.scrollTo(unpinnedIndex);
        }
        else {
            grid.headerContainer.scrollTo(unpinnedIndex);
        }
    };
    IgxHierarchicalGridNavigationService.prototype.scrollGrid = function (grid, target, callBackFunc) {
        this.getFocusableGrid().nativeElement.focus({ preventScroll: true });
        requestAnimationFrame(function () {
            if (typeof target === 'number') {
                grid.verticalScrollContainer.addScrollTop(target);
            }
            else {
                switch (target) {
                    case 'top':
                        grid.verticalScrollContainer.scrollTo(0);
                        break;
                    case 'bottom':
                        grid.verticalScrollContainer.scrollTo(grid.dataView.length - 1);
                        break;
                    case 'next':
                        grid.verticalScrollContainer.scrollNext();
                        break;
                    case 'prev':
                        grid.verticalScrollContainer.scrollPrev();
                        break;
                }
            }
            grid.verticalScrollContainer.onChunkLoad
                .pipe(first())
                .subscribe(callBackFunc);
        });
    };
    IgxHierarchicalGridNavigationService.prototype._navigateUpInChild = function (rowElement, currentRowIndex, visibleColumnIndex) {
        var _this = this;
        var prevElem = rowElement.previousElementSibling;
        var scrollable = this.getNextScrollable(this.grid);
        var grid = scrollable.grid;
        var scrTop = grid.verticalScrollContainer.scrollPosition;
        var containerTop = scrollable.prev.nativeElement.parentNode.parentNode.parentNode.parentNode;
        var top = parseInt(containerTop.style.top, 10);
        if (scrTop !== 0 && top < 0) {
            this.scrollGrid(grid, -prevElem.offsetHeight, function () { return _super.prototype.navigateUp.call(_this, rowElement, { row: currentRowIndex, column: visibleColumnIndex }); });
        }
        else {
            _super.prototype.navigateUp.call(this, rowElement, { row: currentRowIndex, column: visibleColumnIndex });
        }
    };
    IgxHierarchicalGridNavigationService.prototype._navigateDownInChild = function (rowElement, currentRowIndex, visibleColumnIndex) {
        var _this = this;
        var nextElem = rowElement.nextElementSibling;
        var childContainer = this.grid.nativeElement.parentNode.parentNode;
        var diff = childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;
        var endIsVisible = diff < 0;
        var scrollable = this.getNextScrollableDown(this.grid);
        var grid = scrollable.grid;
        if (!endIsVisible) {
            this.scrollGrid(grid, nextElem.offsetHeight, function () { return _super.prototype.navigateDown.call(_this, rowElement, { row: currentRowIndex, column: visibleColumnIndex }); });
        }
        else {
            _super.prototype.navigateDown.call(this, rowElement, { row: currentRowIndex, column: visibleColumnIndex });
        }
    };
    IgxHierarchicalGridNavigationService.prototype.getNextRowByIndex = function (nextIndex) {
        return this.grid.dataRowList.find(function (element) { return element.index === nextIndex; }).element.nativeElement;
    };
    IgxHierarchicalGridNavigationService = __decorate([
        Injectable()
    ], IgxHierarchicalGridNavigationService);
    return IgxHierarchicalGridNavigationService;
}(IgxGridNavigationService));
export { IgxHierarchicalGridNavigationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGllcmFyY2hpY2FsLWdyaWQtbmF2aWdhdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9ncmlkcy9oaWVyYXJjaGljYWwtZ3JpZC9oaWVyYXJjaGljYWwtZ3JpZC1uYXZpZ2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXRFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV2QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDeEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTdDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0M7SUFBMEQsd0RBQXdCO0lBQWxGOztJQTB4QkEsQ0FBQztJQXZ4QmEsOERBQWUsR0FBekIsVUFBMEIsWUFBcUIsRUFBRSxTQUFpQjtRQUFqQiwwQkFBQSxFQUFBLGlCQUFpQjtRQUM5RCxPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLDRCQUE0QixDQUFDO0lBQzlFLENBQUM7SUFFUyw2REFBYyxHQUF4QjtRQUNJLE9BQU8sMkJBQTJCLENBQUM7SUFDdkMsQ0FBQztJQUVTLDREQUFhLEdBQXZCLFVBQXdCLEtBQUs7UUFDekIsSUFBTSxHQUFHLEdBQUcsaUJBQU0sYUFBYSxZQUFDLEtBQUssQ0FBUSxDQUFDO1FBQzlDLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUVPLGdFQUFpQixHQUF6QixVQUEwQixJQUFLO1FBQzNCLElBQU0sUUFBUSxHQUFHLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ25DLE9BQU8sUUFBUSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FB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QUUsZUFBZSxFQUFFLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxDQUFDLEVBQXBGLENBQW9GLENBQUMsQ0FBQztTQUNuRzthQUFNO1lBQ0gsaUJBQU0sWUFBWSxZQUFDLFVBQVUsRUFBRSxFQUFFLEdBQUcsRUFBRSxlQUFlLEVBQUUsTUFBTSxFQUFFLGtCQUFrQixFQUFFLENBQUMsQ0FBQztTQUN4RjtJQUNMLENBQUM7SUFFUyxnRUFBaUIsR0FBM0IsVUFBNEIsU0FBUztRQUNqQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFBLE9BQU8sSUFBSSxPQUFBLE9BQU8sQ0FBQyxLQUFLLEtBQUssU0FBUyxFQUEzQixDQUEyQixDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztJQUNyRyxDQUFDO0lBenhCUyxvQ0FBb0M7UUFEaEQsVUFBVSxFQUFFO09BQ0Esb0NBQW9DLENBMHhCaEQ7SUFBRCwyQ0FBQztDQUFBLEFBMXhCRCxDQUEwRCx3QkFBd0IsR0EweEJqRjtTQTF4Qlksb0NBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSWd4R3JpZE5hdmlnYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vZ3JpZC1uYXZpZ2F0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgSWd4SGllcmFyY2hpY2FsR3JpZENvbXBvbmVudCB9IGZyb20gJy4vaGllcmFyY2hpY2FsLWdyaWQuY29tcG9uZW50JztcbmltcG9ydCB7IGZpcnN0IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSVNlbGVjdGlvbk5vZGUgfSBmcm9tICcuLi9zZWxlY3Rpb24vc2VsZWN0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgaXNJRSB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbHMnO1xuaW1wb3J0IHsgRmlsdGVyTW9kZSB9IGZyb20gJy4uL2NvbW1vbi9lbnVtcyc7XG5pbXBvcnQgeyBJZ3hDb2x1bW5Db21wb25lbnQgfSBmcm9tICcuLi9jb2x1bW5zL2NvbHVtbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSWd4SGllcmFyY2hpY2FsR3JpZE5hdmlnYXRpb25TZXJ2aWNlIGV4dGVuZHMgSWd4R3JpZE5hdmlnYXRpb25TZXJ2aWNlIHtcbiAgICBwdWJsaWMgZ3JpZDogSWd4SGllcmFyY2hpY2FsR3JpZENvbXBvbmVudDtcblxuICAgIHByb3RlY3RlZCBnZXRDZWxsU2VsZWN0b3IodmlzaWJsZUluZGV4PzogbnVtYmVyLCBpc1N1bW1hcnkgPSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gaXNTdW1tYXJ5ID8gJ2lneC1ncmlkLXN1bW1hcnktY2VsbCcgOiAnaWd4LWhpZXJhcmNoaWNhbC1ncmlkLWNlbGwnO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRSb3dTZWxlY3RvcigpIHtcbiAgICAgICAgcmV0dXJuICdpZ3gtaGllcmFyY2hpY2FsLWdyaWQtcm93JztcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0Um93QnlJbmRleChpbmRleCkge1xuICAgICAgICBjb25zdCByb3cgPSBzdXBlci5nZXRSb3dCeUluZGV4KGluZGV4KSBhcyBhbnk7XG4gICAgICAgIHJldHVybiByb3c7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRDaGlsZENvbnRhaW5lcihncmlkPykge1xuICAgICAgICBjb25zdCBjdXJyR3JpZCA9IGdyaWQgfHwgdGhpcy5ncmlkO1xuICAgICAgICByZXR1cm4gY3VyckdyaWQubmF0aXZlRWxlbWVudC5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldENoaWxkR3JpZFJvd0NvbnRhaW5lcihncmlkPykge1xuICAgICAgICBjb25zdCBjdXJyR3JpZCA9IGdyaWQgfHwgdGhpcy5ncmlkO1xuICAgICAgICByZXR1cm4gY3VyckdyaWQubmF0aXZlRWxlbWVudC5wYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRDaGlsZEdyaWQoY2hpbGRHcmlkSUQsIGdyaWQpIHtcbiAgICAgICAgY29uc3QgY2dyaWQgPSBncmlkLmhncmlkQVBJLmdldENoaWxkR3JpZHModHJ1ZSkuZmlsdGVyKChnKSA9PiBnLmlkID09PSBjaGlsZEdyaWRJRClbMF07XG4gICAgICAgIHJldHVybiBjZ3JpZDtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9pc1Njcm9sbGVkVG9Cb3R0b20oZ3JpZCkge1xuICAgICAgICBjb25zdCBzY3JvbGxUb3AgPSBncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLnNjcm9sbFBvc2l0aW9uO1xuICAgICAgICBjb25zdCBzY3JvbGxIZWlnaHQgPSBncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmdldFNjcm9sbCgpLnNjcm9sbEhlaWdodDtcbiAgICAgICAgcmV0dXJuIHNjcm9sbEhlaWdodCA9PT0gMCB8fCBNYXRoLnJvdW5kKHNjcm9sbFRvcCArIGdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuaWd4Rm9yQ29udGFpbmVyU2l6ZSkgPT09IHNjcm9sbEhlaWdodDtcbiAgICB9XG4gICAgcHJpdmF0ZSBnZXRJc0NoaWxkQXRJbmRleChpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ncmlkLmlzQ2hpbGRHcmlkUmVjb3JkKHRoaXMuZ3JpZC5kYXRhVmlld1tpbmRleF0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRDZWxsRWxlbWVudEJ5VmlzaWJsZUluZGV4KHJvd0luZGV4LCB2aXNpYmxlQ29sdW1uSW5kZXgsIGlzU3VtbWFyeSA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IGNlbGxTZWxlY3RvciA9IHRoaXMuZ2V0Q2VsbFNlbGVjdG9yKHZpc2libGVDb2x1bW5JbmRleCwgaXNTdW1tYXJ5KTtcbiAgICAgICAgaWYgKGlzU3VtbWFyeSkge1xuICAgICAgICAgICAgY29uc3Qgc3VtbWFyeVJvdyA9IHRoaXMuZ3JpZC5zdW1tYXJpZXNSb3dMaXN0LnRvQXJyYXkoKVswXS5uYXRpdmVFbGVtZW50O1xuICAgICAgICAgICAgcmV0dXJuIHN1bW1hcnlSb3cucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgICBgJHtjZWxsU2VsZWN0b3J9W2RhdGEtdmlzaWJsZUluZGV4PVwiJHt2aXNpYmxlQ29sdW1uSW5kZXh9XCJdYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgcm93ID0gdGhpcy5nZXRSb3dCeUluZGV4KHJvd0luZGV4KTtcbiAgICAgICAgcmV0dXJuIHJvdy5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgYCR7Y2VsbFNlbGVjdG9yfVtkYXRhLXJvd2luZGV4PVwiJHtyb3dJbmRleH1cIl1bZGF0YS12aXNpYmxlSW5kZXg9XCIke3Zpc2libGVDb2x1bW5JbmRleH1cIl1gKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbmF2aWdhdGVVcChyb3dFbGVtZW50LCBzZWxlY3RlZE5vZGU6IElTZWxlY3Rpb25Ob2RlKSB7XG4gICAgICAgIGlmIChzZWxlY3RlZE5vZGUuaXNTdW1tYXJ5Um93KSB7IHJldHVybjsgfVxuICAgICAgICBjb25zdCBwcmV2RWxlbSA9IHJvd0VsZW1lbnQucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgICAgICAgY29uc3QgdmlzaWJsZUNvbHVtbkluZGV4ID0gc2VsZWN0ZWROb2RlLmNvbHVtbjtcbiAgICAgICAgY29uc3QgY3VycmVudFJvd0luZGV4ID0gc2VsZWN0ZWROb2RlLnJvdztcbiAgICAgICAgaWYgKHByZXZFbGVtKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlTmFtZSA9IHByZXZFbGVtLmNoaWxkcmVuWzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBjb25zdCBpc0VsZW1DaGlsZEdyaWQgPSBub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaWd4LWNoaWxkLWdyaWQtcm93JztcbiAgICAgICAgICAgIGlmIChpc0VsZW1DaGlsZEdyaWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzUHJldkNoaWxkKHByZXZFbGVtLCB2aXNpYmxlQ29sdW1uSW5kZXgsIHRoaXMuZ3JpZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdyaWQucGFyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGN1cnJlbnRseSBuYXZpZ2F0aW5nIGluIGNoaWxkIGdyaWRcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbmF2aWdhdGVVcEluQ2hpbGQocm93RWxlbWVudCwgY3VycmVudFJvd0luZGV4LCB2aXNpYmxlQ29sdW1uSW5kZXgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN1cGVyLm5hdmlnYXRlVXAocm93RWxlbWVudCwgc2VsZWN0ZWROb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFJvd0luZGV4ICE9PSAwKSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgc2NlbmFyaW8gd2hlbiBwcmV2IGl0ZW0gaXMgY2hpbGQgZ3JpZCBidXQgaXMgbm90IHlldCBpbiB2aWV3XG4gICAgICAgICAgICBjb25zdCBpc1ByZXZDaGlsZEdyaWQgPSB0aGlzLmdldElzQ2hpbGRBdEluZGV4KGN1cnJlbnRSb3dJbmRleCAtIDEpO1xuICAgICAgICAgICAgaWYgKCFpc1ByZXZDaGlsZEdyaWQpIHtcbiAgICAgICAgICAgICAgICBzdXBlci5uYXZpZ2F0ZVVwKHJvd0VsZW1lbnQsIHNlbGVjdGVkTm9kZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsR3JpZCh0aGlzLmdyaWQsIC1yb3dFbGVtZW50Lm9mZnNldEhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93RWxlbWVudCA9IHRoaXMuZ2V0Um93QnlJbmRleChjdXJyZW50Um93SW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZVVwKHJvd0VsZW1lbnQsIHNlbGVjdGVkTm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ3JpZC5wYXJlbnQgIT09IG51bGwgJiZcbiAgICAgICAgICAgIGN1cnJlbnRSb3dJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgLy8gbW92ZSB0byBwcmV2IHJvdyBpbiBzaWJsaW5nIGxheW91dCBvciBwYXJlbnRcbiAgICAgICAgICAgIHRoaXMuZm9jdXNQcmV2KHZpc2libGVDb2x1bW5JbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIG5hdmlnYXRlRG93bihyb3dFbGVtZW50LCBzZWxlY3RlZE5vZGU6IElTZWxlY3Rpb25Ob2RlKSB7XG4gICAgICAgIGlmIChzZWxlY3RlZE5vZGUuaXNTdW1tYXJ5Um93KSB7IHJldHVybjsgfVxuICAgICAgICBjb25zdCBuZXh0RWxlbSA9IHJvd0VsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICBjb25zdCB2aXNpYmxlQ29sdW1uSW5kZXggPSBzZWxlY3RlZE5vZGUuY29sdW1uO1xuICAgICAgICBjb25zdCBjdXJyZW50Um93SW5kZXggPSBzZWxlY3RlZE5vZGUucm93O1xuICAgICAgICBpZiAobmV4dEVsZW0pIHtcbiAgICAgICAgICAgIC8vIG5leHQgZWxlbSBpcyBpbiBET01cbiAgICAgICAgICAgIGNvbnN0IG5vZGVOYW1lID0gbmV4dEVsZW0uY2hpbGRyZW5bMF0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGNvbnN0IGlzTmV4dEVsZW1DaGlsZEdyaWQgPSBub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaWd4LWNoaWxkLWdyaWQtcm93JztcbiAgICAgICAgICAgIGlmIChpc05leHRFbGVtQ2hpbGRHcmlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c05leHRDaGlsZChuZXh0RWxlbSwgdmlzaWJsZUNvbHVtbkluZGV4LCB0aGlzLmdyaWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ncmlkLnBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjdXJyZW50bHkgbmF2aWdhdGluZyBpbiBjaGlsZCBncmlkXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX25hdmlnYXRlRG93bkluQ2hpbGQocm93RWxlbWVudCwgY3VycmVudFJvd0luZGV4LCB2aXNpYmxlQ29sdW1uSW5kZXgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN1cGVyLm5hdmlnYXRlRG93bihyb3dFbGVtZW50LCBzZWxlY3RlZE5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50Um93SW5kZXggIT09IHRoaXMuZ3JpZC5kYXRhVmlldy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAvLyBzY3JvbGwgbmV4dCBpbiB2aWV3XG4gICAgICAgICAgICBzdXBlci5uYXZpZ2F0ZURvd24ocm93RWxlbWVudCwgc2VsZWN0ZWROb2RlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmdyaWQucGFyZW50ICE9PSBudWxsICYmXG4gICAgICAgICAgICBjdXJyZW50Um93SW5kZXggPT09IHRoaXMuZ3JpZC5kYXRhVmlldy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAvLyBtb3ZlIHRvIG5leHQgcm93IGluIHNpYmxpbmcgbGF5b3V0IG9yIGluIHBhcmVudFxuICAgICAgICAgICAgdGhpcy5mb2N1c05leHQodmlzaWJsZUNvbHVtbkluZGV4KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBuYXZpZ2F0ZVRvcCh2aXNpYmxlQ29sdW1uSW5kZXgpIHtcbiAgICAgICAgaWYgKHRoaXMuZ3JpZC5wYXJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIG5hdmlnYXRpbmcgaW4gY2hpbGRcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkQ29udGFpbmVyID0gdGhpcy5ncmlkLm5hdGl2ZUVsZW1lbnQucGFyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgY29uc3QgZGlmZiA9XG4gICAgICAgICAgICBjaGlsZENvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgLSB0aGlzLmdyaWQucm9vdEdyaWQudGJvZHkubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgICAgICAgICBjb25zdCB0b3BJc1Zpc2libGUgPSBkaWZmID49IDA7XG4gICAgICAgICAgICBjb25zdCBzY3JvbGxhYmxlID0gdGhpcy5nZXROZXh0U2Nyb2xsYWJsZSh0aGlzLmdyaWQpO1xuICAgICAgICAgICAgaWYgKCF0b3BJc1Zpc2libGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbEdyaWQoc2Nyb2xsYWJsZS5ncmlkLCBkaWZmLFxuICAgICAgICAgICAgICAgICAgICAoKSA9PiBzdXBlci5uYXZpZ2F0ZVRvcCh2aXNpYmxlQ29sdW1uSW5kZXgpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3VwZXIubmF2aWdhdGVUb3AodmlzaWJsZUNvbHVtbkluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVyLm5hdmlnYXRlVG9wKHZpc2libGVDb2x1bW5JbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgbmF2aWdhdGVCb3R0b20odmlzaWJsZUNvbHVtbkluZGV4KSB7XG4gICAgICAgIC8vIGhhbmRsZSBzY2VuYXJpbyB3aGVyZSBsYXN0IGluZGV4IGlzIGNoaWxkIGdyaWRcbiAgICAgICAgLy8gaW4gdGhhdCBjYXNlIGZvY3VzIGNlbGwgaW4gbGFzdCBkYXRhIHJvd1xuICAgICAgICBjb25zdCBsYXN0SW5kZXggPSB0aGlzLmdyaWQuZGF0YVZpZXcubGVuZ3RoIC0gMTtcbiAgICAgICAgaWYgKHRoaXMuZ2V0SXNDaGlsZEF0SW5kZXgobGFzdEluZGV4KSkge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0SW5kZXggPSBsYXN0SW5kZXggLSAxO1xuICAgICAgICAgICAgY29uc3Qgc2NyVG9wUG9zaXRpb24gPSB0aGlzLmdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuZ2V0U2Nyb2xsRm9ySW5kZXgodGFyZ2V0SW5kZXgsIHRydWUpO1xuICAgICAgICAgICAgY29uc3QgdmVydGljYWxTY3JvbGxUb3AgPSB0aGlzLmdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuc2Nyb2xsUG9zaXRpb247XG4gICAgICAgICAgICBjb25zdCBjZWxsU2VsZWN0b3IgPSB0aGlzLmdldENlbGxTZWxlY3Rvcih2aXNpYmxlQ29sdW1uSW5kZXgpO1xuICAgICAgICAgICAgaWYgKHZlcnRpY2FsU2Nyb2xsVG9wID09PSBzY3JUb3BQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbGxzID0gdGhpcy5nZXRSb3dCeUluZGV4KHRhcmdldEluZGV4KS5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICAgICAgICAgICAgICBgJHtjZWxsU2VsZWN0b3J9W2RhdGEtdmlzaWJsZUluZGV4PVwiJHt2aXNpYmxlQ29sdW1uSW5kZXh9XCJdYCk7XG4gICAgICAgICAgICAgICAgY2VsbHNbY2VsbHMubGVuZ3RoIC0gMV0uZm9jdXMoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxHcmlkKHRoaXMuZ3JpZCwgc2NyVG9wUG9zaXRpb24gLSB2ZXJ0aWNhbFNjcm9sbFRvcCxcbiAgICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VsbHMgPSB0aGlzLmdldFJvd0J5SW5kZXgodGFyZ2V0SW5kZXgpLnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7Y2VsbFNlbGVjdG9yfVtkYXRhLXZpc2libGVJbmRleD1cIiR7dmlzaWJsZUNvbHVtbkluZGV4fVwiXWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNlbGxzLmxlbmd0aCA+IDApIHsgY2VsbHNbY2VsbHMubGVuZ3RoIC0gMV0uZm9jdXMoKTsgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlICBpZiAodGhpcy5ncmlkLnBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRDb250YWluZXIgPSB0aGlzLmdyaWQubmF0aXZlRWxlbWVudC5wYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICBjb25zdCBkaWZmID1cbiAgICAgICAgICAgIGNoaWxkQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSAtIHRoaXMuZ3JpZC5yb290R3JpZC50Ym9keS5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbTtcbiAgICAgICAgICAgIGNvbnN0IGVuZElzVmlzaWJsZSA9IGRpZmYgPCAwO1xuICAgICAgICAgICAgY29uc3Qgc2Nyb2xsYWJsZSA9IHRoaXMuZ2V0TmV4dFNjcm9sbGFibGVEb3duKHRoaXMuZ3JpZCk7XG4gICAgICAgICAgICBpZiAoIWVuZElzVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsR3JpZChzY3JvbGxhYmxlLmdyaWQsIGRpZmYsXG4gICAgICAgICAgICAgICAgICAgICgpID0+IHN1cGVyLm5hdmlnYXRlQm90dG9tKHZpc2libGVDb2x1bW5JbmRleCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdXBlci5uYXZpZ2F0ZUJvdHRvbSh2aXNpYmxlQ29sdW1uSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIubmF2aWdhdGVCb3R0b20odmlzaWJsZUNvbHVtbkluZGV4KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdWJsaWMgZ29Ub0xhc3RDZWxsKCkge1xuICAgICAgICAvLyBoYW5kbGUgc2NlbmFyaW8gd2hlcmUgbGFzdCBpbmRleCBpcyBjaGlsZCBncmlkXG4gICAgICAgIC8vIGluIHRoYXQgY2FzZSBmb2N1cyBsYXN0IGNlbGwgaW4gbGFzdCBkYXRhIHJvd1xuICAgICAgICBjb25zdCBsYXN0SW5kZXggPSB0aGlzLmdyaWQuZGF0YVZpZXcubGVuZ3RoIC0gMTtcbiAgICAgICAgaWYgKHRoaXMuZ2V0SXNDaGlsZEF0SW5kZXgobGFzdEluZGV4KSkge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0SW5kZXggPSBsYXN0SW5kZXggLSAxO1xuICAgICAgICAgICAgY29uc3Qgc2NyVG9wUG9zaXRpb24gPSB0aGlzLmdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuZ2V0U2Nyb2xsRm9ySW5kZXgodGFyZ2V0SW5kZXgsIHRydWUpO1xuICAgICAgICAgICAgY29uc3QgdmVydGljYWxTY3JvbGxUb3AgPSB0aGlzLmdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuc2Nyb2xsUG9zaXRpb247XG4gICAgICAgICAgICBpZiAodmVydGljYWxTY3JvbGxUb3AgPT09IHNjclRvcFBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbktleWRvd25FbmQodGFyZ2V0SW5kZXgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbEdyaWQodGhpcy5ncmlkLCBzY3JUb3BQb3NpdGlvbiAtIHZlcnRpY2FsU2Nyb2xsVG9wLFxuICAgICAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uS2V5ZG93bkVuZCh0YXJnZXRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIuZ29Ub0xhc3RDZWxsKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgb25LZXlkb3duRW5kKHJvd0luZGV4LCBpc1N1bW1hcnkgPSBmYWxzZSkge1xuICAgICAgICBpZiAodGhpcy5ncmlkLnBhcmVudCAmJiAhaXNTdW1tYXJ5KSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgc2NlbmFyaW8gd2hlcmUgbGFzdCBjaGlsZCByb3cgbWlnaHQgbm90IGJlIGluIHZpZXdcbiAgICAgICAgICAgIC8vIHBhcmVudCBzaG91bGQgc2Nyb2xsIHRvIGNoaWxkIGdyaWQgZW5kXG4gICAgICAgICAgICBjb25zdCBjaGlsZENvbnRhaW5lciA9IHRoaXMuZ3JpZC5uYXRpdmVFbGVtZW50LnBhcmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIGNvbnN0IGRpZmZCb3R0b20gPVxuICAgICAgICAgICAgICAgIGNoaWxkQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSAtIHRoaXMuZ3JpZC5yb290R3JpZC5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbTtcbiAgICAgICAgICAgIGNvbnN0IHJvdyA9IHRoaXMuZ3JpZC5nZXRSb3dCeUluZGV4KHJvd0luZGV4KS5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgICAgICBjb25zdCByb3dCb3R0b20gPSByb3cuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tO1xuICAgICAgICAgICAgY29uc3Qgcm93SXNWaXNpYmxlID0gcm93Qm90dG9tIDw9IHRoaXMuZ3JpZC5yb290R3JpZC50Ym9keS5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbTtcbiAgICAgICAgICAgIGNvbnN0IGdyaWRUb3AgPSB0aGlzLl9nZXRNYXhUb3AodGhpcy5ncmlkKTtcbiAgICAgICAgICAgIGNvbnN0IGRpZmZUb3AgPSByb3cuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tIC1cbiAgICAgICAgICAgICAgICByb3cub2Zmc2V0SGVpZ2h0IC0gZ3JpZFRvcDtcbiAgICAgICAgICAgIGNvbnN0IGVuZElzVmlzaWJsZSA9IGRpZmZCb3R0b20gPD0gMDtcbiAgICAgICAgICAgIGNvbnN0IHRvcFZpc2libGUgPSBkaWZmVG9wID49IDA7XG4gICAgICAgICAgICBpZiAoIWVuZElzVmlzaWJsZSAmJiAhcm93SXNWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxHcmlkKHRoaXMuZ3JpZC5wYXJlbnQsIGRpZmZCb3R0b20sICgpID0+IHN1cGVyLm9uS2V5ZG93bkVuZChyb3dJbmRleCkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghdG9wVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjckdyaWQgPSB0aGlzLmdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuc2Nyb2xsUG9zaXRpb24gIT09IDAgPyB0aGlzLmdyaWQgOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldE5leHRTY3JvbGxhYmxlKHRoaXMuZ3JpZCkuZ3JpZDtcbiAgICAgICAgICAgICAgICBjb25zdCB0b3BHcmlkID0gc2NyR3JpZC50Ym9keS5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCA+XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JpZC5yb290R3JpZC50Ym9keS5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCA/IHNjckdyaWQgOiB0aGlzLmdyaWQucm9vdEdyaWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxHcmlkKHRvcEdyaWQsIGRpZmZUb3AsICgpID0+IHN1cGVyLm9uS2V5ZG93bkVuZChyb3dJbmRleCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdXBlci5vbktleWRvd25FbmQocm93SW5kZXgsIGlzU3VtbWFyeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdXBlci5vbktleWRvd25FbmQocm93SW5kZXgsIGlzU3VtbWFyeSk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHB1YmxpYyBnb1RvRmlyc3RDZWxsKCkge1xuICAgICAgICBjb25zdCB2ZXJ0aWNhbFNjcm9sbCA9IHRoaXMuZ3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5nZXRTY3JvbGwoKTtcbiAgICAgICAgY29uc3QgaG9yaXpvbnRhbFNjcm9sbCA9IHRoaXMuZ3JpZC5kYXRhUm93TGlzdC5maXJzdC52aXJ0RGlyUm93LmdldFNjcm9sbCgpO1xuICAgICAgICBpZiAodmVydGljYWxTY3JvbGwuc2Nyb2xsVG9wID09PSAwICYmIHRoaXMuZ3JpZC5wYXJlbnQpIHtcbiAgICAgICAgICAgIC8vIHNjcm9sbCBwYXJlbnQgc28gdGhhdCBjdXJyZW50IGNoaWxkIGlzIGluIHZpZXdcbiAgICAgICAgICAgIGlmICghaG9yaXpvbnRhbFNjcm9sbC5jbGllbnRXaWR0aCB8fCBwYXJzZUludChob3Jpem9udGFsU2Nyb2xsLnNjcm9sbExlZnQsIDEwKSA8PSAxIHx8IHRoaXMuZ3JpZC5waW5uZWRDb2x1bW5zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMubmF2aWdhdGVUb3AoMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuaG9yaXpvbnRhbFNjcm9sbCh0aGlzLmdyaWQuZGF0YVJvd0xpc3QuZmlyc3QuaW5kZXgpLnNjcm9sbFRvKDApO1xuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZC5wYXJlbnRWaXJ0RGlyLm9uQ2h1bmtMb2FkXG4gICAgICAgICAgICAgICAgICAgIC5waXBlKGZpcnN0KCkpXG4gICAgICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZVRvcCgwKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdXBlci5nb1RvRmlyc3RDZWxsKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgcGVyZm9ybVRhYihjdXJyZW50Um93RWwsIHNlbGVjdGVkTm9kZTogSVNlbGVjdGlvbk5vZGUpIHtcbiAgICAgICAgaWYgKHRoaXMuZ3JpZC5yb3dJbkVkaXRNb2RlKSB7XG4gICAgICAgICAgICBzdXBlci5wZXJmb3JtVGFiKGN1cnJlbnRSb3dFbCwgc2VsZWN0ZWROb2RlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByb3dJbmRleCA9IHNlbGVjdGVkTm9kZS5yb3c7XG4gICAgICAgIGNvbnN0IHZpc2libGVDb2x1bW5JbmRleCA9IHNlbGVjdGVkTm9kZS5jb2x1bW47XG4gICAgICAgIGNvbnN0IGlzU3VtbWFyeVJvdyA9IHNlbGVjdGVkTm9kZS5pc1N1bW1hcnlSb3c7XG4gICAgICAgIGNvbnN0IHN1bW1hcnlSb3dzID0gdGhpcy5ncmlkLnN1bW1hcmllc1Jvd0xpc3QudG9BcnJheSgpO1xuICAgICAgICBjb25zdCBoYXNTdW1tYXJpZXMgPSBzdW1tYXJ5Um93cy5sZW5ndGggPiAwO1xuICAgICAgICBjb25zdCBpc0xhc3REYXRhUm93ID0gcm93SW5kZXggPT09IHRoaXMuZ3JpZC5kYXRhVmlldy5sZW5ndGggLSAxO1xuICAgICAgICBjb25zdCBuZXh0SXNEYXRhUm93ID0gdGhpcy5ncmlkLmRhdGFSb3dMaXN0LmZpbmQocm93ID0+IHJvdy5pbmRleCA9PT0gcm93SW5kZXggKyAxKTtcbiAgICAgICAgY29uc3QgaXNMYXN0Q29sdW1uID0gdGhpcy5ncmlkLnVucGlubmVkQ29sdW1uc1t0aGlzLmdyaWQudW5waW5uZWRDb2x1bW5zLmxlbmd0aCAtIDFdLnZpc2libGVJbmRleCA9PT0gdmlzaWJsZUNvbHVtbkluZGV4O1xuICAgICAgICBjb25zdCBpc0xhc3RTdW1tYXJ5Um93ID0gaGFzU3VtbWFyaWVzICYmIGlzU3VtbWFyeVJvdztcbiAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gcm93SW5kZXggKyAxO1xuICAgICAgICBjb25zdCB2aXJ0ID0gdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyO1xuICAgICAgICBjb25zdCBpc05leHRDaGlsZCA9IG5leHRJbmRleCA8PSB2aXJ0LmlneEZvck9mLmxlbmd0aCAtIDEgJiZcbiAgICAgICAgICAgIHRoaXMuZ3JpZC5pc0NoaWxkR3JpZFJlY29yZCh2aXJ0LmlneEZvck9mW25leHRJbmRleF0pO1xuICAgICAgICBpZiAoIW5leHRJc0RhdGFSb3cgJiYgIShpc0xhc3REYXRhUm93ICYmIGhhc1N1bW1hcmllcykgJiYgaXNMYXN0Q29sdW1uICYmICFpc1N1bW1hcnlSb3cpIHtcbiAgICAgICAgICAgIC8vIG5hdmlnYXRpbmcgaW4gY2hpbGQsIG5leHQgaXMgbm90IHN1bW1hcnlcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkQ29udGFpbmVyID0gdGhpcy5nZXRDaGlsZEdyaWRSb3dDb250YWluZXIoKTtcbiAgICAgICAgICAgIGNvbnN0IG5leHRJc1NpYmxpbmdDaGlsZCA9IHRoaXMuZ3JpZC5wYXJlbnQgPyAhIWNoaWxkQ29udGFpbmVyLm5leHRFbGVtZW50U2libGluZyA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKG5leHRJc1NpYmxpbmdDaGlsZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNOZXh0Q2hpbGRET01FbGVtKGNoaWxkQ29udGFpbmVyLCB0aGlzLmdyaWQucGFyZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNOZXh0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpc0luVmlldyA9IHZpcnQuc3RhdGUuc3RhcnRJbmRleCArIHZpcnQuc3RhdGUuY2h1bmtTaXplID4gbmV4dEluZGV4O1xuICAgICAgICAgICAgICAgIGlmICghaXNJblZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxHcmlkKHRoaXMuZ3JpZCwgJ25leHQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzTmV4dENoaWxkRE9NRWxlbShjdXJyZW50Um93RWwsIHRoaXMuZ3JpZCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNOZXh0Q2hpbGRET01FbGVtKGN1cnJlbnRSb3dFbCwgdGhpcy5ncmlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ3JpZC5wYXJlbnQgJiYgdGhpcy5ncmlkLnBhcmVudC5zdW1tYXJpZXNSb3dMaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgIHRoaXMuX25hdmlnYXRlVG9OZXh0UGFyZW50Um93KGN1cnJlbnRSb3dFbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubmF2aWdhdGVEb3duKGN1cnJlbnRSb3dFbCwgeyByb3c6IHJvd0luZGV4LCBjb2x1bW46IDAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaXNMYXN0U3VtbWFyeVJvdyAmJiBpc0xhc3RDb2x1bW4gJiYgdGhpcy5ncmlkLnBhcmVudCkge1xuICAgICAgICAgICAgdGhpcy5fbmF2aWdhdGVUb05leHRQYXJlbnRSb3coY3VycmVudFJvd0VsKTtcbiAgICAgICAgfSBlbHNlICBpZiAoaXNMYXN0RGF0YVJvdyAmJiBoYXNTdW1tYXJpZXMgJiYgaXNMYXN0Q29sdW1uICYmIHRoaXMuZ3JpZC5wYXJlbnQpIHtcbiAgICAgICAgICAgIC8vIG5hdmlnYXRpbmcgaW4gY2hpbGQgcm93cywgbmV4dCBpcyBjaGlsZCBncmlkJ3Mgc3VtbWFyeSByb3dcbiAgICAgICAgICAgdGhpcy5mb2N1c05leHRSb3coc3VtbWFyeVJvd3NbMF0ubmF0aXZlRWxlbWVudCwgMCwgdGhpcy5ncmlkLnBhcmVudCwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdXBlci5wZXJmb3JtVGFiKGN1cnJlbnRSb3dFbCwgc2VsZWN0ZWROb2RlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX25hdmlnYXRlVG9OZXh0UGFyZW50Um93KGN1cnJlbnRSb3dFbDogYW55KTogdm9pZCB7XG4gICAgICAgICAvLyBuZXh0IGlzIHBhcmVudCBzdW1tYXJ5IG9yIG5leHQgcGFyZW50IHJvd1xuICAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5ncmlkLnBhcmVudDtcbiAgICAgICAgIGNvbnN0IHBhcmVudEhhc1N1bW1hcnkgPSBwYXJlbnQuc3VtbWFyaWVzUm93TGlzdC5sZW5ndGggPiAwO1xuICAgICAgICAgY29uc3QgcGFyZW50Um93SW5kZXggPSBwYXJzZUludChcbiAgICAgICAgICAgIHRoaXMuZ2V0Q2xvc2VzdEVsZW1CeVRhZyhjdXJyZW50Um93RWwsICdpZ3gtY2hpbGQtZ3JpZC1yb3cnKS5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1yb3dpbmRleCcpLCAxMCk7XG4gICAgICAgICBjb25zdCBpc0xhc3RSb3dJblBhcmVudCA9IHBhcmVudC5kYXRhVmlldy5sZW5ndGggLSAxID09PSBwYXJlbnRSb3dJbmRleDtcbiAgICAgICAgIC8vIGNoZWNrIGlmIG5leHQgaXMgc2libGluZ1xuICAgICAgICAgY29uc3QgY2hpbGRSb3dDb250YWluZXIgPSB0aGlzLmdldENoaWxkR3JpZFJvd0NvbnRhaW5lcih0aGlzLmdyaWQpO1xuICAgICAgICAgY29uc3QgbmV4dElzU2libGluZ0NoaWxkID0gISFjaGlsZFJvd0NvbnRhaW5lci5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgICBpZiAoaXNMYXN0Um93SW5QYXJlbnQgJiYgcGFyZW50SGFzU3VtbWFyeSAmJiAhbmV4dElzU2libGluZ0NoaWxkKSB7XG4gICAgICAgICAgICAgLy8gbmV4dCBpcyBwYXJlbnQgc3VtbWFyeVxuICAgICAgICAgICAgIGNvbnN0IHBhcmVudFN1bW1hcnkgPSBwYXJlbnQuc3VtbWFyaWVzUm93TGlzdC5maXJzdC5uYXRpdmVFbGVtZW50O1xuICAgICAgICAgICAgIHBhcmVudC5uYXZpZ2F0aW9uLmZvY3VzTmV4dFJvdyhwYXJlbnRTdW1tYXJ5LCAwLCBwYXJlbnQsIHRydWUpO1xuICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAvLyBuZXh0IGlzIHNpYmxpbmcgb3IgcGFyZW50XG4gICAgICAgICAgICAgdGhpcy5mb2N1c05leHQoMCk7XG4gICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmb2N1c05leHRDaGlsZERPTUVsZW0oY3VycmVudFJvd0VsLCBncmlkKSB7XG4gICAgICAgIGNvbnN0IGdyaWRFbGVtID0gY3VycmVudFJvd0VsLm5leHRFbGVtZW50U2libGluZy5xdWVyeVNlbGVjdG9yKCdpZ3gtaGllcmFyY2hpY2FsLWdyaWQnKTtcbiAgICAgICAgY29uc3QgY2hpbGRHcmlkSUQgPSBncmlkRWxlbS5nZXRBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgICAgIGNvbnN0IGNoaWxkR3JpZCA9IHRoaXMuZ2V0Q2hpbGRHcmlkKGNoaWxkR3JpZElELCBncmlkKTtcbiAgICAgICAgaWYgKGNoaWxkR3JpZC5hbGxvd0ZpbHRlcmluZyAmJiBjaGlsZEdyaWQuZmlsdGVyTW9kZSA9PT0gRmlsdGVyTW9kZS5xdWlja0ZpbHRlcikge1xuICAgICAgICAgICAgY2hpbGRHcmlkLm5hdmlnYXRpb24ubW92ZUZvY3VzVG9GaWx0ZXJDZWxsKHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZm9jdXNOZXh0Q2hpbGQoY3VycmVudFJvd0VsLm5leHRFbGVtZW50U2libGluZywgMCwgZ3JpZCk7XG4gICAgfVxuXG4gICAgcHVibGljIG5hdmlnYXRlUHJldkZpbHRlckNlbGwoY29sdW1uOiBJZ3hDb2x1bW5Db21wb25lbnQsIGV2ZW50QXJncykge1xuICAgICAgICBpZiAoY29sdW1uLnZpc2libGVJbmRleCA9PT0gMCAmJiB0aGlzLmdyaWQucGFyZW50KSB7XG4gICAgICAgICAgICBldmVudEFyZ3MucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGxldCB0YXJnZXRHcmlkID0gdGhpcy5ncmlkLnBhcmVudDtcbiAgICAgICAgICAgIGNvbnN0IHByZXZTaWJsaW5nQ2hpbGQgPSB0aGlzLmdldENoaWxkR3JpZFJvd0NvbnRhaW5lcigpLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICBpZiAocHJldlNpYmxpbmdDaGlsZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGdyaWRFbGVtID0gcHJldlNpYmxpbmdDaGlsZC5xdWVyeVNlbGVjdG9yQWxsKCdpZ3gtaGllcmFyY2hpY2FsLWdyaWQnKVswXTtcbiAgICAgICAgICAgICAgICB0YXJnZXRHcmlkID0gdGhpcy5nZXRDaGlsZEdyaWQoZ3JpZEVsZW0uZ2V0QXR0cmlidXRlKCdpZCcpLCB0aGlzLmdyaWQucGFyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZm9jdXNQcmV2KHRhcmdldEdyaWQudW5waW5uZWRDb2x1bW5zW3RhcmdldEdyaWQudW5waW5uZWRDb2x1bW5zLmxlbmd0aCAtIDFdLnZpc2libGVJbmRleCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdXBlci5uYXZpZ2F0ZVByZXZGaWx0ZXJDZWxsKGNvbHVtbiwgZXZlbnRBcmdzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBuYXZpZ2F0ZU5leHRGaWx0ZXJDZWxsKGNvbHVtbjogSWd4Q29sdW1uQ29tcG9uZW50LCBldmVudEFyZ3MpIHtcbiAgICAgICAgY29uc3QgY29scyA9IHRoaXMuZ3JpZC5maWx0ZXJpbmdTZXJ2aWNlLnVucGlubmVkRmlsdGVyYWJsZUNvbHVtbnM7XG4gICAgICAgIGNvbnN0IG5leHRGaWx0ZXJhYmxlSW5kZXggPSBjb2xzLmluZGV4T2YoY29sdW1uKSArIDE7XG4gICAgICAgIGlmIChuZXh0RmlsdGVyYWJsZUluZGV4ID49IHRoaXMuZ3JpZC5maWx0ZXJpbmdTZXJ2aWNlLnVucGlubmVkRmlsdGVyYWJsZUNvbHVtbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBuZXh0IGlzIG5vdCBmaWx0ZXIgY2VsbFxuICAgICAgICAgICAgY29uc3QgZGF0YVJvd3MgPSB0aGlzLmdyaWQucm93TGlzdC50b0FycmF5KCk7XG4gICAgICAgICAgICBjb25zdCBoYXNSb3dzID0gZGF0YVJvd3MubGVuZ3RoICE9PSAwO1xuICAgICAgICAgICAgY29uc3Qgc3VtbWFyeVJvd3MgPSB0aGlzLmdyaWQuc3VtbWFyaWVzUm93TGlzdC50b0FycmF5KCk7XG4gICAgICAgICAgICBjb25zdCBoYXNTdW1tYXJpZXMgPSBzdW1tYXJ5Um93cy5sZW5ndGggPiAwICYmIHN1bW1hcnlSb3dzWzBdLnN1bW1hcnlDZWxscy5sZW5ndGggPiAwO1xuICAgICAgICAgICAgaWYgKGhhc1Jvd3MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzTmV4dFJvdyhkYXRhUm93c1swXS5uYXRpdmVFbGVtZW50LCAwLCB0aGlzLmdyaWQsIGZhbHNlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzU3VtbWFyaWVzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c05leHRSb3coc3VtbWFyeVJvd3NbMF0ubmF0aXZlRWxlbWVudCwgMCwgdGhpcy5ncmlkLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c05leHQoMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBldmVudEFyZ3MucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVyLm5hdmlnYXRlTmV4dEZpbHRlckNlbGwoY29sdW1uLCBldmVudEFyZ3MpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHBlcmZvcm1TaGlmdFRhYktleShjdXJyZW50Um93RWwsIHNlbGVjdGVkTm9kZTogSVNlbGVjdGlvbk5vZGUpIHtcbiAgICAgICAgaWYgKHRoaXMuZ3JpZC5yb3dJbkVkaXRNb2RlKSB7XG4gICAgICAgICAgICBzdXBlci5wZXJmb3JtU2hpZnRUYWJLZXkoY3VycmVudFJvd0VsLCBzZWxlY3RlZE5vZGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJvd0luZGV4ID0gc2VsZWN0ZWROb2RlLnJvdztcbiAgICAgICAgY29uc3QgdmlzaWJsZUNvbHVtbkluZGV4ID0gc2VsZWN0ZWROb2RlLmNvbHVtbjtcbiAgICAgICAgY29uc3QgaXNTdW1tYXJ5ID0gc2VsZWN0ZWROb2RlLmlzU3VtbWFyeVJvdztcbiAgICAgICAgaWYgKHZpc2libGVDb2x1bW5JbmRleCA9PT0gMCAmJiByb3dJbmRleCA9PT0gMCAmJiB0aGlzLmdyaWQucGFyZW50ICYmICFpc1N1bW1hcnkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmdyaWQuYWxsb3dGaWx0ZXJpbmcgJiYgdGhpcy5ncmlkLmZpbHRlck1vZGUgPT09IEZpbHRlck1vZGUucXVpY2tGaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmVGb2N1c1RvRmlsdGVyQ2VsbCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2U2libGluZ0NoaWxkID0gdGhpcy5nZXRDaGlsZEdyaWRSb3dDb250YWluZXIoKS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgICAgIGlmIChwcmV2U2libGluZ0NoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdyaWRFbGVtID0gcHJldlNpYmxpbmdDaGlsZC5xdWVyeVNlbGVjdG9yQWxsKCdpZ3gtaGllcmFyY2hpY2FsLWdyaWQnKVswXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wZXJmb3JtU2hpZnRUYWJJbnRvQ2hpbGQoZ3JpZEVsZW0sIGN1cnJlbnRSb3dFbCwgcm93SW5kZXgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbE5vZGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3c6IHJvd0luZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiB0aGlzLmdyaWQucGFyZW50LnVucGlubmVkQ29sdW1uc1t0aGlzLmdyaWQucGFyZW50LnVucGlubmVkQ29sdW1ucy5sZW5ndGggLSAxXS52aXNpYmxlSW5kZXhcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZVVwKGN1cnJlbnRSb3dFbCwgc2VsTm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHZpc2libGVDb2x1bW5JbmRleCA9PT0gMCAmJiBjdXJyZW50Um93RWwucHJldmlvdXNFbGVtZW50U2libGluZyAmJlxuICAgICAgICAgICAgY3VycmVudFJvd0VsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuY2hpbGRyZW5bMF0udGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaWd4LWNoaWxkLWdyaWQtcm93Jykge1xuICAgICAgICAgICAgY29uc3QgZ3JpZEVsZW0gPSB0aGlzLmdldExhc3RHcmlkRWxlbShjdXJyZW50Um93RWwucHJldmlvdXNFbGVtZW50U2libGluZyk7XG4gICAgICAgICAgICB0aGlzLnBlcmZvcm1TaGlmdFRhYkludG9DaGlsZChncmlkRWxlbSwgY3VycmVudFJvd0VsLCByb3dJbmRleCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmlzaWJsZUNvbHVtbkluZGV4ID09PSAwICYmIGlzU3VtbWFyeSkge1xuICAgICAgICAgICAgY29uc3QgbGFzdFJvd0luZGV4ID0gdGhpcy5ncmlkLmRhdGFWaWV3Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgICBpZiAobGFzdFJvd0luZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIC8vIG5vIGNoaWxkIGRhdGFcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ncmlkLmFsbG93RmlsdGVyaW5nICYmIHRoaXMuZ3JpZC5maWx0ZXJNb2RlID09PSBGaWx0ZXJNb2RlLnF1aWNrRmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZUZvY3VzVG9GaWx0ZXJDZWxsKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsTm9kZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdzogcm93SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW46IHRoaXMuZ3JpZC5wYXJlbnQudW5waW5uZWRDb2x1bW5zW3RoaXMuZ3JpZC5wYXJlbnQudW5waW5uZWRDb2x1bW5zLmxlbmd0aCAtIDFdLnZpc2libGVJbmRleFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRlVXAoY3VycmVudFJvd0VsLCBzZWxOb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmdldElzQ2hpbGRBdEluZGV4KGxhc3RSb3dJbmRleCkpIHtcbiAgICAgICAgICAgICAgICBzdXBlci5nb1RvTGFzdENlbGwoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2NyVG9wUG9zaXRpb24gPSB0aGlzLmdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuZ2V0U2Nyb2xsRm9ySW5kZXgobGFzdFJvd0luZGV4LCB0cnVlKTtcbiAgICAgICAgICAgICAgICBjb25zdCB2ZXJ0aWNhbFNjcm9sbFRvcCA9IHRoaXMuZ3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5zY3JvbGxQb3NpdGlvbjtcbiAgICAgICAgICAgICAgICBpZiAodmVydGljYWxTY3JvbGxUb3AgPT09IHNjclRvcFBvc2l0aW9uIHx8IGlzTmFOKHNjclRvcFBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjbG9zZXN0Q2hpbGQgPSB0aGlzLmdldExhc3RHcmlkRWxlbSh0aGlzLmdyaWQuZ2V0Um93QnlJbmRleChsYXN0Um93SW5kZXgpLm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGVyZm9ybVNoaWZ0VGFiSW50b0NoaWxkKGNsb3Nlc3RDaGlsZCwgY3VycmVudFJvd0VsLCByb3dJbmRleCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxHcmlkKHRoaXMuZ3JpZCwgc2NyVG9wUG9zaXRpb24gLSB2ZXJ0aWNhbFNjcm9sbFRvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjbG9zZXN0Q2hpbGQgPSB0aGlzLmdldExhc3RHcmlkRWxlbSh0aGlzLmdyaWQuZ2V0Um93QnlJbmRleChsYXN0Um93SW5kZXgpLm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wZXJmb3JtU2hpZnRUYWJJbnRvQ2hpbGQoY2xvc2VzdENoaWxkLCBjdXJyZW50Um93RWwsIHJvd0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVyLnBlcmZvcm1TaGlmdFRhYktleShjdXJyZW50Um93RWwsIHNlbGVjdGVkTm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Rm9jdXNhYmxlR3JpZCgpIHtcbiAgICAgICAgcmV0dXJuIChpc0lFKCkgJiYgdGhpcy5ncmlkLnJvb3RHcmlkKSA/IHRoaXMuZ3JpZC5yb290R3JpZCA6IHRoaXMuZ3JpZDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldExhc3RHcmlkRWxlbSh0ckNvbnRhaW5lcikge1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHRyQ29udGFpbmVyLmNoaWxkcmVuO1xuICAgICAgICBjb25zdCBjbG9zZXN0Q2hpbGQgPSBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXS5jaGlsZHJlblswXS5jaGlsZHJlblswXTtcbiAgICAgICAgcmV0dXJuIGNsb3Nlc3RDaGlsZDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHBlcmZvcm1TaGlmdFRhYkludG9DaGlsZChncmlkRWxlbSwgY3VycmVudFJvd0VsLCByb3dJbmRleCkge1xuICAgICAgICBjb25zdCBjaGlsZEdyaWRJRCA9IGdyaWRFbGVtLmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkR3JpZCA9IHRoaXMuZ2V0Q2hpbGRHcmlkKGNoaWxkR3JpZElELCB0aGlzLmdyaWQpIHx8IHRoaXMuZ2V0Q2hpbGRHcmlkKGNoaWxkR3JpZElELCB0aGlzLmdyaWQucGFyZW50KTtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RJbmRleCA9IGNoaWxkR3JpZC51bnBpbm5lZENvbHVtbnNbY2hpbGRHcmlkLnVucGlubmVkQ29sdW1ucy5sZW5ndGggLSAxXS52aXNpYmxlSW5kZXg7XG4gICAgICAgICAgICBjb25zdCBzdW1tYXJ5Um93cyA9IGNoaWxkR3JpZC5zdW1tYXJpZXNSb3dMaXN0LnRvQXJyYXkoKTtcbiAgICAgICAgICAgIGlmIChzdW1tYXJ5Um93cy5sZW5ndGggPiAwICYmIHN1bW1hcnlSb3dzWzBdLnN1bW1hcnlDZWxscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgLy8gbW92ZSBmb2N1cyB0byBsYXN0IHN1bW1hcnkgcm93IGNlbGxcbiAgICAgICAgICAgICAgICBjb25zdCBzdW1tYXJ5Um93ID0gc3VtbWFyeVJvd3NbMF0ubmF0aXZlRWxlbWVudDtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzUHJldlJvdyhzdW1tYXJ5Um93LCBsYXN0SW5kZXgsIGNoaWxkR3JpZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNoaWxkR3JpZC5yb3dMaXN0Lmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICAgICAgIGNoaWxkR3JpZC5hbGxvd0ZpbHRlcmluZyAmJiBjaGlsZEdyaWQuZmlsdGVyTW9kZSA9PT0gRmlsdGVyTW9kZS5xdWlja0ZpbHRlcikge1xuICAgICAgICAgICAgICAgICAvLyBtb3ZlIHRvIGZpbHRlciBjZWxsXG4gICAgICAgICAgICAgICAgY2hpbGRHcmlkLm5hdmlnYXRpb24ubW92ZUZvY3VzVG9GaWx0ZXJDZWxsKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNoaWxkR3JpZC5yb3dMaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIG1vdmUgdG8gcHJldiBjaGlsZCBvciBwYXJlbnQgcm93XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldkNoaWxkID0gdGhpcy5nZXRTaWJsaW5nKGNoaWxkR3JpZCk7XG4gICAgICAgICAgICAgICAgaWYgKHByZXZDaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBlcmZvcm1TaGlmdFRhYkludG9DaGlsZChwcmV2Q2hpbGQsIGN1cnJlbnRSb3dFbCwgcm93SW5kZXgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbE5vZGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3c6ICByb3dJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogdGhpcy5ncmlkLnVucGlubmVkQ29sdW1uc1t0aGlzLmdyaWQudW5waW5uZWRDb2x1bW5zLmxlbmd0aCAtIDFdLnZpc2libGVJbmRleFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRlVXAoY3VycmVudFJvd0VsLCBzZWxOb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG1vdmUgdG8gcHJldiBjZWxsXG4gICAgICAgICAgICAgICAgY2hpbGRHcmlkLm5hdmlnYXRpb24uZ29Ub0xhc3RDZWxsKCk7XG4gICAgICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRTaWJsaW5nKGNoaWxkR3JpZCkge1xuICAgICAgICBjb25zdCBwcmV2Q2hpbGRSb3cgPSBjaGlsZEdyaWQuY2hpbGRSb3cubmF0aXZlRWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgICAgICBpZiAocHJldkNoaWxkUm93KSB7XG4gICAgICAgICAgICByZXR1cm4gcHJldkNoaWxkUm93LmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHByaXZhdGUgZm9jdXNOZXh0Q2hpbGQoZWxlbSwgdmlzaWJsZUNvbHVtbkluZGV4LCBncmlkKSB7XG4gICAgICAgIGNvbnN0IGdyaWRFbGVtID0gZWxlbS5xdWVyeVNlbGVjdG9yKCdpZ3gtaGllcmFyY2hpY2FsLWdyaWQnKTtcbiAgICAgICAgY29uc3QgY2hpbGRHcmlkSUQgPSBncmlkRWxlbS5nZXRBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgICAgIGNvbnN0IGNoaWxkR3JpZCA9IHRoaXMuZ2V0Q2hpbGRHcmlkKGNoaWxkR3JpZElELCBncmlkKTtcblxuICAgICAgICBpZiAoY2hpbGRHcmlkLnJvd0xpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmZvY3VzTmV4dCh2aXNpYmxlQ29sdW1uSW5kZXgsIGNoaWxkR3JpZCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgY29sdW1uIGluZGV4IHNpbmNlIHRoZSBuZXh0IGNoaWxkIGNhbiBoYXZlIGluIGdlbmVyYWwgbGVzcyBjb2x1bW5zIHRoYW4gdmlzaWJsZUNvbHVtbkluZGV4IHZhbHVlLlxuICAgICAgICBjb25zdCBsYXN0Q2VsbEluZGV4ID0gY2hpbGRHcmlkLnVucGlubmVkQ29sdW1uc1tjaGlsZEdyaWQudW5waW5uZWRDb2x1bW5zLmxlbmd0aCAtIDFdLnZpc2libGVJbmRleDtcbiAgICAgICAgdmlzaWJsZUNvbHVtbkluZGV4ID0gTWF0aC5taW4obGFzdENlbGxJbmRleCwgdmlzaWJsZUNvbHVtbkluZGV4KTtcblxuICAgICAgICBpZiAoY2hpbGRHcmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLnN0YXRlLnN0YXJ0SW5kZXggIT09IDApIHtcbiAgICAgICAgICAgIC8vIHNjcm9sbCB0byB0b3BcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsR3JpZChjaGlsZEdyaWQsICd0b3AnLCAoKSA9PiB0aGlzLmZvY3VzTmV4dFJvdyhlbGVtLCB2aXNpYmxlQ29sdW1uSW5kZXgsIGNoaWxkR3JpZCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5mb2N1c05leHRSb3coZWxlbSwgdmlzaWJsZUNvbHVtbkluZGV4LCBjaGlsZEdyaWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHByaXZhdGUgZm9jdXNQcmV2Q2hpbGQoZWxlbSwgdmlzaWJsZUNvbHVtbkluZGV4LCBncmlkKSB7XG4gICAgICAgIGNvbnN0IGdyaWRzID0gW107XG4gICAgICAgIGNvbnN0IGdyaWRFbGVtcyA9IEFycmF5LmZyb20oZWxlbS5xdWVyeVNlbGVjdG9yQWxsKCdpZ3gtaGllcmFyY2hpY2FsLWdyaWQnKSk7XG4gICAgICAgIGNvbnN0IGNoaWxkTGV2ZWwgPSBncmlkLmNoaWxkTGF5b3V0TGlzdC5maXJzdC5sZXZlbDtcbiAgICAgICAgZ3JpZEVsZW1zLmZvckVhY2goKGhnKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnRSb3cgPSB0aGlzLmdldENsb3Nlc3RFbGVtQnlUYWcoaGcsICdpZ3gtY2hpbGQtZ3JpZC1yb3cnKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnRSb3cgJiYgcGFyc2VJbnQocGFyZW50Um93LmdldEF0dHJpYnV0ZSgnZGF0YS1sZXZlbCcpLCAxMCkgPT09IGNoaWxkTGV2ZWwpIHtcbiAgICAgICAgICAgICAgICBncmlkcy5wdXNoKGhnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGdyaWRFbGVtID0gZ3JpZHNbZ3JpZHMubGVuZ3RoIC0gMV07XG4gICAgICAgIGNvbnN0IGNoaWxkR3JpZElEID0gZ3JpZEVsZW0uZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgICAgICBjb25zdCBjaGlsZEdyaWQgPSB0aGlzLmdldENoaWxkR3JpZChjaGlsZEdyaWRJRCwgZ3JpZCk7XG5cbiAgICAgICAgaWYgKGNoaWxkR3JpZC5yb3dMaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5mb2N1c1ByZXYodmlzaWJsZUNvbHVtbkluZGV4LCBjaGlsZEdyaWQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIGNvbHVtbiBpbmRleCBzaW5jZSB0aGUgcHJldmlvdXMgY2hpbGQgY2FuIGhhdmUgaW4gZ2VuZXJhbCBsZXNzIGNvbHVtbnMgdGhhbiB2aXNpYmxlQ29sdW1uSW5kZXggdmFsdWUuXG4gICAgICAgIGNvbnN0IGxhc3RDZWxsSW5kZXggPSBjaGlsZEdyaWQudW5waW5uZWRDb2x1bW5zW2NoaWxkR3JpZC51bnBpbm5lZENvbHVtbnMubGVuZ3RoIC0gMV0udmlzaWJsZUluZGV4O1xuICAgICAgICB2aXNpYmxlQ29sdW1uSW5kZXggPSBNYXRoLm1pbihsYXN0Q2VsbEluZGV4LCB2aXNpYmxlQ29sdW1uSW5kZXgpO1xuXG4gICAgICAgIGNvbnN0IGlzU2Nyb2xsZWRUb0JvdHRvbSA9IHRoaXMuX2lzU2Nyb2xsZWRUb0JvdHRvbShjaGlsZEdyaWQpO1xuICAgICAgICBjb25zdCBsYXN0SW5kZXggPSBjaGlsZEdyaWQuZGF0YVZpZXcubGVuZ3RoIC0gMTtcbiAgICAgICAgaWYgKCFpc1Njcm9sbGVkVG9Cb3R0b20pIHtcbiAgICAgICAgICAgIC8vIHNjcm9sbCB0byBlbmRcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsR3JpZChjaGlsZEdyaWQsICdib3R0b20nLCAoKSA9PiB0aGlzLmZvY3VzUHJldkNoaWxkKGVsZW0sIHZpc2libGVDb2x1bW5JbmRleCwgZ3JpZCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbGFzdFJvd0luQ2hpbGQgPSBjaGlsZEdyaWQuZ2V0Um93QnlJbmRleChsYXN0SW5kZXgpO1xuICAgICAgICAgICAgY29uc3QgaXNDaGlsZEdyaWQgPSBsYXN0Um93SW5DaGlsZC5uYXRpdmVFbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpZ3gtY2hpbGQtZ3JpZC1yb3cnO1xuICAgICAgICAgICAgaWYgKGlzQ2hpbGRHcmlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c1ByZXZDaGlsZChsYXN0Um93SW5DaGlsZC5uYXRpdmVFbGVtZW50LnBhcmVudE5vZGUsIHZpc2libGVDb2x1bW5JbmRleCwgY2hpbGRHcmlkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c1ByZXZSb3cobGFzdFJvd0luQ2hpbGQubmF0aXZlRWxlbWVudCwgdmlzaWJsZUNvbHVtbkluZGV4LCBjaGlsZEdyaWQsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHByaXZhdGUgZm9jdXNQcmV2KHZpc2libGVDb2x1bW5JbmRleCwgZ3JpZD8pIHtcbiAgICAgICAgY29uc3QgY3VyckdyaWQgPSBncmlkIHx8IHRoaXMuZ3JpZDtcbiAgICAgICAgbGV0IHBhcmVudENvbnRhaW5lciA9IHRoaXMuZ2V0Q2hpbGRDb250YWluZXIoY3VyckdyaWQpO1xuICAgICAgICBsZXQgY2hpbGRSb3dDb250YWluZXIgPSB0aGlzLmdldENoaWxkR3JpZFJvd0NvbnRhaW5lcihjdXJyR3JpZCk7XG4gICAgICAgIGNvbnN0IHByZXZJc1NpYmxpbmdDaGlsZCA9ICEhY2hpbGRSb3dDb250YWluZXIucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgICAgICAgbGV0IHByZXYgPSBjaGlsZFJvd0NvbnRhaW5lci5wcmV2aW91c0VsZW1lbnRTaWJsaW5nIHx8IHBhcmVudENvbnRhaW5lci5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgaWYgKHByZXZJc1NpYmxpbmdDaGlsZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNQcmV2Q2hpbGQocHJldiwgdmlzaWJsZUNvbHVtbkluZGV4LCBjdXJyR3JpZC5wYXJlbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzUHJldlJvdyhwcmV2LCB2aXNpYmxlQ29sdW1uSW5kZXgsIGN1cnJHcmlkLnBhcmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbEdyaWQoY3VyckdyaWQucGFyZW50LCAncHJldicsXG4gICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRDb250YWluZXIgPSB0aGlzLmdldENoaWxkQ29udGFpbmVyKGdyaWQpO1xuICAgICAgICAgICAgICAgICAgICBjaGlsZFJvd0NvbnRhaW5lciA9IHRoaXMuZ2V0Q2hpbGRHcmlkUm93Q29udGFpbmVyKGdyaWQpO1xuICAgICAgICAgICAgICAgICAgICBwcmV2ID0gY2hpbGRSb3dDb250YWluZXIucHJldmlvdXNFbGVtZW50U2libGluZyB8fCBwYXJlbnRDb250YWluZXIucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZJc1NpYmxpbmdDaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c1ByZXZDaGlsZChwcmV2LCB2aXNpYmxlQ29sdW1uSW5kZXgsIGN1cnJHcmlkLnBhcmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzUHJldlJvdyhwcmV2LCB2aXNpYmxlQ29sdW1uSW5kZXgsIGN1cnJHcmlkLnBhcmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0TmV4dFBhcmVudEluZm8oZ3JpZCkge1xuICAgICAgICAvLyBmaW5kIG5leHQgcGFyZW50IHRoYXQgaXMgbm90IGF0IGJvdHRvbVxuICAgICAgICBsZXQgY3VyckdyaWQgPSBncmlkLnBhcmVudDtcbiAgICAgICAgbGV0IG5leHRFbGVtID0gdGhpcy5nZXRDaGlsZENvbnRhaW5lcihncmlkKS5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgIHdoaWxlICghbmV4dEVsZW0gJiYgY3VyckdyaWQucGFyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBuZXh0RWxlbSA9IHRoaXMuZ2V0Q2hpbGRDb250YWluZXIoY3VyckdyaWQpLm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgICAgIGN1cnJHcmlkID0gY3VyckdyaWQucGFyZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgZ3JpZDogY3VyckdyaWQsIG5leHRFbGVtZW50OiBuZXh0RWxlbSB9O1xuICAgIH1cbiAgICBwcml2YXRlIGdldE5leHRTY3JvbGxhYmxlKGdyaWQpIHtcbiAgICAgICAgbGV0IGN1cnJHcmlkID0gZ3JpZC5wYXJlbnQ7XG4gICAgICAgIGlmICghY3VyckdyaWQpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGdyaWQ6IGdyaWQsIHByZXY6IG51bGwgfTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbm9uU2Nyb2xsYWJsZSA9IGN1cnJHcmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLnNjcm9sbFBvc2l0aW9uID09PSAwO1xuICAgICAgICBsZXQgcHJldiA9IGdyaWQ7XG4gICAgICAgIHdoaWxlIChub25TY3JvbGxhYmxlICYmIGN1cnJHcmlkLnBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcHJldiA9IGN1cnJHcmlkO1xuICAgICAgICAgICAgY3VyckdyaWQgPSBjdXJyR3JpZC5wYXJlbnQ7XG4gICAgICAgICAgICBub25TY3JvbGxhYmxlID0gY3VyckdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuc2Nyb2xsUG9zaXRpb24gPT09IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZ3JpZDogY3VyckdyaWQsIHByZXY6IHByZXYgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZvY3VzTmV4dCh2aXNpYmxlQ29sdW1uSW5kZXgsIGdyaWQ/KSB7XG4gICAgICAgIGNvbnN0IGN1cnJHcmlkID0gZ3JpZCB8fCB0aGlzLmdyaWQ7XG4gICAgICAgIGNvbnN0IHBhcmVudEluZm8gPSB0aGlzLmdldE5leHRQYXJlbnRJbmZvKGN1cnJHcmlkKTtcbiAgICAgICAgY29uc3QgbmV4dFBhcmVudEdyaWQgPSBwYXJlbnRJbmZvLmdyaWQ7XG4gICAgICAgIGxldCBuZXh0UGFyZW50RWxlbSA9IHBhcmVudEluZm8ubmV4dEVsZW1lbnQ7XG4gICAgICAgIGxldCBjaGlsZFJvd0NvbnRhaW5lciA9IHRoaXMuZ2V0Q2hpbGRHcmlkUm93Q29udGFpbmVyKGN1cnJHcmlkKTtcbiAgICAgICAgY29uc3QgbmV4dElzU2libGluZ0NoaWxkID0gISFjaGlsZFJvd0NvbnRhaW5lci5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgIGxldCBuZXh0ID0gY2hpbGRSb3dDb250YWluZXIubmV4dEVsZW1lbnRTaWJsaW5nIHx8IG5leHRQYXJlbnRFbGVtO1xuICAgICAgICBjb25zdCB2ZXJ0aWNhbFNjcm9sbCA9IG5leHRQYXJlbnRHcmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmdldFNjcm9sbCgpO1xuICAgICAgICBjb25zdCBwYXJlbnRTdGF0ZSA9IG5leHRQYXJlbnRHcmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLnN0YXRlO1xuICAgICAgICBjb25zdCBhdExhc3RDaHVuayA9IHBhcmVudFN0YXRlLnN0YXJ0SW5kZXggKyBwYXJlbnRTdGF0ZS5jaHVua1NpemUgPT09XG4gICAgICAgICBuZXh0UGFyZW50R3JpZC5kYXRhVmlldy5sZW5ndGg7XG4gICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICBpZiAobmV4dElzU2libGluZ0NoaWxkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c05leHRDaGlsZChuZXh0LCB2aXNpYmxlQ29sdW1uSW5kZXgsIG5leHRQYXJlbnRHcmlkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c05leHRSb3cobmV4dCwgdmlzaWJsZUNvbHVtbkluZGV4LCBncmlkIHx8IG5leHRQYXJlbnRHcmlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh2ZXJ0aWNhbFNjcm9sbC5zY3JvbGxUb3AgIT09XG4gICAgICAgICAgICB2ZXJ0aWNhbFNjcm9sbC5zY3JvbGxIZWlnaHQgLSBuZXh0UGFyZW50R3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5pZ3hGb3JDb250YWluZXJTaXplICYmICFhdExhc3RDaHVuaykge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxHcmlkKG5leHRQYXJlbnRHcmlkLCAnbmV4dCcsXG4gICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBuZXh0UGFyZW50RWxlbSA9IHBhcmVudEluZm8ubmV4dEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkUm93Q29udGFpbmVyID0gdGhpcy5nZXRDaGlsZEdyaWRSb3dDb250YWluZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgbmV4dCA9IGNoaWxkUm93Q29udGFpbmVyLm5leHRFbGVtZW50U2libGluZyB8fCBuZXh0UGFyZW50RWxlbTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQgJiYgbmV4dElzU2libGluZ0NoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzTmV4dENoaWxkKG5leHQsIHZpc2libGVDb2x1bW5JbmRleCwgbmV4dFBhcmVudEdyaWQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNOZXh0Um93KG5leHQsIHZpc2libGVDb2x1bW5JbmRleCwgZ3JpZCB8fCBuZXh0UGFyZW50R3JpZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcml2YXRlIGdldE5leHRTY3JvbGxhYmxlRG93bihncmlkKSB7XG4gICAgICAgIGxldCBjdXJyR3JpZCA9IGdyaWQucGFyZW50O1xuICAgICAgICBpZiAoIWN1cnJHcmlkKSB7XG4gICAgICAgICAgICByZXR1cm4geyBncmlkOiBncmlkLCBwcmV2OiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNjcm9sbFRvcCA9IGN1cnJHcmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLnNjcm9sbFBvc2l0aW9uO1xuICAgICAgICBsZXQgc2Nyb2xsSGVpZ2h0ID0gY3VyckdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuZ2V0U2Nyb2xsKCkuc2Nyb2xsSGVpZ2h0O1xuICAgICAgICBsZXQgbm9uU2Nyb2xsYWJsZSA9IHNjcm9sbEhlaWdodCA9PT0gMCB8fFxuICAgICAgICAgICAgTWF0aC5yb3VuZChzY3JvbGxUb3AgKyBjdXJyR3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5pZ3hGb3JDb250YWluZXJTaXplKSA9PT0gc2Nyb2xsSGVpZ2h0O1xuICAgICAgICBsZXQgcHJldiA9IGdyaWQ7XG4gICAgICAgIHdoaWxlIChub25TY3JvbGxhYmxlICYmIGN1cnJHcmlkLnBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcHJldiA9IGN1cnJHcmlkO1xuICAgICAgICAgICAgY3VyckdyaWQgPSBjdXJyR3JpZC5wYXJlbnQ7XG4gICAgICAgICAgICBzY3JvbGxUb3AgPSBjdXJyR3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5zY3JvbGxQb3NpdGlvbjtcbiAgICAgICAgICAgIHNjcm9sbEhlaWdodCA9IGN1cnJHcmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmdldFNjcm9sbCgpLnNjcm9sbEhlaWdodDtcbiAgICAgICAgICAgIG5vblNjcm9sbGFibGUgPSBzY3JvbGxIZWlnaHQgPT09IDAgfHxcbiAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKHNjcm9sbFRvcCArIGN1cnJHcmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvckNvbnRhaW5lclNpemUpID09PSBzY3JvbGxIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZ3JpZDogY3VyckdyaWQsIHByZXY6IHByZXYgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9nZXRNaW5Cb3R0b20oZ3JpZCkge1xuICAgICAgICBsZXQgY3VyckdyaWQgPSBncmlkO1xuICAgICAgICBsZXQgYm90dG9tID0gY3VyckdyaWQudGJvZHkubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b207XG4gICAgICAgIHdoaWxlIChjdXJyR3JpZC5wYXJlbnQpIHtcbiAgICAgICAgICAgIGN1cnJHcmlkID0gY3VyckdyaWQucGFyZW50O1xuICAgICAgICAgICAgYm90dG9tID0gTWF0aC5taW4oYm90dG9tLCBjdXJyR3JpZC50Ym9keS5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJvdHRvbTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9nZXRNYXhUb3AoZ3JpZCkge1xuICAgICAgICBsZXQgY3VyckdyaWQgPSBncmlkO1xuICAgICAgICBsZXQgdG9wID0gY3VyckdyaWQudGJvZHkubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgICAgIHdoaWxlIChjdXJyR3JpZC5wYXJlbnQpIHtcbiAgICAgICAgICAgIGN1cnJHcmlkID0gY3VyckdyaWQucGFyZW50O1xuICAgICAgICAgICAgdG9wID0gTWF0aC5tYXgodG9wLCBjdXJyR3JpZC50Ym9keS5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvcDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZvY3VzTmV4dFJvdyhlbGVtLCB2aXNpYmxlQ29sdW1uSW5kZXgsIGdyaWQsIGlzU3VtbWFyeT8pIHtcbiAgICAgICAgY29uc3QgbGFzdENlbGxJbmRleCA9IGdyaWQudW5waW5uZWRDb2x1bW5zW2dyaWQudW5waW5uZWRDb2x1bW5zLmxlbmd0aCAtIDFdLnZpc2libGVJbmRleDtcbiAgICAgICAgdmlzaWJsZUNvbHVtbkluZGV4ID0gTWF0aC5taW4obGFzdENlbGxJbmRleCwgdmlzaWJsZUNvbHVtbkluZGV4KTtcbiAgICAgICAgY29uc3QgY2VsbFNlbGVjdG9yID0gdGhpcy5nZXRDZWxsU2VsZWN0b3IodmlzaWJsZUNvbHVtbkluZGV4LCBpc1N1bW1hcnkpO1xuICAgICAgICBpZiAoZ3JpZC5uYXZpZ2F0aW9uLmlzQ29sdW1uRnVsbHlWaXNpYmxlKHZpc2libGVDb2x1bW5JbmRleCkgfHwgZ3JpZC5yb3dMaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY29uc3QgY2VsbCA9XG4gICAgICAgICAgICAgICAgZWxlbS5xdWVyeVNlbGVjdG9yKGAke2NlbGxTZWxlY3Rvcn1bZGF0YS12aXNpYmxlSW5kZXg9XCIke3Zpc2libGVDb2x1bW5JbmRleH1cIl1gKTtcbiAgICAgICAgICAgIGNvbnN0IGNsb3Nlc3RTY3JvbGxhYmxlR3JpZCA9IHRoaXMuZ2V0TmV4dFNjcm9sbGFibGVEb3duKGdyaWQpLmdyaWQ7XG4gICAgICAgICAgICAvLyBjb25zdCBkaWZmID0gY2VsbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20gLSBncmlkLnJvb3RHcmlkLnRib2R5Lm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tO1xuICAgICAgICAgICAgY29uc3QgZ3JpZEJvdHRvbSA9IHRoaXMuX2dldE1pbkJvdHRvbShncmlkKTtcbiAgICAgICAgICAgIGNvbnN0IGRpZmYgPSBjZWxsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSAtIGdyaWRCb3R0b207XG4gICAgICAgICAgICBjb25zdCBpblZpZXcgPSBkaWZmIDw9IDA7XG4gICAgICAgICAgICBjb25zdCBzY3JvbGxUb3AgPSBjbG9zZXN0U2Nyb2xsYWJsZUdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuc2Nyb2xsUG9zaXRpb247XG4gICAgICAgICAgICBjb25zdCBzY3JvbGxIZWlnaHQgPSBjbG9zZXN0U2Nyb2xsYWJsZUdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuZ2V0U2Nyb2xsKCkuc2Nyb2xsSGVpZ2h0O1xuICAgICAgICAgICAgY29uc3QgY2FuU2Nyb2xsID0gIShzY3JvbGxIZWlnaHQgPT09IDAgfHxcbiAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKHNjcm9sbFRvcCArIGNsb3Nlc3RTY3JvbGxhYmxlR3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5pZ3hGb3JDb250YWluZXJTaXplKSA9PT0gc2Nyb2xsSGVpZ2h0KTtcbiAgICAgICAgICAgIGlmICghaW5WaWV3ICYmIGNhblNjcm9sbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsR3JpZChjbG9zZXN0U2Nyb2xsYWJsZUdyaWQsIGRpZmYsICgpID0+IGNlbGwuZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2VsbC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhvcml6b250YWxTY3JvbGxHcmlkVG9JbmRleChncmlkLCB2aXNpYmxlQ29sdW1uSW5kZXgsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzTmV4dFJvdyhlbGVtLCB2aXNpYmxlQ29sdW1uSW5kZXgsIGdyaWQsIGlzU3VtbWFyeSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdWJsaWMgZ2V0Q29sdW1uVW5waW5uZWRJbmRleCh2aXNpYmxlQ29sdW1uSW5kZXg6IG51bWJlciwgZ3JpZD86IElneEhpZXJhcmNoaWNhbEdyaWRDb21wb25lbnQpIHtcbiAgICAgICAgY29uc3QgY3VyckdyaWQgPSBncmlkIHx8IHRoaXMuZ3JpZDtcbiAgICAgICAgY29uc3QgY29sdW1uID0gY3VyckdyaWQudW5waW5uZWRDb2x1bW5zLmZpbmQoKGNvbCkgPT4gIWNvbC5jb2x1bW5Hcm91cCAmJiBjb2wudmlzaWJsZUluZGV4ID09PSB2aXNpYmxlQ29sdW1uSW5kZXgpO1xuICAgICAgICByZXR1cm4gY3VyckdyaWQucGlubmVkQ29sdW1ucy5sZW5ndGggPyBjdXJyR3JpZC51bnBpbm5lZENvbHVtbnMuZmlsdGVyKChjKSA9PiAhYy5jb2x1bW5Hcm91cCkuaW5kZXhPZihjb2x1bW4pIDpcbiAgICAgICAgICAgIHZpc2libGVDb2x1bW5JbmRleDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZvY3VzUHJldlJvdyhlbGVtLCB2aXNpYmxlQ29sdW1uSW5kZXgsIGdyaWQsIGluQ2hpbGQ/LCBpc1N1bW1hcnk/KSB7XG4gICAgICAgIGNvbnN0IGxhc3RDZWxsSW5kZXggPSBncmlkLnVucGlubmVkQ29sdW1uc1tncmlkLnVucGlubmVkQ29sdW1ucy5sZW5ndGggLSAxXS52aXNpYmxlSW5kZXg7XG4gICAgICAgIHZpc2libGVDb2x1bW5JbmRleCA9IE1hdGgubWluKGxhc3RDZWxsSW5kZXgsIHZpc2libGVDb2x1bW5JbmRleCk7XG4gICAgICAgIGlmIChncmlkLm5hdmlnYXRpb24uaXNDb2x1bW5GdWxseVZpc2libGUodmlzaWJsZUNvbHVtbkluZGV4KSkge1xuICAgICAgICAgICAgY29uc3QgY2VsbFNlbGVjdG9yID0gdGhpcy5nZXRDZWxsU2VsZWN0b3IodmlzaWJsZUNvbHVtbkluZGV4LCBpc1N1bW1hcnkpO1xuICAgICAgICAgICAgY29uc3QgY2VsbHMgPSBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoYCR7Y2VsbFNlbGVjdG9yfVtkYXRhLXZpc2libGVJbmRleD1cIiR7dmlzaWJsZUNvbHVtbkluZGV4fVwiXWApO1xuICAgICAgICAgICAgbGV0IGNlbGwgPSBjZWxsc1tjZWxscy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGNvbnN0IHJJbmRleCA9IHBhcnNlSW50KGVsZW0uZ2V0QXR0cmlidXRlKCdkYXRhLXJvd2luZGV4JyksIDEwKTtcbiAgICAgICAgICAgIGNvbnN0IHNjckdyaWQgPSBncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLnNjcm9sbFBvc2l0aW9uICE9PSAwID8gZ3JpZCA6XG4gICAgICAgICAgICAgICAgdGhpcy5nZXROZXh0U2Nyb2xsYWJsZShncmlkKS5ncmlkO1xuICAgICAgICAgICAgY29uc3QgdG9wR3JpZCA9IHNjckdyaWQudGJvZHkubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgPlxuICAgICAgICAgICAgICAgIGdyaWQucm9vdEdyaWQudGJvZHkubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgPyBzY3JHcmlkIDogZ3JpZC5yb290R3JpZDtcbiAgICAgICAgICAgIGNvbnN0IGdyaWRUb3AgPSB0aGlzLl9nZXRNYXhUb3AoZ3JpZCk7XG4gICAgICAgICAgICBjb25zdCBzY3JUb3AgPSBzY3JHcmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLnNjcm9sbFBvc2l0aW9uO1xuICAgICAgICAgICAgY29uc3QgZGlmZiA9IGNlbGwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tIC1cbiAgICAgICAgICAgICAgICBjZWxsLm9mZnNldEhlaWdodCAtIGdyaWRUb3A7XG4gICAgICAgICAgICBpZiAoc2NyVG9wICE9PSAwICYmIGRpZmYgPCAwICYmICFpbkNoaWxkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxHcmlkKHNjckdyaWQsIGRpZmYsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZWwgPSAhaXNTdW1tYXJ5ID8gZ3JpZC5uYXZpZ2F0aW9uLmdldFJvd0J5SW5kZXgockluZGV4KSA6IGVsZW07XG4gICAgICAgICAgICAgICAgICAgIGNlbGwgPSBlbC5xdWVyeVNlbGVjdG9yQWxsKGAke2NlbGxTZWxlY3Rvcn1bZGF0YS12aXNpYmxlSW5kZXg9XCIke3Zpc2libGVDb2x1bW5JbmRleH1cIl1gKVswXTtcbiAgICAgICAgICAgICAgICAgICAgY2VsbC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRpZmYgPCAwICYmIGluQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbEdyaWQodG9wR3JpZCwgZGlmZiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjZWxsLmZvY3VzKHsgcHJldmVudFNjcm9sbDogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2VsbC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhvcml6b250YWxTY3JvbGxHcmlkVG9JbmRleChncmlkLCB2aXNpYmxlQ29sdW1uSW5kZXgsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzUHJldlJvdyhlbGVtLCB2aXNpYmxlQ29sdW1uSW5kZXgsIGdyaWQsIGluQ2hpbGQsIGlzU3VtbWFyeSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaG9yaXpvbnRhbFNjcm9sbEdyaWRUb0luZGV4KGdyaWQsIHZpc2libGVDb2x1bW5JbmRleCwgY2FsbEJhY2tGdW5jKSB7XG4gICAgICAgIGNvbnN0IHVucGlubmVkSW5kZXggPSB0aGlzLmdldENvbHVtblVucGlubmVkSW5kZXgodmlzaWJsZUNvbHVtbkluZGV4LCBncmlkKTtcbiAgICAgICAgZ3JpZC5wYXJlbnRWaXJ0RGlyLm9uQ2h1bmtMb2FkXG4gICAgICAgICAgICAucGlwZShmaXJzdCgpKVxuICAgICAgICAgICAgLnN1YnNjcmliZShjYWxsQmFja0Z1bmMpO1xuICAgICAgICBpZiAoZ3JpZC5kYXRhUm93TGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBncmlkLmRhdGFSb3dMaXN0LmZpcnN0LnZpcnREaXJSb3cuc2Nyb2xsVG8odW5waW5uZWRJbmRleCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBncmlkLmhlYWRlckNvbnRhaW5lci5zY3JvbGxUbyh1bnBpbm5lZEluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgfVxuICAgIHByaXZhdGUgc2Nyb2xsR3JpZChncmlkLCB0YXJnZXQsIGNhbGxCYWNrRnVuYykge1xuICAgICAgICB0aGlzLmdldEZvY3VzYWJsZUdyaWQoKS5uYXRpdmVFbGVtZW50LmZvY3VzKHtwcmV2ZW50U2Nyb2xsOiB0cnVlfSk7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICBncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmFkZFNjcm9sbFRvcCh0YXJnZXQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd0b3AnOiBncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLnNjcm9sbFRvKDApOyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm90dG9tJzogZ3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5zY3JvbGxUbyhncmlkLmRhdGFWaWV3Lmxlbmd0aCAtIDEpOyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbmV4dCc6IGdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuc2Nyb2xsTmV4dCgpOyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncHJldic6IGdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuc2Nyb2xsUHJldigpOyBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLm9uQ2h1bmtMb2FkXG4gICAgICAgICAgICAgICAgLnBpcGUoZmlyc3QoKSlcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKGNhbGxCYWNrRnVuYyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgX25hdmlnYXRlVXBJbkNoaWxkKHJvd0VsZW1lbnQsIGN1cnJlbnRSb3dJbmRleCwgdmlzaWJsZUNvbHVtbkluZGV4KSB7XG4gICAgICAgIGNvbnN0IHByZXZFbGVtID0gcm93RWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgICAgICBjb25zdCBzY3JvbGxhYmxlID0gdGhpcy5nZXROZXh0U2Nyb2xsYWJsZSh0aGlzLmdyaWQpO1xuICAgICAgICBjb25zdCBncmlkID0gc2Nyb2xsYWJsZS5ncmlkO1xuICAgICAgICBjb25zdCBzY3JUb3AgPSBncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLnNjcm9sbFBvc2l0aW9uO1xuICAgICAgICBjb25zdCBjb250YWluZXJUb3AgPSBzY3JvbGxhYmxlLnByZXYubmF0aXZlRWxlbWVudC5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgICAgICBjb25zdCB0b3AgPSBwYXJzZUludChjb250YWluZXJUb3Auc3R5bGUudG9wLCAxMCk7XG4gICAgICAgIGlmIChzY3JUb3AgIT09IDAgJiYgdG9wIDwgMCkge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxHcmlkKGdyaWQsIC1wcmV2RWxlbS5vZmZzZXRIZWlnaHQsXG4gICAgICAgICAgICAgICAgKCkgPT4gc3VwZXIubmF2aWdhdGVVcChyb3dFbGVtZW50LCB7IHJvdzogY3VycmVudFJvd0luZGV4LCBjb2x1bW46IHZpc2libGVDb2x1bW5JbmRleCB9KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdXBlci5uYXZpZ2F0ZVVwKHJvd0VsZW1lbnQsIHsgcm93OiBjdXJyZW50Um93SW5kZXgsIGNvbHVtbjogdmlzaWJsZUNvbHVtbkluZGV4IH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfbmF2aWdhdGVEb3duSW5DaGlsZChyb3dFbGVtZW50LCBjdXJyZW50Um93SW5kZXgsIHZpc2libGVDb2x1bW5JbmRleCkge1xuICAgICAgICBjb25zdCBuZXh0RWxlbSA9IHJvd0VsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICBjb25zdCBjaGlsZENvbnRhaW5lciA9IHRoaXMuZ3JpZC5uYXRpdmVFbGVtZW50LnBhcmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgY29uc3QgZGlmZiA9XG4gICAgICAgICAgICBjaGlsZENvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20gLSB0aGlzLmdyaWQucm9vdEdyaWQubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b207XG4gICAgICAgIGNvbnN0IGVuZElzVmlzaWJsZSA9IGRpZmYgPCAwO1xuICAgICAgICBjb25zdCBzY3JvbGxhYmxlID0gdGhpcy5nZXROZXh0U2Nyb2xsYWJsZURvd24odGhpcy5ncmlkKTtcbiAgICAgICAgY29uc3QgZ3JpZCA9IHNjcm9sbGFibGUuZ3JpZDtcbiAgICAgICAgaWYgKCFlbmRJc1Zpc2libGUpIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsR3JpZChncmlkLCBuZXh0RWxlbS5vZmZzZXRIZWlnaHQsXG4gICAgICAgICAgICAgICAgKCkgPT4gc3VwZXIubmF2aWdhdGVEb3duKHJvd0VsZW1lbnQsIHsgcm93OiBjdXJyZW50Um93SW5kZXgsIGNvbHVtbjogdmlzaWJsZUNvbHVtbkluZGV4IH0pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVyLm5hdmlnYXRlRG93bihyb3dFbGVtZW50LCB7IHJvdzogY3VycmVudFJvd0luZGV4LCBjb2x1bW46IHZpc2libGVDb2x1bW5JbmRleCB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXROZXh0Um93QnlJbmRleChuZXh0SW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZC5kYXRhUm93TGlzdC5maW5kKGVsZW1lbnQgPT4gZWxlbWVudC5pbmRleCA9PT0gbmV4dEluZGV4KS5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICB9XG59XG4iXX0=