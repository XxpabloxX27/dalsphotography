import { __decorate, __param, __values } from "tslib";
import { Directive, Optional, Input, NgModule, Host, ComponentFactoryResolver, ViewContainerRef } from '@angular/core';
import { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';
import { IgxColumnComponent } from './columns/column.component';
import { DataType } from '../data-operations/data-util';
import { IgxBooleanFilteringOperand, IgxNumberFilteringOperand, IgxDateFilteringOperand, IgxStringFilteringOperand } from '../data-operations/filtering-condition';
import { IgxGridComponent } from './grid/grid.component';
var COLUMNS = 'columns';
var FILTERING = 'filtering';
var ADVANCED_FILTERING = 'advancedFiltering';
var SORTING = 'sorting';
var GROUPBY = 'groupBy';
var PAGING = 'paging';
var ROW_SELECTION = 'rowSelection';
var CELL_SELECTION = 'cellSelection';
var IgxGridStateDirective = /** @class */ (function () {
    /**
     * @hidden
     */
    function IgxGridStateDirective(grid, resolver, viewRef) {
        this.grid = grid;
        this.resolver = resolver;
        this.viewRef = viewRef;
        this._options = {
            columns: true,
            filtering: true,
            advancedFiltering: true,
            sorting: true,
            groupBy: true,
            paging: true,
            cellSelection: true,
            rowSelection: true
        };
    }
    Object.defineProperty(IgxGridStateDirective.prototype, "options", {
        /**
         *  An object with options determining if a certain feature state should be saved.
         *
         * ```html
         * <igx-grid [igxGridState]="options"></igx-grid>
         * ```
         * ```typescript
         * public options = {selection: false, advancedFiltering: false};
         * ```
         */
        get: function () {
            return this._options;
        },
        set: function (value) {
            Object.assign(this._options, value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gets the state of a feature or states of all grid features, unless a certain feature is disabled through the `options` property.
     * @param `serialize` determines whether the returned object will be serialized to JSON string. Default value is false.
     * @param `feature` string or array of strings determining the features which state to retrieve. If skipped, returns all.
     * @returns Returns the serialized to JSON string IGridState object, or the non-serialized IGridState object.
     * ```html
     * <igx-grid [igxGridState]="options"></igx-grid>
     * ```
     * ```typescript
     * @ViewChild(IgxGridStateDirective, { static: true }) public state;
     * let state =  this.state.getState();
     * ```
     */
    IgxGridStateDirective.prototype.getState = function (serialize, feature) {
        var _this = this;
        if (serialize === void 0) { serialize = true; }
        var state;
        if (feature) {
            state = {};
            if (Array.isArray(feature)) {
                feature.forEach(function (f) {
                    state = Object.assign(state, _this.getGridFeature(f));
                });
            }
            else {
                state = this.getGridFeature(feature);
            }
        }
        else {
            state = this.getAllGridFeatures();
        }
        if (serialize) {
            state = JSON.stringify(state, this.stringifyCallback);
            return state;
        }
        else {
            return state;
        }
    };
    /**
     * Restores grid features' state based on the IGridState object passed as an argument.
     * @param IGridState object to restore state from.
     * @returns
     * ```html
     * <igx-grid [igxGridState]="options"></igx-grid>
     * ```
     * ```typescript
     * @ViewChild(IgxGridStateDirective, { static: true }) public state;
     * this.state.setState(gridState);
     * ```
     */
    IgxGridStateDirective.prototype.setState = function (state) {
        if (typeof state === 'string') {
            state = JSON.parse(state);
        }
        this.state = state;
        this.restoreGridState();
        this.grid.cdr.detectChanges();
    };
    /**
     * The method that calls corresponding methods to restore feature from this.state object.
     */
    IgxGridStateDirective.prototype.restoreGridState = function () {
        var e_1, _a;
        try {
            for (var _b = __values(Object.keys(this.state)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                if (this.state[key]) {
                    this.restoreFeature(key, this.state[key]);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * Restores the state of a feature.
     */
    IgxGridStateDirective.prototype.restoreFeature = function (feature, state) {
        switch (feature) {
            case COLUMNS: {
                this.restoreColumns(state);
                break;
            }
            case FILTERING: {
                this.restoreFiltering(state);
                break;
            }
            case ADVANCED_FILTERING: {
                this.restoreAdvancedFiltering(state);
                break;
            }
            case SORTING: {
                this.restoreSorting(state);
                break;
            }
            case GROUPBY: {
                this.restoreGroupBy(state);
                break;
            }
            case PAGING: {
                this.restorePaging(state);
                break;
            }
            case ROW_SELECTION: {
                this.restoreRowSelection(state);
                break;
            }
            case CELL_SELECTION: {
                this.restoreCellSelection(state);
                break;
            }
        }
    };
    /**
     * Returns an object containing all grid features state.
     */
    IgxGridStateDirective.prototype.getAllGridFeatures = function () {
        var e_2, _a;
        var gridState = {};
        try {
            for (var _b = __values(Object.keys(this.options)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                if (this.options[key]) {
                    var feature = this.getGridFeature(key);
                    gridState = Object.assign(gridState, feature);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        gridState = Object.assign({}, gridState);
        return gridState;
    };
    /**
     * Restores an object containing the state for a grid feature.
     * `serialize` param determines whether the returned object will be serialized to a JSON string. Default value is false.,
     */
    IgxGridStateDirective.prototype.getGridFeature = function (feature) {
        var state = {};
        switch (feature) {
            case COLUMNS: {
                Object.assign(state, this.getColumns());
                break;
            }
            case FILTERING: {
                Object.assign(state, this.getFiltering());
                break;
            }
            case ADVANCED_FILTERING: {
                Object.assign(state, this.getAdvancedFiltering());
                break;
            }
            case SORTING: {
                Object.assign(state, this.getSorting());
                break;
            }
            case GROUPBY: {
                Object.assign(state, this.getGroupBy());
                break;
            }
            case PAGING: {
                Object.assign(state, this.getPaging());
                break;
            }
            case ROW_SELECTION: {
                Object.assign(state, this.getRowSelection());
                break;
            }
            case CELL_SELECTION: {
                Object.assign(state, this.getCellSelection());
                break;
            }
        }
        return state;
    };
    /**
     * Helper method that creates a new array with the current grid columns.
     */
    IgxGridStateDirective.prototype.getColumns = function () {
        var gridColumns = this.grid.columns.sort(this.sortByVisibleIndex).map(function (c) {
            return {
                pinned: c.pinned,
                sortable: c.sortable,
                filterable: c.filterable,
                editable: c.editable,
                sortingIgnoreCase: c.sortingIgnoreCase,
                filteringIgnoreCase: c.filteringIgnoreCase,
                headerClasses: c.headerClasses,
                headerGroupClasses: c.headerGroupClasses,
                maxWidth: c.maxWidth,
                groupable: c.groupable,
                movable: c.movable,
                hidden: c.hidden,
                dataType: c.dataType,
                hasSummary: c.hasSummary,
                field: c.field,
                width: c.width,
                header: c.header,
                resizable: c.resizable,
                searchable: c.searchable
            };
        });
        return { columns: gridColumns };
    };
    IgxGridStateDirective.prototype.getFiltering = function () {
        var filteringState = this.grid.filteringExpressionsTree;
        return { filtering: filteringState };
    };
    IgxGridStateDirective.prototype.getAdvancedFiltering = function () {
        var advancedFiltering = this.grid.advancedFilteringExpressionsTree;
        return { advancedFiltering: advancedFiltering };
    };
    IgxGridStateDirective.prototype.getPaging = function () {
        var pagingState = this.grid.pagingState;
        return { paging: pagingState };
    };
    IgxGridStateDirective.prototype.getSorting = function () {
        var sortingState = this.grid.sortingExpressions;
        sortingState.forEach(function (s) {
            delete s.strategy;
        });
        return { sorting: sortingState };
    };
    IgxGridStateDirective.prototype.getGroupBy = function () {
        var groupingExpressions = this.grid.groupingExpressions;
        groupingExpressions.forEach(function (expr) {
            delete expr.strategy;
        });
        var expansionState = this.grid.groupingExpansionState;
        var groupsExpanded = this.grid.groupsExpanded;
        return { groupBy: { expressions: groupingExpressions, expansion: expansionState, defaultExpanded: groupsExpanded } };
    };
    IgxGridStateDirective.prototype.getRowSelection = function () {
        var selection = this.grid.selectedRows();
        return { rowSelection: selection };
    };
    IgxGridStateDirective.prototype.getCellSelection = function () {
        var selection = this.grid.getSelectedRanges().map(function (range) {
            return { rowStart: range.rowStart, rowEnd: range.rowEnd, columnStart: range.columnStart, columnEnd: range.columnEnd };
        });
        return { cellSelection: selection };
    };
    /**
     * Restores the grid columns by modifying the `columnList` collection of the grid.
     */
    IgxGridStateDirective.prototype.restoreColumns = function (columnsState) {
        var _this = this;
        var newColumns = [];
        var factory = this.resolver.resolveComponentFactory(IgxColumnComponent);
        columnsState.forEach(function (colState) {
            var ref = factory.create(_this.viewRef.injector);
            Object.assign(ref.instance, colState);
            ref.changeDetectorRef.detectChanges();
            newColumns.push(ref.instance);
        });
        this.grid.columnList.reset(newColumns);
        this.grid.columnList.notifyOnChanges();
    };
    IgxGridStateDirective.prototype.sortByVisibleIndex = function (colA, colB) {
        var a = colA.visibleIndex, b = colB.visibleIndex;
        return a > b ? 1 : a < b ? -1 : 0;
    };
    /**
     * Restores the grid filtering state, i.e. sets the `filteringExpressionsTree` property value.
     */
    IgxGridStateDirective.prototype.restoreFiltering = function (state) {
        var filterTree = this.createExpressionsTreeFromObject(state);
        this.grid.filteringExpressionsTree = filterTree;
    };
    /**
     * Restores the grid advanced filtering state, i.e. sets the `advancedFilteringExpressionsTree` property value.
     */
    IgxGridStateDirective.prototype.restoreAdvancedFiltering = function (state) {
        var advFilterTree = this.createExpressionsTreeFromObject(state);
        this.grid.advancedFilteringExpressionsTree = advFilterTree;
    };
    /**
     * Restores the grid sorting state, i.e. sets the `sortingExpressions` property value.
     */
    IgxGridStateDirective.prototype.restoreSorting = function (state) {
        this.grid.sortingExpressions = state;
    };
    /**
     * Restores the grid grouping state, i.e. sets the `groupbyExpressions` property value.
     */
    IgxGridStateDirective.prototype.restoreGroupBy = function (state) {
        this.grid.groupingExpressions = state.expressions;
        if (this.grid.groupsExpanded !== state.defaultExpanded) {
            this.grid.toggleAllGroupRows();
        }
        else {
            this.grid.groupingExpansionState = state.expansion;
        }
    };
    /**
     * Restores the grid paging state, i.e. sets the `perPage` property value and paginate to index.
     */
    IgxGridStateDirective.prototype.restorePaging = function (state) {
        if (this.grid.perPage !== state.recordsPerPage) {
            this.grid.perPage = state.recordsPerPage;
            this.grid.cdr.detectChanges();
        }
        this.grid.page = state.index;
    };
    IgxGridStateDirective.prototype.restoreRowSelection = function (state) {
        this.grid.selectRows(state);
    };
    IgxGridStateDirective.prototype.restoreCellSelection = function (state) {
        var _this = this;
        state.forEach(function (r) {
            var range = { rowStart: r.rowStart, rowEnd: r.rowEnd, columnStart: r.columnStart, columnEnd: r.columnEnd };
            _this.grid.selectRange(range);
        });
    };
    /**
     * This method builds a FilteringExpressionsTree from a provided object.
     */
    IgxGridStateDirective.prototype.createExpressionsTreeFromObject = function (exprTreeObject) {
        var e_3, _a;
        if (!exprTreeObject || !exprTreeObject.filteringOperands) {
            return null;
        }
        var expressionsTree = new FilteringExpressionsTree(exprTreeObject.operator, exprTreeObject.fieldName);
        var _loop_1 = function (item) {
            // Check if item is an expressions tree or a single expression.
            if (item.filteringOperands) {
                var subTree = this_1.createExpressionsTreeFromObject(item);
                expressionsTree.filteringOperands.push(subTree);
            }
            else {
                var expr_1 = item;
                var dataType = void 0;
                if (this_1.grid.columnList.length > 0) {
                    dataType = this_1.grid.columnList.find(function (c) { return c.field === expr_1.fieldName; }).dataType;
                }
                else {
                    dataType = this_1.state[COLUMNS].find(function (c) { return c.field === expr_1.fieldName; }).dataType;
                }
                // when ESF, values are stored in Set.
                // First those values are converted to an array before returning string in the stringifyCallback
                // now we need to convert those back to Set
                if (Array.isArray(expr_1.searchVal)) {
                    expr_1.searchVal = new Set(expr_1.searchVal);
                }
                else {
                    expr_1.searchVal = (dataType === 'date') ? new Date(Date.parse(expr_1.searchVal)) : expr_1.searchVal;
                }
                expr_1.condition = this_1.generateFilteringCondition(dataType, expr_1.condition.name);
                expressionsTree.filteringOperands.push(expr_1);
            }
        };
        var this_1 = this;
        try {
            for (var _b = __values(exprTreeObject.filteringOperands), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                _loop_1(item);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return expressionsTree;
    };
    /**
     * Returns the filtering logic function for a given dataType and condition (contains, greaterThan, etc.)
     */
    IgxGridStateDirective.prototype.generateFilteringCondition = function (dataType, name) {
        var filters;
        switch (dataType) {
            case DataType.Boolean:
                filters = IgxBooleanFilteringOperand.instance();
                break;
            case DataType.Number:
                filters = IgxNumberFilteringOperand.instance();
                break;
            case DataType.Date:
                filters = IgxDateFilteringOperand.instance();
                break;
            case DataType.String:
            default:
                filters = IgxStringFilteringOperand.instance();
                break;
        }
        return filters.condition(name);
    };
    IgxGridStateDirective.prototype.stringifyCallback = function (key, val) {
        if (key === 'searchVal' && val instanceof Set) {
            return Array.from(val);
        }
        return val;
    };
    IgxGridStateDirective.ctorParameters = function () { return [
        { type: IgxGridComponent, decorators: [{ type: Host }, { type: Optional }] },
        { type: ComponentFactoryResolver },
        { type: ViewContainerRef }
    ]; };
    __decorate([
        Input('igxGridState')
    ], IgxGridStateDirective.prototype, "options", null);
    IgxGridStateDirective = __decorate([
        Directive({
            selector: '[igxGridState]'
        }),
        __param(0, Host()), __param(0, Optional())
    ], IgxGridStateDirective);
    return IgxGridStateDirective;
}());
export { IgxGridStateDirective };
/**
 * @hidden
 */
var IgxGridStateModule = /** @class */ (function () {
    function IgxGridStateModule() {
    }
    IgxGridStateModule = __decorate([
        NgModule({
            declarations: [IgxGridStateDirective],
            exports: [IgxGridStateDirective]
        })
    ], IgxGridStateModule);
    return IgxGridStateModule;
}());
export { IgxGridStateModule };
//# sourceMappingURL=data:application/json;base64,