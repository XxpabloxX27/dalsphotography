import { __decorate, __extends } from "tslib";
import { Component, ChangeDetectionStrategy, forwardRef, Input } from '@angular/core';
import { IgxColumnComponent } from './column.component';
import { IgxColumnGroupComponent } from './column-group.component';
var IgxColumnLayoutComponent = /** @class */ (function (_super) {
    __extends(IgxColumnLayoutComponent, _super);
    function IgxColumnLayoutComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.childrenVisibleIndexes = [];
        return _this;
    }
    IgxColumnLayoutComponent_1 = IgxColumnLayoutComponent;
    Object.defineProperty(IgxColumnLayoutComponent.prototype, "width", {
        /**
         * Gets the width of the column layout.
         * ```typescript
         * let columnGroupWidth = this.columnGroup.width;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: function () {
            var width = this.getFilledChildColumnSizes(this.children).reduce(function (acc, val) { return acc + parseInt(val, 10); }, 0);
            return width;
        },
        set: function (val) { },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnLayoutComponent.prototype, "columnLayout", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxColumnLayoutComponent.prototype.getCalcWidth = function () {
        var borderWidth = 0;
        if (this.headerGroup && this.headerGroup.hasLastPinnedChildColumn) {
            var headerStyles = this.grid.document.defaultView.getComputedStyle(this.headerGroup.element.nativeElement.children[0]);
            borderWidth = parseInt(headerStyles.borderRightWidth, 10);
        }
        return _super.prototype.getCalcWidth.call(this) + borderWidth;
    };
    Object.defineProperty(IgxColumnLayoutComponent.prototype, "visibleIndex", {
        /**
         * Gets the column visible index.
         * If the column is not visible, returns `-1`.
         * ```typescript
         * let visibleColumnIndex =  this.column.visibleIndex;
         * ```
         * @memberof IgxColumnComponent
         */
        get: function () {
            if (!isNaN(this._vIndex)) {
                return this._vIndex;
            }
            var unpinnedColumns = this.grid.unpinnedColumns.filter(function (c) { return c.columnLayout && !c.hidden; });
            var pinnedColumns = this.grid.pinnedColumns.filter(function (c) { return c.columnLayout && !c.hidden; });
            var vIndex = -1;
            if (!this.pinned) {
                var indexInCollection = unpinnedColumns.indexOf(this);
                vIndex = indexInCollection === -1 ? -1 : pinnedColumns.length + indexInCollection;
            }
            else {
                vIndex = pinnedColumns.indexOf(this);
            }
            this._vIndex = vIndex;
            return vIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnLayoutComponent.prototype, "hidden", {
        /*
         * Gets whether the column layout is hidden.
         * ```typescript
         * let isHidden = this.columnGroup.hidden;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: function () {
            return this._hidden;
        },
        /**
         * Sets the column layout hidden property.
         * ```typescript
         * <igx-column-layout [hidden] = "true"></igx-column->
         * ```
         * @memberof IgxColumnGroupComponent
         */
        set: function (value) {
            this._hidden = value;
            this.children.forEach(function (child) { return child.hidden = value; });
            if (this.grid && this.grid.columns && this.grid.columns.length > 0) {
                // reset indexes in case columns are hidden/shown runtime
                this.grid.columns.filter(function (x) { return x.columnGroup; }).forEach(function (x) { return x.populateVisibleIndexes(); });
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     *@hidden
    */
    IgxColumnLayoutComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        _super.prototype.ngAfterContentInit.call(this);
        if (!this.hidden) {
            this.hidden = this.allChildren.some(function (x) { return x.hidden; });
        }
        else {
            this.children.forEach(function (child) { return child.hidden = _this.hidden; });
        }
        this.children.forEach(function (child) {
            child.movable = false;
        });
    };
    Object.defineProperty(IgxColumnLayoutComponent.prototype, "hasLastPinnedChildColumn", {
        /*
         * Gets whether the group contains the last pinned child column of the column layout.
         * ```typescript
         * let columsHasLastPinned = this.columnLayout.hasLastPinnedChildColumn;
         * ```
         * @memberof IgxColumnLayoutComponent
         */
        get: function () {
            return this.children.some(function (child) { return child.isLastPinned; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     *@hidden
    */
    IgxColumnLayoutComponent.prototype.populateVisibleIndexes = function () {
        var _this = this;
        this.childrenVisibleIndexes = [];
        var grid = this.gridAPI.grid;
        var columns = grid && grid.pinnedColumns && grid.unpinnedColumns ? grid.pinnedColumns.concat(grid.unpinnedColumns) : [];
        var orderedCols = columns
            .filter(function (x) { return !x.columnGroup && !x.hidden; })
            .sort(function (a, b) { return a.rowStart - b.rowStart || columns.indexOf(a.parent) - columns.indexOf(b.parent) || a.colStart - b.colStart; });
        this.children.forEach(function (child) {
            var rs = child.rowStart || 1;
            var vIndex = 0;
            // filter out all cols with larger rowStart
            var cols = orderedCols.filter(function (c) {
                return !c.columnGroup && (c.rowStart || 1) <= rs;
            });
            vIndex = cols.indexOf(child);
            _this.childrenVisibleIndexes.push({ column: child, index: vIndex });
        });
    };
    var IgxColumnLayoutComponent_1;
    __decorate([
        Input()
    ], IgxColumnLayoutComponent.prototype, "hidden", null);
    IgxColumnLayoutComponent = IgxColumnLayoutComponent_1 = __decorate([
        Component({
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(function () { return IgxColumnLayoutComponent_1; }) }],
            selector: 'igx-column-layout',
            template: ""
        })
    ], IgxColumnLayoutComponent);
    return IgxColumnLayoutComponent;
}(IgxColumnGroupComponent));
export { IgxColumnLayoutComponent };
//# sourceMappingURL=data:application/json;base64,