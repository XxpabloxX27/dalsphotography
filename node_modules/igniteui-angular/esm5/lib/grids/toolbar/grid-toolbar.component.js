import { __decorate, __extends, __param } from "tslib";
import { ChangeDetectorRef, Component, HostBinding, Input, Optional, ViewChild, Inject, TemplateRef } from '@angular/core';
import { DisplayDensityToken, DisplayDensityBase } from '../../core/displayDensity';
import { CsvFileTypes, IgxBaseExporter, IgxCsvExporterOptions, IgxCsvExporterService, IgxExcelExporterOptions, IgxExcelExporterService, AbsoluteScrollStrategy } from '../../services/index';
import { GridBaseAPIService } from '../api.service';
import { IgxButtonDirective } from '../../directives/button/button.directive';
import { IgxDropDownComponent } from '../../drop-down/drop-down.component';
import { IgxColumnHidingComponent } from '../hiding/column-hiding.component';
import { IgxColumnPinningComponent } from '../pinning/column-pinning.component';
import { HorizontalAlignment, VerticalAlignment } from '../../services/overlay/utilities';
import { ConnectedPositioningStrategy } from '../../services/overlay/position';
/**
 * This class encapsulates the Toolbar's logic and is internally used by
 * the `IgxGridComponent`, `IgxTreeGridComponent` and `IgxHierarchicalGridComponent`.
 */
var IgxGridToolbarComponent = /** @class */ (function (_super) {
    __extends(IgxGridToolbarComponent, _super);
    function IgxGridToolbarComponent(gridAPI, cdr, excelExporter, csvExporter, _displayDensityOptions) {
        var _this = _super.call(this, _displayDensityOptions) || this;
        _this.gridAPI = gridAPI;
        _this.cdr = cdr;
        _this.excelExporter = excelExporter;
        _this.csvExporter = csvExporter;
        _this._displayDensityOptions = _displayDensityOptions;
        _this._filterColumnsPrompt = 'Filter columns list ...';
        _this._positionSettings = {
            horizontalDirection: HorizontalAlignment.Left,
            horizontalStartPoint: HorizontalAlignment.Right,
            verticalDirection: VerticalAlignment.Bottom,
            verticalStartPoint: VerticalAlignment.Bottom
        };
        _this._overlaySettings = {
            positionStrategy: new ConnectedPositioningStrategy(_this._positionSettings),
            scrollStrategy: new AbsoluteScrollStrategy(),
            modal: false,
            closeOnOutsideClick: true,
            excludePositionTarget: true
        };
        return _this;
    }
    Object.defineProperty(IgxGridToolbarComponent.prototype, "filterColumnsPrompt", {
        /**
         * Gets the default text shown in the filtering box.
         * ```typescript
         * const filterPrompt = this.grid.toolbar.filterColumnsPrompt;
         * ```
         */
        get: function () {
            return this._filterColumnsPrompt;
        },
        /**
         * Sets the default text shown in the filtering box.
         * ```typescript
         * this.grid.toolbar.filterColumnsPrompt('Filter columns ...');
         * ```
         */
        set: function (value) {
            this._filterColumnsPrompt = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridToolbarComponent.prototype, "defaultDropDownsMaxHeight", {
        /**
         * Gets the height for the `IgxGridToolbarComponent`'s drop down panels.
         * ```typescript
         * const dropdownHeight = this.grid.toolbar.defaultDropDownsMaxHeight;
         * ```
         */
        get: function () {
            var gridHeight = this.grid.calcHeight;
            return (gridHeight) ? gridHeight * 0.7 + 'px' : '100%';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridToolbarComponent.prototype, "grid", {
        /**
         * Returns a reference to the `IgxGridComponent` component, hosting the `IgxGridToolbarComponent`.
         * ```typescript
         * const grid = this.igxGrid1.toolbar.grid;
         * ```
         */
        get: function () {
            return this.gridAPI.grid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridToolbarComponent.prototype, "shouldShowExportButton", {
        /**
         * Returns whether the `IgxGridComponent` renders an export button.
         * ```typescript
         * const exportButton = this.igxGrid1.toolbar.shouldShowExportButton;
         * ```
         */
        get: function () {
            return (this.grid != null && (this.grid.exportExcel || this.grid.exportCsv));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridToolbarComponent.prototype, "shouldShowExportExcelButton", {
        /**
         * Returns whether the `IgxGridComponent` renders an Excel export button.
         * ```typescript
         * const exportExcelButton = this.igxGrid1.toolbar.shouldShowExportExcelButton;
         * ```
         */
        get: function () {
            return (this.grid != null && this.grid.exportExcel);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridToolbarComponent.prototype, "shouldShowExportCsvButton", {
        /**
         * Returns whether the `IgxGridComponent` renders an CSV export button.
         * ```typescript
         * const exportCSVButton = this.igxGrid1.toolbar.shouldShowExportCsvButton;
         * ```
         */
        get: function () {
            return (this.grid != null && this.grid.exportCsv);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridToolbarComponent.prototype, "pinnedColumnsCount", {
        /**
         * Returns how many columns are pinned.
         * ```typescript
         * const pinnedCount = this.igxGrid1.toolbar.pinnedColumnsCount;
         * ```
         */
        get: function () {
            return this.grid.pinnedColumns.filter(function (col) { return !col.columnLayout; }).length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridToolbarComponent.prototype, "hostClass", {
        /**
         * Returns the theme of the `IgxGridToolbarComponent`.
         * ```typescript
         * const toolbarTheme = this.grid.toolbar.hostClass;
         * ```
         */
        get: function () {
            return this.getComponentDensityClass('igx-grid-toolbar');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the title of `IgxGridToolbarComponent`.
     * ```typescript
     * const toolbarTitle = this.igxGrid1.toolbar.getTitle();
     * ```
     */
    IgxGridToolbarComponent.prototype.getTitle = function () {
        return this.grid != null ? this.grid.toolbarTitle : '';
    };
    /**
     * Returns the text of the export button of the `IgxGridToolbarComponent`.
     * ```typescript
     * const toolbarExportText = this.igxGrid1.toolbar.getTitle();
     * ```
     */
    IgxGridToolbarComponent.prototype.getExportText = function () {
        return this.grid != null ? this.grid.exportText : '';
    };
    /**
     * Returns the text of the Excel export button of the `IgxGridToolbarComponent`.
     * ```typescript
     * const toolbarExcelText = this.igxGrid1.toolbar.getExportExcelText();
     * ```
     */
    IgxGridToolbarComponent.prototype.getExportExcelText = function () {
        return this.grid != null ? this.grid.exportExcelText : '';
    };
    /**
     * Returns the text of the CSV export button of the `IgxGridToolbarComponent`.
     * ```typescript
     * const toolbarCSVText = this.igxGrid1.toolbar.getExportCsvText();
     * ```
     */
    IgxGridToolbarComponent.prototype.getExportCsvText = function () {
        return this.grid != null ? this.grid.exportCsvText : '';
    };
    /**
     * Toggles the export button's dropdown menu.
     * ```typescript
     * this.igxGrid1.toolbar.exportClicked();
     * ```
     */
    IgxGridToolbarComponent.prototype.exportClicked = function () {
        this._overlaySettings.positionStrategy.settings.target = this.exportButton.nativeElement;
        this._overlaySettings.outlet = this.grid.outletDirective;
        this.exportDropdown.toggle(this._overlaySettings);
    };
    /**
     * Exports the grid to excel.
     * ```typescript
     * this.igxGrid1.toolbar.exportToExcelClicked();
     * ```
     */
    IgxGridToolbarComponent.prototype.exportToExcelClicked = function () {
        this.performExport(this.excelExporter, 'excel');
    };
    /**
     * Exports the grid to CSV.
     * ```typescript
     * this.igxGrid1.toolbar.exportToCsvClicked();
     * ```
     */
    IgxGridToolbarComponent.prototype.exportToCsvClicked = function () {
        this.performExport(this.csvExporter, 'csv');
    };
    IgxGridToolbarComponent.prototype.performExport = function (exp, exportType) {
        this.exportClicked();
        var fileName = 'ExportedData';
        var options = exportType === 'excel' ?
            new IgxExcelExporterOptions(fileName) :
            new IgxCsvExporterOptions(fileName, CsvFileTypes.CSV);
        var args = { grid: this.grid, exporter: exp, options: options, cancel: false };
        this.grid.onToolbarExporting.emit(args);
        if (args.cancel) {
            return;
        }
        exp.export(this.grid, options);
    };
    /**
     * Toggles the Column Hiding UI.
     * ```typescript
     * this.grid1.toolbar.toggleColumnHidingUI();
     * ```
     */
    IgxGridToolbarComponent.prototype.toggleColumnHidingUI = function () {
        this._overlaySettings.positionStrategy.settings.target = this.columnHidingButton.nativeElement;
        this._overlaySettings.outlet = this.grid.outletDirective;
        this.columnHidingDropdown.toggle(this._overlaySettings);
    };
    /**
     * Toggles the Column Pinning UI.
     * ```typescript
     * this.grid1.toolbar.toggleColumnPinningUI();
     * ```
     */
    IgxGridToolbarComponent.prototype.toggleColumnPinningUI = function () {
        this._overlaySettings.positionStrategy.settings.target = this.columnPinningButton.nativeElement;
        this._overlaySettings.outlet = this.grid.outletDirective;
        this.columnPinningDropdown.toggle(this._overlaySettings);
    };
    /**
     * @hidden @internal
     */
    IgxGridToolbarComponent.prototype.showAdvancedFilteringUI = function () {
        this.grid.openAdvancedFilteringDialog();
    };
    Object.defineProperty(IgxGridToolbarComponent.prototype, "context", {
        /**
         * Returns the `context` object which represents the `template context` binding into the
         * `toolbar custom container` by providing references to the parent IgxGird and the toolbar itself.
         * ```typescript
         * const context =  this.igxGrid.toolbar.context;
         * ```
         */
        get: function () {
            return {
                // $implicit: this
                grid: this.grid,
                toolbar: this
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridToolbarComponent.prototype, "customContentTemplate", {
        /** @hidden */
        get: function () {
            if (this.grid != null && this.grid.toolbarCustomContentTemplate != null) {
                return this.grid.toolbarCustomContentTemplate.template;
            }
            else {
                return null;
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxGridToolbarComponent.ctorParameters = function () { return [
        { type: GridBaseAPIService },
        { type: ChangeDetectorRef },
        { type: IgxExcelExporterService, decorators: [{ type: Optional }] },
        { type: IgxCsvExporterService, decorators: [{ type: Optional }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
    ]; };
    __decorate([
        HostBinding('class.igx-grid-toolbar'),
        Input()
    ], IgxGridToolbarComponent.prototype, "gridID", void 0);
    __decorate([
        Input()
    ], IgxGridToolbarComponent.prototype, "filterColumnsPrompt", null);
    __decorate([
        Input()
    ], IgxGridToolbarComponent.prototype, "defaultDropDownsMaxHeight", null);
    __decorate([
        ViewChild('columnHidingDropdown', { read: IgxDropDownComponent })
    ], IgxGridToolbarComponent.prototype, "columnHidingDropdown", void 0);
    __decorate([
        ViewChild(IgxColumnHidingComponent)
    ], IgxGridToolbarComponent.prototype, "columnHidingUI", void 0);
    __decorate([
        ViewChild('columnHidingButton', { read: IgxButtonDirective })
    ], IgxGridToolbarComponent.prototype, "columnHidingButton", void 0);
    __decorate([
        ViewChild('exportDropdown', { read: IgxDropDownComponent })
    ], IgxGridToolbarComponent.prototype, "exportDropdown", void 0);
    __decorate([
        ViewChild('btnExport', { read: IgxButtonDirective })
    ], IgxGridToolbarComponent.prototype, "exportButton", void 0);
    __decorate([
        ViewChild('columnPinningDropdown', { read: IgxDropDownComponent })
    ], IgxGridToolbarComponent.prototype, "columnPinningDropdown", void 0);
    __decorate([
        ViewChild(IgxColumnPinningComponent)
    ], IgxGridToolbarComponent.prototype, "columnPinningUI", void 0);
    __decorate([
        ViewChild('columnPinningButton', { read: IgxButtonDirective })
    ], IgxGridToolbarComponent.prototype, "columnPinningButton", void 0);
    __decorate([
        HostBinding('attr.class')
    ], IgxGridToolbarComponent.prototype, "hostClass", null);
    IgxGridToolbarComponent = __decorate([
        Component({
            selector: 'igx-grid-toolbar',
            template: "<span class=\"igx-grid-toolbar__title\" *ngIf=\"getTitle()\">\n    {{ getTitle() }}\n</span>\n\n<div class=\"igx-grid-toolbar__custom-content\" *ngIf=\"customContentTemplate != null\">\n    <ng-container *ngTemplateOutlet=\"customContentTemplate; context: context\">\n    </ng-container>\n</div>\n\n<div class=\"igx-grid-toolbar__actions\">\n    <div *ngIf=\"grid.allowAdvancedFiltering\">\n        <button igxButton=\"outlined\" [displayDensity]=\"grid.displayDensity\" #advancedFilteringButton name=\"btnAdvancedFiltering\" igxRipple\n            (click)=\"showAdvancedFilteringUI()\"\n                [ngClass]=\"grid.advancedFilteringExpressionsTree ? 'igx-grid-toolbar__adv-filter--filtered' : 'igx-grid-toolbar__adv-filter'\">\n            <div class=\"igx-grid-toolbar__button-space\">\n                <igx-icon>\n                    filter_list\n                </igx-icon>\n                <span>{{grid.resourceStrings.igx_grid_advanced_filter_title}}</span>\n            </div>\n        </button>\n    </div>\n\n    <div *ngIf=\"grid.columnHiding\">\n        <button igxButton=\"outlined\" [displayDensity]=\"grid.displayDensity\" #columnHidingButton name=\"btnColumnHiding\" igxRipple\n            (click)=\"toggleColumnHidingUI()\">\n            <div  class=\"igx-grid-toolbar__button-space\">\n                <igx-icon *ngIf=\"grid.hiddenColumnsCount > 0\">visibility_off</igx-icon>\n                <igx-icon *ngIf=\"grid.hiddenColumnsCount === 0\">visibility</igx-icon>\n                <span>{{ grid.hiddenColumnsCount }}</span>\n                <span>{{ grid.hiddenColumnsText }}</span>\n            </div>\n        </button>\n        <igx-drop-down #columnHidingDropdown>\n            <igx-column-hiding\n                [columns]=\"grid.columns\"\n                [title]=\"grid.columnHidingTitle\"\n                [filterColumnsPrompt]=\"filterColumnsPrompt\"\n                [columnsAreaMaxHeight]=\"defaultDropDownsMaxHeight\"\n                (onColumnVisibilityChanged)=\"grid.toggleColumnVisibility($event)\">\n            </igx-column-hiding>\n        </igx-drop-down>\n    </div>\n    <div *ngIf=\"grid.columnPinning\">\n        <button igxButton=\"outlined\" [displayDensity]=\"grid.displayDensity\" #columnPinningButton name=\"btnColumnPinning\" igxRipple\n            (click)=\"toggleColumnPinningUI()\">\n            <div  class=\"igx-grid-toolbar__button-space\">\n                <igx-icon *ngIf=\"pinnedColumnsCount > 0\">lock</igx-icon>\n                <igx-icon *ngIf=\"pinnedColumnsCount === 0\">lock_open</igx-icon>\n                <span>{{ pinnedColumnsCount }}</span>\n                <span>{{ grid.pinnedColumnsText }}</span>\n                <span></span>\n            </div>\n        </button>\n        <igx-drop-down #columnPinningDropdown>\n            <igx-column-pinning\n                [columns]=\"grid.columns\"\n                [title]=\"grid.columnPinningTitle\"\n                [filterColumnsPrompt]=\"filterColumnsPrompt\"\n                [columnsAreaMaxHeight]=\"defaultDropDownsMaxHeight\"></igx-column-pinning>\n        </igx-drop-down>\n    </div>\n\n    <div class=\"igx-grid-toolbar__dropdown\" *ngIf=\"shouldShowExportButton\" id=\"btnExport\">\n        <button igxButton=\"outlined\" [displayDensity]=\"grid.displayDensity\" igxRipple #btnExport\n                (click)=\"exportClicked()\">\n            <span class=\"igx-grid-toolbar__button-space\">\n                <igx-icon fontSet=\"material\">import_export</igx-icon>\n                <span>{{ getExportText() }}</span>\n                <igx-icon fontSet=\"material\">arrow_drop_down</igx-icon>\n            </span>\n        </button>\n\n        <igx-drop-down #exportDropdown>\n            <ul class=\"igx-grid-toolbar__dd-list\">\n                <li class=\"igx-grid-toolbar__dd-list-items\" igxRipple *ngIf=\"shouldShowExportExcelButton\" id=\"btnExportExcel\"\n                (click)=\"exportToExcelClicked()\">{{ getExportExcelText() }}</li>\n                <li class=\"igx-grid-toolbar__dd-list-items\" igxRipple *ngIf=\"shouldShowExportCsvButton\" id=\"btnExportCsv\"\n                (click)=\"exportToCsvClicked()\">{{ getExportCsvText() }}</li>\n            </ul>\n        </igx-drop-down>\n    </div>\n</div>\n"
        }),
        __param(2, Optional()),
        __param(3, Optional()),
        __param(4, Optional()), __param(4, Inject(DisplayDensityToken))
    ], IgxGridToolbarComponent);
    return IgxGridToolbarComponent;
}(DisplayDensityBase));
export { IgxGridToolbarComponent };
//# sourceMappingURL=data:application/json;base64,