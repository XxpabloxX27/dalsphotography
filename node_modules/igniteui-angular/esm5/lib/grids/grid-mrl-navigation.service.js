import { __decorate, __extends, __read, __spread } from "tslib";
import { Injectable } from '@angular/core';
import { first } from 'rxjs/operators';
import { IgxGridNavigationService } from './grid-navigation.service';
export var NavigationDirection;
(function (NavigationDirection) {
    NavigationDirection["horizontal"] = "horizontal";
    NavigationDirection["vertical"] = "vertical";
})(NavigationDirection || (NavigationDirection = {}));
/** @hidden */
var IgxGridMRLNavigationService = /** @class */ (function (_super) {
    __extends(IgxGridMRLNavigationService, _super);
    function IgxGridMRLNavigationService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @hidden
     * @internal
     */
    IgxGridMRLNavigationService.prototype.setStartNavigationCell = function (colStart, rowStart, dir) {
        this.startNavigationCell = {
            colStart: colStart,
            rowStart: rowStart,
            direction: dir
        };
    };
    IgxGridMRLNavigationService.prototype.applyNavigationCell = function (colStart, rowStart, navDirection) {
        var oppositeDir = navDirection === NavigationDirection.vertical ?
            NavigationDirection.horizontal : NavigationDirection.vertical;
        if (this.startNavigationCell && this.startNavigationCell.direction !== navDirection) {
            this.startNavigationCell.direction = oppositeDir;
        }
        else {
            this.setStartNavigationCell(colStart, rowStart, oppositeDir);
        }
        return navDirection === NavigationDirection.vertical ?
            this.startNavigationCell.colStart : this.startNavigationCell.rowStart;
    };
    IgxGridMRLNavigationService.prototype.navigateUp = function (rowElement, selectedNode) {
        this.focusCellUpFromLayout(rowElement, selectedNode);
    };
    IgxGridMRLNavigationService.prototype.navigateDown = function (rowElement, selectedNode) {
        this.focusCellDownFromLayout(rowElement, selectedNode);
    };
    IgxGridMRLNavigationService.prototype.isColumnRightEdgeVisible = function (visibleColumnIndex) {
        var column = this.grid.columnList.filter(function (c) { return !c.columnGroup; }).find(function (col) { return col.visibleIndex === visibleColumnIndex; });
        var forOfDir = this.grid.headerContainer;
        var horizontalScroll = forOfDir.getScroll();
        if (!horizontalScroll.clientWidth || (column && column.pinned)) {
            return true;
        }
        else if (column) {
            if (this.isParentColumnFullyVisible(column)) {
                return true;
            }
            var scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);
            return this.displayContainerWidth >= scrollPos.rightScroll - this.displayContainerScrollLeft &&
                this.displayContainerScrollLeft <= scrollPos.leftScroll;
        }
        return false;
    };
    IgxGridMRLNavigationService.prototype.isParentColumnFullyVisible = function (parent) {
        var forOfDir = this.grid.dataRowList.length > 0 ? this.grid.dataRowList.first.virtDirRow : this.grid.headerContainer;
        var horizontalScroll = forOfDir.getScroll();
        if (!horizontalScroll.clientWidth || parent.pinned) {
            return true;
        }
        var index = forOfDir.igxForOf.indexOf(parent);
        return this.displayContainerWidth >= forOfDir.getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft &&
            this.displayContainerScrollLeft <= forOfDir.getColumnScrollLeft(index);
    };
    IgxGridMRLNavigationService.prototype.isColumnLeftEdgeVisible = function (visibleColumnIndex) {
        var forOfDir = this.grid.headerContainer;
        var horizontalScroll = forOfDir.getScroll();
        var column = this.grid.columnList.filter(function (c) { return !c.columnGroup; }).find(function (col) { return col.visibleIndex === visibleColumnIndex; });
        if (!horizontalScroll.clientWidth || column.pinned) {
            return true;
        }
        if (this.isParentColumnFullyVisible(column)) {
            return true;
        }
        var scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);
        return this.displayContainerScrollLeft <= scrollPos.leftScroll;
    };
    IgxGridMRLNavigationService.prototype.onKeydownArrowRight = function (element, selectedNode) {
        this.focusNextCellFromLayout(element, selectedNode);
    };
    IgxGridMRLNavigationService.prototype.onKeydownArrowLeft = function (element, selectedNode) {
        this.focusPrevCellFromLayout(element, selectedNode);
    };
    Object.defineProperty(IgxGridMRLNavigationService.prototype, "gridOrderedColumns", {
        get: function () {
            return __spread(this.grid.pinnedColumns, this.grid.unpinnedColumns).filter(function (c) { return !c.columnGroup; })
                .sort(function (a, b) { return a.visibleIndex - b.visibleIndex; });
        },
        enumerable: true,
        configurable: true
    });
    IgxGridMRLNavigationService.prototype.performTab = function (currentRowEl, selectedNode) {
        var visibleColumnIndex = selectedNode.layout ? selectedNode.layout.columnVisibleIndex : 0;
        var nextElementColumn = this.grid.columns.find(function (x) { return !x.columnGroup && x.visibleIndex === visibleColumnIndex + 1; });
        var rowIndex = selectedNode.row;
        var row = this.grid.getRowByIndex(rowIndex);
        this._moveFocusToCell(currentRowEl, nextElementColumn, row, selectedNode, 'next');
        if (nextElementColumn) {
            this.setStartNavigationCell(nextElementColumn.colStart, nextElementColumn.rowStart, null);
        }
    };
    IgxGridMRLNavigationService.prototype._moveFocusToCell = function (currentRowEl, nextElementColumn, row, selectedNode, dir) {
        var _this = this;
        if (nextElementColumn && row.cells) {
            var nextCell_1 = row.cells.find(function (currCell) { return currCell.column === nextElementColumn; });
            var isVisible = this.isColumnRightEdgeVisible(nextElementColumn.visibleIndex);
            if (!nextCell_1 || !isVisible) {
                this.grid.nativeElement.focus({ preventScroll: true });
                var cb = function () {
                    nextCell_1 = row.cells.find(function (currCell) { return currCell.column === nextElementColumn; });
                    if (_this.grid.rowEditable && _this.isRowInEditMode(row.index)) {
                        if (dir === 'next') {
                            _this.moveNextEditable(row.index, selectedNode.layout.columnVisibleIndex);
                        }
                        else {
                            _this.movePreviousEditable(row.index, selectedNode.layout.columnVisibleIndex);
                        }
                        return;
                    }
                    _this._focusCell(nextCell_1.nativeElement);
                };
                this.performHorizontalScrollToCell(row.index, nextElementColumn.visibleIndex, false, cb);
            }
            else {
                if (this.grid.rowEditable && this.isRowInEditMode(row.index)) {
                    if (dir === 'next') {
                        this.moveNextEditable(row.index, selectedNode.layout.columnVisibleIndex);
                    }
                    else {
                        this.movePreviousEditable(row.index, selectedNode.layout.columnVisibleIndex);
                    }
                    return;
                }
                this._focusCell(nextCell_1.nativeElement);
            }
        }
        else {
            // end of layout reached
            if (this.isRowInEditMode(row.index)) {
                //  TODO: make gridAPI visible for internal use and remove cast to any
                this.grid.gridAPI.submit_value();
                if (dir === 'next') {
                    this.grid.rowEditTabs.first.element.nativeElement.focus();
                }
                else {
                    this.grid.rowEditTabs.last.element.nativeElement.focus();
                }
                return;
            }
            if (dir === 'next') {
                _super.prototype.navigateDown.call(this, currentRowEl, { row: row.index, column: 0 });
            }
            else {
                var lastVisibleIndex_1 = 0;
                this.grid.unpinnedColumns.forEach(function (col) {
                    lastVisibleIndex_1 = Math.max(lastVisibleIndex_1, col.visibleIndex);
                });
                _super.prototype.navigateUp.call(this, currentRowEl, { row: row.index, column: lastVisibleIndex_1 });
            }
        }
    };
    IgxGridMRLNavigationService.prototype.performShiftTabKey = function (currentRowEl, selectedNode) {
        var visibleColumnIndex = selectedNode.layout ? selectedNode.layout.columnVisibleIndex : 0;
        var rowIndex = selectedNode.row;
        var row = this.grid.getRowByIndex(rowIndex);
        var prevElementColumn = this.grid.columns.find(function (x) { return !x.columnGroup && x.visibleIndex === visibleColumnIndex - 1 && !x.hidden; });
        this._moveFocusToCell(currentRowEl, prevElementColumn, row, selectedNode, 'prev');
        if (prevElementColumn) {
            this.setStartNavigationCell(prevElementColumn.colStart, prevElementColumn.rowStart, null);
        }
    };
    IgxGridMRLNavigationService.prototype.focusCellUpFromLayout = function (rowElement, selectedNode) {
        var _this = this;
        var isNonDataRow = rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row' || this._isDetailRecordAt(selectedNode.row);
        var currentRowStart = selectedNode.layout ? selectedNode.layout.rowStart : 1;
        var currentColStart = this.applyNavigationCell(selectedNode.layout ? selectedNode.layout.colStart : 1, currentRowStart, NavigationDirection.vertical);
        var parentIndex = selectedNode.column;
        var columnLayout = this.grid.columns.find(function (x) { return x.columnLayout && x.visibleIndex === parentIndex; });
        var movePrev;
        // check if element up is from the same layout
        var upperElementColumn = columnLayout.children.find(function (c) {
            return (c.rowEnd === currentRowStart || c.rowStart + c.gridRowSpan === currentRowStart) &&
                c.colStart <= currentColStart &&
                (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan);
        });
        if (isNonDataRow || !upperElementColumn) {
            // no prev row in current row layout, go to next row last rowstart
            var layoutRowEnd_1 = this.grid.multiRowLayoutRowSize + 1;
            upperElementColumn = columnLayout.children.find(function (c) {
                return (c.rowEnd === layoutRowEnd_1 || c.rowStart + c.gridRowSpan === layoutRowEnd_1) &&
                    c.colStart <= currentColStart &&
                    (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan);
            });
            movePrev = true;
        }
        var rowIndex = movePrev ? selectedNode.row - 1 : selectedNode.row;
        if (rowIndex < 0) {
            // end of rows reached.
            return;
        }
        var prevRow;
        var cb = function () {
            prevRow = _this.grid.getRowByIndex(rowIndex);
            if (prevRow && prevRow.cells) {
                _this._focusCell(upperElementColumn.cells.find(function (c) { return c.rowIndex === prevRow.index; }).nativeElement);
            }
            else if (prevRow) {
                prevRow.nativeElement.focus({ preventScroll: true });
            }
            else {
                var prevElem = _this.getRowByIndex(rowIndex, '');
                prevElem.focus({ preventScroll: true });
            }
        };
        if (this.shouldPerformVerticalScroll(rowIndex, upperElementColumn.visibleIndex)) {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.performVerticalScrollToCell(rowIndex, upperElementColumn.visibleIndex, cb);
        }
        else {
            cb();
        }
    };
    IgxGridMRLNavigationService.prototype.focusCellDownFromLayout = function (rowElement, selectedNode) {
        var _this = this;
        var isNonDataRow = rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row' || this._isDetailRecordAt(selectedNode.row);
        var parentIndex = selectedNode.column;
        var columnLayout = this.grid.columns.find(function (x) { return x.columnLayout && x.visibleIndex === parentIndex; });
        var currentRowEnd = selectedNode.layout ? selectedNode.layout.rowEnd || selectedNode.layout.rowStart + 1 : 2;
        var currentColStart = this.applyNavigationCell(selectedNode.layout ? selectedNode.layout.colStart : 1, selectedNode.layout ? selectedNode.layout.rowStart : 1, NavigationDirection.vertical);
        var moveNext;
        // check if element down is from the same layout
        var nextElementColumn = columnLayout.children.find(function (c) { return c.rowStart === currentRowEnd &&
            c.colStart <= currentColStart &&
            (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan); });
        if (isNonDataRow || !nextElementColumn) {
            // no next row in current row layout, go to next row first rowstart
            nextElementColumn = columnLayout.children.find(function (c) { return c.rowStart === 1 &&
                c.colStart <= currentColStart &&
                (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan); });
            moveNext = true;
        }
        var rowIndex = moveNext ? selectedNode.row + 1 : selectedNode.row;
        if (rowIndex > this.grid.dataView.length - 1) {
            // end of rows reached.
            return;
        }
        var nextRow;
        var cb = function () {
            nextRow = _this.grid.getRowByIndex(rowIndex);
            if (nextRow && nextRow.cells) {
                _this._focusCell(nextElementColumn.cells.find(function (c) { return c.rowIndex === nextRow.index; }).nativeElement);
            }
            else if (nextRow) {
                nextRow.nativeElement.focus({ preventScroll: true });
            }
            else {
                var nextElem = _this.getRowByIndex(rowIndex, '');
                nextElem.focus({ preventScroll: true });
            }
        };
        if (this.shouldPerformVerticalScroll(rowIndex, nextElementColumn.visibleIndex)) {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.performVerticalScrollToCell(rowIndex, nextElementColumn.visibleIndex, cb);
        }
        else {
            cb();
        }
    };
    IgxGridMRLNavigationService.prototype.focusNextCellFromLayout = function (cellElement, selectedNode) {
        var _this = this;
        var parentIndex = selectedNode.column;
        var columnLayout = this.grid.columns.find(function (x) { return x.columnLayout && x.visibleIndex === parentIndex; });
        var currentColEnd = selectedNode.layout.colEnd || selectedNode.layout.colStart + 1;
        var currentRowStart = this.applyNavigationCell(selectedNode.layout.colStart, selectedNode.layout.rowStart, NavigationDirection.horizontal);
        var rowIndex = selectedNode.row;
        // check if next element is from the same layout
        var nextElementColumn = columnLayout.children.find(function (c) { return c.colStart === currentColEnd &&
            c.rowStart <= currentRowStart &&
            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan); });
        if (!nextElementColumn) {
            // no next column in current layout, search for next layout
            columnLayout = this.grid.columns.find(function (c) { return c.columnLayout && !c.hidden && c.visibleIndex === columnLayout.visibleIndex + 1; });
            if (!columnLayout) {
                // reached the end
                return null;
            }
            // next element is from the next layout
            nextElementColumn = columnLayout.children.find(function (c) { return c.colStart === 1 &&
                c.rowStart <= currentRowStart &&
                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan); });
        }
        var cb = function () {
            var nextElement = nextElementColumn.cells.find(function (c) { return c.rowIndex === rowIndex; }).nativeElement;
            _this._focusCell(nextElement);
        };
        if (!this.isColumnRightEdgeVisible(nextElementColumn.visibleIndex)) {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);
        }
        else {
            cb();
        }
    };
    IgxGridMRLNavigationService.prototype.focusPrevCellFromLayout = function (cellElement, selectedNode) {
        var _this = this;
        var parentIndex = selectedNode.column;
        var columnLayout = this.grid.columns.find(function (x) { return x.columnLayout && x.visibleIndex === parentIndex; });
        var currentColStart = selectedNode.layout.colStart;
        var currentRowStart = this.applyNavigationCell(currentColStart, selectedNode.layout.rowStart, NavigationDirection.horizontal);
        var rowIndex = selectedNode.row;
        // check previous element is from the same layout
        var prevElementColumn = columnLayout.children
            .find(function (c) { return (c.colEnd === currentColStart || c.colStart + c.gridColumnSpan === currentColStart) &&
            c.rowStart <= currentRowStart &&
            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan); });
        if (!prevElementColumn) {
            // no prev column in current layout, seacrh for prev layout
            columnLayout = this.grid.columns.find(function (c) { return c.columnLayout && !c.hidden && c.visibleIndex === columnLayout.visibleIndex - 1; });
            if (!columnLayout) {
                // reached the end
                return null;
            }
            var layoutSize_1 = columnLayout.getInitialChildColumnSizes(columnLayout.children).length;
            // first element is from the next layout
            prevElementColumn = columnLayout.children
                .find(function (c) { return (c.colEnd === layoutSize_1 + 1 || c.colStart + c.gridColumnSpan === layoutSize_1 + 1) &&
                c.rowStart <= currentRowStart &&
                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan); });
        }
        var cb = function () {
            var prevElement = prevElementColumn.cells.find(function (c) { return c.rowIndex === rowIndex; }).nativeElement;
            _this._focusCell(prevElement);
        };
        if (!this.isColumnLeftEdgeVisible(prevElementColumn.visibleIndex)) {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.performHorizontalScrollToCell(rowIndex, prevElementColumn.visibleIndex, false, cb);
        }
        else {
            cb();
        }
    };
    IgxGridMRLNavigationService.prototype.onKeydownEnd = function (rowIndex, isSummary, cellRowStart) {
        var _this = this;
        if (isSummary === void 0) { isSummary = false; }
        var layouts = this.grid.columns.filter(function (c) { return c.columnLayout && !c.hidden; }).sort(function (a, b) { return a.visibleIndex - b.visibleIndex; });
        var lastLayout = layouts[layouts.length - 1];
        var lastLayoutChildren = lastLayout.children;
        var layoutSize = lastLayout.getInitialChildColumnSizes(lastLayoutChildren).length;
        var currentRowStart = this.applyNavigationCell(this.startNavigationCell ? this.startNavigationCell.colStart : 1, cellRowStart || this.grid.multiRowLayoutRowSize, NavigationDirection.horizontal);
        var nextElementColumn = lastLayout.children.find(function (c) {
            return (c.colEnd === layoutSize + 1 || c.colStart + c.gridColumnSpan === layoutSize + 1) &&
                c.rowStart <= currentRowStart &&
                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan);
        });
        var indexInLayout = lastLayoutChildren.toArray().indexOf(nextElementColumn);
        var rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;
        var rowElement = rowList.find(function (row) { return row.index === rowIndex; });
        if (!rowElement) {
            return;
        }
        rowElement = rowElement.nativeElement;
        if (!this.isColumnRightEdgeVisible(nextElementColumn.visibleIndex)) {
            this.grid.nativeElement.focus({ preventScroll: true });
            var cb = function () {
                var allBlocks = rowElement.querySelectorAll(_this.getColumnLayoutSelector());
                var cell = allBlocks[allBlocks.length - 1].children[indexInLayout];
                _this._focusCell(cell);
            };
            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);
            return;
        }
        else {
            var allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());
            var cell = allBlocks[allBlocks.length - 1].children[indexInLayout];
            this._focusCell(cell);
        }
    };
    IgxGridMRLNavigationService.prototype.onKeydownHome = function (rowIndex, isSummary, cellRowStart) {
        var _this = this;
        if (isSummary === void 0) { isSummary = false; }
        if (cellRowStart === void 0) { cellRowStart = 1; }
        var firstLayout = this.grid.columns.filter(function (c) { return c.columnLayout && !c.hidden; })[0];
        var lastLayoutChildren = firstLayout.children.toArray();
        var currentRowStart = this.applyNavigationCell(this.startNavigationCell ? this.startNavigationCell.colStart : 1, cellRowStart, NavigationDirection.horizontal);
        var nextElementColumn = firstLayout.children.find(function (c) {
            return c.colStart === 1 &&
                c.rowStart <= currentRowStart &&
                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan);
        });
        var indexInLayout = lastLayoutChildren.indexOf(nextElementColumn);
        var rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;
        var rowElement = rowList.find(function (row) { return row.index === rowIndex; });
        if (!rowElement) {
            return;
        }
        rowElement = rowElement.nativeElement;
        if (!this.isColumnLeftEdgeVisible(nextElementColumn.visibleIndex)) {
            this.grid.nativeElement.focus({ preventScroll: true });
            var cb = function () {
                var allBlocks = rowElement.querySelectorAll(_this.getColumnLayoutSelector());
                var cell = allBlocks[0].children[indexInLayout];
                _this._focusCell(cell);
            };
            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);
            return;
        }
        else {
            var allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());
            var cell = allBlocks[0].children[indexInLayout];
            this._focusCell(cell);
        }
    };
    IgxGridMRLNavigationService.prototype.getColumnLayoutSelector = function () {
        return '.igx-grid__mrl-block';
    };
    IgxGridMRLNavigationService.prototype.getChildColumnScrollPositions = function (visibleColIndex) {
        var forOfDir = this.grid.dataRowList.length > 0 ? this.grid.dataRowList.first.virtDirRow : this.grid.headerContainer;
        var targetCol = this.getColunmByVisibleIndex(visibleColIndex);
        var parent = targetCol.parent;
        var parentVIndex = forOfDir.igxForOf.indexOf(parent);
        var leftScroll = forOfDir.getColumnScrollLeft(parentVIndex), rightScroll = 0;
        // caculate offset from parent based on target column colStart and colEnd and the resolved child column sizes.
        var childSizes = parent.getFilledChildColumnSizes(parent.children);
        var colStart = targetCol.colStart || 1;
        var colEnd = targetCol.colEnd || colStart + 1;
        for (var i = 1; i < colStart; i++) {
            leftScroll += parseInt(childSizes[i - 1], 10);
        }
        rightScroll += leftScroll;
        for (var j = colStart; j < colEnd; j++) {
            rightScroll += parseInt(childSizes[j - 1], 10);
        }
        return { leftScroll: leftScroll, rightScroll: rightScroll };
    };
    IgxGridMRLNavigationService.prototype.getColunmByVisibleIndex = function (visibleColIndex) {
        visibleColIndex = visibleColIndex < 0 ? 0 : visibleColIndex;
        return this.grid.columnList.find(function (col) { return !col.columnLayout && col.visibleIndex === visibleColIndex; });
    };
    IgxGridMRLNavigationService.prototype.shouldPerformVerticalScroll = function (rowIndex, visibleColumnIndex) {
        if (this._isGroupRecordAt(rowIndex) || this._isDetailRecordAt(rowIndex)) {
            return _super.prototype.shouldPerformVerticalScroll.call(this, rowIndex, visibleColumnIndex);
        }
        if (!_super.prototype.shouldPerformVerticalScroll.call(this, rowIndex, visibleColumnIndex)) {
            return false;
        }
        var targetRow = this.grid.summariesRowList.filter(function (s) { return s.index !== 0; })
            .concat(this.grid.rowList.toArray()).find(function (r) { return r.index === rowIndex; });
        var scrollTop = Math.abs(this.grid.verticalScrollContainer.getScroll().scrollTop);
        var containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;
        var scrollPos = this.getVerticalScrollPositions(rowIndex, visibleColumnIndex);
        if (!targetRow || targetRow.nativeElement.offsetTop + scrollPos.topOffset < Math.abs(this.verticalDCTopOffset)
            || containerHeight && containerHeight < scrollPos.rowBottom - scrollTop) {
            return true;
        }
        else {
            return false;
        }
    };
    Object.defineProperty(IgxGridMRLNavigationService.prototype, "verticalDCTopOffset", {
        get: function () {
            return parseInt(this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement.style.top, 10);
        },
        enumerable: true,
        configurable: true
    });
    IgxGridMRLNavigationService.prototype._isGroupRecordAt = function (rowIndex) {
        var record = this.grid.dataView[rowIndex];
        return record.records && record.records.length;
    };
    IgxGridMRLNavigationService.prototype._isDetailRecordAt = function (rowIndex) {
        var record = this.grid.dataView[rowIndex];
        return this.grid.isDetailRecord(record);
    };
    IgxGridMRLNavigationService.prototype.performVerticalScrollToCell = function (rowIndex, visibleColumnIndex, cb) {
        if (this._isGroupRecordAt(rowIndex) || this._isDetailRecordAt(rowIndex)) {
            return _super.prototype.performVerticalScrollToCell.call(this, rowIndex, visibleColumnIndex, cb);
        }
        var containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;
        var scrollTop = Math.abs(this.grid.verticalScrollContainer.getScroll().scrollTop);
        var scrollPos = this.getVerticalScrollPositions(rowIndex, visibleColumnIndex);
        var targetRow = this.grid.summariesRowList.filter(function (s) { return s.index !== 0; })
            .concat(this.grid.rowList.toArray()).find(function (r) { return r.index === rowIndex; });
        var isPrevious = (scrollTop > scrollPos.rowTop) && (!targetRow ||
            targetRow.nativeElement.offsetTop + scrollPos.topOffset < Math.abs(this.verticalDCTopOffset));
        var scrollAmount = isPrevious ? scrollPos.rowTop : Math.abs(scrollTop + containerHeight - scrollPos.rowBottom);
        this.grid.verticalScrollContainer.onChunkLoad
            .pipe(first()).subscribe(function () {
            cb();
        });
        if (isPrevious) {
            this.grid.verticalScrollContainer.scrollPosition = scrollAmount;
        }
        else {
            this.grid.verticalScrollContainer.addScrollTop(scrollAmount);
        }
    };
    IgxGridMRLNavigationService.prototype.getVerticalScrollPositions = function (rowIndex, visibleColIndex) {
        var targetCol = this.getColunmByVisibleIndex(visibleColIndex);
        var topOffset = (targetCol.rowStart - 1) * this.grid.defaultRowHeight;
        var rowTop = this.grid.verticalScrollContainer.sizesCache[rowIndex] + topOffset;
        var rowBottom = rowTop + (this.grid.defaultRowHeight * targetCol.gridRowSpan);
        return { rowTop: rowTop, rowBottom: rowBottom, topOffset: topOffset };
    };
    IgxGridMRLNavigationService.prototype.performHorizontalScrollToCell = function (rowIndex, visibleColumnIndex, isSummary, cb) {
        var _this = this;
        if (isSummary === void 0) { isSummary = false; }
        var scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);
        var hScroll = this.horizontalScroll(rowIndex);
        this.grid.parentVirtDir.onChunkLoad
            .pipe(first())
            .subscribe(function () {
            if (cb) {
                cb();
            }
            else {
                _this._focusCell(_this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary));
            }
        });
        var isPrevItem = hScroll.getScroll().scrollLeft > scrollPos.leftScroll;
        var containerSize = parseInt(hScroll.igxForContainerSize, 10);
        var nextScroll = isPrevItem ? scrollPos.leftScroll : scrollPos.rightScroll - containerSize;
        hScroll.scrollPosition = nextScroll;
    };
    IgxGridMRLNavigationService.prototype._focusCell = function (cellElem) {
        // in case of variable row heights in mrl grid make sure cell is really in view after it has been rendered.
        var gridBoundingClientRect = this.grid.tbody.nativeElement.getBoundingClientRect();
        var diffTop = cellElem.getBoundingClientRect().top - gridBoundingClientRect.top;
        var diffBottom = cellElem.getBoundingClientRect().bottom - gridBoundingClientRect.bottom;
        if (diffTop < 0) {
            // cell is above grid top - not visible
            this.grid.nativeElement.focus({ preventScroll: true });
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first())
                .subscribe(function () {
                cellElem.focus({ preventScroll: true });
            });
            this.grid.verticalScrollContainer.addScrollTop(diffTop);
        }
        else if (diffBottom > 0) {
            // cell is below grid bottom - not visible
            this.grid.nativeElement.focus({ preventScroll: true });
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first())
                .subscribe(function () {
                cellElem.focus({ preventScroll: true });
            });
            this.grid.verticalScrollContainer.addScrollTop(diffBottom);
        }
        else {
            // cell is visible
            cellElem.focus({ preventScroll: true });
        }
    };
    IgxGridMRLNavigationService.prototype.goToFirstCell = function () {
        this.startNavigationCell = null;
        _super.prototype.goToFirstCell.call(this);
    };
    IgxGridMRLNavigationService.prototype.goToLastCell = function () {
        this.startNavigationCell = null;
        _super.prototype.goToLastCell.call(this);
    };
    IgxGridMRLNavigationService = __decorate([
        Injectable()
    ], IgxGridMRLNavigationService);
    return IgxGridMRLNavigationService;
}(IgxGridNavigationService));
export { IgxGridMRLNavigationService };
//# sourceMappingURL=data:application/json;base64,