import { __decorate } from "tslib";
import { ChangeDetectorRef, DoCheck, ElementRef, forwardRef, HostBinding, HostListener, Input, QueryList, ViewChild, ViewChildren, Directive } from '@angular/core';
import { IgxCheckboxComponent } from '../checkbox/checkbox.component';
import { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';
import { GridBaseAPIService } from './api.service';
import { IgxGridCellComponent } from './cell.component';
import { TransactionType } from '../services';
import { IgxGridSelectionService, IgxGridCRUDService, IgxRow } from './selection/selection.service';
import { DeprecateProperty } from '../core/deprecateDecorators';
var IgxRowDirective = /** @class */ (function () {
    function IgxRowDirective(gridAPI, crudService, selectionService, element, cdr) {
        this.gridAPI = gridAPI;
        this.crudService = crudService;
        this.selectionService = selectionService;
        this.element = element;
        this.cdr = cdr;
        /**
         * @hidden
         */
        this.role = 'row';
        /**
         * @hidden
         */
        this.dragging = false;
        /**
         * @hidden
         */
        this.focused = false;
        /**
         * @hidden
         * @internal
         */
        this.defaultCssClass = 'igx-grid__tr';
    }
    Object.defineProperty(IgxRowDirective.prototype, "rowData", {
        /**
         *  The data passed to the row component.
         *
         * ```typescript
         * // get the row data for the first selected row
         * let selectedRowData = this.grid.selectedRows[0].rowData;
         * ```
         */
        get: function () {
            if (this.inEditMode) {
                return Object.assign({}, this._rowData, this.grid.transactions.getAggregatedValue(this.rowID, false));
            }
            return this._rowData;
        },
        set: function (v) {
            this._rowData = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowDirective.prototype, "dataRowIndex", {
        get: function () {
            return this.index;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowDirective.prototype, "styleClasses", {
        /**
         * @hidden
         */
        get: function () {
            return this.resolveClasses();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowDirective.prototype, "selected", {
        /**
         * @hidden
         */
        get: function () {
            return this.selectionService.isRowSelected(this.rowID);
        },
        set: function (value) {
            value ? this.selectionService.selectRowsWithNoEvent([this.rowID]) :
                this.selectionService.deselectRowsWithNoEvent([this.rowID]);
            this.grid.cdr.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowDirective.prototype, "columns", {
        /**
         * @hidden
         */
        get: function () {
            return this.grid.visibleColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowDirective.prototype, "viewIndex", {
        /**
         * @hidden
         * @internal
         */
        get: function () {
            if (this.grid.groupingExpressions.length) {
                return this.grid.filteredSortedData.indexOf(this.rowData);
            }
            return this.index + this.grid.page * this.grid.perPage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowDirective.prototype, "pinnedColumns", {
        /**
         * @hidden
         */
        get: function () {
            return this.grid.pinnedColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowDirective.prototype, "unpinnedColumns", {
        /**
         * @hidden
         */
        get: function () {
            return this.grid.unpinnedColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowDirective.prototype, "showRowSelectors", {
        /**
         * @hidden
         */
        get: function () {
            return this.grid.showRowSelectors;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowDirective.prototype, "dirty", {
        /** @hidden */
        get: function () {
            var row = this.grid.transactions.getState(this.rowID);
            if (row) {
                return row.type === TransactionType.ADD || row.type === TransactionType.UPDATE;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowDirective.prototype, "isSelected", {
        get: function () {
            return this.selectionService.isRowSelected(this.rowID);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowDirective.prototype, "rowDraggable", {
        /**
         * @hidden
         */
        get: function () {
            return this.grid.rowDraggable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowDirective.prototype, "added", {
        /** @hidden */
        get: function () {
            var row = this.grid.transactions.getState(this.rowID);
            if (row) {
                return row.type === TransactionType.ADD;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowDirective.prototype, "deleted", {
        /** @hidden */
        get: function () {
            return this.gridAPI.row_deleted_transaction(this.rowID);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowDirective.prototype, "inEditMode", {
        // TODO: Refactor
        get: function () {
            if (this.grid.rowEditable) {
                var editRowState = this.crudService.row;
                return (editRowState && editRowState.id === this.rowID) || false;
            }
            else {
                return false;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowDirective.prototype, "grid", {
        /**
         * Get a reference to the grid that contains the selected row.
         *
         * ```typescript
         * handleRowSelection(event) {
         *  // the grid on which the onRowSelectionChange event was triggered
         *  const grid = event.row.grid;
         * }
         * ```
         *
         * ```html
         *  <igx-grid
         *    [data]="data"
         *    (onRowSelectionChange)="handleRowSelection($event)">
         *  </igx-grid>
         * ```
         */
        get: function () {
            return this.gridAPI.grid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowDirective.prototype, "rowID", {
        /**
         * Gets the ID of the row.
         * A row in the grid is identified either by:
         * - primaryKey data value,
         * - the whole rowData, if the primaryKey is omitted.
         *
         * ```typescript
         * let rowID = this.grid.selectedRows[2].rowID;
         * ```
         */
        get: function () {
            var primaryKey = this.grid.primaryKey;
            return primaryKey ? this._rowData[primaryKey] : this._rowData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowDirective.prototype, "nativeElement", {
        /**
         * The native DOM element representing the row. Could be null in certain environments.
         *
         * ```typescript
         * // get the nativeElement of the second selected row
         * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;
         * ```
         */
        get: function () {
            return this.element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * @internal
     */
    IgxRowDirective.prototype.onClick = function (event) {
        if (this.grid.rowSelection === 'none' || this.deleted) {
            return;
        }
        if (event.shiftKey && this.grid.rowSelection === 'multiple') {
            this.selectionService.selectMultipleRows(this.rowID, this.rowData, event);
            return;
        }
        this.selectionService.selectRowById(this.rowID, !event.ctrlKey, event);
    };
    /**
     * @hidden
     */
    IgxRowDirective.prototype.onRowSelectorClick = function (event) {
        event.stopPropagation();
        if (event.shiftKey && this.grid.rowSelection === 'multiple') {
            this.selectionService.selectMultipleRows(this.rowID, this.rowData, event);
            return;
        }
        this.selected ? this.selectionService.deselectRow(this.rowID, event) :
            this.selectionService.selectRowById(this.rowID, false, event);
    };
    /**
     * Updates the specified row object and the data source record with the passed value.
     * This method emits `onEditDone` event.
     *
     * ```typescript
     * // update the second selected row's value
     * let newValue = "Apple";
     * this.grid.selectedRows[1].update(newValue);
     * ```
     */
    IgxRowDirective.prototype.update = function (value) {
        var crudService = this.crudService;
        if (crudService.inEditMode && crudService.cell.id.rowID === this.rowID) {
            this.grid.endEdit(false);
        }
        var row = new IgxRow(this.rowID, this.index, this.rowData);
        this.gridAPI.update_row(row, value);
        this.cdr.markForCheck();
    };
    /**
     * Removes the specified row from the grid's data source.
     * This method emits `onRowDeleted` event.
     *
     * ```typescript
     * // delete the third selected row from the grid
     * this.grid.selectedRows[2].delete();
     * ```
     */
    IgxRowDirective.prototype.delete = function () {
        this.grid.deleteRowById(this.rowID);
    };
    Object.defineProperty(IgxRowDirective.prototype, "rowCheckboxAriaLabel", {
        /**
         * @hidden
         */
        get: function () {
            return this.grid.primaryKey ?
                this.selected ? 'Deselect row with key ' + this.rowID : 'Select row with key ' + this.rowID :
                this.selected ? 'Deselect row' : 'Select row';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    IgxRowDirective.prototype.ngDoCheck = function () {
        this.cdr.markForCheck();
    };
    /**
     * @hidden
     */
    IgxRowDirective.prototype.resolveClasses = function () {
        var indexClass = this.index % 2 ? this.grid.evenRowCSS : this.grid.oddRowCSS;
        var selectedClass = this.selected ? 'igx-grid__tr--selected' : '';
        var editClass = this.inEditMode ? 'igx-grid__tr--edit' : '';
        var dirtyClass = this.dirty ? 'igx-grid__tr--edited' : '';
        var deletedClass = this.deleted ? 'igx-grid__tr--deleted' : '';
        var mrlClass = this.grid.hasColumnLayouts ? 'igx-grid__tr--mrl' : '';
        var dragClass = this.dragging ? 'igx-grid__tr--drag' : '';
        return (this.defaultCssClass + " " + indexClass + " " + selectedClass + " " + editClass + " " + dirtyClass + "\n         " + deletedClass + " " + mrlClass + " " + dragClass).trim();
    };
    Object.defineProperty(IgxRowDirective.prototype, "resolveDragIndicatorClasses", {
        /**
         * @hidden
         */
        get: function () {
            var defaultDragIndicatorCssClass = 'igx-grid__drag-indicator';
            var dragIndicatorOff = this.grid.rowDragging && !this.dragging ? 'igx-grid__drag-indicator--off' : '';
            return defaultDragIndicatorCssClass + " " + dragIndicatorOff;
        },
        enumerable: true,
        configurable: true
    });
    IgxRowDirective.ctorParameters = function () { return [
        { type: GridBaseAPIService },
        { type: IgxGridCRUDService },
        { type: IgxGridSelectionService },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input()
    ], IgxRowDirective.prototype, "rowData", null);
    __decorate([
        Input()
    ], IgxRowDirective.prototype, "index", void 0);
    __decorate([
        Input()
    ], IgxRowDirective.prototype, "gridID", void 0);
    __decorate([
        ViewChild('igxDirRef', { read: IgxGridForOfDirective })
    ], IgxRowDirective.prototype, "virtDirRow", void 0);
    __decorate([
        ViewChild(forwardRef(function () { return IgxCheckboxComponent; }), { read: IgxCheckboxComponent })
    ], IgxRowDirective.prototype, "checkboxElement", void 0);
    __decorate([
        ViewChildren(forwardRef(function () { return IgxGridCellComponent; }))
    ], IgxRowDirective.prototype, "cells", void 0);
    __decorate([
        HostBinding('attr.role')
    ], IgxRowDirective.prototype, "role", void 0);
    __decorate([
        HostBinding('attr.data-rowIndex')
    ], IgxRowDirective.prototype, "dataRowIndex", null);
    __decorate([
        HostBinding('class')
    ], IgxRowDirective.prototype, "styleClasses", null);
    __decorate([
        Input(),
        HostBinding('attr.aria-selected')
    ], IgxRowDirective.prototype, "selected", null);
    __decorate([
        DeprecateProperty('isSelected property is deprecated. Use selected property instead.')
    ], IgxRowDirective.prototype, "isSelected", null);
    __decorate([
        HostListener('click', ['$event'])
    ], IgxRowDirective.prototype, "onClick", null);
    IgxRowDirective = __decorate([
        Directive({
            selector: '[igxRowBaseComponent]'
        })
    ], IgxRowDirective);
    return IgxRowDirective;
}());
export { IgxRowDirective };
//# sourceMappingURL=data:application/json;base64,