import { __decorate } from "tslib";
import { NgModule } from '@angular/core';
import { IgxTreeGridComponent } from './tree-grid.component';
import { IgxTreeGridRowComponent } from './tree-grid-row.component';
import { IgxGridCommonModule } from '../grid-common.module';
import { IgxTreeGridHierarchizingPipe } from './tree-grid.pipes';
import { IgxTreeGridFlatteningPipe, IgxTreeGridSortingPipe, IgxTreeGridPagingPipe, IgxTreeGridTransactionPipe } from './tree-grid.pipes';
import { IgxTreeGridCellComponent } from './tree-cell.component';
import { IgxTreeGridFilteringPipe } from './tree-grid.filtering.pipe';
import { IgxTreeGridSummaryPipe } from './tree-grid.summary.pipe';
import { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';
/**
 * @hidden
 */
var IgxTreeGridModule = /** @class */ (function () {
    function IgxTreeGridModule() {
    }
    IgxTreeGridModule = __decorate([
        NgModule({
            declarations: [
                IgxTreeGridComponent,
                IgxTreeGridRowComponent,
                IgxTreeGridCellComponent,
                IgxTreeGridHierarchizingPipe,
                IgxTreeGridFlatteningPipe,
                IgxTreeGridSortingPipe,
                IgxTreeGridFilteringPipe,
                IgxTreeGridPagingPipe,
                IgxTreeGridTransactionPipe,
                IgxTreeGridSummaryPipe,
                IgxRowLoadingIndicatorTemplateDirective
            ],
            exports: [
                IgxTreeGridComponent,
                IgxTreeGridRowComponent,
                IgxTreeGridCellComponent,
                IgxRowLoadingIndicatorTemplateDirective,
                IgxGridCommonModule
            ],
            imports: [
                IgxGridCommonModule,
            ]
        })
    ], IgxTreeGridModule);
    return IgxTreeGridModule;
}());
export { IgxTreeGridModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ncmlkLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZ3JpZHMvdHJlZS1ncmlkL3RyZWUtZ3JpZC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDN0QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDcEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUQsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLHNCQUFzQixFQUFFLHFCQUFxQixFQUFFLDBCQUEwQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDekksT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDakUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDdEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDbEUsT0FBTyxFQUFFLHVDQUF1QyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFakY7O0dBRUc7QUEwQkg7SUFBQTtJQUNBLENBQUM7SUFEWSxpQkFBaUI7UUF6QjdCLFFBQVEsQ0FBQztZQUNSLFlBQVksRUFBRTtnQkFDWixvQkFBb0I7Z0JBQ3BCLHVCQUF1QjtnQkFDdkIsd0JBQXdCO2dCQUN4Qiw0QkFBNEI7Z0JBQzVCLHlCQUF5QjtnQkFDekIsc0JBQXNCO2dCQUN0Qix3QkFBd0I7Z0JBQ3hCLHFCQUFxQjtnQkFDckIsMEJBQTBCO2dCQUMxQixzQkFBc0I7Z0JBQ3RCLHVDQUF1QzthQUN4QztZQUNELE9BQU8sRUFBRTtnQkFDUCxvQkFBb0I7Z0JBQ3BCLHVCQUF1QjtnQkFDdkIsd0JBQXdCO2dCQUN4Qix1Q0FBdUM7Z0JBQ3ZDLG1CQUFtQjthQUNwQjtZQUNELE9BQU8sRUFBRTtnQkFDUCxtQkFBbUI7YUFDcEI7U0FDRixDQUFDO09BQ1csaUJBQWlCLENBQzdCO0lBQUQsd0JBQUM7Q0FBQSxBQURELElBQ0M7U0FEWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4VHJlZUdyaWRDb21wb25lbnQgfSBmcm9tICcuL3RyZWUtZ3JpZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4VHJlZUdyaWRSb3dDb21wb25lbnQgfSBmcm9tICcuL3RyZWUtZ3JpZC1yb3cuY29tcG9uZW50JztcbmltcG9ydCB7IElneEdyaWRDb21tb25Nb2R1bGUgfSBmcm9tICcuLi9ncmlkLWNvbW1vbi5tb2R1bGUnO1xuaW1wb3J0IHsgSWd4VHJlZUdyaWRIaWVyYXJjaGl6aW5nUGlwZSB9IGZyb20gJy4vdHJlZS1ncmlkLnBpcGVzJztcbmltcG9ydCB7IElneFRyZWVHcmlkRmxhdHRlbmluZ1BpcGUsIElneFRyZWVHcmlkU29ydGluZ1BpcGUsIElneFRyZWVHcmlkUGFnaW5nUGlwZSwgSWd4VHJlZUdyaWRUcmFuc2FjdGlvblBpcGUgfSBmcm9tICcuL3RyZWUtZ3JpZC5waXBlcyc7XG5pbXBvcnQgeyBJZ3hUcmVlR3JpZENlbGxDb21wb25lbnQgfSBmcm9tICcuL3RyZWUtY2VsbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4VHJlZUdyaWRGaWx0ZXJpbmdQaXBlIH0gZnJvbSAnLi90cmVlLWdyaWQuZmlsdGVyaW5nLnBpcGUnO1xuaW1wb3J0IHsgSWd4VHJlZUdyaWRTdW1tYXJ5UGlwZSB9IGZyb20gJy4vdHJlZS1ncmlkLnN1bW1hcnkucGlwZSc7XG5pbXBvcnQgeyBJZ3hSb3dMb2FkaW5nSW5kaWNhdG9yVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL3RyZWUtZ3JpZC5kaXJlY3RpdmVzJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIElneFRyZWVHcmlkQ29tcG9uZW50LFxuICAgIElneFRyZWVHcmlkUm93Q29tcG9uZW50LFxuICAgIElneFRyZWVHcmlkQ2VsbENvbXBvbmVudCxcbiAgICBJZ3hUcmVlR3JpZEhpZXJhcmNoaXppbmdQaXBlLFxuICAgIElneFRyZWVHcmlkRmxhdHRlbmluZ1BpcGUsXG4gICAgSWd4VHJlZUdyaWRTb3J0aW5nUGlwZSxcbiAgICBJZ3hUcmVlR3JpZEZpbHRlcmluZ1BpcGUsXG4gICAgSWd4VHJlZUdyaWRQYWdpbmdQaXBlLFxuICAgIElneFRyZWVHcmlkVHJhbnNhY3Rpb25QaXBlLFxuICAgIElneFRyZWVHcmlkU3VtbWFyeVBpcGUsXG4gICAgSWd4Um93TG9hZGluZ0luZGljYXRvclRlbXBsYXRlRGlyZWN0aXZlXG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBJZ3hUcmVlR3JpZENvbXBvbmVudCxcbiAgICBJZ3hUcmVlR3JpZFJvd0NvbXBvbmVudCxcbiAgICBJZ3hUcmVlR3JpZENlbGxDb21wb25lbnQsXG4gICAgSWd4Um93TG9hZGluZ0luZGljYXRvclRlbXBsYXRlRGlyZWN0aXZlLFxuICAgIElneEdyaWRDb21tb25Nb2R1bGVcbiAgXSxcbiAgaW1wb3J0czogW1xuICAgIElneEdyaWRDb21tb25Nb2R1bGUsXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgSWd4VHJlZUdyaWRNb2R1bGUge1xufVxuIl19