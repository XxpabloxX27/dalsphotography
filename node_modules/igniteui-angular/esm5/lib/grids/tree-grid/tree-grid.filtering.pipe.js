import { __decorate, __extends } from "tslib";
import { Pipe } from '@angular/core';
import { DataUtil } from '../../data-operations/data-util';
import { GridBaseAPIService } from '../api.service';
import { BaseFilteringStrategy } from '../../data-operations/filtering-strategy';
import { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';
/** @hidden */
var TreeGridFilteringStrategy = /** @class */ (function (_super) {
    __extends(TreeGridFilteringStrategy, _super);
    function TreeGridFilteringStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TreeGridFilteringStrategy.prototype.filter = function (data, expressionsTree, advancedExpressionsTree) {
        return this.filterImpl(data, expressionsTree, advancedExpressionsTree, undefined);
    };
    TreeGridFilteringStrategy.prototype.filterImpl = function (data, expressionsTree, advancedExpressionsTree, parent) {
        var i;
        var rec;
        var len = data.length;
        var res = [];
        if ((FilteringExpressionsTree.empty(expressionsTree) && FilteringExpressionsTree.empty(advancedExpressionsTree)) || !len) {
            return data;
        }
        for (i = 0; i < len; i++) {
            rec = DataUtil.cloneTreeGridRecord(data[i]);
            rec.parent = parent;
            if (rec.children) {
                var filteredChildren = this.filterImpl(rec.children, expressionsTree, advancedExpressionsTree, rec);
                rec.children = filteredChildren.length > 0 ? filteredChildren : null;
            }
            if (this.matchRecord(rec, expressionsTree) && this.matchRecord(rec, advancedExpressionsTree)) {
                res.push(rec);
            }
            else if (rec.children && rec.children.length > 0) {
                rec.isFilteredOutParent = true;
                res.push(rec);
            }
        }
        return res;
    };
    TreeGridFilteringStrategy.prototype.getFieldValue = function (rec, fieldName) {
        var hierarchicalRecord = rec;
        return hierarchicalRecord.data[fieldName];
    };
    return TreeGridFilteringStrategy;
}(BaseFilteringStrategy));
export { TreeGridFilteringStrategy };
/** @hidden */
var IgxTreeGridFilteringPipe = /** @class */ (function () {
    function IgxTreeGridFilteringPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    IgxTreeGridFilteringPipe.prototype.transform = function (hierarchyData, expressionsTree, filterStrategy, advancedFilteringExpressionsTree, id, pipeTrigger, filteringPipeTrigger) {
        var grid = this.gridAPI.grid;
        var state = {
            expressionsTree: expressionsTree,
            advancedExpressionsTree: advancedFilteringExpressionsTree,
            strategy: new TreeGridFilteringStrategy()
        };
        if (filterStrategy) {
            state.strategy = filterStrategy;
        }
        this.resetFilteredOutProperty(grid.records);
        if (FilteringExpressionsTree.empty(state.expressionsTree) && FilteringExpressionsTree.empty(state.advancedExpressionsTree)) {
            grid.filteredData = null;
            return hierarchyData;
        }
        var result = this.filter(hierarchyData, state);
        var filteredData = [];
        this.expandAllRecursive(grid, result, grid.expansionStates, filteredData);
        grid.filteredData = filteredData;
        return result;
    };
    IgxTreeGridFilteringPipe.prototype.resetFilteredOutProperty = function (map) {
        var keys = Array.from(map.keys());
        for (var i = 0; i < keys.length; i++) {
            map.get(keys[i]).isFilteredOutParent = undefined;
        }
    };
    IgxTreeGridFilteringPipe.prototype.expandAllRecursive = function (grid, data, expandedStates, filteredData) {
        for (var i = 0; i < data.length; i++) {
            var rec = data[i];
            filteredData.push(rec.data);
            this.updateNonProcessedRecord(grid, rec);
            if (rec.children && rec.children.length > 0) {
                expandedStates.set(rec.rowID, true);
                this.expandAllRecursive(grid, rec.children, expandedStates, filteredData);
            }
        }
    };
    IgxTreeGridFilteringPipe.prototype.updateNonProcessedRecord = function (grid, record) {
        var rec = grid.records.get(record.rowID);
        rec.isFilteredOutParent = record.isFilteredOutParent;
    };
    IgxTreeGridFilteringPipe.prototype.filter = function (data, state) {
        return state.strategy.filter(data, state.expressionsTree, state.advancedExpressionsTree);
    };
    IgxTreeGridFilteringPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService }
    ]; };
    IgxTreeGridFilteringPipe = __decorate([
        Pipe({
            name: 'treeGridFiltering',
            pure: true
        })
    ], IgxTreeGridFilteringPipe);
    return IgxTreeGridFilteringPipe;
}());
export { IgxTreeGridFilteringPipe };
//# sourceMappingURL=data:application/json;base64,