import { __decorate, __values } from "tslib";
import { Pipe } from '@angular/core';
import { cloneArray, cloneHierarchicalArray } from '../../core/utils';
import { DataUtil } from '../../data-operations/data-util';
import { GridBaseAPIService } from '../api.service';
/**
 *@hidden
 */
var IgxTreeGridHierarchizingPipe = /** @class */ (function () {
    function IgxTreeGridHierarchizingPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    IgxTreeGridHierarchizingPipe.prototype.transform = function (collection, primaryKey, foreignKey, childDataKey, id, pipeTrigger) {
        var grid = this.gridAPI.grid;
        var hierarchicalRecords = [];
        var treeGridRecordsMap = new Map();
        var flatData = [];
        if (primaryKey && foreignKey) {
            hierarchicalRecords = this.hierarchizeFlatData(id, collection, primaryKey, foreignKey, treeGridRecordsMap, flatData);
        }
        else if (childDataKey) {
            hierarchicalRecords = this.hierarchizeRecursive(id, collection, primaryKey, childDataKey, undefined, flatData, 0, treeGridRecordsMap);
        }
        grid.flatData = flatData;
        grid.records = treeGridRecordsMap;
        grid.rootRecords = hierarchicalRecords;
        return hierarchicalRecords;
    };
    IgxTreeGridHierarchizingPipe.prototype.getRowID = function (primaryKey, rowData) {
        return primaryKey ? rowData[primaryKey] : rowData;
    };
    IgxTreeGridHierarchizingPipe.prototype.hierarchizeFlatData = function (id, collection, primaryKey, foreignKey, map, flatData) {
        var _this = this;
        var result = [];
        var missingParentRecords = [];
        collection.forEach(function (row) {
            var record = {
                rowID: _this.getRowID(primaryKey, row),
                data: row,
                children: []
            };
            var parent = map.get(row[foreignKey]);
            if (parent) {
                record.parent = parent;
                parent.children.push(record);
            }
            else {
                missingParentRecords.push(record);
            }
            map.set(row[primaryKey], record);
        });
        missingParentRecords.forEach(function (record) {
            var parent = map.get(record.data[foreignKey]);
            if (parent) {
                record.parent = parent;
                parent.children.push(record);
            }
            else {
                result.push(record);
            }
        });
        this.setIndentationLevels(id, result, 0, flatData);
        return result;
    };
    IgxTreeGridHierarchizingPipe.prototype.setIndentationLevels = function (id, collection, indentationLevel, flatData) {
        for (var i = 0; i < collection.length; i++) {
            var record = collection[i];
            record.level = indentationLevel;
            record.expanded = this.gridAPI.get_row_expansion_state(record);
            flatData.push(record.data);
            if (record.children && record.children.length > 0) {
                this.setIndentationLevels(id, record.children, indentationLevel + 1, flatData);
            }
        }
    };
    IgxTreeGridHierarchizingPipe.prototype.hierarchizeRecursive = function (id, collection, primaryKey, childDataKey, parent, flatData, indentationLevel, map) {
        var result = [];
        for (var i = 0; i < collection.length; i++) {
            var item = collection[i];
            var record = {
                rowID: this.getRowID(primaryKey, item),
                data: item,
                parent: parent,
                level: indentationLevel
            };
            record.expanded = this.gridAPI.get_row_expansion_state(record);
            flatData.push(item);
            map.set(record.rowID, record);
            record.children = item[childDataKey] ?
                this.hierarchizeRecursive(id, item[childDataKey], primaryKey, childDataKey, record, flatData, indentationLevel + 1, map) :
                undefined;
            result.push(record);
        }
        return result;
    };
    IgxTreeGridHierarchizingPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService }
    ]; };
    IgxTreeGridHierarchizingPipe = __decorate([
        Pipe({
            name: 'treeGridHierarchizing',
            pure: true
        })
    ], IgxTreeGridHierarchizingPipe);
    return IgxTreeGridHierarchizingPipe;
}());
export { IgxTreeGridHierarchizingPipe };
/**
 *@hidden
 */
var IgxTreeGridFlatteningPipe = /** @class */ (function () {
    function IgxTreeGridFlatteningPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    IgxTreeGridFlatteningPipe.prototype.transform = function (collection, id, expandedLevels, expandedStates, pipeTrigger) {
        var grid = this.gridAPI.grid;
        var data = [];
        grid.processedRootRecords = collection;
        grid.processedRecords = new Map();
        this.getFlatDataRecursive(collection, data, expandedLevels, expandedStates, id, true);
        grid.processedExpandedFlatData = data.map(function (r) { return r.data; });
        return data;
    };
    IgxTreeGridFlatteningPipe.prototype.getFlatDataRecursive = function (collection, data, expandedLevels, expandedStates, gridID, parentExpanded) {
        if (!collection || !collection.length) {
            return;
        }
        var grid = this.gridAPI.grid;
        for (var i = 0; i < collection.length; i++) {
            var hierarchicalRecord = collection[i];
            if (parentExpanded) {
                data.push(hierarchicalRecord);
            }
            hierarchicalRecord.expanded = this.gridAPI.get_row_expansion_state(hierarchicalRecord);
            this.updateNonProcessedRecordExpansion(grid, hierarchicalRecord);
            grid.processedRecords.set(hierarchicalRecord.rowID, hierarchicalRecord);
            this.getFlatDataRecursive(hierarchicalRecord.children, data, expandedLevels, expandedStates, gridID, parentExpanded && hierarchicalRecord.expanded);
        }
    };
    IgxTreeGridFlatteningPipe.prototype.updateNonProcessedRecordExpansion = function (grid, record) {
        var rec = grid.records.get(record.rowID);
        rec.expanded = record.expanded;
    };
    IgxTreeGridFlatteningPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService }
    ]; };
    IgxTreeGridFlatteningPipe = __decorate([
        Pipe({
            name: 'treeGridFlattening',
            pure: true
        })
    ], IgxTreeGridFlatteningPipe);
    return IgxTreeGridFlatteningPipe;
}());
export { IgxTreeGridFlatteningPipe };
/** @hidden */
var IgxTreeGridSortingPipe = /** @class */ (function () {
    function IgxTreeGridSortingPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    IgxTreeGridSortingPipe.prototype.transform = function (hierarchicalData, expressions, sorting, id, pipeTrigger) {
        var grid = this.gridAPI.grid;
        var result;
        if (!expressions.length) {
            result = hierarchicalData;
        }
        else {
            result = DataUtil.treeGridSort(hierarchicalData, expressions, sorting);
        }
        var filteredSortedData = [];
        this.flattenTreeGridRecords(result, filteredSortedData);
        grid.filteredSortedData = filteredSortedData;
        return result;
    };
    IgxTreeGridSortingPipe.prototype.flattenTreeGridRecords = function (records, flatData) {
        var e_1, _a;
        if (records && records.length) {
            try {
                for (var records_1 = __values(records), records_1_1 = records_1.next(); !records_1_1.done; records_1_1 = records_1.next()) {
                    var record = records_1_1.value;
                    flatData.push(record.data);
                    this.flattenTreeGridRecords(record.children, flatData);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (records_1_1 && !records_1_1.done && (_a = records_1.return)) _a.call(records_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    IgxTreeGridSortingPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService }
    ]; };
    IgxTreeGridSortingPipe = __decorate([
        Pipe({
            name: 'treeGridSorting',
            pure: true
        })
    ], IgxTreeGridSortingPipe);
    return IgxTreeGridSortingPipe;
}());
export { IgxTreeGridSortingPipe };
/** @hidden */
var IgxTreeGridPagingPipe = /** @class */ (function () {
    function IgxTreeGridPagingPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    IgxTreeGridPagingPipe.prototype.transform = function (collection, page, perPage, id, pipeTrigger) {
        if (page === void 0) { page = 0; }
        if (perPage === void 0) { perPage = 15; }
        var grid = this.gridAPI.grid;
        if (!grid.paging) {
            return collection;
        }
        var len = collection.length;
        var totalPages = Math.ceil(len / perPage);
        var state = {
            index: (totalPages > 0 && page >= totalPages) ? totalPages - 1 : page,
            recordsPerPage: perPage
        };
        var result = DataUtil.page(cloneArray(collection), state);
        grid.pagingState = state;
        grid._page = state.index;
        return result;
    };
    IgxTreeGridPagingPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService }
    ]; };
    IgxTreeGridPagingPipe = __decorate([
        Pipe({
            name: 'treeGridPaging',
            pure: true
        })
    ], IgxTreeGridPagingPipe);
    return IgxTreeGridPagingPipe;
}());
export { IgxTreeGridPagingPipe };
/** @hidden */
var IgxTreeGridTransactionPipe = /** @class */ (function () {
    function IgxTreeGridTransactionPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    IgxTreeGridTransactionPipe.prototype.transform = function (collection, id, pipeTrigger) {
        var grid = this.gridAPI.grid;
        if (grid.transactions.enabled) {
            var aggregatedChanges = grid.transactions.getAggregatedChanges(true);
            if (aggregatedChanges.length > 0) {
                var primaryKey = grid.primaryKey;
                if (!primaryKey) {
                    return collection;
                }
                var foreignKey = grid.foreignKey;
                var childDataKey = grid.childDataKey;
                if (foreignKey) {
                    var flatDataClone = cloneArray(collection);
                    return DataUtil.mergeTransactions(flatDataClone, aggregatedChanges, grid.primaryKey);
                }
                else if (childDataKey) {
                    var hierarchicalDataClone = cloneHierarchicalArray(collection, childDataKey);
                    return DataUtil.mergeHierarchicalTransactions(hierarchicalDataClone, aggregatedChanges, childDataKey, grid.primaryKey);
                }
            }
        }
        return collection;
    };
    IgxTreeGridTransactionPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService }
    ]; };
    IgxTreeGridTransactionPipe = __decorate([
        Pipe({
            name: 'treeGridTransaction',
            pure: true
        })
    ], IgxTreeGridTransactionPipe);
    return IgxTreeGridTransactionPipe;
}());
export { IgxTreeGridTransactionPipe };
//# sourceMappingURL=data:application/json;base64,