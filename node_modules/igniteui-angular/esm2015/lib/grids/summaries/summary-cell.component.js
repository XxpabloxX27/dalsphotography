import { __decorate } from "tslib";
import { Component, Input, HostBinding, HostListener, ChangeDetectionStrategy, ElementRef } from '@angular/core';
import { SUPPORTED_KEYS } from '../../core/utils';
let IgxSummaryCellComponent = class IgxSummaryCellComponent {
    constructor(element) {
        this.element = element;
        this.firstCellIndentation = 0;
        this.hasSummary = false;
        this.tabindex = 0;
    }
    get visibleColumnIndex() {
        return this.column.visibleIndex;
    }
    get describeby() {
        return `Summary_${this.column.field}`;
    }
    onFocus() {
        this.focused = true;
    }
    onBlur() {
        this.focused = false;
    }
    get selectionNode() {
        return {
            row: this.rowIndex,
            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,
            isSummaryRow: true
        };
    }
    dispatchEvent(event) {
        // TODO: Refactor
        const key = event.key.toLowerCase();
        const ctrl = event.ctrlKey;
        const shift = event.shiftKey;
        if (!SUPPORTED_KEYS.has(key)) {
            return;
        }
        event.stopPropagation();
        const args = { targetType: 'summaryCell', target: this, event: event, cancel: false };
        this.grid.onGridKeydown.emit(args);
        if (args.cancel) {
            return;
        }
        event.preventDefault();
        if (!this.isKeySupportedInCell(key, ctrl)) {
            return;
        }
        this.grid.selectionService.keyboardState.shift = shift && !(key === 'tab');
        const row = this.getRowElementByIndex(this.rowIndex);
        switch (key) {
            case 'tab':
                if (shift) {
                    this.grid.navigation.performShiftTabKey(row, this.selectionNode);
                    break;
                }
                this.grid.navigation.performTab(row, this.selectionNode);
                break;
            case 'arrowleft':
            case 'home':
            case 'left':
                if (ctrl || key === 'home') {
                    this.grid.navigation.onKeydownHome(this.rowIndex, true);
                    break;
                }
                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, this.selectionNode);
                break;
            case 'end':
            case 'arrowright':
            case 'right':
                if (ctrl || key === 'end') {
                    this.grid.navigation.onKeydownEnd(this.rowIndex, true);
                    break;
                }
                this.grid.navigation.onKeydownArrowRight(this.nativeElement, this.selectionNode);
                break;
            case 'arrowup':
            case 'up':
                this.grid.navigation.navigateUp(row, this.selectionNode);
                break;
            case 'arrowdown':
            case 'down':
                this.grid.navigation.navigateDown(row, this.selectionNode);
                break;
        }
    }
    get width() {
        return this.column.getCellWidth();
    }
    get nativeElement() {
        return this.element.nativeElement;
    }
    get columnDatatype() {
        return this.column.dataType;
    }
    get itemHeight() {
        return this.column.grid.defaultSummaryHeight;
    }
    /**
    * @hidden
    */
    get grid() {
        return this.column.grid;
    }
    getRowElementByIndex(rowIndex) {
        const summaryRows = this.grid.summariesRowList.toArray();
        return summaryRows.find((sr) => sr.dataRowIndex === rowIndex).nativeElement;
    }
    isKeySupportedInCell(key, ctrl) {
        if (ctrl) {
            return ['arrowup', 'arrowdown', 'up', 'down', 'end', 'home'].indexOf(key) === -1;
        }
        return ['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright', 'home', 'end', 'tab'].indexOf(key) !== -1;
    }
    translateSummary(summary) {
        return this.grid.resourceStrings[`igx_grid_summary_${summary.key}`] || summary.label;
    }
};
IgxSummaryCellComponent.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input()
], IgxSummaryCellComponent.prototype, "summaryResults", void 0);
__decorate([
    Input()
], IgxSummaryCellComponent.prototype, "column", void 0);
__decorate([
    Input()
], IgxSummaryCellComponent.prototype, "firstCellIndentation", void 0);
__decorate([
    Input()
], IgxSummaryCellComponent.prototype, "hasSummary", void 0);
__decorate([
    Input()
], IgxSummaryCellComponent.prototype, "density", void 0);
__decorate([
    Input(),
    HostBinding('attr.data-rowIndex')
], IgxSummaryCellComponent.prototype, "rowIndex", void 0);
__decorate([
    HostBinding('attr.data-visibleIndex')
], IgxSummaryCellComponent.prototype, "visibleColumnIndex", null);
__decorate([
    HostBinding('attr.tabindex')
], IgxSummaryCellComponent.prototype, "tabindex", void 0);
__decorate([
    HostBinding('attr.aria-describedby')
], IgxSummaryCellComponent.prototype, "describeby", null);
__decorate([
    HostBinding('class.igx-grid-summary--active')
], IgxSummaryCellComponent.prototype, "focused", void 0);
__decorate([
    HostListener('focus')
], IgxSummaryCellComponent.prototype, "onFocus", null);
__decorate([
    HostListener('blur')
], IgxSummaryCellComponent.prototype, "onBlur", null);
__decorate([
    HostListener('keydown', ['$event'])
], IgxSummaryCellComponent.prototype, "dispatchEvent", null);
IgxSummaryCellComponent = __decorate([
    Component({
        changeDetection: ChangeDetectionStrategy.OnPush,
        preserveWhitespaces: false,
        selector: 'igx-grid-summary-cell',
        template: "<ng-container *ngIf=\"hasSummary\">\n    <ng-container *ngFor=\"let summary of summaryResults\">\n            <div class=\"igx-grid-summary__item\" [style.height.px]=\"itemHeight\">\n\n                <ng-container *ngIf=\"visibleColumnIndex === 0 && firstCellIndentation >= 0\">\n                    <div class=\"igx-grid__tree-cell--padding-level-{{firstCellIndentation}}\"></div>\n\n                    <div #indicator class=\"igx-grid__tree-grouping-indicator\" style=\"visibility: hidden\">\n                        <igx-icon fontSet=\"material\">chevron_right</igx-icon>\n                    </div>\n                </ng-container>\n\n                <span class=\"igx-grid-summary__label\" title=\"{{ summary.label }}\">{{ translateSummary(summary) }}</span>\n                <span class=\"igx-grid-summary__result\" title=\"{{ summary.summaryResult }}\">\n                    {{ columnDatatype === 'number' ? (summary.summaryResult | igxdecimal: grid.locale) : columnDatatype === 'date' ? (summary.summaryResult | igxdate: grid.locale) : (summary.summaryResult) }}\n                </span>\n            </div>\n    </ng-container>\n</ng-container>\n"
    })
], IgxSummaryCellComponent);
export { IgxSummaryCellComponent };
//# sourceMappingURL=data:application/json;base64,