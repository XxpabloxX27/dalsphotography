import { __decorate } from "tslib";
import { Subject } from 'rxjs';
import { GridBaseAPIService } from '../grid';
import { Injectable } from '@angular/core';
let IgxHierarchicalGridAPIService = class IgxHierarchicalGridAPIService extends GridBaseAPIService {
    constructor() {
        super(...arguments);
        this.childRowIslands = new Map();
        this.childGrids = new Map();
    }
    registerChildRowIsland(rowIsland) {
        this.childRowIslands.set(rowIsland.key, rowIsland);
        this.destroyMap.set(rowIsland.key, new Subject());
    }
    unsetChildRowIsland(rowIsland) {
        this.childGrids.delete(rowIsland.key);
        this.childRowIslands.delete(rowIsland.key);
        this.destroyMap.delete(rowIsland.key);
    }
    getChildRowIsland(key) {
        return this.childRowIslands.get(key);
    }
    getChildGrid(path) {
        const currPath = path;
        let grid;
        const pathElem = currPath.shift();
        const childrenForLayout = this.childGrids.get(pathElem.rowIslandKey);
        if (childrenForLayout) {
            const childGrid = childrenForLayout.get(pathElem.rowID);
            if (currPath.length === 0) {
                grid = childGrid;
            }
            else {
                grid = childGrid.hgridAPI.getChildGrid(currPath);
            }
        }
        return grid;
    }
    getChildGrids(inDepth) {
        const allChildren = [];
        this.childGrids.forEach((layoutMap) => {
            layoutMap.forEach((grid) => {
                allChildren.push(grid);
                if (inDepth) {
                    const children = grid.hgridAPI.getChildGrids(inDepth);
                    children.forEach((item) => {
                        allChildren.push(item);
                    });
                }
            });
        });
        return allChildren;
    }
    getParentRowId(childGrid) {
        let rowID;
        this.childGrids.forEach((layoutMap) => {
            layoutMap.forEach((grid, key) => {
                if (grid === childGrid) {
                    rowID = key;
                    return;
                }
            });
        });
        return rowID;
    }
    registerChildGrid(parentRowID, rowIslandKey, grid) {
        let childrenForLayout = this.childGrids.get(rowIslandKey);
        if (!childrenForLayout) {
            this.childGrids.set(rowIslandKey, new Map());
            childrenForLayout = this.childGrids.get(rowIslandKey);
        }
        childrenForLayout.set(parentRowID, grid);
    }
    getChildGridsForRowIsland(rowIslandKey) {
        const childrenForLayout = this.childGrids.get(rowIslandKey);
        const children = [];
        if (childrenForLayout) {
            childrenForLayout.forEach((child) => {
                children.push(child);
            });
        }
        return children;
    }
    getChildGridByID(rowIslandKey, rowID) {
        const childrenForLayout = this.childGrids.get(rowIslandKey);
        return childrenForLayout.get(rowID);
    }
    get_row_expansion_state(record) {
        let inState;
        if (record.childGridsData !== undefined) {
            const ri = record.rowID;
            const rec = this.grid.primaryKey ? this.get_rec_by_id(ri) : ri;
            inState = !!super.get_row_expansion_state(rec);
        }
        else {
            inState = !!super.get_row_expansion_state(record);
        }
        return inState && this.grid.childLayoutList.length !== 0;
    }
    allow_expansion_state_change(rowID, expanded) {
        const rec = this.get_rec_by_id(rowID);
        return !!rec && this.grid.expansionStates.get(rowID) !== expanded;
    }
    get_rec_by_id(rowID) {
        const data = this.get_all_data(false);
        const index = this.get_row_index_in_data(rowID);
        return data[index];
    }
};
IgxHierarchicalGridAPIService = __decorate([
    Injectable()
], IgxHierarchicalGridAPIService);
export { IgxHierarchicalGridAPIService };
//# sourceMappingURL=data:application/json;base64,