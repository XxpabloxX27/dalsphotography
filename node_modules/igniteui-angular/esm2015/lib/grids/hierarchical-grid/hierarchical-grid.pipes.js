import { __decorate } from "tslib";
import { Pipe } from '@angular/core';
import { cloneArray } from '../../core/utils';
import { GridBaseAPIService } from '../api.service';
import { DataUtil } from '../../data-operations/data-util';
/**
 *@hidden
 */
let IgxGridHierarchicalPipe = class IgxGridHierarchicalPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, state = new Map(), id, primaryKey, childKeys, pipeTrigger) {
        if (childKeys.length === 0) {
            return collection;
        }
        const grid = this.gridAPI.grid;
        const result = this.addHierarchy(grid, cloneArray(collection), state, primaryKey, childKeys);
        return result;
    }
    addHierarchy(grid, data, state, primaryKey, childKeys) {
        const result = [];
        data.forEach((v) => {
            result.push(v);
            const childGridsData = {};
            childKeys.forEach((childKey) => {
                const childData = v[childKey] ? v[childKey] : null;
                childGridsData[childKey] = childData;
            });
            if (grid.gridAPI.get_row_expansion_state(v)) {
                result.push({ rowID: primaryKey ? v[primaryKey] : v, childGridsData: childGridsData });
            }
        });
        return result;
    }
};
IgxGridHierarchicalPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
IgxGridHierarchicalPipe = __decorate([
    Pipe({
        name: 'gridHierarchical',
        pure: true
    })
], IgxGridHierarchicalPipe);
export { IgxGridHierarchicalPipe };
/**
 *@hidden
 */
let IgxGridHierarchicalPagingPipe = class IgxGridHierarchicalPagingPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, page = 0, perPage = 15, id, pipeTrigger) {
        if (!this.gridAPI.grid.paging) {
            return collection;
        }
        const state = {
            index: page,
            recordsPerPage: perPage
        };
        const result = DataUtil.page(cloneArray(collection), state);
        this.gridAPI.grid.pagingState = state;
        return result;
    }
};
IgxGridHierarchicalPagingPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
IgxGridHierarchicalPagingPipe = __decorate([
    Pipe({
        name: 'gridHierarchicalPaging',
        pure: true
    })
], IgxGridHierarchicalPagingPipe);
export { IgxGridHierarchicalPagingPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGllcmFyY2hpY2FsLWdyaWQucGlwZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2dyaWRzL2hpZXJhcmNoaWNhbC1ncmlkL2hpZXJhcmNoaWNhbC1ncmlkLnBpcGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDOUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFcEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRTNEOztHQUVHO0FBS0gsSUFBYSx1QkFBdUIsR0FBcEMsTUFBYSx1QkFBdUI7SUFFaEMsWUFBb0IsT0FBeUQ7UUFBekQsWUFBTyxHQUFQLE9BQU8sQ0FBa0Q7SUFBSSxDQUFDO0lBRTNFLFNBQVMsQ0FDWixVQUFlLEVBQ2YsUUFBUSxJQUFJLEdBQUcsRUFBZ0IsRUFDL0IsRUFBVSxFQUNWLFVBQWUsRUFDZixTQUFtQixFQUNuQixXQUFtQjtRQUVuQixJQUFJLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3hCLE9BQU8sVUFBVSxDQUFDO1NBQ3JCO1FBQ0QsTUFBTSxJQUFJLEdBQWlDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQzdELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRTdGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFTSxZQUFZLENBQUksSUFBSSxFQUFFLElBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFNBQW1CO1FBQzFFLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUVsQixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDZixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2YsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDO1lBQzFCLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtnQkFDM0IsTUFBTSxTQUFTLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDbkQsY0FBYyxDQUFDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUN6QyxDQUFDLENBQUMsQ0FBQztZQUNILElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDekMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLGNBQWMsRUFBRSxjQUFjLEVBQUMsQ0FBQyxDQUFDO2FBQ3pGO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0NBQ0osQ0FBQTs7WUFuQ2dDLGtCQUFrQjs7QUFGdEMsdUJBQXVCO0lBSm5DLElBQUksQ0FBQztRQUNGLElBQUksRUFBRSxrQkFBa0I7UUFDeEIsSUFBSSxFQUFFLElBQUk7S0FDYixDQUFDO0dBQ1csdUJBQXVCLENBcUNuQztTQXJDWSx1QkFBdUI7QUF1Q3BDOztHQUVHO0FBS0gsSUFBYSw2QkFBNkIsR0FBMUMsTUFBYSw2QkFBNkI7SUFFdEMsWUFBb0IsT0FBeUQ7UUFBekQsWUFBTyxHQUFQLE9BQU8sQ0FBa0Q7SUFBSSxDQUFDO0lBRTNFLFNBQVMsQ0FBQyxVQUFpQixFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsT0FBTyxHQUFHLEVBQUUsRUFBRSxFQUFVLEVBQUUsV0FBbUI7UUFFdkYsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUMzQixPQUFPLFVBQVUsQ0FBQztTQUNyQjtRQUVELE1BQU0sS0FBSyxHQUFHO1lBQ1YsS0FBSyxFQUFFLElBQUk7WUFDWCxjQUFjLEVBQUUsT0FBTztTQUMxQixDQUFDO1FBRUYsTUFBTSxNQUFNLEdBQVUsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbkUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUN0QyxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0NBQ0osQ0FBQTs7WUFqQmdDLGtCQUFrQjs7QUFGdEMsNkJBQTZCO0lBSnpDLElBQUksQ0FBQztRQUNGLElBQUksRUFBRSx3QkFBd0I7UUFDOUIsSUFBSSxFQUFFLElBQUk7S0FDYixDQUFDO0dBQ1csNkJBQTZCLENBbUJ6QztTQW5CWSw2QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjbG9uZUFycmF5IH0gZnJvbSAnLi4vLi4vY29yZS91dGlscyc7XG5pbXBvcnQgeyBHcmlkQmFzZUFQSVNlcnZpY2UgfSBmcm9tICcuLi9hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBJZ3hIaWVyYXJjaGljYWxHcmlkQ29tcG9uZW50IH0gZnJvbSAnLi9oaWVyYXJjaGljYWwtZ3JpZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGF0YVV0aWwgfSBmcm9tICcuLi8uLi9kYXRhLW9wZXJhdGlvbnMvZGF0YS11dGlsJztcblxuLyoqXG4gKkBoaWRkZW5cbiAqL1xuQFBpcGUoe1xuICAgIG5hbWU6ICdncmlkSGllcmFyY2hpY2FsJyxcbiAgICBwdXJlOiB0cnVlXG59KVxuZXhwb3J0IGNsYXNzIElneEdyaWRIaWVyYXJjaGljYWxQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGdyaWRBUEk6IEdyaWRCYXNlQVBJU2VydmljZTxJZ3hIaWVyYXJjaGljYWxHcmlkQ29tcG9uZW50PikgeyB9XG5cbiAgICBwdWJsaWMgdHJhbnNmb3JtKFxuICAgICAgICBjb2xsZWN0aW9uOiBhbnksXG4gICAgICAgIHN0YXRlID0gbmV3IE1hcDxhbnksIGJvb2xlYW4+KCksXG4gICAgICAgIGlkOiBzdHJpbmcsXG4gICAgICAgIHByaW1hcnlLZXk6IGFueSxcbiAgICAgICAgY2hpbGRLZXlzOiBzdHJpbmdbXSxcbiAgICAgICAgcGlwZVRyaWdnZXI6IG51bWJlclxuICAgICAgICApOiBhbnlbXSB7XG4gICAgICAgIGlmIChjaGlsZEtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBncmlkOiBJZ3hIaWVyYXJjaGljYWxHcmlkQ29tcG9uZW50ID0gdGhpcy5ncmlkQVBJLmdyaWQ7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYWRkSGllcmFyY2h5KGdyaWQsIGNsb25lQXJyYXkoY29sbGVjdGlvbiksIHN0YXRlLCBwcmltYXJ5S2V5LCBjaGlsZEtleXMpO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZEhpZXJhcmNoeTxUPihncmlkLCBkYXRhOiBUW10sIHN0YXRlLCBwcmltYXJ5S2V5LCBjaGlsZEtleXM6IHN0cmluZ1tdKTogVFtdIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgICAgICAgZGF0YS5mb3JFYWNoKCh2KSA9PiB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh2KTtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkR3JpZHNEYXRhID0ge307XG4gICAgICAgICAgICBjaGlsZEtleXMuZm9yRWFjaCgoY2hpbGRLZXkpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZERhdGEgPSB2W2NoaWxkS2V5XSA/IHZbY2hpbGRLZXldIDogbnVsbDtcbiAgICAgICAgICAgICAgICBjaGlsZEdyaWRzRGF0YVtjaGlsZEtleV0gPSBjaGlsZERhdGE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChncmlkLmdyaWRBUEkuZ2V0X3Jvd19leHBhbnNpb25fc3RhdGUodikpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7IHJvd0lEOiBwcmltYXJ5S2V5ID8gdltwcmltYXJ5S2V5XSA6IHYsIGNoaWxkR3JpZHNEYXRhOiBjaGlsZEdyaWRzRGF0YX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbi8qKlxuICpAaGlkZGVuXG4gKi9cbkBQaXBlKHtcbiAgICBuYW1lOiAnZ3JpZEhpZXJhcmNoaWNhbFBhZ2luZycsXG4gICAgcHVyZTogdHJ1ZVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hHcmlkSGllcmFyY2hpY2FsUGFnaW5nUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBncmlkQVBJOiBHcmlkQmFzZUFQSVNlcnZpY2U8SWd4SGllcmFyY2hpY2FsR3JpZENvbXBvbmVudD4pIHsgfVxuXG4gICAgcHVibGljIHRyYW5zZm9ybShjb2xsZWN0aW9uOiBhbnlbXSwgcGFnZSA9IDAsIHBlclBhZ2UgPSAxNSwgaWQ6IHN0cmluZywgcGlwZVRyaWdnZXI6IG51bWJlcik6IGFueVtdIHtcblxuICAgICAgICBpZiAoIXRoaXMuZ3JpZEFQSS5ncmlkLnBhZ2luZykge1xuICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHtcbiAgICAgICAgICAgIGluZGV4OiBwYWdlLFxuICAgICAgICAgICAgcmVjb3Jkc1BlclBhZ2U6IHBlclBhZ2VcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQ6IGFueVtdID0gRGF0YVV0aWwucGFnZShjbG9uZUFycmF5KGNvbGxlY3Rpb24pLCBzdGF0ZSk7XG4gICAgICAgIHRoaXMuZ3JpZEFQSS5ncmlkLnBhZ2luZ1N0YXRlID0gc3RhdGU7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuIl19