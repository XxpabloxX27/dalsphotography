import { __decorate } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
/**
 *@hidden
 */
let ItemPropertyValueChangedDirective = class ItemPropertyValueChangedDirective {
    constructor(propName) {
        this.valueChanged = new EventEmitter();
        this._propName = propName;
    }
    get object() {
        return this._object;
    }
    set object(value) {
        if (value) {
            this._object = value;
        }
    }
    get value() {
        return (this.object) ? this.object[this._propName] : null;
    }
    set value(value) {
        this.onValueChanged(value);
    }
    onValueChanged(value) {
        const currentValue = this.value;
        if (value !== currentValue) {
            this.object[this._propName] = value;
            this.valueChanged.emit({ oldValue: currentValue, newValue: value });
        }
    }
};
ItemPropertyValueChangedDirective.ctorParameters = () => [
    { type: String }
];
__decorate([
    Input()
], ItemPropertyValueChangedDirective.prototype, "value", null);
__decorate([
    Output()
], ItemPropertyValueChangedDirective.prototype, "valueChanged", void 0);
ItemPropertyValueChangedDirective = __decorate([
    Directive()
], ItemPropertyValueChangedDirective);
export { ItemPropertyValueChangedDirective };
/** @hidden */
let ColumnChooserItemBaseDirective = class ColumnChooserItemBaseDirective extends ItemPropertyValueChangedDirective {
    constructor(prop) {
        super(prop);
        this.prop = prop;
        this.indentation = 30;
    }
    get column() {
        return this.object;
    }
    set column(value) {
        if (value) {
            this.object = value;
        }
    }
    get name() {
        return (this.column) ? ((this.column.header) ? this.column.header : this.column.field) : '';
    }
    get level() {
        return this.column.level;
    }
    get calcIndent() {
        return this.indentation * this.level;
    }
};
ColumnChooserItemBaseDirective.ctorParameters = () => [
    { type: String }
];
__decorate([
    Input()
], ColumnChooserItemBaseDirective.prototype, "column", null);
__decorate([
    Input()
], ColumnChooserItemBaseDirective.prototype, "indentation", void 0);
__decorate([
    Input()
], ColumnChooserItemBaseDirective.prototype, "container", void 0);
ColumnChooserItemBaseDirective = __decorate([
    Directive()
], ColumnChooserItemBaseDirective);
export { ColumnChooserItemBaseDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWNob29zZXItaXRlbS1iYXNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9ncmlkcy9jb2x1bW4tY2hvb3Nlci1pdGVtLWJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFRdkU7O0dBRUc7QUFFSCxJQUFzQixpQ0FBaUMsR0FBdkQsTUFBc0IsaUNBQWlDO0lBMEJuRCxZQUFZLFFBQWdCO1FBRnJCLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQTBCLENBQUM7UUFHN0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7SUFDOUIsQ0FBQztJQXhCRCxJQUFJLE1BQU07UUFDTixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQUksTUFBTSxDQUFDLEtBQUs7UUFDWixJQUFJLEtBQUssRUFBRTtZQUNQLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1NBQ3hCO0lBQ0wsQ0FBQztJQUdELElBQUksS0FBSztRQUNMLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDOUQsQ0FBQztJQUVELElBQUksS0FBSyxDQUFDLEtBQUs7UUFDWCxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFTUyxjQUFjLENBQUMsS0FBSztRQUMxQixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ2hDLElBQUksS0FBSyxLQUFLLFlBQVksRUFBRTtZQUN4QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDcEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQ3ZFO0lBQ0wsQ0FBQztDQUNKLENBQUE7Ozs7QUF0Qkc7SUFEQyxLQUFLLEVBQUU7OERBR1A7QUFPRDtJQURDLE1BQU0sRUFBRTt1RUFDd0Q7QUF4Qi9DLGlDQUFpQztJQUR0RCxTQUFTLEVBQUU7R0FDVSxpQ0FBaUMsQ0FxQ3REO1NBckNxQixpQ0FBaUM7QUF1Q3ZELGNBQWM7QUFFZCxJQUFhLDhCQUE4QixHQUEzQyxNQUFhLDhCQUErQixTQUFRLGlDQUFpQztJQWtCakYsWUFBbUIsSUFBWTtRQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFERyxTQUFJLEdBQUosSUFBSSxDQUFRO1FBTHhCLGdCQUFXLEdBQUcsRUFBRSxDQUFDO0lBT3hCLENBQUM7SUFsQkQsSUFBSSxNQUFNO1FBQ04sT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxJQUFJLE1BQU0sQ0FBQyxLQUFLO1FBQ1osSUFBSSxLQUFLLEVBQUU7WUFDUCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztTQUN2QjtJQUNMLENBQUM7SUFZRCxJQUFJLElBQUk7UUFDSixPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNoRyxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ0wsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUM3QixDQUFDO0lBRUQsSUFBSSxVQUFVO1FBQ1YsT0FBTyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDekMsQ0FBQztDQUNKLENBQUE7Ozs7QUEvQkc7SUFEQyxLQUFLLEVBQUU7NERBR1A7QUFTRDtJQURDLEtBQUssRUFBRTttRUFDZ0I7QUFHeEI7SUFEQyxLQUFLLEVBQUU7aUVBQ2M7QUFoQmIsOEJBQThCO0lBRDFDLFNBQVMsRUFBRTtHQUNDLDhCQUE4QixDQWlDMUM7U0FqQ1ksOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElCYXNlRXZlbnRBcmdzIH0gZnJvbSAnLi4vY29yZS91dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVZhbHVlQ2hhbmdlZEV2ZW50QXJncyBleHRlbmRzIElCYXNlRXZlbnRBcmdzIHtcbiAgICBvbGRWYWx1ZTogYW55O1xuICAgIG5ld1ZhbHVlOiBhbnk7XG59XG5cbi8qKlxuICpAaGlkZGVuXG4gKi9cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEl0ZW1Qcm9wZXJ0eVZhbHVlQ2hhbmdlZERpcmVjdGl2ZSB7XG4gICAgcHJpdmF0ZSBfb2JqZWN0OiBhbnk7XG4gICAgcHJpdmF0ZSBfcHJvcE5hbWU6IHN0cmluZztcblxuICAgIGdldCBvYmplY3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vYmplY3Q7XG4gICAgfVxuXG4gICAgc2V0IG9iamVjdCh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX29iamVjdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5vYmplY3QpID8gdGhpcy5vYmplY3RbdGhpcy5fcHJvcE5hbWVdIDogbnVsbDtcbiAgICB9XG5cbiAgICBzZXQgdmFsdWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5vblZhbHVlQ2hhbmdlZCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIHZhbHVlQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXI8SVZhbHVlQ2hhbmdlZEV2ZW50QXJncz4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fcHJvcE5hbWUgPSBwcm9wTmFtZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgb25WYWx1ZUNoYW5nZWQodmFsdWUpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSBjdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0W3RoaXMuX3Byb3BOYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy52YWx1ZUNoYW5nZWQuZW1pdCh7IG9sZFZhbHVlOiBjdXJyZW50VmFsdWUsIG5ld1ZhbHVlOiB2YWx1ZSB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqIEBoaWRkZW4gKi9cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGNsYXNzIENvbHVtbkNob29zZXJJdGVtQmFzZURpcmVjdGl2ZSBleHRlbmRzIEl0ZW1Qcm9wZXJ0eVZhbHVlQ2hhbmdlZERpcmVjdGl2ZSB7XG4gICAgQElucHV0KClcbiAgICBnZXQgY29sdW1uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vYmplY3Q7XG4gICAgfVxuXG4gICAgc2V0IGNvbHVtbih2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBpbmRlbnRhdGlvbiA9IDMwO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgY29udGFpbmVyOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcHJvcDogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKHByb3ApO1xuICAgIH1cblxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuY29sdW1uKSA/ICgodGhpcy5jb2x1bW4uaGVhZGVyKSA/IHRoaXMuY29sdW1uLmhlYWRlciA6IHRoaXMuY29sdW1uLmZpZWxkKSA6ICcnO1xuICAgIH1cblxuICAgIGdldCBsZXZlbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sdW1uLmxldmVsO1xuICAgIH1cblxuICAgIGdldCBjYWxjSW5kZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRlbnRhdGlvbiAqIHRoaXMubGV2ZWw7XG4gICAgfVxufVxuIl19