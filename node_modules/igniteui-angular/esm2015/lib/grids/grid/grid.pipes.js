import { __decorate } from "tslib";
import { Pipe } from '@angular/core';
import { cloneArray } from '../../core/utils';
import { DataUtil } from '../../data-operations/data-util';
import { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';
import { GridBaseAPIService } from '../api.service';
/**
 *@hidden
 */
let IgxGridSortingPipe = class IgxGridSortingPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, expressions, sorting, id, pipeTrigger) {
        const grid = this.gridAPI.grid;
        let result;
        if (!expressions.length) {
            result = collection;
        }
        else {
            result = DataUtil.sort(cloneArray(collection), expressions, sorting);
        }
        grid.filteredSortedData = result;
        return result;
    }
};
IgxGridSortingPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
IgxGridSortingPipe = __decorate([
    Pipe({
        name: 'gridSort',
        pure: true
    })
], IgxGridSortingPipe);
export { IgxGridSortingPipe };
/**
 *@hidden
 */
let IgxGridGroupingPipe = class IgxGridGroupingPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, expression, expansion, defaultExpanded, id, groupsRecords, pipeTrigger) {
        const state = { expressions: [], expansion: [], defaultExpanded };
        const grid = this.gridAPI.grid;
        state.expressions = grid.groupingExpressions;
        let result;
        const fullResult = { data: [], metadata: [] };
        if (!state.expressions.length) {
            // empty the array without changing reference
            groupsRecords.splice(0, groupsRecords.length);
            result = {
                data: collection,
                metadata: collection
            };
        }
        else {
            state.expansion = grid.groupingExpansionState;
            state.defaultExpanded = grid.groupsExpanded;
            result = DataUtil.group(cloneArray(collection), state, grid, groupsRecords, fullResult);
        }
        grid.groupingFlatResult = result.data;
        grid.groupingResult = fullResult.data;
        grid.groupingMetadata = fullResult.metadata;
        return result;
    }
};
IgxGridGroupingPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
IgxGridGroupingPipe = __decorate([
    Pipe({
        name: 'gridGroupBy',
        pure: true
    })
], IgxGridGroupingPipe);
export { IgxGridGroupingPipe };
/**
 *@hidden
 */
let IgxGridPagingPipe = class IgxGridPagingPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, page = 0, perPage = 15, id, pipeTrigger) {
        if (!this.gridAPI.grid.paging) {
            return collection;
        }
        const state = {
            index: page,
            recordsPerPage: perPage
        };
        DataUtil.correctPagingState(state, collection.data.length);
        const result = {
            data: DataUtil.page(cloneArray(collection.data), state),
            metadata: DataUtil.page(cloneArray(collection.metadata), state)
        };
        if (this.gridAPI.grid.page !== state.index) {
            this.gridAPI.grid.page = state.index;
        }
        this.gridAPI.grid.pagingState = state;
        return result;
    }
};
IgxGridPagingPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
IgxGridPagingPipe = __decorate([
    Pipe({
        name: 'gridPaging',
        pure: true
    })
], IgxGridPagingPipe);
export { IgxGridPagingPipe };
/**
 *@hidden
 */
let IgxGridFilteringPipe = class IgxGridFilteringPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, expressionsTree, filterStrategy, advancedExpressionsTree, id, pipeTrigger, filteringPipeTrigger) {
        const grid = this.gridAPI.grid;
        const state = {
            expressionsTree: expressionsTree,
            strategy: filterStrategy,
            advancedExpressionsTree: advancedExpressionsTree
        };
        if (FilteringExpressionsTree.empty(state.expressionsTree) && FilteringExpressionsTree.empty(state.advancedExpressionsTree)) {
            return collection;
        }
        const result = DataUtil.filter(cloneArray(collection), state);
        grid.filteredData = result;
        return result;
    }
};
IgxGridFilteringPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
IgxGridFilteringPipe = __decorate([
    Pipe({
        name: 'gridFiltering',
        pure: true
    })
], IgxGridFilteringPipe);
export { IgxGridFilteringPipe };
//# sourceMappingURL=data:application/json;base64,