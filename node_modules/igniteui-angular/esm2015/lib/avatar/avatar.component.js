import { __decorate } from "tslib";
import { CommonModule } from '@angular/common';
import { AfterViewInit, Component, ElementRef, HostBinding, Input, NgModule, OnInit, TemplateRef, ViewChild } from '@angular/core';
import { IgxIconModule } from '../icon/index';
let NEXT_ID = 0;
export var IgxAvatarSize;
(function (IgxAvatarSize) {
    IgxAvatarSize["SMALL"] = "small";
    IgxAvatarSize["MEDIUM"] = "medium";
    IgxAvatarSize["LARGE"] = "large";
})(IgxAvatarSize || (IgxAvatarSize = {}));
export var IgxAvatarType;
(function (IgxAvatarType) {
    IgxAvatarType["INITIALS"] = "initials";
    IgxAvatarType["IMAGE"] = "image";
    IgxAvatarType["ICON"] = "icon";
    IgxAvatarType["CUSTOM"] = "custom";
})(IgxAvatarType || (IgxAvatarType = {}));
/**
 * **Ignite UI for Angular Avatar** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/avatar.html)
 *
 * The Ignite UI Avatar provides an easy way to add an avatar icon to your application.  This icon can be an
 * image, someone's initials or a material icon from the google material icon set.
 *
 * Example:
 * ```html
 * <igx-avatar initials="MS" roundShape="true" size="large">
 * </igx-avatar>
 * ```
 */
let IgxAvatarComponent = class IgxAvatarComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        /**
         * Returns the `aria-label` of the avatar.
         *
         * ```typescript
         * let ariaLabel = this.avatar.ariaLabel;
         * ```
         *
         */
        this.ariaLabel = 'avatar';
        /**
         * Returns the `role` attribute of the avatar.
         *
         * ```typescript
         * let avatarRole = this.avatar.role;
         * ```
         *
         * @memberof IgxAvatarComponent
         */
        this.role = 'img';
        /**
         * Returns the class of the avatar.
         *
         * ```typescript
         * let avatarCLass =  this.avatar.cssClass;
         * ```
         *
         * @memberof IgxAvatarComponent
         */
        this.cssClass = 'igx-avatar';
        /**
         * @hidden
         */
        this._size = IgxAvatarSize.SMALL;
        /**
         * Sets the `id` of the avatar. If not set, the first avatar component will have `id` = `"igx-avatar-0"`.
         *
         * ```html
         * <igx-avatar id="my-first-avatar"></igx-avatar>
         * ```
         *
         * @memberof IgxAvatarComponent
         */
        this.id = `igx-avatar-${NEXT_ID++}`;
        /**
         * Sets a round shape to the avatar if `roundShape` is `"true"`.
         * By default the shape of the avatar is a square.
         *
         * ```html
         * <igx-avatar roundShape = "true" ></igx-avatar>
         * ```
         *
         * @memberof IgxAvatarComponent
         */
        this.roundShape = false;
    }
    /**
     * Returns the `size` of the avatar.
     *
     * ```typescript
     *let avatarSize =  this.avatar.size;
     * ```
     *
     * @memberof IgxAvatarComponent
     */
    get size() {
        return this._size;
    }
    /**
     * Sets the `size`  of the avatar.
     * By default the `size` is `"small"`. It can be set to `"medium"` or `"large"`.
     *
     * ```
     * <igx-avatar size="large"></igx-avatar>
     * ```
     *
     * @memberof IgxAvatarComponent
     */
    set size(value) {
        switch (value) {
            case 'small':
            case 'medium':
            case 'large':
                this._size = value;
                break;
            default:
                this._size = 'small';
        }
    }
    /**
     * Returns the type of the avatar.
     *
     * ```typescript
     * let avatarType = this.avatar.type;
     * ```
     *
     * @memberof IgxAvatarComponent
     */
    get type() {
        if (this.src) {
            return IgxAvatarType.IMAGE;
        }
        if (this.icon) {
            return IgxAvatarType.ICON;
        }
        if (this.initials) {
            return IgxAvatarType.INITIALS;
        }
        return IgxAvatarType.CUSTOM;
    }
    /**
     * Returns the template of the avatar.
     *
     * ```typescript
     * let template = this.avatar.template;
     * ```
     *
     * @memberof IgxAvatarComponent
     */
    get template() {
        switch (this.type) {
            case IgxAvatarType.IMAGE:
                return this.imageTemplate;
            case IgxAvatarType.INITIALS:
                return this.initialsTemplate;
            case IgxAvatarType.ICON:
                return this.iconTemplate;
            default:
                return this.defaultTemplate;
        }
    }
    /**
     * @hidden
     */
    ngOnInit() {
        this.roleDescription = this.getRole();
    }
    /**
     *@hidden
     */
    ngAfterViewInit() {
        if (this.type !== IgxAvatarType.CUSTOM) {
            this.elementRef.nativeElement.classList.add(`igx-avatar--${this.type}`);
        }
        this.elementRef.nativeElement.classList.add(`igx-avatar--${this._size}`);
    }
    /**
     * @hidden
     */
    getRole() {
        switch (this.type) {
            case IgxAvatarType.IMAGE:
                return 'image avatar';
            case IgxAvatarType.ICON:
                return 'icon avatar';
            case IgxAvatarType.INITIALS:
                return 'initials avatar';
            default:
                return 'custom avatar';
        }
    }
    /**
     * Returns the url of the `image`.
     *
     * ```typescript
     * let imageSourceUrl = this.avatar.getSrcUrl();
     * ```
     *
     * @memberof IgxAvatarComponent
     */
    getSrcUrl() {
        return `url(${this.src})`;
    }
};
IgxAvatarComponent.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    ViewChild('image')
], IgxAvatarComponent.prototype, "image", void 0);
__decorate([
    ViewChild('defaultTemplate', { read: TemplateRef, static: true })
], IgxAvatarComponent.prototype, "defaultTemplate", void 0);
__decorate([
    ViewChild('imageTemplate', { read: TemplateRef, static: true })
], IgxAvatarComponent.prototype, "imageTemplate", void 0);
__decorate([
    ViewChild('initialsTemplate', { read: TemplateRef, static: true })
], IgxAvatarComponent.prototype, "initialsTemplate", void 0);
__decorate([
    ViewChild('iconTemplate', { read: TemplateRef, static: true })
], IgxAvatarComponent.prototype, "iconTemplate", void 0);
__decorate([
    HostBinding('attr.aria-label')
], IgxAvatarComponent.prototype, "ariaLabel", void 0);
__decorate([
    HostBinding('attr.role')
], IgxAvatarComponent.prototype, "role", void 0);
__decorate([
    HostBinding('class.igx-avatar')
], IgxAvatarComponent.prototype, "cssClass", void 0);
__decorate([
    HostBinding('attr.aria-roledescription')
], IgxAvatarComponent.prototype, "roleDescription", void 0);
__decorate([
    HostBinding('attr.id'),
    Input()
], IgxAvatarComponent.prototype, "id", void 0);
__decorate([
    HostBinding('class.igx-avatar--rounded'),
    Input()
], IgxAvatarComponent.prototype, "roundShape", void 0);
__decorate([
    HostBinding('style.color'),
    Input()
], IgxAvatarComponent.prototype, "color", void 0);
__decorate([
    HostBinding('style.background'),
    Input()
], IgxAvatarComponent.prototype, "bgColor", void 0);
__decorate([
    Input()
], IgxAvatarComponent.prototype, "initials", void 0);
__decorate([
    Input()
], IgxAvatarComponent.prototype, "icon", void 0);
__decorate([
    Input()
], IgxAvatarComponent.prototype, "src", void 0);
__decorate([
    Input()
], IgxAvatarComponent.prototype, "size", null);
IgxAvatarComponent = __decorate([
    Component({
        selector: 'igx-avatar',
        template: "<ng-template #defaultTemplate>\n    <ng-content></ng-content>\n</ng-template>\n\n<ng-template #imageTemplate>\n    <div #image class=\"igx-avatar__image\" [style.backgroundImage]=\"getSrcUrl()\"></div>\n</ng-template>\n\n<ng-template #initialsTemplate>\n    <span>{{initials.substring(0, 2)}}</span>\n</ng-template>\n\n<ng-template #iconTemplate>\n     <igx-icon>{{icon}}</igx-icon>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template\"></ng-container>\n"
    })
], IgxAvatarComponent);
export { IgxAvatarComponent };
/**
 * @hidden
 */
let IgxAvatarModule = class IgxAvatarModule {
};
IgxAvatarModule = __decorate([
    NgModule({
        declarations: [IgxAvatarComponent],
        exports: [IgxAvatarComponent],
        imports: [CommonModule, IgxIconModule]
    })
], IgxAvatarModule);
export { IgxAvatarModule };
//# sourceMappingURL=data:application/json;base64,