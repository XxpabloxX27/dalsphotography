import { __decorate } from "tslib";
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { IgxIconModule } from '../icon/index';
import { IgxDropDownModule } from './../drop-down/index';
import { IgxToggleModule } from './../directives/toggle/toggle.directive';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
import { IgxInputGroupModule } from '../input-group/input-group.component';
import { IgxButtonModule } from '../directives/button/button.directive';
import { IgxSelectComponent, IgxSelectToggleIconDirective, IgxSelectHeaderDirective, IgxSelectFooterDirective } from './select.component';
import { IgxSelectItemComponent } from './select-item.component';
import { IgxSelectItemNavigationDirective } from './select-navigation.directive';
import { IgxSelectGroupComponent } from './select-group.component';
/** @hidden */
let IgxSelectModule = class IgxSelectModule {
};
IgxSelectModule = __decorate([
    NgModule({
        declarations: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,
            IgxSelectToggleIconDirective, IgxSelectGroupComponent, IgxSelectHeaderDirective,
            IgxSelectFooterDirective],
        exports: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,
            IgxSelectToggleIconDirective, IgxSelectGroupComponent, IgxSelectHeaderDirective,
            IgxSelectFooterDirective],
        imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,
            IgxToggleModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],
        providers: []
    })
], IgxSelectModule);
export { IgxSelectModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvc2VsZWN0L3NlbGVjdC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUMxRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDeEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDM0UsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBRXhFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSw0QkFBNEIsRUFBRSx3QkFBd0IsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzFJLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2pGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRW5FLGNBQWM7QUFZZCxJQUFhLGVBQWUsR0FBNUIsTUFBYSxlQUFlO0NBQUksQ0FBQTtBQUFuQixlQUFlO0lBWDNCLFFBQVEsQ0FBQztRQUNOLFlBQVksRUFBRSxDQUFDLGtCQUFrQixFQUFFLHNCQUFzQixFQUFFLGdDQUFnQztZQUN2Riw0QkFBNEIsRUFBRSx1QkFBdUIsRUFBRSx3QkFBd0I7WUFDL0Usd0JBQXdCLENBQUM7UUFDN0IsT0FBTyxFQUFFLENBQUMsa0JBQWtCLEVBQUUsc0JBQXNCLEVBQUUsZ0NBQWdDO1lBQ2pGLDRCQUE0QixFQUFFLHVCQUF1QixFQUFFLHdCQUF3QjtZQUMvRSx3QkFBd0IsQ0FBQztRQUM5QixPQUFPLEVBQUUsQ0FBQyxlQUFlLEVBQUUsWUFBWSxFQUFFLG1CQUFtQixFQUFFLFdBQVcsRUFBRSxtQkFBbUI7WUFDMUYsZUFBZSxFQUFFLGlCQUFpQixFQUFFLGVBQWUsRUFBRSxhQUFhLENBQUM7UUFDdkUsU0FBUyxFQUFFLEVBQUU7S0FDaEIsQ0FBQztHQUNXLGVBQWUsQ0FBSTtTQUFuQixlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSwgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IElneEljb25Nb2R1bGUgfSBmcm9tICcuLi9pY29uL2luZGV4JztcbmltcG9ydCB7IElneERyb3BEb3duTW9kdWxlIH0gZnJvbSAnLi8uLi9kcm9wLWRvd24vaW5kZXgnO1xuaW1wb3J0IHsgSWd4VG9nZ2xlTW9kdWxlIH0gZnJvbSAnLi8uLi9kaXJlY3RpdmVzL3RvZ2dsZS90b2dnbGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IElneFJpcHBsZU1vZHVsZSB9IGZyb20gJy4uL2RpcmVjdGl2ZXMvcmlwcGxlL3JpcHBsZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSWd4SW5wdXRHcm91cE1vZHVsZSB9IGZyb20gJy4uL2lucHV0LWdyb3VwL2lucHV0LWdyb3VwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hCdXR0b25Nb2R1bGUgfSBmcm9tICcuLi9kaXJlY3RpdmVzL2J1dHRvbi9idXR0b24uZGlyZWN0aXZlJztcblxuaW1wb3J0IHsgSWd4U2VsZWN0Q29tcG9uZW50LCBJZ3hTZWxlY3RUb2dnbGVJY29uRGlyZWN0aXZlLCBJZ3hTZWxlY3RIZWFkZXJEaXJlY3RpdmUsIElneFNlbGVjdEZvb3RlckRpcmVjdGl2ZSB9IGZyb20gJy4vc2VsZWN0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hTZWxlY3RJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi9zZWxlY3QtaXRlbS5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4U2VsZWN0SXRlbU5hdmlnYXRpb25EaXJlY3RpdmUgfSBmcm9tICcuL3NlbGVjdC1uYXZpZ2F0aW9uLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJZ3hTZWxlY3RHcm91cENvbXBvbmVudCB9IGZyb20gJy4vc2VsZWN0LWdyb3VwLmNvbXBvbmVudCc7XG5cbi8qKiBAaGlkZGVuICovXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogW0lneFNlbGVjdENvbXBvbmVudCwgSWd4U2VsZWN0SXRlbUNvbXBvbmVudCwgSWd4U2VsZWN0SXRlbU5hdmlnYXRpb25EaXJlY3RpdmUsXG4gICAgICAgIElneFNlbGVjdFRvZ2dsZUljb25EaXJlY3RpdmUsIElneFNlbGVjdEdyb3VwQ29tcG9uZW50LCBJZ3hTZWxlY3RIZWFkZXJEaXJlY3RpdmUsXG4gICAgICAgIElneFNlbGVjdEZvb3RlckRpcmVjdGl2ZV0sXG4gICAgZXhwb3J0czogW0lneFNlbGVjdENvbXBvbmVudCwgSWd4U2VsZWN0SXRlbUNvbXBvbmVudCwgSWd4U2VsZWN0SXRlbU5hdmlnYXRpb25EaXJlY3RpdmUsXG4gICAgICAgICBJZ3hTZWxlY3RUb2dnbGVJY29uRGlyZWN0aXZlLCBJZ3hTZWxlY3RHcm91cENvbXBvbmVudCwgSWd4U2VsZWN0SGVhZGVyRGlyZWN0aXZlLFxuICAgICAgICAgSWd4U2VsZWN0Rm9vdGVyRGlyZWN0aXZlXSxcbiAgICBpbXBvcnRzOiBbSWd4UmlwcGxlTW9kdWxlLCBDb21tb25Nb2R1bGUsIElneElucHV0R3JvdXBNb2R1bGUsIEZvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxuICAgICAgICBJZ3hUb2dnbGVNb2R1bGUsIElneERyb3BEb3duTW9kdWxlLCBJZ3hCdXR0b25Nb2R1bGUsIElneEljb25Nb2R1bGVdLFxuICAgIHByb3ZpZGVyczogW11cbn0pXG5leHBvcnQgY2xhc3MgSWd4U2VsZWN0TW9kdWxlIHsgfVxuIl19