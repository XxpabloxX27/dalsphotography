import { __decorate } from "tslib";
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
import { IgxButtonModule } from '../directives/button/button.directive';
import { IgxAvatarModule } from '../avatar/avatar.component';
import { IgxIconModule } from '../icon/index';
import { IgxExpansionPanelComponent } from './expansion-panel.component';
import { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';
import { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';
import { IgxExpansionPanelDescriptionDirective, IgxExpansionPanelTitleDirective, IgxExpansionPanelIconDirective } from './expansion-panel.directives';
/**
 * @hidden
 */
let IgxExpansionPanelModule = class IgxExpansionPanelModule {
};
IgxExpansionPanelModule = __decorate([
    NgModule({
        declarations: [
            IgxExpansionPanelComponent,
            IgxExpansionPanelHeaderComponent,
            IgxExpansionPanelBodyComponent,
            IgxExpansionPanelDescriptionDirective,
            IgxExpansionPanelTitleDirective,
            IgxExpansionPanelIconDirective
        ],
        entryComponents: [],
        exports: [
            IgxExpansionPanelComponent,
            IgxExpansionPanelHeaderComponent,
            IgxExpansionPanelBodyComponent,
            IgxExpansionPanelDescriptionDirective,
            IgxExpansionPanelTitleDirective,
            IgxExpansionPanelIconDirective
        ],
        imports: [
            CommonModule,
            IgxRippleModule,
            IgxIconModule,
            IgxButtonModule,
            IgxAvatarModule
        ]
    })
], IgxExpansionPanelModule);
export { IgxExpansionPanelModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5zaW9uLXBhbmVsLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZXhwYW5zaW9uLXBhbmVsL2V4cGFuc2lvbi1wYW5lbC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUN4RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDeEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzdELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUMsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDekUsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDdEYsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDbEYsT0FBTyxFQUFFLHFDQUFxQyxFQUFFLCtCQUErQixFQUM3RSw4QkFBOEIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRXZFOztHQUVHO0FBNEJILElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXVCO0NBQ25DLENBQUE7QUFEWSx1QkFBdUI7SUEzQm5DLFFBQVEsQ0FBQztRQUNSLFlBQVksRUFBRTtZQUNaLDBCQUEwQjtZQUMxQixnQ0FBZ0M7WUFDaEMsOEJBQThCO1lBQzlCLHFDQUFxQztZQUNyQywrQkFBK0I7WUFDL0IsOEJBQThCO1NBQy9CO1FBQ0QsZUFBZSxFQUFFLEVBQ2hCO1FBQ0QsT0FBTyxFQUFFO1lBQ1AsMEJBQTBCO1lBQzFCLGdDQUFnQztZQUNoQyw4QkFBOEI7WUFDOUIscUNBQXFDO1lBQ3JDLCtCQUErQjtZQUM3Qiw4QkFBOEI7U0FDakM7UUFDRCxPQUFPLEVBQUU7WUFDUCxZQUFZO1lBQ1osZUFBZTtZQUNmLGFBQWE7WUFDYixlQUFlO1lBQ2YsZUFBZTtTQUNoQjtLQUNGLENBQUM7R0FDVyx1QkFBdUIsQ0FDbkM7U0FEWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneFJpcHBsZU1vZHVsZSB9IGZyb20gJy4uL2RpcmVjdGl2ZXMvcmlwcGxlL3JpcHBsZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSWd4QnV0dG9uTW9kdWxlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy9idXR0b24vYnV0dG9uLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJZ3hBdmF0YXJNb2R1bGUgfSBmcm9tICcuLi9hdmF0YXIvYXZhdGFyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hJY29uTW9kdWxlIH0gZnJvbSAnLi4vaWNvbi9pbmRleCc7XG5pbXBvcnQgeyBJZ3hFeHBhbnNpb25QYW5lbENvbXBvbmVudCB9IGZyb20gJy4vZXhwYW5zaW9uLXBhbmVsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hFeHBhbnNpb25QYW5lbEhlYWRlckNvbXBvbmVudCB9IGZyb20gJy4vZXhwYW5zaW9uLXBhbmVsLWhlYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4RXhwYW5zaW9uUGFuZWxCb2R5Q29tcG9uZW50IH0gZnJvbSAnLi9leHBhbnNpb24tcGFuZWwtYm9keS5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4RXhwYW5zaW9uUGFuZWxEZXNjcmlwdGlvbkRpcmVjdGl2ZSwgSWd4RXhwYW5zaW9uUGFuZWxUaXRsZURpcmVjdGl2ZSxcbiAgSWd4RXhwYW5zaW9uUGFuZWxJY29uRGlyZWN0aXZlIH0gZnJvbSAnLi9leHBhbnNpb24tcGFuZWwuZGlyZWN0aXZlcyc7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBJZ3hFeHBhbnNpb25QYW5lbENvbXBvbmVudCxcbiAgICBJZ3hFeHBhbnNpb25QYW5lbEhlYWRlckNvbXBvbmVudCxcbiAgICBJZ3hFeHBhbnNpb25QYW5lbEJvZHlDb21wb25lbnQsXG4gICAgSWd4RXhwYW5zaW9uUGFuZWxEZXNjcmlwdGlvbkRpcmVjdGl2ZSxcbiAgICBJZ3hFeHBhbnNpb25QYW5lbFRpdGxlRGlyZWN0aXZlLFxuICAgIElneEV4cGFuc2lvblBhbmVsSWNvbkRpcmVjdGl2ZVxuICBdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIElneEV4cGFuc2lvblBhbmVsQ29tcG9uZW50LFxuICAgIElneEV4cGFuc2lvblBhbmVsSGVhZGVyQ29tcG9uZW50LFxuICAgIElneEV4cGFuc2lvblBhbmVsQm9keUNvbXBvbmVudCxcbiAgICBJZ3hFeHBhbnNpb25QYW5lbERlc2NyaXB0aW9uRGlyZWN0aXZlLFxuICAgIElneEV4cGFuc2lvblBhbmVsVGl0bGVEaXJlY3RpdmUsXG4gICAgICBJZ3hFeHBhbnNpb25QYW5lbEljb25EaXJlY3RpdmVcbiAgXSxcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBJZ3hSaXBwbGVNb2R1bGUsXG4gICAgSWd4SWNvbk1vZHVsZSxcbiAgICBJZ3hCdXR0b25Nb2R1bGUsXG4gICAgSWd4QXZhdGFyTW9kdWxlXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgSWd4RXhwYW5zaW9uUGFuZWxNb2R1bGUge1xufVxuIl19