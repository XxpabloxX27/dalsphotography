import { __decorate } from "tslib";
import { Component, Input, Output, EventEmitter, HostBinding, ElementRef, HostListener } from '@angular/core';
import { isDateInRanges } from '../calendar';
import { CalendarSelection } from '../calendar-base';
/**
 *@hidden
*/
let IgxDayItemComponent = class IgxDayItemComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.hideOutsideDays = false;
        this.isLastInRange = false;
        this.isFirstInRange = false;
        this.isWithinRange = false;
        this.onDateSelection = new EventEmitter();
        this._selected = false;
    }
    /**
     * Returns boolean indicating if the day is selected
     *
     */
    get selected() {
        return this._selected;
    }
    /**
     * Selects the day
     */
    set selected(value) {
        this._selected = value;
    }
    get isCurrentMonth() {
        return this.date.isCurrentMonth;
    }
    get isPreviousMonth() {
        return this.date.isPrevMonth;
    }
    get isNextMonth() {
        return this.date.isNextMonth;
    }
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    get isSelectedCSS() {
        return (!this.isDisabled && this.selected);
    }
    get isInactive() {
        return this.date.isNextMonth || this.date.isPrevMonth;
    }
    get isHidden() {
        return this.hideOutsideDays && this.isInactive;
    }
    get isToday() {
        const today = new Date(Date.now());
        const date = this.date.date;
        return (date.getFullYear() === today.getFullYear() &&
            date.getMonth() === today.getMonth() &&
            date.getDate() === today.getDate());
    }
    get isWeekend() {
        const day = this.date.date.getDay();
        return day === 0 || day === 6;
    }
    get isDisabled() {
        if (this.disabledDates === null) {
            return false;
        }
        return isDateInRanges(this.date.date, this.disabledDates);
    }
    get isOutOfRange() {
        if (!this.outOfRangeDates) {
            return false;
        }
        return isDateInRanges(this.date.date, this.outOfRangeDates);
    }
    get isFocusable() {
        return this.isCurrentMonth && !this.isHidden && !this.isDisabled && !this.isOutOfRange;
    }
    get isWithinRangeCSS() {
        return !this.isSingleSelection && this.isWithinRange;
    }
    get isSpecial() {
        if (this.specialDates === null) {
            return false;
        }
        return isDateInRanges(this.date.date, this.specialDates);
    }
    get defaultCSS() {
        return this.date.isCurrentMonth && !(this.isWeekend && this.selected);
    }
    get isDisabledCSS() {
        return this.isHidden || this.isDisabled || this.isOutOfRange;
    }
    get isSingleSelection() {
        return this.selection !== CalendarSelection.RANGE;
    }
    get tabindex() {
        return this.isDisabled || this.isHidden ? -1 : 0;
    }
    onSelect() {
        this.onDateSelection.emit(this.date);
    }
};
IgxDayItemComponent.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input()
], IgxDayItemComponent.prototype, "date", void 0);
__decorate([
    Input()
], IgxDayItemComponent.prototype, "selection", void 0);
__decorate([
    Input()
], IgxDayItemComponent.prototype, "selected", null);
__decorate([
    Input()
], IgxDayItemComponent.prototype, "disabledDates", void 0);
__decorate([
    Input()
], IgxDayItemComponent.prototype, "outOfRangeDates", void 0);
__decorate([
    Input()
], IgxDayItemComponent.prototype, "specialDates", void 0);
__decorate([
    Input()
], IgxDayItemComponent.prototype, "hideOutsideDays", void 0);
__decorate([
    Input(),
    HostBinding('class.igx-calendar__date--last')
], IgxDayItemComponent.prototype, "isLastInRange", void 0);
__decorate([
    Input(),
    HostBinding('class.igx-calendar__date--first')
], IgxDayItemComponent.prototype, "isFirstInRange", void 0);
__decorate([
    Input()
], IgxDayItemComponent.prototype, "isWithinRange", void 0);
__decorate([
    Output()
], IgxDayItemComponent.prototype, "onDateSelection", void 0);
__decorate([
    HostBinding('class.igx-calendar__date--selected')
], IgxDayItemComponent.prototype, "isSelectedCSS", null);
__decorate([
    HostBinding('class.igx-calendar__date--inactive')
], IgxDayItemComponent.prototype, "isInactive", null);
__decorate([
    HostBinding('class.igx-calendar__date--hidden')
], IgxDayItemComponent.prototype, "isHidden", null);
__decorate([
    HostBinding('class.igx-calendar__date--current')
], IgxDayItemComponent.prototype, "isToday", null);
__decorate([
    HostBinding('class.igx-calendar__date--weekend')
], IgxDayItemComponent.prototype, "isWeekend", null);
__decorate([
    HostBinding('class.igx-calendar__date--range')
], IgxDayItemComponent.prototype, "isWithinRangeCSS", null);
__decorate([
    HostBinding('class.igx-calendar__date--special')
], IgxDayItemComponent.prototype, "isSpecial", null);
__decorate([
    HostBinding('class.igx-calendar__date')
], IgxDayItemComponent.prototype, "defaultCSS", null);
__decorate([
    HostBinding('class.igx-calendar__date--disabled')
], IgxDayItemComponent.prototype, "isDisabledCSS", null);
__decorate([
    HostBinding('class.igx-calendar__date--single')
], IgxDayItemComponent.prototype, "isSingleSelection", null);
__decorate([
    HostBinding('attr.tabindex')
], IgxDayItemComponent.prototype, "tabindex", null);
__decorate([
    HostListener('click'),
    HostListener('keydown.enter')
], IgxDayItemComponent.prototype, "onSelect", null);
IgxDayItemComponent = __decorate([
    Component({
        selector: 'igx-day-item',
        template: "<span class=\"igx-calendar__date-content\">\n    <ng-content></ng-content>\n</span>\n"
    })
], IgxDayItemComponent);
export { IgxDayItemComponent };
//# sourceMappingURL=data:application/json;base64,