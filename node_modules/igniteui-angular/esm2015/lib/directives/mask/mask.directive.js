var IgxMaskDirective_1;
import { __decorate } from "tslib";
import { CommonModule } from '@angular/common';
import { Directive, ElementRef, EventEmitter, HostListener, Input, NgModule, OnInit, Output, PipeTransform } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { KEYS, MaskHelper } from './mask-helper';
import { isIE } from '../../core/utils';
const noop = () => { };
const ɵ0 = noop;
let IgxMaskDirective = IgxMaskDirective_1 = class IgxMaskDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        /**
         * Emits an event each time the value changes.
         * Provides `rawValue: string` and `formattedValue: string` as event arguments.
         * ```html
         * <input (onValueChange) = "onValueChange(rawValue: string, formattedValue: string)">
         * ```
         */
        this.onValueChange = new EventEmitter();
        /**
         *@hidden
         */
        this._maskOptions = {
            format: '',
            promptChar: ''
        };
        /**
         *@hidden
         */
        this._onTouchedCallback = noop;
        /**
         *@hidden
         */
        this._onChangeCallback = noop;
        this.maskHelper = new MaskHelper();
    }
    /**
     * Specifies a placeholder.
     * ```html
     * <input placeholder = "enter text...">
     * ```
     * @memberof IgxMaskDirective
     */
    set placeholder(val) {
        this._placeholder = val;
        this.nativeElement.setAttribute('placeholder', this._placeholder);
    }
    get placeholder() {
        return this._placeholder;
    }
    /**
     *@hidden
     */
    get value() {
        return this.nativeElement.value;
    }
    /**
     *@hidden
     */
    set value(val) {
        this.nativeElement.value = val;
    }
    /**
     *@hidden
     */
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    /**
     *@hidden
     */
    get selectionStart() {
        return this.nativeElement.selectionStart;
    }
    /**
     *@hidden
     */
    get selectionEnd() {
        return this.nativeElement.selectionEnd;
    }
    /**
     *@hidden
     */
    ngOnInit() {
        if (this.promptChar && this.promptChar.length > 1) {
            this._maskOptions.promptChar = this.promptChar = this.promptChar.substring(0, 1);
        }
        this._maskOptions.format = this.mask ? this.mask : 'CCCCCCCCCC';
        this._maskOptions.promptChar = this.promptChar ? this.promptChar : '_';
        this.nativeElement.setAttribute('placeholder', this.placeholder ? this.placeholder : this._maskOptions.format);
    }
    /**
     *@hidden
     */
    onKeydown(event) {
        const key = event.keyCode || event.charCode;
        if (isIE() && this._stopPropagation) {
            this._stopPropagation = false;
        }
        if (key === KEYS.Ctrl) {
            this._ctrlDown = true;
        }
        if ((this._ctrlDown && key === KEYS.Z) || (this._ctrlDown && key === KEYS.Y)) {
            event.preventDefault();
        }
        this._key = key;
        this._selection = Math.abs(this.selectionEnd - this.selectionStart);
    }
    /**
     *@hidden
     */
    onKeyup(event) {
        const key = event.keyCode || event.charCode;
        if (key === KEYS.Ctrl) {
            this._ctrlDown = false;
        }
    }
    /**
     *@hidden
     */
    onPaste(event) {
        this._paste = true;
        this._valOnPaste = this.value;
        this._cursorOnPaste = this.getCursorPosition();
    }
    /**
     *@hidden
     */
    onInputChanged(event) {
        if (isIE() && this._stopPropagation) {
            this._stopPropagation = false;
            return;
        }
        if (this._paste) {
            this._paste = false;
            const clipboardData = this.value.substring(this._cursorOnPaste, this.getCursorPosition());
            this.value = this.maskHelper.parseValueByMaskUponCopyPaste(this._valOnPaste, this._maskOptions, this._cursorOnPaste, clipboardData, this._selection);
            this.setCursorPosition(this.maskHelper.cursor);
        }
        else {
            const currentCursorPos = this.getCursorPosition();
            this.maskHelper.data = (this._key === KEYS.BACKSPACE) || (this._key === KEYS.DELETE);
            this.value = this._selection && this._selection !== 0 ?
                this.maskHelper.parseValueByMaskUponSelection(this.value, this._maskOptions, currentCursorPos - 1, this._selection) :
                this.maskHelper.parseValueByMask(this.value, this._maskOptions, currentCursorPos - 1);
            this.setCursorPosition(this.maskHelper.cursor);
        }
        const rawVal = this.maskHelper.restoreValueFromMask(this.value, this._maskOptions);
        this.dataValue = this.includeLiterals ? this.value : rawVal;
        this._onChangeCallback(this.dataValue);
        this.onValueChange.emit({ rawValue: rawVal, formattedValue: this.value });
    }
    /**
     *@hidden
     */
    onFocus(value) {
        if (this.focusedValuePipe) {
            if (isIE()) {
                this._stopPropagation = true;
            }
            this.value = this.focusedValuePipe.transform(value);
        }
        else {
            this.value = this.maskHelper.parseValueByMaskOnInit(this.value, this._maskOptions);
        }
    }
    /**
     *@hidden
     */
    onBlur(value) {
        if (this.displayValuePipe) {
            this.value = this.displayValuePipe.transform(value);
        }
        else if (value === this.maskHelper.parseMask(this._maskOptions)) {
            this.value = '';
        }
    }
    /**
     *@hidden
     */
    getCursorPosition() {
        return this.nativeElement.selectionStart;
    }
    /**
     *@hidden
     */
    setCursorPosition(start, end = start) {
        this.nativeElement.setSelectionRange(start, end);
    }
    /**
     *@hidden
     */
    writeValue(value) {
        if (this.promptChar && this.promptChar.length > 1) {
            this._maskOptions.promptChar = this.promptChar.substring(0, 1);
        }
        this.value = value ? this.maskHelper.parseValueByMaskOnInit(value, this._maskOptions) : '';
        if (this.displayValuePipe) {
            this.value = this.displayValuePipe.transform(this.value);
        }
        this.dataValue = this.includeLiterals ? this.value : value;
        this._onChangeCallback(this.dataValue);
        this.onValueChange.emit({ rawValue: value, formattedValue: this.value });
    }
    /**
     *@hidden
     */
    registerOnChange(fn) { this._onChangeCallback = fn; }
    /**
     *@hidden
     */
    registerOnTouched(fn) { this._onTouchedCallback = fn; }
};
IgxMaskDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input('igxMask')
], IgxMaskDirective.prototype, "mask", void 0);
__decorate([
    Input()
], IgxMaskDirective.prototype, "promptChar", void 0);
__decorate([
    Input()
], IgxMaskDirective.prototype, "includeLiterals", void 0);
__decorate([
    Input()
], IgxMaskDirective.prototype, "placeholder", null);
__decorate([
    Input()
], IgxMaskDirective.prototype, "displayValuePipe", void 0);
__decorate([
    Input()
], IgxMaskDirective.prototype, "focusedValuePipe", void 0);
__decorate([
    Input()
], IgxMaskDirective.prototype, "dataValue", void 0);
__decorate([
    Output()
], IgxMaskDirective.prototype, "onValueChange", void 0);
__decorate([
    HostListener('keydown', ['$event'])
], IgxMaskDirective.prototype, "onKeydown", null);
__decorate([
    HostListener('keyup', ['$event'])
], IgxMaskDirective.prototype, "onKeyup", null);
__decorate([
    HostListener('paste', ['$event'])
], IgxMaskDirective.prototype, "onPaste", null);
__decorate([
    HostListener('input', ['$event'])
], IgxMaskDirective.prototype, "onInputChanged", null);
__decorate([
    HostListener('focus', ['$event.target.value'])
], IgxMaskDirective.prototype, "onFocus", null);
__decorate([
    HostListener('blur', ['$event.target.value'])
], IgxMaskDirective.prototype, "onBlur", null);
IgxMaskDirective = IgxMaskDirective_1 = __decorate([
    Directive({
        providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMaskDirective_1, multi: true }],
        selector: '[igxMask]'
    })
], IgxMaskDirective);
export { IgxMaskDirective };
/**
 * @hidden
 */
let IgxMaskModule = class IgxMaskModule {
};
IgxMaskModule = __decorate([
    NgModule({
        declarations: [IgxMaskDirective],
        exports: [IgxMaskDirective],
        imports: [CommonModule]
    })
], IgxMaskModule);
export { IgxMaskModule };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,