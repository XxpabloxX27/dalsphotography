import { __decorate, __param } from "tslib";
import { Directive, Input, Self, Optional, Inject, HostBinding, Output, EventEmitter, NgModule, ElementRef, HostListener, ChangeDetectorRef, OnDestroy } from '@angular/core';
import { NgModel, FormControlName } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { Subject } from 'rxjs';
import { first, takeUntil } from 'rxjs/operators';
import { AbsoluteScrollStrategy, AutoPositionStrategy } from '../../services/index';
import { IgxDropDownModule, IgxDropDownItemNavigationDirective } from '../../drop-down/index';
import { IgxInputGroupComponent } from '../../input-group/index';
/**
 * **Ignite UI for Angular Autocomplete** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/autocomplete.html)
 *
 * The igxAutocomplete directive provides a way to enhance a text input
 * by showing a drop down of suggested options, provided by the developer.
 *
 * Example:
 * ```html
 * <input type="text" [igxAutocomplete]="townsPanel" />
 * <igx-drop-down #townsPanel>
 *     <igx-drop-down-item *ngFor="let town of towns | startsWith:townSelected" [value]="town">
 *         {{town}}
 *     </igx-drop-down-item>
 * </igx-drop-down>
 * ```
 */
let IgxAutocompleteDirective = class IgxAutocompleteDirective extends IgxDropDownItemNavigationDirective {
    constructor(ngModel, formControl, group, elementRef, cdr) {
        super(null);
        this.ngModel = ngModel;
        this.formControl = formControl;
        this.group = group;
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.defaultSettings = {
            modal: false,
            scrollStrategy: new AbsoluteScrollStrategy(),
            positionStrategy: new AutoPositionStrategy({ target: this.parentElement }),
            excludePositionTarget: true
        };
        this.dropDownOpened$ = new Subject();
        /**
         * Enables/disables autocomplete component
         *
         * ```typescript
         * // get
         * let disabled = this.autocomplete.disabled;
         * ```
         * ```html
         * <!--set-->
         * <input type="text" [igxAutocomplete]="townsPanel" [igxAutocompleteDisabled]="disabled"/>
         * ```
         * ```typescript
         * // set
         * public disabled = true;
         * ```
         */
        this.disabled = false;
        /**
         * Emitted after item from the drop down is selected
         *
         * ```html
         * <input igxInput [igxAutocomplete]="townsPanel" (onItemSelected)='itemSelected($event)' />
         * ```
         */
        this.onItemSelected = new EventEmitter();
        /** @hidden @internal */
        this.autofill = 'off';
        /** @hidden  @internal */
        this.role = 'combobox';
        this.select = (value) => {
            if (!value.newSelection) {
                return;
            }
            value.cancel = true; // Disable selection in the drop down, because in autocomplete we do not save selection.
            const newValue = value.newSelection.value;
            const args = { value: newValue, cancel: false };
            this.onItemSelected.emit(args);
            if (args.cancel) {
                return;
            }
            this.close();
            this.nativeElement.focus();
            // Update model after the input is re-focused, in order to have proper valid styling.
            // Otherwise when item is selected using mouse (and input is blurred), then valid style will be removed.
            this.model ? this.model.control.setValue(newValue) : this.nativeElement.value = newValue;
        };
        this.highlightFirstItem = () => {
            if (this.target.focusedItem) {
                this.target.focusedItem.focused = false;
                this.target.focusedItem = null;
            }
            this.target.navigateFirst();
            this.cdr.detectChanges();
        };
    }
    get model() {
        return this.ngModel || this.formControl;
    }
    /** @hidden @internal */
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    /** @hidden @internal */
    get parentElement() {
        return this.group ? this.group.element.nativeElement : this.nativeElement;
    }
    get settings() {
        const settings = Object.assign({}, this.defaultSettings, this.autocompleteSettings);
        if (!settings.positionStrategy.settings.target) {
            const positionStrategyClone = settings.positionStrategy.clone();
            positionStrategyClone.settings.target = this.parentElement;
            settings.positionStrategy = positionStrategyClone;
        }
        return settings;
    }
    /** @hidden  @internal */
    get ariaExpanded() {
        return !this.collapsed;
    }
    /** @hidden  @internal */
    get hasPopUp() {
        return 'listbox';
    }
    /** @hidden  @internal */
    get ariaOwns() {
        return this.target.listId;
    }
    /** @hidden  @internal */
    get ariaActiveDescendant() {
        return !this.target.collapsed && this.target.focusedItem ? this.target.focusedItem.id : null;
    }
    /** @hidden  @internal */
    get ariaAutocomplete() {
        return 'list';
    }
    /** @hidden  @internal */
    onInput() {
        this.open();
    }
    /** @hidden  @internal */
    onArrowDown(event) {
        event.preventDefault();
        this.open();
    }
    /** @hidden  @internal */
    onTab() {
        this.close();
    }
    /** @hidden  @internal */
    handleKeyDown(event) {
        if (!this.collapsed) {
            switch (event.key.toLowerCase()) {
                case 'space':
                case 'spacebar':
                case ' ':
                case 'home':
                case 'end':
                    return;
                default:
                    super.handleKeyDown(event);
            }
        }
    }
    /** @hidden  @internal */
    onArrowDownKeyDown() {
        super.onArrowDownKeyDown();
    }
    /** @hidden  @internal */
    onArrowUpKeyDown() {
        super.onArrowUpKeyDown();
    }
    /** @hidden  @internal */
    onEndKeyDown() {
        super.onEndKeyDown();
    }
    /** @hidden  @internal */
    onHomeKeyDown() {
        super.onHomeKeyDown();
    }
    /**
     * Closes autocomplete drop down
     */
    close() {
        if (this.collapsed) {
            return;
        }
        this.target.close();
        this.dropDownOpened$.next();
    }
    /**
     * Opens autocomplete drop down
     */
    open() {
        if (this.disabled || !this.collapsed) {
            return;
        }
        // If no drop-down width is set, the drop-down will be as wide as the autocomplete input;
        this.target.width = this.target.width || (this.parentElement.clientWidth + 'px');
        this.target.open(this.settings);
        this.target.onSelection.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.select);
        this.target.onOpened.pipe(first()).subscribe(this.highlightFirstItem);
        this.target.children.changes.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.highlightFirstItem);
    }
    get collapsed() {
        return this.target ? this.target.collapsed : true;
    }
    /** @hidden */
    ngOnDestroy() {
        this.dropDownOpened$.complete();
    }
};
IgxAutocompleteDirective.ctorParameters = () => [
    { type: NgModel, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [NgModel,] }] },
    { type: FormControlName, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [FormControlName,] }] },
    { type: IgxInputGroupComponent, decorators: [{ type: Optional }] },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
__decorate([
    Input('igxAutocomplete')
], IgxAutocompleteDirective.prototype, "target", void 0);
__decorate([
    Input('igxAutocompleteDisabled')
], IgxAutocompleteDirective.prototype, "disabled", void 0);
__decorate([
    Input('igxAutocompleteSettings')
], IgxAutocompleteDirective.prototype, "autocompleteSettings", void 0);
__decorate([
    Output()
], IgxAutocompleteDirective.prototype, "onItemSelected", void 0);
__decorate([
    HostBinding('attr.autocomplete')
], IgxAutocompleteDirective.prototype, "autofill", void 0);
__decorate([
    HostBinding('attr.role')
], IgxAutocompleteDirective.prototype, "role", void 0);
__decorate([
    HostBinding('attr.aria-expanded')
], IgxAutocompleteDirective.prototype, "ariaExpanded", null);
__decorate([
    HostBinding('attr.aria-haspopup')
], IgxAutocompleteDirective.prototype, "hasPopUp", null);
__decorate([
    HostBinding('attr.aria-owns')
], IgxAutocompleteDirective.prototype, "ariaOwns", null);
__decorate([
    HostBinding('attr.aria-activedescendant')
], IgxAutocompleteDirective.prototype, "ariaActiveDescendant", null);
__decorate([
    HostBinding('attr.aria-autocomplete')
], IgxAutocompleteDirective.prototype, "ariaAutocomplete", null);
__decorate([
    HostListener('input')
], IgxAutocompleteDirective.prototype, "onInput", null);
__decorate([
    HostListener('keydown.ArrowDown', ['$event']),
    HostListener('keydown.Alt.ArrowDown', ['$event']),
    HostListener('keydown.ArrowUp', ['$event']),
    HostListener('keydown.Alt.ArrowUp', ['$event'])
], IgxAutocompleteDirective.prototype, "onArrowDown", null);
__decorate([
    HostListener('keydown.Tab'),
    HostListener('keydown.Shift.Tab')
], IgxAutocompleteDirective.prototype, "onTab", null);
IgxAutocompleteDirective = __decorate([
    Directive({
        selector: '[igxAutocomplete]'
    }),
    __param(0, Self()), __param(0, Optional()), __param(0, Inject(NgModel)),
    __param(1, Self()), __param(1, Optional()), __param(1, Inject(FormControlName)),
    __param(2, Optional())
], IgxAutocompleteDirective);
export { IgxAutocompleteDirective };
/** @hidden */
let IgxAutocompleteModule = class IgxAutocompleteModule {
};
IgxAutocompleteModule = __decorate([
    NgModule({
        imports: [IgxDropDownModule, CommonModule],
        declarations: [IgxAutocompleteDirective],
        exports: [IgxAutocompleteDirective]
    })
], IgxAutocompleteModule);
export { IgxAutocompleteModule };
//# sourceMappingURL=data:application/json;base64,